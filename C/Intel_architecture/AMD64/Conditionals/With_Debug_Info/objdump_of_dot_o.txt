
if_then.o:     file format elf64-x86-64
if_then.o
architecture: i386:x86-64, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x0000000000000000

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .group        0000000c  0000000000000000  0000000000000000  00000040  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
  1 .group        0000000c  0000000000000000  0000000000000000  0000004c  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
  2 .group        0000000c  0000000000000000  0000000000000000  00000058  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
  3 .group        0000000c  0000000000000000  0000000000000000  00000064  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
  4 .group        0000000c  0000000000000000  0000000000000000  00000070  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
  5 .group        0000000c  0000000000000000  0000000000000000  0000007c  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
  6 .group        0000000c  0000000000000000  0000000000000000  00000088  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
  7 .group        0000000c  0000000000000000  0000000000000000  00000094  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
  8 .group        0000000c  0000000000000000  0000000000000000  000000a0  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
  9 .group        0000000c  0000000000000000  0000000000000000  000000ac  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
 10 .group        0000000c  0000000000000000  0000000000000000  000000b8  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
 11 .group        0000000c  0000000000000000  0000000000000000  000000c4  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
 12 .group        0000000c  0000000000000000  0000000000000000  000000d0  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
 13 .group        0000000c  0000000000000000  0000000000000000  000000dc  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
 14 .group        0000000c  0000000000000000  0000000000000000  000000e8  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
 15 .group        0000000c  0000000000000000  0000000000000000  000000f4  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
 16 .group        0000000c  0000000000000000  0000000000000000  00000100  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
 17 .group        0000000c  0000000000000000  0000000000000000  0000010c  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
 18 .group        0000000c  0000000000000000  0000000000000000  00000118  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
 19 .group        0000000c  0000000000000000  0000000000000000  00000124  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
 20 .group        0000000c  0000000000000000  0000000000000000  00000130  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
 21 .group        0000000c  0000000000000000  0000000000000000  0000013c  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
 22 .text         0000007d  0000000000000000  0000000000000000  00000148  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .data         00000000  0000000000000000  0000000000000000  000001c5  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 24 .bss          00000000  0000000000000000  0000000000000000  000001c5  2**0
                  ALLOC
 25 .rodata       00000045  0000000000000000  0000000000000000  000001c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 26 .debug_info   00000360  0000000000000000  0000000000000000  0000020d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 27 .debug_abbrev 00000105  0000000000000000  0000000000000000  0000056d  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_aranges 00000030  0000000000000000  0000000000000000  00000672  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 29 .debug_macro  0000010f  0000000000000000  0000000000000000  000006a2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 30 .debug_macro  00000808  0000000000000000  0000000000000000  000007b1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 31 .debug_macro  00000022  0000000000000000  0000000000000000  00000fb9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 32 .debug_macro  00000010  0000000000000000  0000000000000000  00000fdb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 33 .debug_macro  0000019e  0000000000000000  0000000000000000  00000feb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 34 .debug_macro  00000168  0000000000000000  0000000000000000  00001189  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 35 .debug_macro  00000016  0000000000000000  0000000000000000  000012f1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 36 .debug_macro  0000004a  0000000000000000  0000000000000000  00001307  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 37 .debug_macro  00000058  0000000000000000  0000000000000000  00001351  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 38 .debug_macro  00000034  0000000000000000  0000000000000000  000013a9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 39 .debug_macro  00000010  0000000000000000  0000000000000000  000013dd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 40 .debug_macro  00000097  0000000000000000  0000000000000000  000013ed  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 41 .debug_macro  0000005e  0000000000000000  0000000000000000  00001484  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 42 .debug_macro  000000ee  0000000000000000  0000000000000000  000014e2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 43 .debug_macro  00000016  0000000000000000  0000000000000000  000015d0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 44 .debug_macro  00000020  0000000000000000  0000000000000000  000015e6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 45 .debug_macro  00000028  0000000000000000  0000000000000000  00001606  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 46 .debug_macro  00000058  0000000000000000  0000000000000000  0000162e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 47 .debug_macro  00000010  0000000000000000  0000000000000000  00001686  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 48 .debug_macro  000001cc  0000000000000000  0000000000000000  00001696  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 49 .debug_macro  00000046  0000000000000000  0000000000000000  00001862  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 50 .debug_macro  0000002e  0000000000000000  0000000000000000  000018a8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 51 .debug_macro  00000027  0000000000000000  0000000000000000  000018d6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 52 .debug_line   00000232  0000000000000000  0000000000000000  000018fd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 53 .debug_str    00004ec3  0000000000000000  0000000000000000  00001b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 54 .comment      0000002b  0000000000000000  0000000000000000  000069f2  2**0
                  CONTENTS, READONLY
 55 .note.GNU-stack 00000000  0000000000000000  0000000000000000  00006a1d  2**0
                  CONTENTS, READONLY
 56 .eh_frame     00000038  0000000000000000  0000000000000000  00006a20  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 if_then.c
0000000000000000 l    d  .text	0000000000000000 .text
0000000000000000 l    d  .data	0000000000000000 .data
0000000000000000 l    d  .bss	0000000000000000 .bss
0000000000000000 l    d  .rodata	0000000000000000 .rodata
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .note.GNU-stack	0000000000000000 .note.GNU-stack
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .eh_frame	0000000000000000 .eh_frame
0000000000000000 l       .group	0000000000000000 wm4.0.52c9fc51a3c7999e669b5384b1132782
0000000000000000 l       .group	0000000000000000 wm4.stdcpredef.h.19.006d14bbbe0dc07ba9b1ce3fdc8e40d3
0000000000000000 l       .group	0000000000000000 wm4.stdio.h.24.5c1b97eef3c86b7a2549420f69f4f128
0000000000000000 l       .group	0000000000000000 wm4.features.h.19.1be55438336ba50251e758fdf3017259
0000000000000000 l       .group	0000000000000000 wm4.cdefs.h.19.03c02fc74e2fa9127d728e4a4b2cb426
0000000000000000 l       .group	0000000000000000 wm4.wordsize.h.4.baf119258a1e53d8dba67ceac44ab6bc
0000000000000000 l       .group	0000000000000000 wm4.cdefs.h.450.b8b622c02668a696f36e4785e7471677
0000000000000000 l       .group	0000000000000000 wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3
0000000000000000 l       .group	0000000000000000 wm4.libcheaderstart.h.37.59f0e5f6a6103fb6c1d4abef1aacf8fb
0000000000000000 l       .group	0000000000000000 wm4.stdio.h.31.e39a94e203ad4e1d978c0fc68ce016ee
0000000000000000 l       .group	0000000000000000 wm4.stddef.h.187.2ff233552538c6ff9b8575ca8ea52cb3
0000000000000000 l       .group	0000000000000000 wm4.types.h.98.2414c985b07b6bc05c8aeed70b12c683
0000000000000000 l       .group	0000000000000000 wm4.typesizes.h.24.292526668b3d7d0c797f011b553fed17
0000000000000000 l       .group	0000000000000000 wm4._G_config.h.5.13ce51c385dcc835f259e1016a4e99c8
0000000000000000 l       .group	0000000000000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
0000000000000000 l       .group	0000000000000000 wm4._G_config.h.51.34b843a0419f1549acdb14c3c66edb4e
0000000000000000 l       .group	0000000000000000 wm4.libio.h.37.a10f23ff0c406c3c402d761ed92ba872
0000000000000000 l       .group	0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
0000000000000000 l       .group	0000000000000000 wm4.libio.h.55.2264ffedaa8d3f567283a630afe6e738
0000000000000000 l       .group	0000000000000000 wm4.stdio.h.47.29bae166896130ef16bc0206bf46f074
0000000000000000 l       .group	0000000000000000 wm4.stdio_lim.h.19.e4b00b560d878dcfbc6635b3406640c5
0000000000000000 l       .group	0000000000000000 wm4.stdio.h.139.81d529aa6b2372d0b323a208652caa26
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 l    d  .group	0000000000000000 .group
0000000000000000 g     F .text	000000000000007d main
0000000000000000         *UND*	0000000000000000 _GLOBAL_OFFSET_TABLE_
0000000000000000         *UND*	0000000000000000 printf
0000000000000000         *UND*	0000000000000000 __isoc99_scanf
0000000000000000         *UND*	0000000000000000 puts
0000000000000000         *UND*	0000000000000000 __stack_chk_fail


Contents of section .group:
 0000 01000000 23000000 24000000           ....#...$...    
Contents of section .group:
 0000 01000000 25000000 26000000           ....%...&...    
Contents of section .group:
 0000 01000000 27000000 28000000           ....'...(...    
Contents of section .group:
 0000 01000000 29000000 2a000000           ....)...*...    
Contents of section .group:
 0000 01000000 2b000000 2c000000           ....+...,...    
Contents of section .group:
 0000 01000000 2d000000 2e000000           ....-.......    
Contents of section .group:
 0000 01000000 2f000000 30000000           ..../...0...    
Contents of section .group:
 0000 01000000 31000000 32000000           ....1...2...    
Contents of section .group:
 0000 01000000 33000000 34000000           ....3...4...    
Contents of section .group:
 0000 01000000 35000000 36000000           ....5...6...    
Contents of section .group:
 0000 01000000 37000000 38000000           ....7...8...    
Contents of section .group:
 0000 01000000 39000000 3a000000           ....9...:...    
Contents of section .group:
 0000 01000000 3b000000 3c000000           ....;...<...    
Contents of section .group:
 0000 01000000 3d000000 3e000000           ....=...>...    
Contents of section .group:
 0000 01000000 3f000000 40000000           ....?...@...    
Contents of section .group:
 0000 01000000 41000000 42000000           ....A...B...    
Contents of section .group:
 0000 01000000 43000000 44000000           ....C...D...    
Contents of section .group:
 0000 01000000 45000000 46000000           ....E...F...    
Contents of section .group:
 0000 01000000 47000000 48000000           ....G...H...    
Contents of section .group:
 0000 01000000 49000000 4a000000           ....I...J...    
Contents of section .group:
 0000 01000000 4b000000 4c000000           ....K...L...    
Contents of section .group:
 0000 01000000 4d000000 4e000000           ....M...N...    
Contents of section .text:
 0000 554889e5 4883ec20 897dec48 8975e064  UH..H.. .}.H.u.d
 0010 488b0425 28000000 488945f8 31c0c745  H..%(...H.E.1..E
 0020 f4050000 00488d3d 00000000 b8000000  .....H.=........
 0030 00e80000 0000488d 45f04889 c6488d3d  ......H.E.H..H.=
 0040 00000000 b8000000 00e80000 00008b45  ...............E
 0050 f03945f4 7d0c488d 3d000000 00e80000  .9E.}.H.=.......
 0060 0000b800 00000048 8b55f864 48331425  .......H.U.dH3.%
 0070 28000000 7405e800 000000c9 c3        (...t........   
Contents of section .rodata:
 0000 456e7465 72206120 6e756d62 65722062  Enter a number b
 0010 65747765 656e2031 20616e64 20313020  etween 1 and 10 
 0020 2d3e2000 25640054 6865206e 756d6265  -> .%d.The numbe
 0030 72207761 73206869 67686572 20746861  r was higher tha
 0040 6e203521 00                          n 5!.           
Contents of section .debug_info:
 0000 5c030000 04000000 00000801 00000000  \...............
 0010 0c000000 00000000 00000000 00000000  ................
 0020 007d0000 00000000 00000000 00000000  .}..............
 0030 00020000 000002d8 3c000000 03080700  ........<.......
 0040 00000003 01080000 00000302 07000000  ................
 0050 00030407 00000000 03010600 00000003  ................
 0060 02050000 00000404 05696e74 00030805  .........int....
 0070 00000000 02000000 00038c6d 00000002  ...........m....
 0080 00000000 038d6d00 00000508 06089200  ......m.........
 0090 00000301 06000000 00079200 00000800  ................
 00a0 000000d8 04f51e02 00000900 00000004  ................
 00b0 f6660000 00000900 00000004 fb8c0000  .f..............
 00c0 00080900 00000004 fc8c0000 00100900  ................
 00d0 00000004 fd8c0000 00180900 00000004  ................
 00e0 fe8c0000 00200900 00000004 ff8c0000  ..... ..........
 00f0 00280a00 00000004 00018c00 0000300a  .(............0.
 0100 00000000 0401018c 00000038 0a000000  ...........8....
 0110 00040201 8c000000 400a0000 00000404  ........@.......
 0120 018c0000 00480a00 00000004 05018c00  .....H..........
 0130 0000500a 00000000 0406018c 00000058  ..P............X
 0140 0a000000 00040801 56020000 600a0000  ........V...`...
 0150 0000040a 015c0200 00680a00 00000004  .....\...h......
 0160 0c016600 0000700a 00000000 04100166  ..f...p........f
 0170 00000074 0a000000 00041201 74000000  ...t........t...
 0180 780a0000 00000416 014a0000 00800a00  x........J......
 0190 00000004 17015800 0000820a 00000000  ......X.........
 01a0 04180162 02000083 0a000000 00041c01  ...b............
 01b0 72020000 880a0000 00000425 017f0000  r..........%....
 01c0 00900a00 00000004 2d018a00 0000980a  ........-.......
 01d0 00000000 042e018a 000000a0 0a000000  ................
 01e0 00042f01 8a000000 a80a0000 00000430  ../............0
 01f0 018a0000 00b00a00 00000004 32013100  ............2.1.
 0200 0000b80a 00000000 04330166 000000c0  .........3.f....
 0210 0a000000 00043501 78020000 c4000b00  ......5.x.......
 0220 00000004 9a080000 00001804 a0560200  .............V..
 0230 00090000 000004a1 56020000 00090000  ........V.......
 0240 000004a2 5c020000 08090000 000004a6  ....\...........
 0250 66000000 10000608 25020000 06089e00  f.......%.......
 0260 00000c92 00000072 0200000d 3c000000  .......r....<...
 0270 00000608 1e020000 0c920000 00880200  ................
 0280 000d3c00 00001300 0e000000 000f0000  ..<.............
 0290 0000043f 01880200 000f0000 00000440  ...?...........@
 02a0 01880200 000f0000 00000441 01880200  ...........A....
 02b0 00060899 00000007 b1020000 10000000  ................
 02c0 0005875c 02000010 00000000 05885c02  ...\..........\.
 02d0 00001000 00000005 895c0200 00100000  .........\......
 02e0 0000061a 66000000 0cb70200 00f30200  ....f...........
 02f0 00110007 e8020000 10000000 00061bf3  ................
 0300 02000012 00000000 01036600 00000000  ..........f.....
 0310 00000000 00007d00 00000000 0000019c  ......}.........
 0320 59030000 13000000 00010366 00000002  Y..........f....
 0330 915c1300 00000001 03590300 00029150  .\.......Y.....P
 0340 14610001 05660000 00029160 14620001  .a...f.....`.b..
 0350 05660000 00029164 0006088c 00000000  .f.....d........
Contents of section .debug_abbrev:
 0000 01110125 0e130b03 0e1b0e11 01120710  ...%............
 0010 17994217 00000216 00030e3a 0b3b0b49  ..B........:.;.I
 0020 13000003 24000b0b 3e0b030e 00000424  ....$...>......$
 0030 000b0b3e 0b030800 00050f00 0b0b0000  ...>............
 0040 060f000b 0b491300 00072600 49130000  .....I....&.I...
 0050 08130103 0e0b0b3a 0b3b0b01 13000009  .......:.;......
 0060 0d00030e 3a0b3b0b 4913380b 00000a0d  ....:.;.I.8.....
 0070 00030e3a 0b3b0549 13380b00 000b1600  ...:.;.I.8......
 0080 030e3a0b 3b0b0000 0c010149 13011300  ..:.;......I....
 0090 000d2100 49132f0b 00000e13 00030e3c  ..!.I./........<
 00a0 1900000f 3400030e 3a0b3b05 49133f19  ....4...:.;.I.?.
 00b0 3c190000 10340003 0e3a0b3b 0b49133f  <....4...:.;.I.?
 00c0 193c1900 00112100 0000122e 013f1903  .<....!......?..
 00d0 0e3a0b3b 0b271949 13110112 07401896  .:.;.'.I.....@..
 00e0 42190113 00001305 00030e3a 0b3b0b49  B..........:.;.I
 00f0 13021800 00143400 03083a0b 3b0b4913  ......4...:.;.I.
 0100 02180000 00                          .....           
Contents of section .debug_aranges:
 0000 2c000000 02000000 00000800 00000000  ,...............
 0010 00000000 00000000 7d000000 00000000  ........}.......
 0020 00000000 00000000 00000000 00000000  ................
Contents of section .debug_macro:
 0000 04000200 00000007 00000000 03000103  ................
 0010 1f070700 00000004 03010507 00000000  ................
 0020 031b0806 1f000000 00032109 07000000  ..........!.....
 0030 0003a803 0a070000 000003ab 030b0700  ................
 0040 00000004 03ac030c 04070000 00000403  ................
 0050 c0030d03 0a0e0700 00000004 04040700  ................
 0060 00000004 07000000 00032102 07000000  ..........!.....
 0070 00040323 03051800 00000003 1b0b0700  ...#............
 0080 00000004 07000000 00038201 0f070000  ................
 0090 00000406 cc010000 00000403 24100502  ............$...
 00a0 00000000 04032511 05020000 00000405  ......%.........
 00b0 27000000 00032904 051d0000 00000323  '.....)........#
 00c0 12070000 00000313 02070000 00000403  ................
 00d0 15130502 00000000 04070000 00000407  ................
 00e0 00000000 03351407 00000000 04070000  .....5..........
 00f0 00000407 00000000 03830115 07000000  ................
 0100 00040700 00000003 8d060604 040400    ............... 
Contents of section .debug_macro:
 0000 04000005 00000000 00050000 00000005  ................
 0010 00000000 00050000 00000005 00000000  ................
 0020 00050000 00000005 00000000 00050000  ................
 0030 00000005 00000000 00050000 00000005  ................
 0040 00000000 00050000 00000005 00000000  ................
 0050 00050000 00000005 00000000 00050000  ................
 0060 00000005 00000000 00050000 00000005  ................
 0070 00000000 00050000 00000005 00000000  ................
 0080 00050000 00000005 00000000 00050000  ................
 0090 00000005 00000000 00050000 00000005  ................
 00a0 00000000 00050000 00000005 00000000  ................
 00b0 00050000 00000005 00000000 00050000  ................
 00c0 00000005 00000000 00050000 00000005  ................
 00d0 00000000 00050000 00000005 00000000  ................
 00e0 00050000 00000005 00000000 00050000  ................
 00f0 00000005 00000000 00050000 00000005  ................
 0100 00000000 00050000 00000005 00000000  ................
 0110 00050000 00000005 00000000 00050000  ................
 0120 00000005 00000000 00050000 00000005  ................
 0130 00000000 00050000 00000005 00000000  ................
 0140 00050000 00000005 00000000 00050000  ................
 0150 00000005 00000000 00050000 00000005  ................
 0160 00000000 00050000 00000005 00000000  ................
 0170 00050000 00000005 00000000 00050000  ................
 0180 00000005 00000000 00050000 00000005  ................
 0190 00000000 00050000 00000005 00000000  ................
 01a0 00050000 00000005 00000000 00050000  ................
 01b0 00000005 00000000 00050000 00000005  ................
 01c0 00000000 00050000 00000005 00000000  ................
 01d0 00050000 00000005 00000000 00050000  ................
 01e0 00000005 00000000 00050000 00000005  ................
 01f0 00000000 00050000 00000005 00000000  ................
 0200 00050000 00000005 00000000 00050000  ................
 0210 00000005 00000000 00050000 00000005  ................
 0220 00000000 00050000 00000005 00000000  ................
 0230 00050000 00000005 00000000 00050000  ................
 0240 00000005 00000000 00050000 00000005  ................
 0250 00000000 00050000 00000005 00000000  ................
 0260 00050000 00000005 00000000 00050000  ................
 0270 00000005 00000000 00050000 00000005  ................
 0280 00000000 00050000 00000005 00000000  ................
 0290 00050000 00000005 00000000 00050000  ................
 02a0 00000005 00000000 00050000 00000005  ................
 02b0 00000000 00050000 00000005 00000000  ................
 02c0 00050000 00000005 00000000 00050000  ................
 02d0 00000005 00000000 00050000 00000005  ................
 02e0 00000000 00050000 00000005 00000000  ................
 02f0 00050000 00000005 00000000 00050000  ................
 0300 00000005 00000000 00050000 00000005  ................
 0310 00000000 00050000 00000005 00000000  ................
 0320 00050000 00000005 00000000 00050000  ................
 0330 00000005 00000000 00050000 00000005  ................
 0340 00000000 00050000 00000005 00000000  ................
 0350 00050000 00000005 00000000 00050000  ................
 0360 00000005 00000000 00050000 00000005  ................
 0370 00000000 00050000 00000005 00000000  ................
 0380 00050000 00000005 00000000 00050000  ................
 0390 00000005 00000000 00050000 00000005  ................
 03a0 00000000 00050000 00000005 00000000  ................
 03b0 00050000 00000005 00000000 00050000  ................
 03c0 00000005 00000000 00050000 00000005  ................
 03d0 00000000 00050000 00000005 00000000  ................
 03e0 00050000 00000005 00000000 00050000  ................
 03f0 00000005 00000000 00050000 00000005  ................
 0400 00000000 00050000 00000005 00000000  ................
 0410 00050000 00000005 00000000 00050000  ................
 0420 00000005 00000000 00050000 00000005  ................
 0430 00000000 00050000 00000005 00000000  ................
 0440 00050000 00000005 00000000 00050000  ................
 0450 00000005 00000000 00050000 00000005  ................
 0460 00000000 00050000 00000005 00000000  ................
 0470 00050000 00000005 00000000 00050000  ................
 0480 00000005 00000000 00050000 00000005  ................
 0490 00000000 00050000 00000005 00000000  ................
 04a0 00050000 00000005 00000000 00050000  ................
 04b0 00000005 00000000 00050000 00000005  ................
 04c0 00000000 00050000 00000005 00000000  ................
 04d0 00050000 00000005 00000000 00050000  ................
 04e0 00000005 00000000 00050000 00000005  ................
 04f0 00000000 00050000 00000005 00000000  ................
 0500 00050000 00000005 00000000 00050000  ................
 0510 00000005 00000000 00050000 00000005  ................
 0520 00000000 00050000 00000005 00000000  ................
 0530 00050000 00000005 00000000 00050000  ................
 0540 00000005 00000000 00050000 00000005  ................
 0550 00000000 00050000 00000005 00000000  ................
 0560 00050000 00000005 00000000 00050000  ................
 0570 00000005 00000000 00050000 00000005  ................
 0580 00000000 00050000 00000005 00000000  ................
 0590 00050000 00000005 00000000 00050000  ................
 05a0 00000005 00000000 00050000 00000005  ................
 05b0 00000000 00050000 00000005 00000000  ................
 05c0 00050000 00000005 00000000 00050000  ................
 05d0 00000005 00000000 00050000 00000005  ................
 05e0 00000000 00050000 00000005 00000000  ................
 05f0 00050000 00000005 00000000 00050000  ................
 0600 00000005 00000000 00050000 00000005  ................
 0610 00000000 00050000 00000005 00000000  ................
 0620 00050000 00000005 00000000 00050000  ................
 0630 00000005 00000000 00050000 00000005  ................
 0640 00000000 00050000 00000005 00000000  ................
 0650 00050000 00000005 00000000 00050000  ................
 0660 00000005 00000000 00050000 00000005  ................
 0670 00000000 00050000 00000005 00000000  ................
 0680 00050000 00000005 00000000 00050000  ................
 0690 00000005 00000000 00050000 00000005  ................
 06a0 00000000 00050000 00000005 00000000  ................
 06b0 00050000 00000005 00000000 00050000  ................
 06c0 00000005 00000000 00050000 00000005  ................
 06d0 00000000 00050000 00000005 00000000  ................
 06e0 00050000 00000005 00000000 00050000  ................
 06f0 00000005 00000000 00050000 00000005  ................
 0700 00000000 00050000 00000005 00000000  ................
 0710 00050000 00000005 00000000 00050000  ................
 0720 00000005 00000000 00050000 00000005  ................
 0730 00000000 00050000 00000005 00000000  ................
 0740 00050000 00000005 00000000 00050000  ................
 0750 00000005 00000000 00050000 00000005  ................
 0760 00000000 00050000 00000005 00000000  ................
 0770 00050000 00000005 00000000 00050000  ................
 0780 00000005 00000000 00050000 00000005  ................
 0790 00000000 00050000 00000005 00000000  ................
 07a0 00050000 00000005 00000000 00050000  ................
 07b0 00000005 00000000 00050000 00000005  ................
 07c0 00000000 00050000 00000005 00000000  ................
 07d0 00050000 00000005 00000000 00050000  ................
 07e0 00000005 00000000 00050000 00000005  ................
 07f0 00000000 00050000 00000005 00000000  ................
 0800 00050000 00000000                    ........        
Contents of section .debug_macro:
 0000 04000005 13000000 00052600 00000005  ..........&.....
 0010 2e000000 00053a00 00000005 3d000000  ......:.....=...
 0020 0000                                 ..              
Contents of section .debug_macro:
 0000 04000005 18000000 00051a00 00000000  ................
Contents of section .debug_macro:
 0000 04000005 13000000 00067700 00000006  ..........w.....
 0010 78000000 00067900 00000006 7a000000  x.....y.....z...
 0020 00067b00 00000006 7c000000 00067d00  ..{.....|.....}.
 0030 00000006 7e000000 00067f00 00000006  ....~...........
 0040 80010000 00000681 01000000 00068201  ................
 0050 00000000 06830100 00000006 84010000  ................
 0060 00000685 01000000 00068601 00000000  ................
 0070 06870100 00000006 88010000 00000689  ................
 0080 01000000 00068a01 00000000 068b0100  ................
 0090 00000006 8c010000 0000068d 01000000  ................
 00a0 00068e01 00000000 05930100 00000005  ................
 00b0 9e010000 000005ac 01000000 0005b001  ................
 00c0 00000000 06dc0100 00000005 dd010000  ................
 00d0 000005e3 01000000 0005e901 00000000  ................
 00e0 05ef0100 00000005 84020000 00000686  ................
 00f0 02000000 00058702 00000000 06880200  ................
 0100 00000005 89020000 000005ac 02000000  ................
 0110 0005b002 00000000 05b40200 00000005  ................
 0120 b8020000 000005bc 02000000 0006bd02  ................
 0130 00000000 05be0200 00000006 bf020000  ................
 0140 000005c0 02000000 0005c402 00000000  ................
 0150 06c50200 00000005 c6020000 000005f0  ................
 0160 02000000 0005f402 00000000 05830300  ................
 0170 00000005 8b030000 0000069a 03000000  ................
 0180 00059b03 00000000 059f0300 00000005  ................
 0190 a0030000 000005a2 03000000 0000      ..............  
Contents of section .debug_macro:
 0000 04000005 13000000 0002225f 5f500006  .........."__P..
 0010 23000000 00052a00 00000005 2b000000  #.....*.....+...
 0020 00053700 00000005 38000000 00053900  ..7.....8.....9.
 0030 00000005 3a000000 00055900 00000005  ....:.....Y.....
 0040 5e000000 00055f00 00000005 64000000  ^....._.....d...
 0050 00056500 00000005 68000000 00057000  ..e.....h.....p.
 0060 00000005 71000000 00057600 00000005  ....q.....v.....
 0070 77000000 00057a00 00000005 7c000000  w.....z.....|...
 0080 00057d00 00000005 8a010000 0000058b  ..}.............
 0090 01000000 0005a901 00000000 05b00100  ................
 00a0 00000005 b2010000 000005b5 01000000  ................
 00b0 0005b601 00000000 05cb0100 00000005  ................
 00c0 d3010000 000005dd 01000000 0005e401  ................
 00d0 00000000 05ed0100 00000005 ee010000  ................
 00e0 000005f6 01000000 00058002 00000000  ................
 00f0 058d0200 00000005 97020000 000005a0  ................
 0100 02000000 0005a802 00000000 05b10200  ................
 0110 00000006 b9020000 000005ba 02000000  ................
 0120 0005c302 00000000 05d50200 00000005  ................
 0130 d6020000 000005df 02000000 0005e502  ................
 0140 00000000 05e60200 00000005 fa020000  ................
 0150 00000589 03000000 00058a03 00000000  ................
 0160 05a00300 00000000                    ........        
Contents of section .debug_macro:
 0000 04000005 04000000 00050c00 00000005  ................
 0010 0e000000 0000                        ......          
Contents of section .debug_macro:
 0000 04000005 c2030000 000005c3 03000000  ................
 0010 0005c403 00000000 05c50300 00000005  ................
 0020 c6030000 000005c8 03000000 0005c903  ................
 0030 00000000 05d40300 00000005 d5030000  ................
 0040 000005e7 03000000 0000               ..........      
Contents of section .debug_macro:
 0000 04000005 0a000000 00050b00 00000005  ................
 0010 0c000000 00050d00 00000005 0e000000  ................
 0020 00050f00 00000005 10000000 00051100  ................
 0030 00000005 12000000 00051300 00000005  ................
 0040 14000000 00051500 00000005 16000000  ................
 0050 00051700 00000000                    ........        
Contents of section .debug_macro:
 0000 04000006 25000000 00052a00 00000006  ....%.....*.....
 0010 2f000000 00053300 00000006 38000000  /.....3.....8...
 0020 00053c00 00000006 41000000 00054500  ..<.....A.....E.
 0030 00000000                             ....            
Contents of section .debug_macro:
 0000 04000005 1f000000 00052000 00000000  .......... .....
Contents of section .debug_macro:
 0000 04000005 bb010000 000005bc 01000000  ................
 0010 0005bd01 00000000 05be0100 00000005  ................
 0020 bf010000 000005c0 01000000 0005c101  ................
 0030 00000000 05c20100 00000005 c3010000  ................
 0040 000005c4 01000000 0005c501 00000000  ................
 0050 05c60100 00000005 c7010000 000005c8  ................
 0060 01000000 0005c901 00000000 05ca0100  ................
 0070 00000005 d2010000 000006ee 01000000  ................
 0080 00069103 00000000 05960300 00000006  ................
 0090 9c030000 000000                      .......         
Contents of section .debug_macro:
 0000 04000005 62000000 00056300 00000005  ....b.....c.....
 0010 64000000 00056500 00000005 66000000  d.....e.....f...
 0020 00056700 00000005 75000000 00057600  ..g.....u.....v.
 0030 00000005 77000000 00057800 00000005  ....w.....x.....
 0040 79000000 00057a00 00000005 7b000000  y.....z.....{...
 0050 00057c00 00000005 7e000000 0000      ..|.....~.....  
Contents of section .debug_macro:
 0000 04000005 18000000 00052200 00000005  ..........".....
 0010 23000000 00052600 00000005 27000000  #.....&.....'...
 0020 00052800 00000005 29000000 00052a00  ..(.....).....*.
 0030 00000005 2b000000 00052d00 00000005  ....+.....-.....
 0040 2e000000 00053300 00000005 34000000  ......3.....4...
 0050 00053500 00000005 36000000 00053700  ..5.....6.....7.
 0060 00000005 38000000 00053900 00000005  ....8.....9.....
 0070 3a000000 00053b00 00000005 3c000000  :.....;.....<...
 0080 00053d00 00000005 3e000000 00053f00  ..=.....>.....?.
 0090 00000005 40000000 00054100 00000005  ....@.....A.....
 00a0 42000000 00054300 00000005 44000000  B.....C.....D...
 00b0 00054500 00000005 46000000 00054700  ..E.....F.....G.
 00c0 00000005 48000000 00054900 00000005  ....H.....I.....
 00d0 4a000000 00055000 00000005 53000000  J.....P.....S...
 00e0 00055600 00000005 5c000000 0000      ..V.....\.....  
Contents of section .debug_macro:
 0000 04000005 05000000 00050e00 00000005  ................
 0010 12000000 0000                        ......          
Contents of section .debug_macro:
 0000 04000006 ee010000 00000691 03000000  ................
 0010 00059603 00000000 069c0300 00000000  ................
Contents of section .debug_macro:
 0000 04000005 33000000 00053500 00000005  ....3.....5.....
 0010 36000000 00053800 00000005 3b000000  6.....8.....;...
 0020 00053d00 00000000                    ..=.....        
Contents of section .debug_macro:
 0000 04000005 25000000 00052600 00000005  ....%.....&.....
 0010 27000000 00052800 00000005 29000000  '.....(.....)...
 0020 00052a00 00000005 2b000000 00052c00  ..*.....+.....,.
 0030 00000005 2d000000 00052e00 00000005  ....-...........
 0040 2f000000 00053000 00000005 31000000  /.....0.....1...
 0050 00053400 00000000                    ..4.....        
Contents of section .debug_macro:
 0000 04000006 22000000 00052700 00000000  ....".....'.....
Contents of section .debug_macro:
 0000 04000006 37000000 00053800 00000005  ....7.....8.....
 0010 3f000000 00054200 00000005 51000000  ?.....B.....Q...
 0020 00055200 00000005 53000000 00055400  ..R.....S.....T.
 0030 00000005 55000000 00055600 00000005  ....U.....V.....
 0040 57000000 00055800 00000005 60000000  W.....X.....`...
 0050 00056100 00000005 62000000 00056300  ..a.....b.....c.
 0060 00000005 64000000 00056500 00000005  ....d.....e.....
 0070 66000000 00056700 00000005 68000000  f.....g.....h...
 0080 00056900 00000005 6a000000 00056b00  ..i.....j.....k.
 0090 00000005 6c000000 00056d00 00000005  ....l.....m.....
 00a0 6e000000 00056f00 00000005 70000000  n.....o.....p...
 00b0 00057100 00000005 72000000 00057400  ..q.....r.....t.
 00c0 00000005 75000000 00057900 00000005  ....u.....y.....
 00d0 82010000 00000583 01000000 00058401  ................
 00e0 00000000 05850100 00000005 86010000  ................
 00f0 00000587 01000000 00058801 00000000  ................
 0100 05890100 00000005 8a010000 0000058b  ................
 0110 01000000 00058c01 00000000 058d0100  ................
 0120 00000005 8e010000 0000058f 01000000  ................
 0130 00059001 00000000 05910100 00000005  ................
 0140 92010000 000005f7 01000000 00059402  ................
 0150 00000000 05c30200 00000005 c4020000  ................
 0160 000005c5 02000000 00058f03 00000000  ................
 0170 05940300 00000005 97030000 0000059b  ................
 0180 03000000 0005ae03 00000000 05af0300  ................
 0190 00000005 b9030000 000005c0 03000000  ................
 01a0 0005c103 00000000 05c20300 00000005  ................
 01b0 c3030000 000005c5 03000000 0005c803  ................
 01c0 00000000 05cb0300 00000000           ............    
Contents of section .debug_macro:
 0000 04000005 2f000000 00053d00 00000005  ..../.....=.....
 0010 48000000 00055700 00000005 58000000  H.....W.....X...
 0020 00055900 00000005 5e000000 00056b00  ..Y.....^.....k.
 0030 00000005 6c000000 00056d00 00000005  ....l.....m.....
 0040 76000000 0000                        v.....          
Contents of section .debug_macro:
 0000 04000005 13000000 00051900 00000005  ................
 0010 1a000000 00051b00 00000005 1e000000  ................
 0020 00062400 00000005 25000000 0000      ..$.....%.....  
Contents of section .debug_macro:
 0000 04000005 8b010000 0000058c 01000000  ................
 0010 00058d01 00000000 05e80300 00000005  ................
 0020 90040000 000000                      .......         
Contents of section .debug_line:
 0000 2e020000 02000d02 00000101 fb0e0d00  ................
 0010 01010101 00000001 0000012f 7573722f  .........../usr/
 0020 6c69622f 6763632f 7838365f 36342d6c  lib/gcc/x86_64-l
 0030 696e7578 2d676e75 2f372f69 6e636c75  inux-gnu/7/inclu
 0040 6465002f 7573722f 7838365f 36342d6c  de./usr/x86_64-l
 0050 696e7578 2d676e75 2f696e63 6c756465  inux-gnu/include
 0060 2f626974 73002f75 73722f78 38365f36  /bits./usr/x86_6
 0070 342d6c69 6e75782d 676e752f 696e636c  4-linux-gnu/incl
 0080 75646500 2f757372 2f783836 5f36342d  ude./usr/x86_64-
 0090 6c696e75 782d676e 752f696e 636c7564  linux-gnu/includ
 00a0 652f7379 73002f75 73722f78 38365f36  e/sys./usr/x86_6
 00b0 342d6c69 6e75782d 676e752f 696e636c  4-linux-gnu/incl
 00c0 7564652f 676e7500 2f757372 2f783836  ude/gnu./usr/x86
 00d0 5f36342d 6c696e75 782d676e 752f696e  _64-linux-gnu/in
 00e0 636c7564 652f6269 74732f74 79706573  clude/bits/types
 00f0 00006966 5f746865 6e2e6300 00000073  ..if_then.c....s
 0100 74646465 662e6800 01000074 79706573  tddef.h....types
 0110 2e680002 00006c69 62696f2e 68000200  .h....libio.h...
 0120 00737464 696f2e68 00030000 7379735f  .stdio.h....sys_
 0130 6572726c 6973742e 68000200 00737464  errlist.h....std
 0140 632d7072 65646566 2e680003 00006c69  c-predef.h....li
 0150 62632d68 65616465 722d7374 6172742e  bc-header-start.
 0160 68000200 00666561 74757265 732e6800  h....features.h.
 0170 03000063 64656673 2e680004 0000776f  ...cdefs.h....wo
 0180 72647369 7a652e68 00020000 6c6f6e67  rdsize.h....long
 0190 2d646f75 626c652e 68000200 00737475  -double.h....stu
 01a0 62732e68 00050000 73747562 732d3634  bs.h....stubs-64
 01b0 2e680005 00007479 70657369 7a65732e  .h....typesizes.
 01c0 68000200 005f5f46 494c452e 68000600  h....__FILE.h...
 01d0 0046494c 452e6800 0600005f 475f636f  .FILE.h...._G_co
 01e0 6e666967 2e680002 00005f5f 6d627374  nfig.h....__mbst
 01f0 6174655f 742e6800 06000073 74646172  ate_t.h....stdar
 0200 672e6800 01000073 7464696f 5f6c696d  g.h....stdio_lim
 0210 2e680002 00000000 09020000 00000000  .h..............
 0220 000014e4 e8760813 08768308 15021600  .....v...v......
 0230 0101                                 ..              
Contents of section .debug_str:
 0000 5f494f5f 44454320 30323000 5f53495a  _IO_DEC 020._SIZ
 0010 455f545f 20005f5f 5349475f 41544f4d  E_T_ .__SIG_ATOM
 0020 49435f4d 41585f5f 20307837 66666666  IC_MAX__ 0x7ffff
 0030 66666600 5f5f464c 5436345f 4841535f  fff.__FLT64_HAS_
 0040 51554945 545f4e41 4e5f5f20 31005f53  QUIET_NAN__ 1._S
 0050 495a455f 545f4445 46494e45 4420005f  IZE_T_DEFINED ._
 0060 494f5f49 535f4649 4c454255 46203078  IO_IS_FILEBUF 0x
 0070 32303030 005f5f44 45433634 5f535542  2000.__DEC64_SUB
 0080 4e4f524d 414c5f4d 494e5f5f 20302e30  NORMAL_MIN__ 0.0
 0090 30303030 30303030 30303030 3031452d  00000000000001E-
 00a0 33383344 44005f5f 464c5433 325f4841  383DD.__FLT32_HA
 00b0 535f494e 46494e49 54595f5f 2031005f  S_INFINITY__ 1._
 00c0 5f464c54 36345f4d 41585f45 58505f5f  _FLT64_MAX_EXP__
 00d0 20313032 34005f5f 464c545f 4d494e5f   1024.__FLT_MIN_
 00e0 31305f45 58505f5f 20282d33 3729005f  10_EXP__ (-37)._
 00f0 5f535953 43414c4c 5f554c4f 4e475f54  _SYSCALL_ULONG_T
 0100 59504520 5f5f554c 4f4e4757 4f52445f  YPE __ULONGWORD_
 0110 54595045 005f5f46 4c543634 585f4550  TYPE.__FLT64X_EP
 0120 53494c4f 4e5f5f20 312e3038 34323032  SILON__ 1.084202
 0130 31373234 38353530 34343334 30303734  1724855044340074
 0140 35323830 30383639 39343137 31652d31  5280086994171e-1
 0150 39463634 78005f5f 464c5433 32585f4d  9F64x.__FLT32X_M
 0160 41585f45 58505f5f 20313032 34005f73  AX_EXP__ 1024._s
 0170 686f7274 62756600 5f5f4743 435f4154  hortbuf.__GCC_AT
 0180 4f4d4943 5f544553 545f414e 445f5345  OMIC_TEST_AND_SE
 0190 545f5452 55455641 4c203100 5f5f4f46  T_TRUEVAL 1.__OF
 01a0 465f545f 4d415443 4845535f 4f464636  F_T_MATCHES_OFF6
 01b0 345f5420 31005f5f 44454336 345f4550  4_T 1.__DEC64_EP
 01c0 53494c4f 4e5f5f20 31452d31 35444400  SILON__ 1E-15DD.
 01d0 5f5f4442 4c5f4445 4e4f524d 5f4d494e  __DBL_DENORM_MIN
 01e0 5f5f2028 28646f75 626c6529 342e3934  __ ((double)4.94
 01f0 30363536 34353834 31323436 35343431  0656458412465441
 0200 37363536 38373932 38363832 32313337  7656879286822137
 0210 32652d33 32344c29 005f494f 5f6c6f63  2e-324L)._IO_loc
 0220 6b5f7400 5f5f494e 54505452 5f4d4158  k_t.__INTPTR_MAX
 0230 5f5f2030 78376666 66666666 66666666  __ 0x7ffffffffff
 0240 66666666 664c005f 475f4841 56455f53  fffffL._G_HAVE_S
 0250 545f424c 4b53495a 45206465 66696e65  T_BLKSIZE define
 0260 6420285f 53544154 4255465f 53545f42  d (_STATBUF_ST_B
 0270 4c4b5349 5a452900 5f5f666c 65786172  LKSIZE).__flexar
 0280 72205b5d 005f5f46 4c543332 5f4d414e  r [].__FLT32_MAN
 0290 545f4449 475f5f20 32340063 68617200  T_DIG__ 24.char.
 02a0 5f5f4743 435f4841 56455f53 594e435f  __GCC_HAVE_SYNC_
 02b0 434f4d50 4152455f 414e445f 53574150  COMPARE_AND_SWAP
 02c0 5f382031 005f494f 535f4249 4e203132  _8 1._IOS_BIN 12
 02d0 38004649 4c454e41 4d455f4d 41582034  8.FILENAME_MAX 4
 02e0 30393600 5f535444 435f5052 45444546  096._STDC_PREDEF
 02f0 5f482031 00737464 65727200 5f5f5553  _H 1.stderr.__US
 0300 455f4953 4f433131 2031005f 494f4642  E_ISOC11 1._IOFB
 0310 46203000 5f494f5f 6275665f 656e6400  F 0._IO_buf_end.
 0320 5f5f494e 545f4641 53543634 5f574944  __INT_FAST64_WID
 0330 54485f5f 20363400 5f494f5f 454f465f  TH__ 64._IO_EOF_
 0340 5345454e 20307831 30005345 454b5f43  SEEN 0x10.SEEK_C
 0350 55522031 005f5f46 4c543332 585f4445  UR 1.__FLT32X_DE
 0360 43494d41 4c5f4449 475f5f20 3137005f  CIMAL_DIG__ 17._
 0370 5f6b385f 5f203100 5f5f4442 4c5f4d49  _k8__ 1.__DBL_MI
 0380 4e5f4558 505f5f20 282d3130 32312900  N_EXP__ (-1021).
 0390 5f5f494e 545f4641 53543634 5f4d4158  __INT_FAST64_MAX
 03a0 5f5f2030 78376666 66666666 66666666  __ 0x7ffffffffff
 03b0 66666666 664c005f 5f686173 5f696e63  fffffL.__has_inc
 03c0 6c756465 5f6e6578 74285354 5229205f  lude_next(STR) _
 03d0 5f686173 5f696e63 6c756465 5f6e6578  _has_include_nex
 03e0 745f5f28 53545229 005f494f 5f524947  t__(STR)._IO_RIG
 03f0 48542030 34005f49 4f5f5553 45525f42  HT 04._IO_USER_B
 0400 55462031 005f5359 535f4344 4546535f  UF 1._SYS_CDEFS_
 0410 48203100 5f5f464c 54333258 5f4d4158  H 1.__FLT32X_MAX
 0420 5f5f2031 2e373937 36393331 33343836  __ 1.79769313486
 0430 32333135 37303831 34353237 34323337  2315708145274237
 0440 33313730 34333537 652b3330 38463332  31704357e+308F32
 0450 78005f5f 676c6962 635f756e 6c696b65  x.__glibc_unlike
 0460 6c792863 6f6e6429 205f5f62 75696c74  ly(cond) __built
 0470 696e5f65 78706563 74202828 636f6e64  in_expect ((cond
 0480 292c2030 29005f5f 53495a45 4f465f57  ), 0).__SIZEOF_W
 0490 494e545f 545f5f20 34005f5f 474e5543  INT_T__ 4.__GNUC
 04a0 5f505245 52455128 6d616a2c 6d696e29  _PREREQ(maj,min)
 04b0 2028285f 5f474e55 435f5f20 3c3c2031   ((__GNUC__ << 1
 04c0 3629202b 205f5f47 4e55435f 4d494e4f  6) + __GNUC_MINO
 04d0 525f5f20 3e3d2028 286d616a 29203c3c  R__ >= ((maj) <<
 04e0 20313629 202b2028 6d696e29 29005f5f   16) + (min)).__
 04f0 55494e54 5054525f 4d41585f 5f203078  UINTPTR_MAX__ 0x
 0500 66666666 66666666 66666666 66666666  ffffffffffffffff
 0510 554c005f 53495a45 5f542000 5f5f7661  UL._SIZE_T .__va
 0520 5f617267 5f706163 6b5f6c65 6e282920  _arg_pack_len() 
 0530 5f5f6275 696c7469 6e5f7661 5f617267  __builtin_va_arg
 0540 5f706163 6b5f6c65 6e202829 005f475f  _pack_len ()._G_
 0550 48415645 5f4d4d41 50203100 5f5f6174  HAVE_MMAP 1.__at
 0560 74726962 7574655f 636f6e73 745f5f20  tribute_const__ 
 0570 5f5f6174 74726962 7574655f 5f202828  __attribute__ ((
 0580 5f5f636f 6e73745f 5f292900 5f5f474c  __const__)).__GL
 0590 4942435f 5553455f 44455052 45434154  IBC_USE_DEPRECAT
 05a0 45445f47 45545300 5f494f5f 4e4f5f57  ED_GETS._IO_NO_W
 05b0 52495445 53203800 5f5f474e 55435f4d  RITES 8.__GNUC_M
 05c0 494e4f52 5f5f2033 005f5f55 53455f4c  INOR__ 3.__USE_L
 05d0 41524745 46494c45 3634005f 5f524c49  ARGEFILE64.__RLI
 05e0 4d5f545f 54595045 205f5f53 59534341  M_T_TYPE __SYSCA
 05f0 4c4c5f55 4c4f4e47 5f545950 45005f5f  LL_ULONG_TYPE.__
 0600 4c44424c 5f524544 4952286e 616d652c  LDBL_REDIR(name,
 0610 70726f74 6f29206e 616d6520 70726f74  proto) name prot
 0620 6f005f49 4f5f7772 6974655f 656e6400  o._IO_write_end.
 0630 756e7369 676e6564 20696e74 005f5f47  unsigned int.__G
 0640 4c494243 5f505245 52455128 6d616a2c  LIBC_PREREQ(maj,
 0650 6d696e29 2028285f 5f474c49 42435f5f  min) ((__GLIBC__
 0660 203c3c20 31362920 2b205f5f 474c4942   << 16) + __GLIB
 0670 435f4d49 4e4f525f 5f203e3d 2028286d  C_MINOR__ >= ((m
 0680 616a2920 3c3c2031 3629202b 20286d69  aj) << 16) + (mi
 0690 6e292900 5f5f6e65 65645f4e 554c4c20  n)).__need_NULL 
 06a0 005f5f46 4c543634 5f4d494e 5f5f2032  .__FLT64_MIN__ 2
 06b0 2e323235 30373338 35383530 37323031  .225073858507201
 06c0 33383330 39303233 32373137 33333234  3830902327173324
 06d0 30343036 652d3330 38463634 005f5f4c  0406e-308F64.__L
 06e0 4f4e475f 4c4f4e47 5f574944 54485f5f  ONG_LONG_WIDTH__
 06f0 20363400 5f504f53 49585f53 4f555243   64._POSIX_SOURC
 0700 45005f5f 464c545f 44454e4f 524d5f4d  E.__FLT_DENORM_M
 0710 494e5f5f 20312e34 30313239 38343634  IN__ 1.401298464
 0720 33323438 31373037 30393233 37323935  3248170709237295
 0730 38333238 39393136 3133652d 34354600  8328991613e-45F.
 0740 2f686f6d 652f7562 756e7475 2f456e67  /home/ubuntu/Eng
 0750 696e6565 72696e67 2f50726f 6772616d  ineering/Program
 0760 6d696e67 2f446973 61737365 6d626c69  ming/Disassembli
 0770 6e672d42 696e6172 6965732f 432f496e  ng-Binaries/C/In
 0780 74656c5f 61726368 69746563 74757265  tel_architecture
 0790 2f414d44 36342f43 6f6e6469 74696f6e  /AMD64/Condition
 07a0 616c732f 57697468 5f446562 75675f49  als/With_Debug_I
 07b0 6e666f00 5f5f5349 5a454f46 5f53495a  nfo.__SIZEOF_SIZ
 07c0 455f545f 5f203800 61726763 005f666c  E_T__ 8.argc._fl
 07d0 61677300 5f5f4f52 4445525f 4249475f  ags.__ORDER_BIG_
 07e0 454e4449 414e5f5f 20343332 31005f5f  ENDIAN__ 4321.__
 07f0 474e5543 5f5f2037 005f494f 5f4c494e  GNUC__ 7._IO_LIN
 0800 455f4255 46203078 32303000 5f5f5553  E_BUF 0x200.__US
 0810 455f4953 4f435858 3131005f 5f555345  E_ISOCXX11.__USE
 0820 5f415446 494c4520 31005f5f 6e6f6e6e  _ATFILE 1.__nonn
 0830 756c6c28 70617261 6d732920 5f5f6174  ull(params) __at
 0840 74726962 7574655f 5f202828 5f5f6e6f  tribute__ ((__no
 0850 6e6e756c 6c5f5f20 70617261 6d732929  nnull__ params))
 0860 005f5f55 494e5436 345f4328 63292063  .__UINT64_C(c) c
 0870 20232320 554c005f 5f474e55 5f4c4942   ## UL.__GNU_LIB
 0880 52415259 5f5f005f 5f44424c 5f4d414e  RARY__.__DBL_MAN
 0890 545f4449 475f5f20 3533005f 5f555345  T_DIG__ 53.__USE
 08a0 5f504f53 49583139 39353036 2031005f  _POSIX199506 1._
 08b0 5f737475 625f6368 666c6167 7320005f  _stub_chflags ._
 08c0 5f494e54 5f4d4158 5f5f2030 78376666  _INT_MAX__ 0x7ff
 08d0 66666666 66005f66 6c616773 32005f5f  fffff._flags2.__
 08e0 4e54484e 4c286663 7429205f 5f617474  NTHNL(fct) __att
 08f0 72696275 74655f5f 2028285f 5f6e6f74  ribute__ ((__not
 0900 68726f77 5f5f2929 20666374 005f5f73  hrow__)) fct.__s
 0910 7475625f 66636866 6c616773 20005f5f  tub_fchflags .__
 0920 494e5431 365f5459 50455f5f 2073686f  INT16_TYPE__ sho
 0930 72742069 6e74005f 5f444543 494d414c  rt int.__DECIMAL
 0940 5f424944 5f464f52 4d41545f 5f203100  _BID_FORMAT__ 1.
 0950 5f5f4445 4333325f 45505349 4c4f4e5f  __DEC32_EPSILON_
 0960 5f203145 2d364446 005f5349 5a455f54  _ 1E-6DF._SIZE_T
 0970 5f444543 4c415245 4420005f 5f46445f  _DECLARED .__FD_
 0980 53455453 495a4520 31303234 005f5f4c  SETSIZE 1024.__L
 0990 44424c5f 4449475f 5f203138 005f6d61  DBL_DIG__ 18._ma
 09a0 726b6572 73005f5f 41544f4d 49435f53  rkers.__ATOMIC_S
 09b0 45515f43 53542035 005f5f55 53455f50  EQ_CST 5.__USE_P
 09c0 4f534958 32203100 5f5f5553 455f4953  OSIX2 1.__USE_IS
 09d0 4f433935 2031005f 5f53495a 454f465f  OC95 1.__SIZEOF_
 09e0 53484f52 545f5f20 32005f47 5f76615f  SHORT__ 2._G_va_
 09f0 6c697374 205f5f67 6e75635f 76615f6c  list __gnuc_va_l
 0a00 69737400 5f5f5549 4e543634 5f545950  ist.__UINT64_TYP
 0a10 455f5f20 6c6f6e67 20756e73 69676e65  E__ long unsigne
 0a20 6420696e 74005f5f 494e545f 46415354  d int.__INT_FAST
 0a30 33325f4d 41585f5f 20307837 66666666  32_MAX__ 0x7ffff
 0a40 66666666 66666666 6666664c 005f5f49  fffffffffffL.__I
 0a50 4e545f4c 45415354 385f5459 50455f5f  NT_LEAST8_TYPE__
 0a60 20736967 6e656420 63686172 005f5f73   signed char.__s
 0a70 697a655f 7420005f 5f55494e 545f4c45  ize_t .__UINT_LE
 0a80 41535433 325f5459 50455f5f 20756e73  AST32_TYPE__ uns
 0a90 69676e65 6420696e 74005f5f 73747562  igned int.__stub
 0aa0 5f736967 72657475 726e2000 5f5f7074  _sigreturn .__pt
 0ab0 725f7420 766f6964 202a005f 5f533332  r_t void *.__S32
 0ac0 5f545950 4520696e 74005f5f 53544443  _TYPE int.__STDC
 0ad0 5f4e4f5f 54485245 4144535f 5f203100  _NO_THREADS__ 1.
 0ae0 5f5f4259 54455f4f 52444552 5f5f205f  __BYTE_ORDER__ _
 0af0 5f4f5244 45525f4c 4954544c 455f454e  _ORDER_LITTLE_EN
 0b00 4449414e 5f5f005f 5f4c4442 4c5f4d49  DIAN__.__LDBL_MI
 0b10 4e5f5f20 332e3336 32313033 31343331  N__ 3.3621031431
 0b20 31323039 33353036 32363236 37373831  1209350626267781
 0b30 37333231 37353236 30652d34 3933324c  732175260e-4932L
 0b40 006c696e 75782031 005f5f46 4c543332  .linux 1.__FLT32
 0b50 5f4d494e 5f31305f 4558505f 5f20282d  _MIN_10_EXP__ (-
 0b60 33372900 5f5f4442 4c5f4841 535f4445  37).__DBL_HAS_DE
 0b70 4e4f524d 5f5f2031 005f5f49 4e545f4c  NORM__ 1.__INT_L
 0b80 45415354 36345f54 5950455f 5f206c6f  EAST64_TYPE__ lo
 0b90 6e672069 6e74005f 5f574348 41525f4d  ng int.__WCHAR_M
 0ba0 494e5f5f 20282d5f 5f574348 41525f4d  IN__ (-__WCHAR_M
 0bb0 41585f5f 202d2031 29005f49 4f5f5348  AX__ - 1)._IO_SH
 0bc0 4f57504f 494e5420 30343030 005f5f6f  OWPOINT 0400.__o
 0bd0 66665f74 5f646566 696e6564 20005f5f  ff_t_defined .__
 0be0 53544443 5f555446 5f33325f 5f203100  STDC_UTF_32__ 1.
 0bf0 5f5f424c 4b53495a 455f545f 54595045  __BLKSIZE_T_TYPE
 0c00 205f5f53 59534341 4c4c5f53 4c4f4e47   __SYSCALL_SLONG
 0c10 5f545950 45005f5f 494e545f 4c454153  _TYPE.__INT_LEAS
 0c20 5431365f 4d41585f 5f203078 37666666  T16_MAX__ 0x7fff
 0c30 005f5f4c 44424c5f 52454449 525f4445  .__LDBL_REDIR_DE
 0c40 434c286e 616d6529 2000474e 55204331  CL(name) .GNU C1
 0c50 3120372e 332e3020 2d6d7475 6e653d67  1 7.3.0 -mtune=g
 0c60 656e6572 6963202d 6d617263 683d7838  eneric -march=x8
 0c70 362d3634 202d6767 64623320 2d667374  6-64 -ggdb3 -fst
 0c80 61636b2d 70726f74 6563746f 722d7374  ack-protector-st
 0c90 726f6e67 005f5f53 43484152 5f4d4158  rong.__SCHAR_MAX
 0ca0 5f5f2030 78376600 5f5f6578 7465726e  __ 0x7f.__extern
 0cb0 5f616c77 6179735f 696e6c69 6e652065  _always_inline e
 0cc0 78746572 6e205f5f 616c7761 79735f69  xtern __always_i
 0cd0 6e6c696e 65205f5f 61747472 69627574  nline __attribut
 0ce0 655f5f20 28285f5f 676e755f 696e6c69  e__ ((__gnu_inli
 0cf0 6e655f5f 2929005f 5f464c54 36345f44  ne__)).__FLT64_D
 0d00 49475f5f 20313500 5f5f494e 545f4641  IG__ 15.__INT_FA
 0d10 5354385f 54595045 5f5f2073 69676e65  ST8_TYPE__ signe
 0d20 64206368 6172005f 5f504945 5f5f2032  d char.__PIE__ 2
 0d30 005f494f 5f6f6666 36345f74 205f5f6f  ._IO_off64_t __o
 0d40 66663634 5f740069 665f7468 656e2e63  ff64_t.if_then.c
 0d50 005f5f47 4c494243 5f555345 5f494543  .__GLIBC_USE_IEC
 0d60 5f363035 35395f54 59504553 5f455854  _60559_TYPES_EXT
 0d70 005f5f46 4c543332 585f4841 535f494e  .__FLT32X_HAS_IN
 0d80 46494e49 54595f5f 2031005f 5f555345  FINITY__ 1.__USE
 0d90 5f554e49 58393800 5f5f5553 455f464f  _UNIX98.__USE_FO
 0da0 52544946 595f4c45 56454c20 30005f41  RTIFY_LEVEL 0._A
 0db0 5446494c 455f534f 55524345 005f5f55  TFILE_SOURCE.__U
 0dc0 53455f41 5446494c 45005f5f 55494e54  SE_ATFILE.__UINT
 0dd0 5f4c4541 5354385f 54595045 5f5f2075  _LEAST8_TYPE__ u
 0de0 6e736967 6e656420 63686172 005f5f53  nsigned char.__S
 0df0 495a454f 465f494e 54313238 5f5f2031  IZEOF_INT128__ 1
 0e00 36005f5f 4e544828 66637429 205f5f61  6.__NTH(fct) __a
 0e10 74747269 62757465 5f5f2028 285f5f6e  ttribute__ ((__n
 0e20 6f746872 6f775f5f 205f5f4c 45414629  othrow__ __LEAF)
 0e30 29206663 74005f49 4f535f41 54454e44  ) fct._IOS_ATEND
 0e40 2034005f 5f676c69 62635f6d 6163726f   4.__glibc_macro
 0e50 5f776172 6e696e67 286d6573 73616765  _warning(message
 0e60 29205f5f 676c6962 635f6d61 63726f5f  ) __glibc_macro_
 0e70 7761726e 696e6731 20284743 43207761  warning1 (GCC wa
 0e80 726e696e 67206d65 73736167 6529005f  rning message)._
 0e90 5f464c54 3132385f 4841535f 51554945  _FLT128_HAS_QUIE
 0ea0 545f4e41 4e5f5f20 31005f54 5f53495a  T_NAN__ 1._T_SIZ
 0eb0 4520005f 5f464c54 3132385f 4d41585f  E .__FLT128_MAX_
 0ec0 5f20312e 31383937 33313439 35333537  _ 1.189731495357
 0ed0 32333137 36353038 35373539 33323636  2317650857593266
 0ee0 32383030 37303265 2b343933 32463132  2800702e+4932F12
 0ef0 38004255 4653495a 205f494f 5f425546  8.BUFSIZ _IO_BUF
 0f00 53495a00 5f415446 494c455f 534f5552  SIZ._ATFILE_SOUR
 0f10 43452031 005f5f46 4c543634 585f4449  CE 1.__FLT64X_DI
 0f20 475f5f20 3138005f 5f494e54 5f4c4541  G__ 18.__INT_LEA
 0f30 53543136 5f574944 54485f5f 20313600  ST16_WIDTH__ 16.
 0f40 5f5f4653 49445f54 5f545950 45207374  __FSID_T_TYPE st
 0f50 72756374 207b2069 6e74205f 5f76616c  ruct { int __val
 0f60 5b325d3b 207d005f 5f737369 7a655f74  [2]; }.__ssize_t
 0f70 5f646566 696e6564 20005f54 5f53495a  _defined ._T_SIZ
 0f80 455f2000 5f706f73 005f494f 5f666572  E_ ._pos._IO_fer
 0f90 726f725f 756e6c6f 636b6564 285f5f66  ror_unlocked(__f
 0fa0 70292028 28285f5f 6670292d 3e5f666c  p) (((__fp)->_fl
 0fb0 61677320 26205f49 4f5f4552 525f5345  ags & _IO_ERR_SE
 0fc0 454e2920 213d2030 29005f5f 65787465  EN) != 0).__exte
 0fd0 726e5f69 6e6c696e 65206578 7465726e  rn_inline extern
 0fe0 205f5f69 6e6c696e 65205f5f 61747472   __inline __attr
 0ff0 69627574 655f5f20 28285f5f 676e755f  ibute__ ((__gnu_
 1000 696e6c69 6e655f5f 2929005f 4743435f  inline__))._GCC_
 1010 53495a45 5f542000 7374646f 7574005f  SIZE_T .stdout._
 1020 5f464c54 33325f48 41535f44 454e4f52  _FLT32_HAS_DENOR
 1030 4d5f5f20 31005f5f 756e6978 5f5f2031  M__ 1.__unix__ 1
 1040 005f5f47 43435f48 4156455f 53594e43  .__GCC_HAVE_SYNC
 1050 5f434f4d 50415245 5f414e44 5f535741  _COMPARE_AND_SWA
 1060 505f3120 31005f49 4f5f7361 76655f65  P_1 1._IO_save_e
 1070 6e64005f 5f464c54 3634585f 4d494e5f  nd.__FLT64X_MIN_
 1080 4558505f 5f20282d 31363338 3129005f  EXP__ (-16381)._
 1090 4253445f 53495a45 5f545f20 005f5f73  BSD_SIZE_T_ .__s
 10a0 7475625f 7365746c 6f67696e 20005f5f  tub_setlogin .__
 10b0 464c545f 4449475f 5f203600 5f5f494e  FLT_DIG__ 6.__IN
 10c0 545f4641 53543136 5f574944 54485f5f  T_FAST16_WIDTH__
 10d0 20363400 5f5f4743 435f4154 4f4d4943   64.__GCC_ATOMIC
 10e0 5f424f4f 4c5f4c4f 434b5f46 52454520  _BOOL_LOCK_FREE 
 10f0 32005f49 4f5f6f66 665f7420 5f5f6f66  2._IO_off_t __of
 1100 665f7400 5f5f7069 655f5f20 32005f53  f_t.__pie__ 2._S
 1110 5444494f 5f482031 005f5f44 45433332  TDIO_H 1.__DEC32
 1120 5f4d494e 5f5f2031 452d3935 4446005f  _MIN__ 1E-95DF._
 1130 5f494e54 4d41585f 4d41585f 5f203078  _INTMAX_MAX__ 0x
 1140 37666666 66666666 66666666 66666666  7fffffffffffffff
 1150 4c005f42 4954535f 4c494249 4f5f4820  L._BITS_LIBIO_H 
 1160 31005f5f 4743435f 4945435f 35353920  1.__GCC_IEC_559 
 1170 32005f5f 464c5431 32385f4d 494e5f45  2.__FLT128_MIN_E
 1180 58505f5f 20282d31 36333831 29005f5f  XP__ (-16381).__
 1190 464c5433 325f4841 535f5155 4945545f  FLT32_HAS_QUIET_
 11a0 4e414e5f 5f203100 5f425344 5f53495a  NAN__ 1._BSD_SIZ
 11b0 455f545f 44454649 4e45445f 20005f5f  E_T_DEFINED_ .__
 11c0 55494e54 5f4c4541 53543136 5f4d4158  UINT_LEAST16_MAX
 11d0 5f5f2030 78666666 66005f5f 55494e54  __ 0xffff.__UINT
 11e0 5f464153 5436345f 4d41585f 5f203078  _FAST64_MAX__ 0x
 11f0 66666666 66666666 66666666 66666666  ffffffffffffffff
 1200 554c005f 494f5f45 52525f53 45454e20  UL._IO_ERR_SEEN 
 1210 30783230 005f5f61 74747269 62757465  0x20.__attribute
 1220 5f757365 645f5f20 5f5f6174 74726962  _used__ __attrib
 1230 7574655f 5f202828 5f5f7573 65645f5f  ute__ ((__used__
 1240 2929005f 5f617474 72696275 74655f61  )).__attribute_a
 1250 72746966 69636961 6c5f5f20 5f5f6174  rtificial__ __at
 1260 74726962 7574655f 5f202828 5f5f6172  tribute__ ((__ar
 1270 74696669 6369616c 5f5f2929 005f494f  tificial__))._IO
 1280 5f667472 796c6f63 6b66696c 65285f66  _ftrylockfile(_f
 1290 70292000 5f5f5549 4e545f4c 45415354  p) .__UINT_LEAST
 12a0 385f4d41 585f5f20 30786666 005f5f47  8_MAX__ 0xff.__G
 12b0 4c494243 5f555345 5f4c4942 5f455854  LIBC_USE_LIB_EXT
 12c0 32203000 5f5f4445 43313238 5f4d494e  2 0.__DEC128_MIN
 12d0 5f455850 5f5f2028 2d363134 3229005f  _EXP__ (-6142)._
 12e0 5f4b4552 4e454c5f 53545249 43545f4e  _KERNEL_STRICT_N
 12f0 414d4553 20005f5f 57434841 525f5459  AMES .__WCHAR_TY
 1300 50455f5f 20696e74 005f5f49 4e54385f  PE__ int.__INT8_
 1310 4d41585f 5f203078 37660067 65746328  MAX__ 0x7f.getc(
 1320 5f667029 205f494f 5f676574 6320285f  _fp) _IO_getc (_
 1330 66702900 5f5f4445 43313238 5f455053  fp).__DEC128_EPS
 1340 494c4f4e 5f5f2031 452d3333 444c005f  ILON__ 1E-33DL._
 1350 5f555345 5f504f53 49583139 39353036  _USE_POSIX199506
 1360 005f5f6e 6565645f 4e554c4c 005f5f52  .__need_NULL.__R
 1370 45444952 4543545f 4e54485f 4c44424c  EDIRECT_NTH_LDBL
 1380 286e616d 652c7072 6f746f2c 616c6961  (name,proto,alia
 1390 7329205f 5f524544 49524543 545f4e54  s) __REDIRECT_NT
 13a0 4820286e 616d652c 2070726f 746f2c20  H (name, proto, 
 13b0 616c6961 7329005f 5f524544 49524543  alias).__REDIREC
 13c0 545f4e54 484e4c28 6e616d65 2c70726f  T_NTHNL(name,pro
 13d0 746f2c61 6c696173 29206e61 6d652070  to,alias) name p
 13e0 726f746f 205f5f61 736d5f5f 20285f5f  roto __asm__ (__
 13f0 41534d4e 414d4520 2823616c 69617329  ASMNAME (#alias)
 1400 29205f5f 5448524f 574e4c00 5f5f464c  ) __THROWNL.__FL
 1410 54313238 5f4d4158 5f455850 5f5f2031  T128_MAX_EXP__ 1
 1420 36333834 005f5f46 4c545f52 41444958  6384.__FLT_RADIX
 1430 5f5f2032 005f5f46 4c543332 585f4445  __ 2.__FLT32X_DE
 1440 4e4f524d 5f4d494e 5f5f2034 2e393430  NORM_MIN__ 4.940
 1450 36353634 35383431 32343635 34343137  6564584124654417
 1460 36353638 37393238 36383232 31333732  6568792868221372
 1470 652d3332 34463332 78005f5f 676c6962  e-324F32x.__glib
 1480 635f636c 616e675f 6861735f 65787465  c_clang_has_exte
 1490 6e73696f 6e286578 74292030 005f5f50  nsion(ext) 0.__P
 14a0 4d542861 72677329 20617267 73005f5f  MT(args) args.__
 14b0 4749445f 545f5459 5045205f 5f553332  GID_T_TYPE __U32
 14c0 5f545950 45005f5f 53495a45 4f465f4c  _TYPE.__SIZEOF_L
 14d0 4f4e475f 444f5542 4c455f5f 20313600  ONG_DOUBLE__ 16.
 14e0 5f5f4442 4c5f4841 535f5155 4945545f  __DBL_HAS_QUIET_
 14f0 4e414e5f 5f203100 5f5f7775 7220005f  NAN__ 1.__wur ._
 1500 42495453 5f545950 45535f48 2031005f  BITS_TYPES_H 1._
 1510 5f4c4442 4c5f4445 4e4f524d 5f4d494e  _LDBL_DENORM_MIN
 1520 5f5f2033 2e363435 31393935 33313838  __ 3.64519953188
 1530 32343734 36303235 32383430 35393333  2474602528405933
 1540 36313934 31393832 652d3439 35314c00  61941982e-4951L.
 1550 5f5f5049 445f545f 54595045 205f5f53  __PID_T_TYPE __S
 1560 33325f54 59504500 5f5f7374 75625f66  32_TYPE.__stub_f
 1570 61747461 63682000 7379735f 6572726c  attach .sys_errl
 1580 69737400 5f5f464c 5436345f 4841535f  ist.__FLT64_HAS_
 1590 494e4649 4e495459 5f5f2031 005f5f55  INFINITY__ 1.__U
 15a0 494e545f 46415354 385f4d41 585f5f20  INT_FAST8_MAX__ 
 15b0 30786666 005f5f41 544f4d49 435f484c  0xff.__ATOMIC_HL
 15c0 455f5245 4c454153 45203133 31303732  E_RELEASE 131072
 15d0 005f5f4c 44424c5f 4d41585f 4558505f  .__LDBL_MAX_EXP_
 15e0 5f203136 33383400 5f6f6666 73657400  _ 16384._offset.
 15f0 5f5f7374 75625f67 74747920 005f4249  __stub_gtty ._BI
 1600 54535f54 59504553 495a4553 5f482031  TS_TYPESIZES_H 1
 1610 005f5f55 5345434f 4e44535f 545f5459  .__USECONDS_T_TY
 1620 5045205f 5f553332 5f545950 45005f49  PE __U32_TYPE._I
 1630 4f5f7065 656b6328 5f667029 205f494f  O_peekc(_fp) _IO
 1640 5f706565 6b635f75 6e6c6f63 6b656420  _peekc_unlocked 
 1650 285f6670 29005f5f 494e5450 54525f54  (_fp).__INTPTR_T
 1660 5950455f 5f206c6f 6e672069 6e74005f  YPE__ long int._
 1670 5f444543 36345f4d 41585f5f 20392e39  _DEC64_MAX__ 9.9
 1680 39393939 39393939 39393939 39394533  99999999999999E3
 1690 38344444 00737973 5f6e6572 72005f5f  84DD.sys_nerr.__
 16a0 4743435f 41544f4d 49435f49 4e545f4c  GCC_ATOMIC_INT_L
 16b0 4f434b5f 46524545 2032005f 5359535f  OCK_FREE 2._SYS_
 16c0 53495a45 5f545f48 20005f5f 4d4d585f  SIZE_T_H .__MMX_
 16d0 5f203100 5f5f424c 4b434e54 5f545f54  _ 1.__BLKCNT_T_T
 16e0 59504520 5f5f5359 5343414c 4c5f534c  YPE __SYSCALL_SL
 16f0 4f4e475f 54595045 005f494f 5f53484f  ONG_TYPE._IO_SHO
 1700 57424153 45203032 3030005f 5f737475  WBASE 0200.__stu
 1710 625f7374 74792000 5f66696c 656e6f00  b_stty ._fileno.
 1720 5f5f4841 56455f47 454e4552 49435f53  __HAVE_GENERIC_S
 1730 454c4543 54494f4e 2031005f 5f524c49  ELECTION 1.__RLI
 1740 4d36345f 545f5459 5045205f 5f555155  M64_T_TYPE __UQU
 1750 41445f54 59504500 5f5f464c 54313238  AD_TYPE.__FLT128
 1760 5f4d414e 545f4449 475f5f20 31313300  _MANT_DIG__ 113.
 1770 5f5f4f52 4445525f 4c495454 4c455f45  __ORDER_LITTLE_E
 1780 4e444941 4e5f5f20 31323334 005f5f55  NDIAN__ 1234.__U
 1790 53455f58 4f50454e 324b2031 005f5f53  SE_XOPEN2K 1.__S
 17a0 495a454f 465f5054 52444946 465f545f  IZEOF_PTRDIFF_T_
 17b0 5f203800 5f494f53 5f545255 4e432031  _ 8._IOS_TRUNC 1
 17c0 36005f5f 44454331 32385f4d 414e545f  6.__DEC128_MANT_
 17d0 4449475f 5f203334 005f5f55 53455f49  DIG__ 34.__USE_I
 17e0 534f4339 39203100 5f5f494e 5433325f  SOC99 1.__INT32_
 17f0 54595045 5f5f2069 6e74005f 5f4b4552  TYPE__ int.__KER
 1800 4e454c5f 53545249 43545f4e 414d4553  NEL_STRICT_NAMES
 1810 005f5f55 33325f54 59504520 756e7369  .__U32_TYPE unsi
 1820 676e6564 20696e74 005f5f63 6f64655f  gned int.__code_
 1830 6d6f6465 6c5f736d 616c6c5f 5f203100  model_small__ 1.
 1840 5f5f5553 455f4953 4f433935 005f5f46  __USE_ISOC95.__F
 1850 4c543634 585f4841 535f4445 4e4f524d  LT64X_HAS_DENORM
 1860 5f5f2031 005f5f44 45433332 5f4d4158  __ 1.__DEC32_MAX
 1870 5f455850 5f5f2039 37005f49 4f4e4246  _EXP__ 97._IONBF
 1880 2032005f 5f555345 5f49534f 43393900   2.__USE_ISOC99.
 1890 73697a65 5f740073 74646572 72207374  size_t.stderr st
 18a0 64657272 005f7674 61626c65 5f6f6666  derr._vtable_off
 18b0 73657400 5f475f49 4f5f494f 5f46494c  set._G_IO_IO_FIL
 18c0 455f5645 5253494f 4e203078 32303030  E_VERSION 0x2000
 18d0 31005f49 4f5f5449 45445f50 55545f47  1._IO_TIED_PUT_G
 18e0 45542030 78343030 004c5f74 6d706e61  ET 0x400.L_tmpna
 18f0 6d203230 005f494f 5f636c65 616e7570  m 20._IO_cleanup
 1900 5f726567 696f6e5f 73746172 74285f66  _region_start(_f
 1910 63742c5f 66702920 005f5f53 5444435f  ct,_fp) .__STDC_
 1920 4945435f 3535395f 434f4d50 4c45585f  IEC_559_COMPLEX_
 1930 5f203100 5f5f474c 4942435f 5553455f  _ 1.__GLIBC_USE_
 1940 44455052 45434154 45445f47 45545320  DEPRECATED_GETS 
 1950 30005f49 4f5f4845 58203031 3030005f  0._IO_HEX 0100._
 1960 5f464c54 3634585f 4d494e5f 31305f45  _FLT64X_MIN_10_E
 1970 58505f5f 20282d34 39333129 005f5f73  XP__ (-4931).__s
 1980 7475625f 7075746d 73672000 5f494f5f  tub_putmsg ._IO_
 1990 72656164 5f626173 65005f5f 53544443  read_base.__STDC
 19a0 5f49534f 5f313036 34365f5f 20323031  _ISO_10646__ 201
 19b0 3730364c 005f5349 5a455f54 5f444546  706L._SIZE_T_DEF
 19c0 494e4544 5f20005f 5f424547 494e5f44  INED_ .__BEGIN_D
 19d0 45434c53 20005f49 4f5f7374 64696e20  ECLS ._IO_stdin 
 19e0 28285f49 4f5f4649 4c452a29 28265f49  ((_IO_FILE*)(&_I
 19f0 4f5f325f 315f7374 64696e5f 2929004e  O_2_1_stdin_)).N
 1a00 554c4c00 5f5f464c 54313238 5f4d4158  ULL.__FLT128_MAX
 1a10 5f31305f 4558505f 5f203439 3332005f  _10_EXP__ 4932._
 1a20 5f464c54 3132385f 4d494e5f 5f20332e  _FLT128_MIN__ 3.
 1a30 33363231 30333134 33313132 30393335  3621031431120935
 1a40 30363236 32363737 38313733 32313735  0626267781732175
 1a50 32363065 2d343933 32463132 38005f5f  260e-4932F128.__
 1a60 53555345 434f4e44 535f545f 54595045  SUSECONDS_T_TYPE
 1a70 205f5f53 59534341 4c4c5f53 4c4f4e47   __SYSCALL_SLONG
 1a80 5f545950 45005345 454b5f45 4e442032  _TYPE.SEEK_END 2
 1a90 005f5f49 4e545f46 41535438 5f574944  .__INT_FAST8_WID
 1aa0 54485f5f 2038005f 5f464c54 36345f4d  TH__ 8.__FLT64_M
 1ab0 494e5f31 305f4558 505f5f20 282d3330  IN_10_EXP__ (-30
 1ac0 3729005f 5f737475 625f6664 65746163  7).__stub_fdetac
 1ad0 6820005f 6e657874 005f5f44 424c5f4d  h ._next.__DBL_M
 1ae0 41585f5f 20282864 6f75626c 6529312e  AX__ ((double)1.
 1af0 37393736 39333133 34383632 33313537  7976931348623157
 1b00 30383134 35323734 32333733 31373034  0814527423731704
 1b10 33353765 2b333038 4c29005f 44454641  357e+308L)._DEFA
 1b20 554c545f 534f5552 43452031 005f5f52  ULT_SOURCE 1.__R
 1b30 4c494d5f 545f4d41 54434845 535f524c  LIM_T_MATCHES_RL
 1b40 494d3634 5f542031 005f5f61 6d643634  IM64_T 1.__amd64
 1b50 5f5f2031 005f5f5f 5f6d6273 74617465  __ 1.____mbstate
 1b60 5f745f64 6566696e 65642031 005f494f  _t_defined 1._IO
 1b70 5f44454c 4554455f 444f4e54 5f434c4f  _DELETE_DONT_CLO
 1b80 53452030 78343000 5f5f464c 5433325f  SE 0x40.__FLT32_
 1b90 44454349 4d414c5f 4449475f 5f203900  DECIMAL_DIG__ 9.
 1ba0 5f5f464c 54313238 5f444947 5f5f2033  __FLT128_DIG__ 3
 1bb0 33005f5f 55494e54 31365f54 5950455f  3.__UINT16_TYPE_
 1bc0 5f207368 6f727420 756e7369 676e6564  _ short unsigned
 1bd0 20696e74 005f5f48 4156455f 434f4c55   int.__HAVE_COLU
 1be0 4d4e2000 5f4f4c44 5f535444 494f5f4d  MN ._OLD_STDIO_M
 1bf0 41474943 20307846 41424330 30303000  AGIC 0xFABC0000.
 1c00 5f494f53 5f4e4f43 52454154 45203332  _IOS_NOCREATE 32
 1c10 005f5f57 43484152 5f574944 54485f5f  .__WCHAR_WIDTH__
 1c20 20333200 5f5f4743 435f4154 4f4d4943   32.__GCC_ATOMIC
 1c30 5f434841 525f4c4f 434b5f46 52454520  _CHAR_LOCK_FREE 
 1c40 32005f49 4f5f6d61 726b6572 005f5f42  2._IO_marker.__B
 1c50 49474745 53545f41 4c49474e 4d454e54  IGGEST_ALIGNMENT
 1c60 5f5f2031 36005f5f 4c4f4e47 5f4c4f4e  __ 16.__LONG_LON
 1c70 475f4d41 585f5f20 30783766 66666666  G_MAX__ 0x7fffff
 1c80 66666666 66666666 66664c4c 005f5f55  ffffffffffLL.__U
 1c90 4c4f4e47 33325f54 59504520 756e7369  LONG32_TYPE unsi
 1ca0 676e6564 20696e74 005f5f55 494e545f  gned int.__UINT_
 1cb0 4c454153 5431365f 54595045 5f5f2073  LEAST16_TYPE__ s
 1cc0 686f7274 20756e73 69676e65 6420696e  hort unsigned in
 1cd0 74005f5f 464c545f 4d41585f 31305f45  t.__FLT_MAX_10_E
 1ce0 58505f5f 20333800 5f494f5f 534b4950  XP__ 38._IO_SKIP
 1cf0 57532030 31005f5f 464c5433 32585f45  WS 01.__FLT32X_E
 1d00 5053494c 4f4e5f5f 20322e32 32303434  PSILON__ 2.22044
 1d10 36303439 32353033 31333038 30383437  6049250313080847
 1d20 32363333 33363138 31363430 3632652d  26333618164062e-
 1d30 31364633 3278004e 554c4c20 2828766f  16F32x.NULL ((vo
 1d40 6964202a 29302900 61726776 005f5f55  id *)0).argv.__U
 1d50 53455f50 4f534958 5f494d50 4c494349  SE_POSIX_IMPLICI
 1d60 544c5920 31005f49 4f5f6665 6f665f75  TLY 1._IO_feof_u
 1d70 6e6c6f63 6b656428 5f5f6670 29202828  nlocked(__fp) ((
 1d80 285f5f66 70292d3e 5f666c61 67732026  (__fp)->_flags &
 1d90 205f494f 5f454f46 5f534545 4e292021   _IO_EOF_SEEN) !
 1da0 3d203029 005f5f4e 4f5f494e 4c494e45  = 0).__NO_INLINE
 1db0 5f5f2031 005f494f 5f737464 65727220  __ 1._IO_stderr 
 1dc0 28285f49 4f5f4649 4c452a29 28265f49  ((_IO_FILE*)(&_I
 1dd0 4f5f325f 315f7374 64657272 5f292900  O_2_1_stderr_)).
 1de0 5f5f7661 5f617267 5f706163 6b282920  __va_arg_pack() 
 1df0 5f5f6275 696c7469 6e5f7661 5f617267  __builtin_va_arg
 1e00 5f706163 6b202829 005f5f46 4c545f4d  _pack ().__FLT_M
 1e10 414e545f 4449475f 5f203234 005f5f44  ANT_DIG__ 24.__D
 1e20 41444452 5f545f54 59504520 5f5f5333  ADDR_T_TYPE __S3
 1e30 325f5459 5045005f 5f464c54 36345f44  2_TYPE.__FLT64_D
 1e40 4543494d 414c5f44 49475f5f 20313700  ECIMAL_DIG__ 17.
 1e50 5f5f4743 435f4841 56455f53 594e435f  __GCC_HAVE_SYNC_
 1e60 434f4d50 4152455f 414e445f 53574150  COMPARE_AND_SWAP
 1e70 5f342031 005f5f46 4c543332 5f4d494e  _4 1.__FLT32_MIN
 1e80 5f455850 5f5f2028 2d313235 29005f5f  _EXP__ (-125).__
 1e90 53495a45 5f545950 455f5f20 6c6f6e67  SIZE_TYPE__ long
 1ea0 20756e73 69676e65 6420696e 74005f5f   unsigned int.__
 1eb0 4c44424c 5f4d4158 5f5f2031 2e313839  LDBL_MAX__ 1.189
 1ec0 37333134 39353335 37323331 37363530  7314953572317650
 1ed0 32313236 33383533 30333039 37303231  2126385303097021
 1ee0 652b3439 33324c00 5f5f4445 435f4556  e+4932L.__DEC_EV
 1ef0 414c5f4d 4554484f 445f5f20 32005f5f  AL_METHOD__ 2.__
 1f00 464c545f 4d41585f 5f20332e 34303238  FLT_MAX__ 3.4028
 1f10 32333436 36333835 32383835 39383131  2346638528859811
 1f20 37303431 38333438 34353136 39323565  704183484516925e
 1f30 2b333846 005f494f 5f756964 5f74205f  +38F._IO_uid_t _
 1f40 5f756964 5f74005f 5f44424c 5f4d494e  _uid_t.__DBL_MIN
 1f50 5f31305f 4558505f 5f20282d 33303729  _10_EXP__ (-307)
 1f60 005f494f 5f325f31 5f737464 6572725f  ._IO_2_1_stderr_
 1f70 005f5f55 494e5433 325f4d41 585f5f20  .__UINT32_MAX__ 
 1f80 30786666 66666666 66665500 5f494f5f  0xffffffffU._IO_
 1f90 4f435420 30343000 5f5f464c 54313238  OCT 040.__FLT128
 1fa0 5f484153 5f494e46 494e4954 595f5f20  _HAS_INFINITY__ 
 1fb0 31005f6d 6f646500 5f494f5f 48415645  1._mode._IO_HAVE
 1fc0 5f53545f 424c4b53 495a4520 5f475f48  _ST_BLKSIZE _G_H
 1fd0 4156455f 53545f42 4c4b5349 5a45005f  AVE_ST_BLKSIZE._
 1fe0 5f464c54 36345f48 41535f44 454e4f52  _FLT64_HAS_DENOR
 1ff0 4d5f5f20 31005f5f 464c545f 4556414c  M__ 1.__FLT_EVAL
 2000 5f4d4554 484f445f 5f203000 5f5f4653  _METHOD__ 0.__FS
 2010 424c4b43 4e545f54 5f545950 45205f5f  BLKCNT_T_TYPE __
 2020 53595343 414c4c5f 554c4f4e 475f5459  SYSCALL_ULONG_TY
 2030 5045005f 5f464c54 3332585f 4841535f  PE.__FLT32X_HAS_
 2040 44454e4f 524d5f5f 2031005f 5f783836  DENORM__ 1.__x86
 2050 5f36345f 5f203100 5f5f464c 54363458  _64__ 1.__FLT64X
 2060 5f4d4158 5f455850 5f5f2031 36333834  _MAX_EXP__ 16384
 2070 005f5f56 45525349 4f4e5f5f 2022372e  .__VERSION__ "7.
 2080 332e3022 005f494f 5f4c494e 4b454420  3.0"._IO_LINKED 
 2090 30783830 005f5f52 45444952 45435428  0x80.__REDIRECT(
 20a0 6e616d65 2c70726f 746f2c61 6c696173  name,proto,alias
 20b0 29206e61 6d652070 726f746f 205f5f61  ) name proto __a
 20c0 736d5f5f 20285f5f 41534d4e 414d4520  sm__ (__ASMNAME 
 20d0 2823616c 69617329 29005f5f 4653424c  (#alias)).__FSBL
 20e0 4b434e54 36345f54 5f545950 45205f5f  KCNT64_T_TYPE __
 20f0 55515541 445f5459 5045005f 5f464c54  UQUAD_TYPE.__FLT
 2100 3634585f 4d41585f 5f20312e 31383937  64X_MAX__ 1.1897
 2110 33313439 35333537 32333137 36353032  3149535723176502
 2120 31323633 38353330 33303937 30323165  126385303097021e
 2130 2b343933 32463634 78005f49 4f5f7265  +4932F64x._IO_re
 2140 61645f70 7472005f 5f53495a 455f5420  ad_ptr.__SIZE_T 
 2150 005f5f49 445f545f 54595045 205f5f55  .__ID_T_TYPE __U
 2160 33325f54 59504500 5f5f5349 5a455f54  32_TYPE.__SIZE_T
 2170 5f5f2000 5f494f5f 66756e6c 6f636b66  __ ._IO_funlockf
 2180 696c6528 5f667029 20005f5f 4b45595f  ile(_fp) .__KEY_
 2190 545f5459 5045205f 5f533332 5f545950  T_TYPE __S32_TYP
 21a0 45005f5f 494e545f 4c454153 5436345f  E.__INT_LEAST64_
 21b0 4d41585f 5f203078 37666666 66666666  MAX__ 0x7fffffff
 21c0 66666666 66666666 4c005f5f 494e545f  ffffffffL.__INT_
 21d0 4c454153 54385f57 49445448 5f5f2038  LEAST8_WIDTH__ 8
 21e0 005f5f4c 44424c5f 52454449 52315f4e  .__LDBL_REDIR1_N
 21f0 5448286e 616d652c 70726f74 6f2c616c  TH(name,proto,al
 2200 69617329 206e616d 65207072 6f746f20  ias) name proto 
 2210 5f5f5448 524f5700 5f5f5549 4e54385f  __THROW.__UINT8_
 2220 4d41585f 5f203078 6666005f 494f5f46  MAX__ 0xff._IO_F
 2230 4c414753 325f4e4f 5443414e 43454c20  LAGS2_NOTCANCEL 
 2240 32005f5f 616c7761 79735f69 6e6c696e  2.__always_inlin
 2250 65205f5f 696e6c69 6e65205f 5f617474  e __inline __att
 2260 72696275 74655f5f 2028285f 5f616c77  ribute__ ((__alw
 2270 6179735f 696e6c69 6e655f5f 2929005f  ays_inline__))._
 2280 5f55494e 5431365f 4d41585f 5f203078  _UINT16_MAX__ 0x
 2290 66666666 005f494f 5f4d4147 49432030  ffff._IO_MAGIC 0
 22a0 78464241 44303030 30005f5f 474c4942  xFBAD0000.__GLIB
 22b0 435f5553 45284629 205f5f47 4c494243  C_USE(F) __GLIBC
 22c0 5f555345 5f202323 2046005f 5f494e54  _USE_ ## F.__INT
 22d0 5f464153 5436345f 54595045 5f5f206c  _FAST64_TYPE__ l
 22e0 6f6e6720 696e7400 73746469 6e207374  ong int.stdin st
 22f0 64696e00 5f5f6174 74726962 7574655f  din.__attribute_
 2300 6e6f696e 6c696e65 5f5f205f 5f617474  noinline__ __att
 2310 72696275 74655f5f 2028285f 5f6e6f69  ribute__ ((__noi
 2320 6e6c696e 655f5f29 29005f5f 53544443  nline__)).__STDC
 2330 5f564552 53494f4e 5f5f2032 30313131  _VERSION__ 20111
 2340 324c005f 5f494e54 4d41585f 57494454  2L.__INTMAX_WIDT
 2350 485f5f20 3634005f 5f444543 33325f4d  H__ 64.__DEC32_M
 2360 41585f5f 20392e39 39393939 39453936  AX__ 9.999999E96
 2370 4446005f 5f474e55 435f5641 5f4c4953  DF.__GNUC_VA_LIS
 2380 5420005f 5f505452 44494646 5f4d4158  T .__PTRDIFF_MAX
 2390 5f5f2030 78376666 66666666 66666666  __ 0x7ffffffffff
 23a0 66666666 664c005f 5f555345 5f504f53  fffffL.__USE_POS
 23b0 49583139 39333039 005f5f49 4e545f4c  IX199309.__INT_L
 23c0 45415354 31365f54 5950455f 5f207368  EAST16_TYPE__ sh
 23d0 6f727420 696e7400 5f5f464c 5433325f  ort int.__FLT32_
 23e0 4d41585f 4558505f 5f203132 38005f5f  MAX_EXP__ 128.__
 23f0 676e755f 6c696e75 785f5f20 31005f5f  gnu_linux__ 1.__
 2400 5354445f 54595045 20747970 65646566  STD_TYPE typedef
 2410 005f5f4d 4f44455f 545f5459 5045205f  .__MODE_T_TYPE _
 2420 5f553332 5f545950 45005f5f 53495a45  _U32_TYPE.__SIZE
 2430 4f465f46 4c4f4154 3132385f 5f203136  OF_FLOAT128__ 16
 2440 005f5f47 4e55435f 53544443 5f494e4c  .__GNUC_STDC_INL
 2450 494e455f 5f203100 5f5f4442 4c5f4449  INE__ 1.__DBL_DI
 2460 475f5f20 3135005f 5f474343 5f41544f  G__ 15.__GCC_ATO
 2470 4d49435f 43484152 31365f54 5f4c4f43  MIC_CHAR16_T_LOC
 2480 4b5f4652 45452032 005f5f49 4e545f4c  K_FREE 2.__INT_L
 2490 45415354 385f4d41 585f5f20 30783766  EAST8_MAX__ 0x7f
 24a0 005f5f53 31365f54 59504520 73686f72  .__S16_TYPE shor
 24b0 7420696e 74005f5f 4c503634 5f5f2031  t int.__LP64__ 1
 24c0 005f5f53 59534341 4c4c5f57 4f524453  .__SYSCALL_WORDS
 24d0 495a4520 3634005f 5f474343 5f41544f  IZE 64.__GCC_ATO
 24e0 4d49435f 4c4f4e47 5f4c4f43 4b5f4652  MIC_LONG_LOCK_FR
 24f0 45452032 005f5f46 4c543332 585f4449  EE 2.__FLT32X_DI
 2500 475f5f20 3135005f 5f464c54 3332585f  G__ 15.__FLT32X_
 2510 4d414e54 5f444947 5f5f2035 33005f49  MANT_DIG__ 53._I
 2520 4f5f7772 6974655f 62617365 005f4c50  O_write_base._LP
 2530 36342031 005f4645 41545552 45535f48  64 1._FEATURES_H
 2540 2031005f 5f464c54 33325f44 49475f5f   1.__FLT32_DIG__
 2550 2036005f 5f465357 4f52445f 545f5459   6.__FSWORD_T_TY
 2560 5045205f 5f535953 43414c4c 5f534c4f  PE __SYSCALL_SLO
 2570 4e475f54 59504500 5f5f534c 4f4e4757  NG_TYPE.__SLONGW
 2580 4f52445f 54595045 206c6f6e 6720696e  ORD_TYPE long in
 2590 74005f49 4f5f325f 315f7374 64696e5f  t._IO_2_1_stdin_
 25a0 005f5f78 38365f36 34203100 5f5f464c  .__x86_64 1.__FL
 25b0 54363458 5f4d4158 5f31305f 4558505f  T64X_MAX_10_EXP_
 25c0 5f203439 3332005f 5f44424c 5f4d494e  _ 4932.__DBL_MIN
 25d0 5f5f2028 28646f75 626c6529 322e3232  __ ((double)2.22
 25e0 35303733 38353835 30373230 31333833  5073858507201383
 25f0 30393032 33323731 37333332 34303430  0902327173324040
 2600 36652d33 30384c29 005f494f 5f325f31  6e-308L)._IO_2_1
 2610 5f737464 6f75745f 005f5f55 494e545f  _stdout_.__UINT_
 2620 46415354 33325f4d 41585f5f 20307866  FAST32_MAX__ 0xf
 2630 66666666 66666666 66666666 66666655  fffffffffffffffU
 2640 4c005f5f 46494e49 54455f4d 4154485f  L.__FINITE_MATH_
 2650 4f4e4c59 5f5f2030 005f494f 5f736176  ONLY__ 0._IO_sav
 2660 655f6261 7365005f 5f553136 5f545950  e_base.__U16_TYP
 2670 4520756e 7369676e 65642073 686f7274  E unsigned short
 2680 20696e74 00454f46 20282d31 29005f5f   int.EOF (-1).__
 2690 464c5436 345f4d41 585f5f20 312e3739  FLT64_MAX__ 1.79
 26a0 37363933 31333438 36323331 35373038  7693134862315708
 26b0 31343532 37343233 37333137 30343335  1452742373170435
 26c0 37652b33 30384636 34005f5f 73697a65  7e+308F64.__size
 26d0 5f745f5f 20005f5f 55494e54 385f5459  _t__ .__UINT8_TY
 26e0 50455f5f 20756e73 69676e65 64206368  PE__ unsigned ch
 26f0 6172005f 494f5f66 696c655f 666c6167  ar._IO_file_flag
 2700 73205f66 6c616773 005f5f55 53455f58  s _flags.__USE_X
 2710 4f50454e 324b3858 5349005f 5f494e54  OPEN2K8XSI.__INT
 2720 5f464153 5433325f 54595045 5f5f206c  _FAST32_TYPE__ l
 2730 6f6e6720 696e7400 5f494f53 5f494e50  ong int._IOS_INP
 2740 55542031 005f5f47 43435f41 534d5f46  UT 1.__GCC_ASM_F
 2750 4c41475f 4f555450 5554535f 5f203100  LAG_OUTPUTS__ 1.
 2760 70757463 285f6368 2c5f6670 29205f49  putc(_ch,_fp) _I
 2770 4f5f7075 74632028 5f63682c 205f6670  O_putc (_ch, _fp
 2780 29005f5f 55494e54 5f4c4541 53543634  ).__UINT_LEAST64
 2790 5f4d4158 5f5f2030 78666666 66666666  _MAX__ 0xfffffff
 27a0 66666666 66666666 66554c00 5f5f504d  fffffffffUL.__PM
 27b0 54005f5f 55515541 445f5459 50452075  T.__UQUAD_TYPE u
 27c0 6e736967 6e656420 6c6f6e67 20696e74  nsigned long int
 27d0 005f5f45 4c465f5f 2031005f 5f464c54  .__ELF__ 1.__FLT
 27e0 3332585f 4d494e5f 5f20322e 32323530  32X_MIN__ 2.2250
 27f0 37333835 38353037 32303133 38333039  7385850720138309
 2800 30323332 37313733 33323430 34303665  023271733240406e
 2810 2d333038 46333278 005f5f55 494e5450  -308F32x.__UINTP
 2820 54525f54 5950455f 5f206c6f 6e672075  TR_TYPE__ long u
 2830 6e736967 6e656420 696e7400 5f5f494e  nsigned int.__IN
 2840 5431365f 43286329 2063005f 5f474343  T16_C(c) c.__GCC
 2850 5f484156 455f4457 41524632 5f434649  _HAVE_DWARF2_CFI
 2860 5f41534d 2031005f 5f53495a 454f465f  _ASM 1.__SIZEOF_
 2870 464c4f41 545f5f20 34005f5f 44454333  FLOAT__ 4.__DEC3
 2880 325f5355 424e4f52 4d414c5f 4d494e5f  2_SUBNORMAL_MIN_
 2890 5f20302e 30303030 3031452d 39354446  _ 0.000001E-95DF
 28a0 005f494f 5f49535f 41505045 4e44494e  ._IO_IS_APPENDIN
 28b0 47203078 31303030 005f5f46 4c543634  G 0x1000.__FLT64
 28c0 585f4841 535f5155 4945545f 4e414e5f  X_HAS_QUIET_NAN_
 28d0 5f203100 5f5f464c 545f4841 535f494e  _ 1.__FLT_HAS_IN
 28e0 46494e49 54595f5f 2031005f 494f535f  FINITY__ 1._IOS_
 28f0 4e4f5245 504c4143 45203634 005f5f53  NOREPLACE 64.__S
 2900 54445f54 59504500 5f5f5553 455f504f  TD_TYPE.__USE_PO
 2910 53495831 39393330 39203100 5f494f5f  SIX199309 1._IO_
 2920 73697a65 5f742073 697a655f 74005f5f  size_t size_t.__
 2930 494e4f36 345f545f 54595045 205f5f55  INO64_T_TYPE __U
 2940 51554144 5f545950 45005f5f 474e555f  QUAD_TYPE.__GNU_
 2950 4c494252 4152595f 5f203600 5f5f5354  LIBRARY__ 6.__ST
 2960 44435f5f 2031005f 5f676c69 62635f63  DC__ 1.__glibc_c
 2970 39395f66 6c657861 72725f61 7661696c  99_flexarr_avail
 2980 61626c65 2031005f 5f535345 325f5f20  able 1.__SSE2__ 
 2990 31005f5f 534c4f4e 4733325f 54595045  1.__SLONG32_TYPE
 29a0 20696e74 005f5f44 424c5f4d 41585f45   int.__DBL_MAX_E
 29b0 58505f5f 20313032 34005f5f 53495a45  XP__ 1024.__SIZE
 29c0 4f465f4c 4f4e475f 5f203800 5f5f4154  OF_LONG__ 8.__AT
 29d0 4f4d4943 5f434f4e 53554d45 2031005f  OMIC_CONSUME 1._
 29e0 5f555345 5f46494c 455f4f46 46534554  _USE_FILE_OFFSET
 29f0 3634005f 494f5f46 4c414753 325f4d4d  64._IO_FLAGS2_MM
 2a00 41502031 005f5f46 4c543332 5f4d494e  AP 1.__FLT32_MIN
 2a10 5f5f2031 2e313735 34393433 35303832  __ 1.17549435082
 2a20 32323837 35303739 36383733 36353337  2287507968736537
 2a30 32323232 34353638 652d3338 46333200  22224568e-38F32.
 2a40 5f5f5749 4e545f54 5950455f 5f20756e  __WINT_TYPE__ un
 2a50 7369676e 65642069 6e74005f 5f555345  signed int.__USE
 2a60 5f4d4953 43005f49 4f5f636c 65616e75  _MISC._IO_cleanu
 2a70 705f7265 67696f6e 5f656e64 285f446f  p_region_end(_Do
 2a80 69742920 005f5f49 4e543136 5f4d4158  it) .__INT16_MAX
 2a90 5f5f2030 78376666 66005f50 4f534958  __ 0x7fff._POSIX
 2aa0 5f435f53 4f555243 45203230 30383039  _C_SOURCE 200809
 2ab0 4c005f5f 53434841 525f5749 4454485f  L.__SCHAR_WIDTH_
 2ac0 5f203800 5f5f5549 4e543332 5f432863  _ 8.__UINT32_C(c
 2ad0 29206320 23232055 005f5f4c 44424c5f  ) c ## U.__LDBL_
 2ae0 4d494e5f 31305f45 58505f5f 20282d34  MIN_10_EXP__ (-4
 2af0 39333129 005f5354 44494f5f 55534553  931)._STDIO_USES
 2b00 5f494f53 54524541 4d20005f 5f53495a  _IOSTREAM .__SIZ
 2b10 454f465f 444f5542 4c455f5f 2038005f  EOF_DOUBLE__ 8._
 2b20 5f55494e 54385f43 28632920 63005f5f  _UINT8_C(c) c.__
 2b30 424c4b43 4e543634 5f545f54 59504520  BLKCNT64_T_TYPE 
 2b40 5f5f5351 5541445f 54595045 005f494f  __SQUAD_TYPE._IO
 2b50 5f535444 494f2030 34303030 30005f5f  _STDIO 040000.__
 2b60 5553455f 464f5254 4946595f 4c455645  USE_FORTIFY_LEVE
 2b70 4c005f5f 474c4942 435f5553 455f4c49  L.__GLIBC_USE_LI
 2b80 425f4558 5432005f 5f57494e 545f4d49  B_EXT2.__WINT_MI
 2b90 4e5f5f20 3055005f 5f4c4442 4c5f4d41  N__ 0U.__LDBL_MA
 2ba0 4e545f44 49475f5f 20363400 5f5f7061  NT_DIG__ 64.__pa
 2bb0 6431005f 5f706164 32005f5f 70616433  d1.__pad2.__pad3
 2bc0 005f5f70 61643400 5f5f7061 6435005f  .__pad4.__pad5._
 2bd0 5f535444 435f5554 465f3136 5f5f2031  _STDC_UTF_16__ 1
 2be0 005f5f4c 44424c5f 45505349 4c4f4e5f  .__LDBL_EPSILON_
 2bf0 5f20312e 30383432 30323137 32343835  _ 1.084202172485
 2c00 35303434 33343030 37343532 38303038  5044340074528008
 2c10 36393934 31373165 2d31394c 005f5f62  6994171e-19L.__b
 2c20 6f733028 70747229 205f5f62 75696c74  os0(ptr) __built
 2c30 696e5f6f 626a6563 745f7369 7a652028  in_object_size (
 2c40 7074722c 20302900 5f494f4c 42462031  ptr, 0)._IOLBF 1
 2c50 005f5f61 74747269 62757465 5f666f72  .__attribute_for
 2c60 6d61745f 6172675f 5f287829 205f5f61  mat_arg__(x) __a
 2c70 74747269 62757465 5f5f2028 285f5f66  ttribute__ ((__f
 2c80 6f726d61 745f6172 675f5f20 28782929  ormat_arg__ (x))
 2c90 29005f5f 5f5f4649 4c455f64 6566696e  ).____FILE_defin
 2ca0 65642031 005f4249 54535f53 5444494f  ed 1._BITS_STDIO
 2cb0 5f4c494d 5f482031 005f5f4c 44424c5f  _LIM_H 1.__LDBL_
 2cc0 4841535f 494e4649 4e495459 5f5f2031  HAS_INFINITY__ 1
 2cd0 005f5f55 53455f50 4f534958 2031005f  .__USE_POSIX 1._
 2ce0 5f494e4f 5f545f4d 41544348 45535f49  _INO_T_MATCHES_I
 2cf0 4e4f3634 5f542031 005f5f47 43435f49  NO64_T 1.__GCC_I
 2d00 45435f35 35395f43 4f4d504c 45582032  EC_559_COMPLEX 2
 2d10 005f5f53 49475f41 544f4d49 435f4d49  .__SIG_ATOMIC_MI
 2d20 4e5f5f20 282d5f5f 5349475f 41544f4d  N__ (-__SIG_ATOM
 2d30 49435f4d 41585f5f 202d2031 29005f49  IC_MAX__ - 1)._I
 2d40 4f5f494e 5f424143 4b555020 30783130  O_IN_BACKUP 0x10
 2d50 30005f49 4f5f666c 6f636b66 696c6528  0._IO_flockfile(
 2d60 5f667029 20005f5f 53495a45 4f465f57  _fp) .__SIZEOF_W
 2d70 43484152 5f545f5f 2034005f 5f617474  CHAR_T__ 4.__att
 2d80 72696275 74655f64 65707265 63617465  ribute_deprecate
 2d90 645f5f20 5f5f6174 74726962 7574655f  d__ __attribute_
 2da0 5f202828 5f5f6465 70726563 61746564  _ ((__deprecated
 2db0 5f5f2929 005f5f46 4c543132 385f4d49  __)).__FLT128_MI
 2dc0 4e5f3130 5f455850 5f5f2028 2d343933  N_10_EXP__ (-493
 2dd0 3129005f 5f464c4f 41545f57 4f52445f  1).__FLOAT_WORD_
 2de0 4f524445 525f5f20 5f5f4f52 4445525f  ORDER__ __ORDER_
 2df0 4c495454 4c455f45 4e444941 4e5f5f00  LITTLE_ENDIAN__.
 2e00 5f5f4743 435f4841 56455f53 594e435f  __GCC_HAVE_SYNC_
 2e10 434f4d50 4152455f 414e445f 53574150  COMPARE_AND_SWAP
 2e20 5f322031 005f475f 48415645 5f4d5245  _2 1._G_HAVE_MRE
 2e30 4d415020 31005f5f 44454333 325f4d41  MAP 1.__DEC32_MA
 2e40 4e545f44 49475f5f 2037005f 5f464c54  NT_DIG__ 7.__FLT
 2e50 33325f44 454e4f52 4d5f4d49 4e5f5f20  32_DENORM_MIN__ 
 2e60 312e3430 31323938 34363433 32343831  1.40129846432481
 2e70 37303730 39323337 32393538 33323839  7070923729583289
 2e80 39313631 33652d34 35463332 005f5f6e  91613e-45F32.__n
 2e90 6565645f 73697a65 5f74005f 5f55494e  eed_size_t.__UIN
 2ea0 545f4641 53543136 5f4d4158 5f5f2030  T_FAST16_MAX__ 0
 2eb0 78666666 66666666 66666666 66666666  xfffffffffffffff
 2ec0 66554c00 5f5f6e65 65645f5f 5f76615f  fUL.__need___va_
 2ed0 6c697374 005f5f49 4e543332 5f4d4158  list.__INT32_MAX
 2ee0 5f5f2030 78376666 66666666 66005f49  __ 0x7fffffff._I
 2ef0 4f5f494e 5445524e 414c2030 3130005f  O_INTERNAL 010._
 2f00 5f5f696e 745f7369 7a655f74 5f682000  __int_size_t_h .
 2f10 5f5f676c 6962635f 6c696b65 6c792863  __glibc_likely(c
 2f20 6f6e6429 205f5f62 75696c74 696e5f65  ond) __builtin_e
 2f30 78706563 74202828 636f6e64 292c2031  xpect ((cond), 1
 2f40 29005f5f 41544f4d 49435f41 43515549  ).__ATOMIC_ACQUI
 2f50 52452032 005f5f55 494e5431 365f4328  RE 2.__UINT16_C(
 2f60 63292063 005f494f 5f464c41 4753325f  c) c._IO_FLAGS2_
 2f70 55534552 5f574255 46203800 5f5f494e  USER_WBUF 8.__IN
 2f80 5436345f 4d41585f 5f203078 37666666  T64_MAX__ 0x7fff
 2f90 66666666 66666666 66666666 4c005f5f  ffffffffffffL.__
 2fa0 6e656564 5f73697a 655f7420 005f5f62  need_size_t .__b
 2fb0 6f732870 74722920 5f5f6275 696c7469  os(ptr) __builti
 2fc0 6e5f6f62 6a656374 5f73697a 65202870  n_object_size (p
 2fd0 74722c20 5f5f5553 455f464f 52544946  tr, __USE_FORTIF
 2fe0 595f4c45 56454c20 3e203129 005f5f55  Y_LEVEL > 1).__U
 2ff0 574f5244 5f545950 4520756e 7369676e  WORD_TYPE unsign
 3000 6564206c 6f6e6720 696e7400 5f5f474c  ed long int.__GL
 3010 4942435f 4d494e4f 525f5f20 3237005f  IBC_MINOR__ 27._
 3020 5f534547 5f475320 31005f5f 5353455f  _SEG_GS 1.__SSE_
 3030 4d415448 5f5f2031 005f5f4e 4c494e4b  MATH__ 1.__NLINK
 3040 5f545f54 59504520 5f5f5359 5343414c  _T_TYPE __SYSCAL
 3050 4c5f554c 4f4e475f 54595045 005f5f55  L_ULONG_TYPE.__U
 3060 494e544d 41585f54 5950455f 5f206c6f  INTMAX_TYPE__ lo
 3070 6e672075 6e736967 6e656420 696e7400  ng unsigned int.
 3080 5f5f5553 455f584f 50454e32 4b005f5f  __USE_XOPEN2K.__
 3090 4c454146 202c205f 5f6c6561 665f5f00  LEAF , __leaf__.
 30a0 5f5f4445 43313238 5f4d4158 5f455850  __DEC128_MAX_EXP
 30b0 5f5f2036 31343500 5f494f5f 4c454654  __ 6145._IO_LEFT
 30c0 20303200 5f5f666f 72746966 795f6675   02.__fortify_fu
 30d0 6e637469 6f6e205f 5f657874 65726e5f  nction __extern_
 30e0 616c7761 79735f69 6e6c696e 65205f5f  always_inline __
 30f0 61747472 69627574 655f6172 74696669  attribute_artifi
 3100 6369616c 5f5f005f 494f5f42 4f4f4c41  cial__._IO_BOOLA
 3110 4c504841 20303230 30303030 005f5f53  LPHA 0200000.__S
 3120 49475f41 544f4d49 435f5749 4454485f  IG_ATOMIC_WIDTH_
 3130 5f203332 005f5f43 4f4e4341 5428782c  _ 32.__CONCAT(x,
 3140 79292078 20232320 79005f5f 61747472  y) x ## y.__attr
 3150 69627574 655f6465 70726563 61746564  ibute_deprecated
 3160 5f6d7367 5f5f286d 73672920 5f5f6174  _msg__(msg) __at
 3170 74726962 7574655f 5f202828 5f5f6465  tribute__ ((__de
 3180 70726563 61746564 5f5f2028 6d736729  precated__ (msg)
 3190 2929005f 5f534852 545f4d41 585f5f20  )).__SHRT_MAX__ 
 31a0 30783766 6666005f 5f474343 5f41544f  0x7fff.__GCC_ATO
 31b0 4d49435f 57434841 525f545f 4c4f434b  MIC_WCHAR_T_LOCK
 31c0 5f465245 45203200 5f494f5f 50454e44  _FREE 2._IO_PEND
 31d0 494e475f 4f555450 55545f43 4f554e54  ING_OUTPUT_COUNT
 31e0 285f6670 29202828 5f667029 2d3e5f49  (_fp) ((_fp)->_I
 31f0 4f5f7772 6974655f 70747220 2d20285f  O_write_ptr - (_
 3200 6670292d 3e5f494f 5f777269 74655f62  fp)->_IO_write_b
 3210 61736529 005f494f 5f555345 525f4c4f  ase)._IO_USER_LO
 3220 434b2030 78383030 30005f5f 4f524445  CK 0x8000.__ORDE
 3230 525f5044 505f454e 4449414e 5f5f2033  R_PDP_ENDIAN__ 3
 3240 34313200 5f494f5f 554e4946 4945445f  412._IO_UNIFIED_
 3250 4a554d50 5441424c 45532031 00544d50  JUMPTABLES 1.TMP
 3260 5f4d4158 20323338 33323800 5f494f5f  _MAX 238328._IO_
 3270 6e656564 5f6c6f63 6b285f66 70292028  need_lock(_fp) (
 3280 28285f66 70292d3e 5f666c61 67733220  ((_fp)->_flags2 
 3290 26205f49 4f5f464c 41475332 5f4e4545  & _IO_FLAGS2_NEE
 32a0 445f4c4f 434b2920 213d2030 29005f5f  D_LOCK) != 0).__
 32b0 464c545f 44454349 4d414c5f 4449475f  FLT_DECIMAL_DIG_
 32c0 5f203900 5f5f7761 726e6465 636c286e  _ 9.__warndecl(n
 32d0 616d652c 6d736729 20657874 65726e20  ame,msg) extern 
 32e0 766f6964 206e616d 65202876 6f696429  void name (void)
 32f0 205f5f61 74747269 62757465 5f5f2828   __attribute__((
 3300 5f5f7761 726e696e 675f5f20 286d7367  __warning__ (msg
 3310 29292900 5f5f464c 5436345f 4d41585f  ))).__FLT64_MAX_
 3320 31305f45 58505f5f 20333038 005f5f53  10_EXP__ 308.__S
 3330 5452494e 47287829 20237800 5f5f4649  TRING(x) #x.__FI
 3340 4c455f64 6566696e 65642031 005f5f4c  LE_defined 1.__L
 3350 44424c5f 4d494e5f 4558505f 5f20282d  DBL_MIN_EXP__ (-
 3360 31363338 3129005f 5f57494e 545f5749  16381).__WINT_WI
 3370 4454485f 5f203332 005f494f 5f53484f  DTH__ 32._IO_SHO
 3380 57504f53 20303230 3030005f 494f5f72  WPOS 02000._IO_r
 3390 6561645f 656e6400 5f5f464c 54363458  ead_end.__FLT64X
 33a0 5f4d494e 5f5f2033 2e333632 31303331  _MIN__ 3.3621031
 33b0 34333131 32303933 35303632 36323637  4311209350626267
 33c0 37383137 33323137 35323630 652d3439  781732175260e-49
 33d0 33324636 3478005f 494f535f 4f555450  32F64x._IOS_OUTP
 33e0 55542032 005f5f49 4e545f46 41535438  UT 2.__INT_FAST8
 33f0 5f4d4158 5f5f2030 78376600 5f5f5245  _MAX__ 0x7f.__RE
 3400 47495354 45525f50 52454649 585f5f20  GISTER_PREFIX__ 
 3410 005f5f46 4c543332 5f455053 494c4f4e  .__FLT32_EPSILON
 3420 5f5f2031 2e313932 30393238 39353530  __ 1.19209289550
 3430 37383132 35303030 30303030 30303030  7812500000000000
 3440 30303030 30303030 652d3746 3332005f  00000000e-7F32._
 3450 5f474c49 42435f49 4e544552 4e414c5f  _GLIBC_INTERNAL_
 3460 53544152 54494e47 5f484541 4445525f  STARTING_HEADER_
 3470 494d504c 454d454e 54415449 4f4e2000  IMPLEMENTATION .
 3480 5f5f5357 4f52445f 54595045 206c6f6e  __SWORD_TYPE lon
 3490 6720696e 74007368 6f727420 696e7400  g int.short int.
 34a0 5f5f4c4f 4e475f4d 41585f5f 20307837  __LONG_MAX__ 0x7
 34b0 66666666 66666666 66666666 6666664c  fffffffffffffffL
 34c0 005f5f73 7475625f 6765746d 73672000  .__stub_getmsg .
 34d0 5f5f4445 4336345f 4d41585f 4558505f  __DEC64_MAX_EXP_
 34e0 5f203338 35005f5f 464c5433 32585f4d  _ 385.__FLT32X_M
 34f0 494e5f31 305f4558 505f5f20 282d3330  IN_10_EXP__ (-30
 3500 3729005f 5f555345 5f504f53 49583200  7).__USE_POSIX2.
 3510 6c6f6e67 20696e74 005f494f 5f554e49  long int._IO_UNI
 3520 54425546 20303230 30303000 5f5f4f46  TBUF 020000.__OF
 3530 465f545f 54595045 205f5f53 59534341  F_T_TYPE __SYSCA
 3540 4c4c5f53 4c4f4e47 5f545950 45005f5f  LL_SLONG_TYPE.__
 3550 55494e54 4d41585f 43286329 20632023  UINTMAX_C(c) c #
 3560 2320554c 005f5f43 48415233 325f5459  # UL.__CHAR32_TY
 3570 50455f5f 20756e73 69676e65 6420696e  PE__ unsigned in
 3580 74005f5f 464c5436 34585f48 41535f49  t.__FLT64X_HAS_I
 3590 4e46494e 4954595f 5f203100 5f424954  NFINITY__ 1._BIT
 35a0 535f475f 434f4e46 49475f48 2031005f  S_G_CONFIG_H 1._
 35b0 5f444543 3132385f 4d494e5f 5f203145  _DEC128_MIN__ 1E
 35c0 2d363134 33444c00 5f5f464c 54333258  -6143DL.__FLT32X
 35d0 5f4d494e 5f455850 5f5f2028 2d313032  _MIN_EXP__ (-102
 35e0 3129005f 494f5f67 6574635f 756e6c6f  1)._IO_getc_unlo
 35f0 636b6564 285f6670 2920285f 494f5f42  cked(_fp) (_IO_B
 3600 45202828 5f667029 2d3e5f49 4f5f7265  E ((_fp)->_IO_re
 3610 61645f70 7472203e 3d20285f 6670292d  ad_ptr >= (_fp)-
 3620 3e5f494f 5f726561 645f656e 642c2030  >_IO_read_end, 0
 3630 29203f20 5f5f7566 6c6f7720 285f6670  ) ? __uflow (_fp
 3640 29203a20 2a28756e 7369676e 65642063  ) : *(unsigned c
 3650 68617220 2a292028 5f667029 2d3e5f49  har *) (_fp)->_I
 3660 4f5f7265 61645f70 74722b2b 29005f5f  O_read_ptr++).__
 3670 494e5450 54525f57 49445448 5f5f2036  INTPTR_WIDTH__ 6
 3680 34005f5f 494e4f5f 545f5459 5045205f  4.__INO_T_TYPE _
 3690 5f535953 43414c4c 5f554c4f 4e475f54  _SYSCALL_ULONG_T
 36a0 59504500 5f5f5549 4e545f46 41535438  YPE.__UINT_FAST8
 36b0 5f545950 455f5f20 756e7369 676e6564  _TYPE__ unsigned
 36c0 20636861 72005f5f 494e5433 325f4328   char.__INT32_C(
 36d0 63292063 005f5f46 5346494c 434e5436  c) c.__FSFILCNT6
 36e0 345f545f 54595045 205f5f55 51554144  4_T_TYPE __UQUAD
 36f0 5f545950 45005f5f 4c44424c 5f484153  _TYPE.__LDBL_HAS
 3700 5f515549 45545f4e 414e5f5f 2031005f  _QUIET_NAN__ 1._
 3710 5f474e55 435f5041 5443484c 4556454c  _GNUC_PATCHLEVEL
 3720 5f5f2030 005f5f57 494e545f 4d41585f  __ 0.__WINT_MAX_
 3730 5f203078 66666666 66666666 55005f5f  _ 0xffffffffU.__
 3740 61747472 69627574 655f6e6f 6e737472  attribute_nonstr
 3750 696e675f 5f20005f 494f5f4d 41474943  ing__ ._IO_MAGIC
 3760 5f4d4153 4b203078 46464646 30303030  _MASK 0xFFFF0000
 3770 005f5f6c 696e7578 2031005f 5f474c49  .__linux 1.__GLI
 3780 42435f55 53455f49 45435f36 30353539  BC_USE_IEC_60559
 3790 5f46554e 43535f45 5854005f 494f5f76  _FUNCS_EXT._IO_v
 37a0 615f6c69 7374205f 5f676e75 635f7661  a_list __gnuc_va
 37b0 5f6c6973 74005f47 5f425546 53495a20  _list._G_BUFSIZ 
 37c0 38313932 005f5f4c 44424c5f 52454449  8192.__LDBL_REDI
 37d0 5231286e 616d652c 70726f74 6f2c616c  R1(name,proto,al
 37e0 69617329 206e616d 65207072 6f746f00  ias) name proto.
 37f0 5f5f6174 74726962 7574655f 6d616c6c  __attribute_mall
 3800 6f635f5f 205f5f61 74747269 62757465  oc__ __attribute
 3810 5f5f2028 285f5f6d 616c6c6f 635f5f29  __ ((__malloc__)
 3820 29005f5f 55494e54 33325f54 5950455f  ).__UINT32_TYPE_
 3830 5f20756e 7369676e 65642069 6e74005f  _ unsigned int._
 3840 5f4c4442 4c5f5245 4449525f 4e544828  _LDBL_REDIR_NTH(
 3850 6e616d65 2c70726f 746f2920 6e616d65  name,proto) name
 3860 2070726f 746f205f 5f544852 4f57005f   proto __THROW._
 3870 5f555345 5f584f50 454e324b 38005f49  _USE_XOPEN2K8._I
 3880 4f5f5550 50455243 41534520 30313030  O_UPPERCASE 0100
 3890 3000505f 746d7064 69722022 2f746d70  0.P_tmpdir "/tmp
 38a0 22005f5f 52454449 52454354 5f4e5448  ".__REDIRECT_NTH
 38b0 286e616d 652c7072 6f746f2c 616c6961  (name,proto,alia
 38c0 7329206e 616d6520 70726f74 6f205f5f  s) name proto __
 38d0 61736d5f 5f20285f 5f41534d 4e414d45  asm__ (__ASMNAME
 38e0 20282361 6c696173 2929205f 5f544852   (#alias)) __THR
 38f0 4f57005f 5f555345 5f584f50 454e005f  OW.__USE_XOPEN._
 3900 5f464c54 3132385f 45505349 4c4f4e5f  _FLT128_EPSILON_
 3910 5f20312e 39323539 32393934 34333837  _ 1.925929944387
 3920 32333538 35333035 35393737 39343235  2358530559779425
 3930 38343932 37333265 2d333446 31323800  8492732e-34F128.
 3940 464f5045 4e5f4d41 58203136 005f494f  FOPEN_MAX 16._IO
 3950 5f46494c 455f706c 7573005f 504f5349  _FILE_plus._POSI
 3960 585f435f 534f5552 4345005f 5f544852  X_C_SOURCE.__THR
 3970 4f57205f 5f617474 72696275 74655f5f  OW __attribute__
 3980 2028285f 5f6e6f74 68726f77 5f5f205f   ((__nothrow__ _
 3990 5f4c4541 46292900 5f5f5349 5a454f46  _LEAF)).__SIZEOF
 39a0 5f4c4f4e 475f4c4f 4e475f5f 2038005f  _LONG_LONG__ 8._
 39b0 56415f4c 4953545f 44454649 4e454420  VA_LIST_DEFINED 
 39c0 005f5f55 494e545f 46415354 33325f54  .__UINT_FAST32_T
 39d0 5950455f 5f206c6f 6e672075 6e736967  YPE__ long unsig
 39e0 6e656420 696e7400 5f5f5348 52545f57  ned int.__SHRT_W
 39f0 49445448 5f5f2031 36005f5f 53534532  IDTH__ 16.__SSE2
 3a00 5f4d4154 485f5f20 31005f5f 5353495a  _MATH__ 1.__SSIZ
 3a10 455f545f 54595045 205f5f53 574f5244  E_T_TYPE __SWORD
 3a20 5f545950 45005f5f 5336345f 54595045  _TYPE.__S64_TYPE
 3a30 206c6f6e 6720696e 74005f5f 61747472   long int.__attr
 3a40 69627574 655f7075 72655f5f 205f5f61  ibute_pure__ __a
 3a50 74747269 62757465 5f5f2028 285f5f70  ttribute__ ((__p
 3a60 7572655f 5f292900 5f5f494e 544d4158  ure__)).__INTMAX
 3a70 5f432863 29206320 2323204c 005f494f  _C(c) c ## L._IO
 3a80 5f69636f 6e765f74 205f475f 69636f6e  _iconv_t _G_icon
 3a90 765f7400 5f5f494e 545f4641 53543332  v_t.__INT_FAST32
 3aa0 5f574944 54485f5f 20363400 5f5f5553  _WIDTH__ 64.__US
 3ab0 455f584f 50454e32 4b382031 005f5f49  E_XOPEN2K8 1.__I
 3ac0 4e545f4c 45415354 36345f57 49445448  NT_LEAST64_WIDTH
 3ad0 5f5f2036 34005f5f 474c4942 435f5553  __ 64.__GLIBC_US
 3ae0 455f4945 435f3630 3535395f 54595045  E_IEC_60559_TYPE
 3af0 535f4558 54203000 5f5f494e 54385f43  S_EXT 0.__INT8_C
 3b00 28632920 63005f5f 53495a45 4f465f50  (c) c.__SIZEOF_P
 3b10 4f494e54 45525f5f 2038005f 5f464c54  OINTER__ 8.__FLT
 3b20 36345f45 5053494c 4f4e5f5f 20322e32  64_EPSILON__ 2.2
 3b30 32303434 36303439 32353033 31333038  2044604925031308
 3b40 30383437 32363333 33363138 31363430  0847263336181640
 3b50 3632652d 31364636 34005f49 4f5f7661  62e-16F64._IO_va
 3b60 5f6c6973 74205f47 5f76615f 6c697374  _list _G_va_list
 3b70 005f5f46 4c543634 585f4d41 4e545f44  .__FLT64X_MANT_D
 3b80 49475f5f 20363400 5f444546 41554c54  IG__ 64._DEFAULT
 3b90 5f534f55 52434500 5f5f5743 4841525f  _SOURCE.__WCHAR_
 3ba0 4d41585f 5f203078 37666666 66666666  MAX__ 0x7fffffff
 3bb0 005f494f 5f425546 53495a20 5f475f42  ._IO_BUFSIZ _G_B
 3bc0 55465349 5a005f5f 46534649 4c434e54  UFSIZ.__FSFILCNT
 3bd0 5f545f54 59504520 5f5f5359 5343414c  _T_TYPE __SYSCAL
 3be0 4c5f554c 4f4e475f 54595045 005f494f  L_ULONG_TYPE._IO
 3bf0 5f424144 5f534545 4e203078 34303030  _BAD_SEEN 0x4000
 3c00 005f5f77 61726e61 74747228 6d736729  .__warnattr(msg)
 3c10 205f5f61 74747269 62757465 5f5f2828   __attribute__((
 3c20 5f5f7761 726e696e 675f5f20 286d7367  __warning__ (msg
 3c30 29292900 5f5f494e 545f5749 4454485f  ))).__INT_WIDTH_
 3c40 5f203332 005f5f4c 44424c5f 44454349  _ 32.__LDBL_DECI
 3c50 4d414c5f 4449475f 5f203231 005f5f47  MAL_DIG__ 21.__G
 3c60 43435f41 544f4d49 435f504f 494e5445  CC_ATOMIC_POINTE
 3c70 525f4c4f 434b5f46 52454520 32005f5f  R_LOCK_FREE 2.__
 3c80 73747562 5f5f5f63 6f6d7061 745f6264  stub___compat_bd
 3c90 666c7573 68200046 4f50454e 5f4d4158  flush .FOPEN_MAX
 3ca0 005f6c6f 636b005f 5f534547 5f465320  ._lock.__SEG_FS 
 3cb0 31005f5f 50286172 67732920 61726773  1.__P(args) args
 3cc0 005f5f54 494d455f 545f5459 5045205f  .__TIME_T_TYPE _
 3cd0 5f535953 43414c4c 5f534c4f 4e475f54  _SYSCALL_SLONG_T
 3ce0 59504500 5f5f5549 4e545f46 41535431  YPE.__UINT_FAST1
 3cf0 365f5459 50455f5f 206c6f6e 6720756e  6_TYPE__ long un
 3d00 7369676e 65642069 6e74005f 5f474c49  signed int.__GLI
 3d10 42435f5f 2032005f 494f5f73 74646f75  BC__ 2._IO_stdou
 3d20 74202828 5f494f5f 46494c45 2a292826  t ((_IO_FILE*)(&
 3d30 5f494f5f 325f315f 7374646f 75745f29  _IO_2_1_stdout_)
 3d40 29005f5f 55534552 5f4c4142 454c5f50  ).__USER_LABEL_P
 3d50 52454649 585f5f20 006c6f6e 6720756e  REFIX__ .long un
 3d60 7369676e 65642069 6e74005f 494f5f70  signed int._IO_p
 3d70 69645f74 205f5f70 69645f74 005f5f67  id_t __pid_t.__g
 3d80 6c696263 5f6d6163 726f5f77 61726e69  libc_macro_warni
 3d90 6e673128 6d657373 61676529 205f5072  ng1(message) _Pr
 3da0 61676d61 2028236d 65737361 67652900  agma (#message).
 3db0 5f5f4743 435f4154 4f4d4943 5f434841  __GCC_ATOMIC_CHA
 3dc0 5233325f 545f4c4f 434b5f46 52454520  R32_T_LOCK_FREE 
 3dd0 32005f6f 6c645f6f 66667365 74007374  2._old_offset.st
 3de0 64696e00 5f494f5f 46494c45 005f494f  din._IO_FILE._IO
 3df0 5f554e42 55464645 52454420 32005f5f  _UNBUFFERED 2.__
 3e00 43484152 5f424954 5f5f2038 005f5f43  CHAR_BIT__ 8.__C
 3e10 4c4f434b 5f545f54 59504520 5f5f5359  LOCK_T_TYPE __SY
 3e20 5343414c 4c5f534c 4f4e475f 54595045  SCALL_SLONG_TYPE
 3e30 005f5f41 544f4d49 435f5245 4c415845  .__ATOMIC_RELAXE
 3e40 44203000 5f494f5f 7373697a 655f7420  D 0._IO_ssize_t 
 3e50 5f5f7373 697a655f 74005f5f 53544443  __ssize_t.__STDC
 3e60 5f484f53 5445445f 5f203100 5f5f5349  _HOSTED__ 1.__SI
 3e70 5a455f57 49445448 5f5f2036 34005f5f  ZE_WIDTH__ 64.__
 3e80 52454449 52454354 5f4c4442 4c286e61  REDIRECT_LDBL(na
 3e90 6d652c70 726f746f 2c616c69 61732920  me,proto,alias) 
 3ea0 5f5f5245 44495245 43542028 6e616d65  __REDIRECT (name
 3eb0 2c207072 6f746f2c 20616c69 61732900  , proto, alias).
 3ec0 5f5f616c 77617973 5f696e6c 696e6500  __always_inline.
 3ed0 5f5f6861 735f696e 636c7564 65285354  __has_include(ST
 3ee0 5229205f 5f686173 5f696e63 6c756465  R) __has_include
 3ef0 5f5f2853 54522900 5f5f6e65 65645f5f  __(STR).__need__
 3f00 5f76615f 6c697374 20005f5f 41534d4e  _va_list .__ASMN
 3f10 414d4532 28707265 6669782c 636e616d  AME2(prefix,cnam
 3f20 6529205f 5f535452 494e4720 28707265  e) __STRING (pre
 3f30 66697829 20636e61 6d65005f 494f5f53  fix) cname._IO_S
 3f40 4349454e 54494649 43203034 30303000  CIENTIFIC 04000.
 3f50 5f494f5f 7065656b 635f756e 6c6f636b  _IO_peekc_unlock
 3f60 6564285f 66702920 285f494f 5f424520  ed(_fp) (_IO_BE 
 3f70 28285f66 70292d3e 5f494f5f 72656164  ((_fp)->_IO_read
 3f80 5f707472 203e3d20 285f6670 292d3e5f  _ptr >= (_fp)->_
 3f90 494f5f72 6561645f 656e642c 20302920  IO_read_end, 0) 
 3fa0 2626205f 5f756e64 6572666c 6f772028  && __underflow (
 3fb0 5f667029 203d3d20 454f4620 3f20454f  _fp) == EOF ? EO
 3fc0 46203a20 2a28756e 7369676e 65642063  F : *(unsigned c
 3fd0 68617220 2a292028 5f667029 2d3e5f49  har *) (_fp)->_I
 3fe0 4f5f7265 61645f70 74722900 5f5f4c4f  O_read_ptr).__LO
 3ff0 4e475f57 49445448 5f5f2036 34005f5f  NG_WIDTH__ 64.__
 4000 55494e54 36345f4d 41585f5f 20307866  UINT64_MAX__ 0xf
 4010 66666666 66666666 66666666 66666655  fffffffffffffffU
 4020 4c005f5f 53515541 445f5459 5045206c  L.__SQUAD_TYPE l
 4030 6f6e6720 696e7400 5f5f5553 455f584f  ong int.__USE_XO
 4040 50454e32 4b585349 005f5f61 74747269  PEN2KXSI.__attri
 4050 62757465 5f616c6c 6f635f73 697a655f  bute_alloc_size_
 4060 5f287061 72616d73 29205f5f 61747472  _(params) __attr
 4070 69627574 655f5f20 28285f5f 616c6c6f  ibute__ ((__allo
 4080 635f7369 7a655f5f 20706172 616d7329  c_size__ params)
 4090 29005f49 4f5f7769 6e745f74 2077696e  )._IO_wint_t win
 40a0 745f7400 5f5f6b38 2031005f 5f434841  t_t.__k8 1.__CHA
 40b0 5231365f 54595045 5f5f2073 686f7274  R16_TYPE__ short
 40c0 20756e73 69676e65 6420696e 74005f5f   unsigned int.__
 40d0 4743435f 41544f4d 49435f4c 4c4f4e47  GCC_ATOMIC_LLONG
 40e0 5f4c4f43 4b5f4652 45452032 005f5f44  _LOCK_FREE 2.__D
 40f0 45433634 5f4d494e 5f455850 5f5f2028  EC64_MIN_EXP__ (
 4100 2d333832 29005f5f 72657374 72696374  -382).__restrict
 4110 5f617272 205f5f72 65737472 69637400  _arr __restrict.
 4120 5f5f4154 4f4d4943 5f414351 5f52454c  __ATOMIC_ACQ_REL
 4130 2034005f 494f5f66 706f735f 74205f47   4._IO_fpos_t _G
 4140 5f66706f 735f7400 5f5f6174 74726962  _fpos_t.__attrib
 4150 7574655f 666f726d 61745f73 7472666d  ute_format_strfm
 4160 6f6e5f5f 28612c62 29205f5f 61747472  on__(a,b) __attr
 4170 69627574 655f5f20 28285f5f 666f726d  ibute__ ((__form
 4180 61745f5f 20285f5f 73747266 6d6f6e5f  at__ (__strfmon_
 4190 5f2c2061 2c206229 29290075 6e736967  _, a, b))).unsig
 41a0 6e656420 63686172 005f5f44 45433332  ned char.__DEC32
 41b0 5f4d494e 5f455850 5f5f2028 2d393429  _MIN_EXP__ (-94)
 41c0 005f494f 5f464958 45442030 31303030  ._IO_FIXED 01000
 41d0 30005f5f 494e5436 345f5459 50455f5f  0.__INT64_TYPE__
 41e0 206c6f6e 6720696e 74005f5f 464c545f   long int.__FLT_
 41f0 4d494e5f 5f20312e 31373534 39343335  MIN__ 1.17549435
 4200 30383232 32383735 30373936 38373336  0822287507968736
 4210 35333732 32323234 35363865 2d333846  53722224568e-38F
 4220 005f5f55 36345f54 59504520 756e7369  .__U64_TYPE unsi
 4230 676e6564 206c6f6e 6720696e 74005f73  gned long int._s
 4240 62756600 5f494f5f 76615f6c 69737400  buf._IO_va_list.
 4250 7374646f 75742073 74646f75 74005f5f  stdout stdout.__
 4260 5553455f 474e5500 5f5f5449 4d45525f  USE_GNU.__TIMER_
 4270 545f5459 50452076 6f696420 2a005f49  T_TYPE void *._I
 4280 4f5f7772 6974655f 70747200 5f5f4658  O_write_ptr.__FX
 4290 53525f5f 2031005f 5f4c4541 465f4154  SR__ 1.__LEAF_AT
 42a0 5452205f 5f617474 72696275 74655f5f  TR __attribute__
 42b0 2028285f 5f6c6561 665f5f29 29005f5f   ((__leaf__)).__
 42c0 494e5438 5f545950 455f5f20 7369676e  INT8_TYPE__ sign
 42d0 65642063 68617200 5f5f494e 545f4c45  ed char.__INT_LE
 42e0 41535433 325f5749 4454485f 5f203332  AST32_WIDTH__ 32
 42f0 005f5f53 59534341 4c4c5f53 4c4f4e47  .__SYSCALL_SLONG
 4300 5f545950 45205f5f 534c4f4e 47574f52  _TYPE __SLONGWOR
 4310 445f5459 5045005f 5f55494e 544d4158  D_TYPE.__UINTMAX
 4320 5f4d4158 5f5f2030 78666666 66666666  _MAX__ 0xfffffff
 4330 66666666 66666666 66554c00 5f5f676c  fffffffffUL.__gl
 4340 6962635f 636c616e 675f7072 65726571  ibc_clang_prereq
 4350 286d616a 2c6d696e 29203000 5f494f5f  (maj,min) 0._IO_
 4360 6261636b 75705f62 61736500 5f5f6c69  backup_base.__li
 4370 6e75785f 5f203100 5f5f5049 435f5f20  nux__ 1.__PIC__ 
 4380 32005f5f 494e545f 4c454153 5433325f  2.__INT_LEAST32_
 4390 54595045 5f5f2069 6e74005f 5f55494e  TYPE__ int.__UIN
 43a0 545f4c45 41535436 345f5459 50455f5f  T_LEAST64_TYPE__
 43b0 206c6f6e 6720756e 7369676e 65642069   long unsigned i
 43c0 6e74005f 494f5f70 7574635f 756e6c6f  nt._IO_putc_unlo
 43d0 636b6564 285f6368 2c5f6670 2920285f  cked(_ch,_fp) (_
 43e0 494f5f42 45202828 5f667029 2d3e5f49  IO_BE ((_fp)->_I
 43f0 4f5f7772 6974655f 70747220 3e3d2028  O_write_ptr >= (
 4400 5f667029 2d3e5f49 4f5f7772 6974655f  _fp)->_IO_write_
 4410 656e642c 20302920 3f205f5f 6f766572  end, 0) ? __over
 4420 666c6f77 20285f66 702c2028 756e7369  flow (_fp, (unsi
 4430 676e6564 20636861 72292028 5f636829  gned char) (_ch)
 4440 29203a20 28756e73 69676e65 64206368  ) : (unsigned ch
 4450 61722920 282a285f 6670292d 3e5f494f  ar) (*(_fp)->_IO
 4460 5f777269 74655f70 74722b2b 203d2028  _write_ptr++ = (
 4470 5f636829 2929005f 504f5349 585f534f  _ch)))._POSIX_SO
 4480 55524345 2031005f 494f5f44 4f4e545f  URCE 1._IO_DONT_
 4490 434c4f53 45203031 30303030 30005f5f  CLOSE 0100000.__
 44a0 474c4942 435f5553 455f4945 435f3630  GLIBC_USE_IEC_60
 44b0 3535395f 4246505f 45585400 5f5f5349  559_BFP_EXT.__SI
 44c0 5a455f4d 41585f5f 20307866 66666666  ZE_MAX__ 0xfffff
 44d0 66666666 66666666 66666655 4c005f5f  fffffffffffUL.__
 44e0 5549445f 545f5459 5045205f 5f553332  UID_T_TYPE __U32
 44f0 5f545950 45005f5f 554c4f4e 47574f52  _TYPE.__ULONGWOR
 4500 445f5459 50452075 6e736967 6e656420  D_TYPE unsigned 
 4510 6c6f6e67 20696e74 005f5f47 43435f41  long int.__GCC_A
 4520 544f4d49 435f5348 4f52545f 4c4f434b  TOMIC_SHORT_LOCK
 4530 5f465245 45203200 5f5f464c 54363458  _FREE 2.__FLT64X
 4540 5f444543 494d414c 5f444947 5f5f2032  _DECIMAL_DIG__ 2
 4550 31005345 454b5f53 45542030 005f5f55  1.SEEK_SET 0.__U
 4560 53455f58 4f50454e 5f455854 454e4445  SE_XOPEN_EXTENDE
 4570 44005f5f 494e545f 46415354 31365f4d  D.__INT_FAST16_M
 4580 41585f5f 20307837 66666666 66666666  AX__ 0x7ffffffff
 4590 66666666 6666664c 005f5f46 4c545f45  fffffffL.__FLT_E
 45a0 5053494c 4f4e5f5f 20312e31 39323039  PSILON__ 1.19209
 45b0 32383935 35303738 31323530 30303030  2895507812500000
 45c0 30303030 30303030 30303030 3030652d  00000000000000e-
 45d0 3746005f 5f464c54 36345f4d 494e5f45  7F.__FLT64_MIN_E
 45e0 58505f5f 20282d31 30323129 005f494f  XP__ (-1021)._IO
 45f0 535f4150 50454e44 2038005f 5f474c49  S_APPEND 8.__GLI
 4600 42435f49 4e544552 4e414c5f 53544152  BC_INTERNAL_STAR
 4610 54494e47 5f484541 4445525f 494d504c  TING_HEADER_IMPL
 4620 454d454e 54415449 4f4e005f 5f464c54  EMENTATION.__FLT
 4630 5f455641 4c5f4d45 54484f44 5f54535f  _EVAL_METHOD_TS_
 4640 31383636 315f335f 5f203000 5f5f4442  18661_3__ 0.__DB
 4650 4c5f4841 535f494e 46494e49 54595f5f  L_HAS_INFINITY__
 4660 2031005f 5f617474 72696275 74655f77   1.__attribute_w
 4670 61726e5f 756e7573 65645f72 6573756c  arn_unused_resul
 4680 745f5f20 5f5f6174 74726962 7574655f  t__ __attribute_
 4690 5f202828 5f5f7761 726e5f75 6e757365  _ ((__warn_unuse
 46a0 645f7265 73756c74 5f5f2929 005f5f49  d_result__)).__I
 46b0 4e543634 5f432863 29206320 2323204c  NT64_C(c) c ## L
 46c0 005f5f45 4e445f44 45434c53 20005f5f  .__END_DECLS .__
 46d0 464c545f 4841535f 51554945 545f4e41  FLT_HAS_QUIET_NA
 46e0 4e5f5f20 31005f5f 53495a45 4f465f49  N__ 1.__SIZEOF_I
 46f0 4e545f5f 2034005f 5f434c4f 434b4944  NT__ 4.__CLOCKID
 4700 5f545f54 59504520 5f5f5333 325f5459  _T_TYPE __S32_TY
 4710 5045005f 5f494e54 5f464153 5431365f  PE.__INT_FAST16_
 4720 54595045 5f5f206c 6f6e6720 696e7400  TYPE__ long int.
 4730 5f5f5354 44435f49 45435f35 35395f5f  __STDC_IEC_559__
 4740 2031005f 5f444543 3132385f 5355424e   1.__DEC128_SUBN
 4750 4f524d41 4c5f4d49 4e5f5f20 302e3030  ORMAL_MIN__ 0.00
 4760 30303030 30303030 30303030 30303030  0000000000000000
 4770 30303030 30303030 30303030 30303145  000000000000001E
 4780 2d363134 33444c00 5f5f6f66 665f7400  -6143DL.__off_t.
 4790 5f5f5553 455f4c41 52474546 494c4500  __USE_LARGEFILE.
 47a0 7369676e 65642063 68617200 5f5f5349  signed char.__SI
 47b0 5a454f46 5f464c4f 41543830 5f5f2031  ZEOF_FLOAT80__ 1
 47c0 36005f5f 464c5433 32585f48 41535f51  6.__FLT32X_HAS_Q
 47d0 55494554 5f4e414e 5f5f2031 005f5f44  UIET_NAN__ 1.__D
 47e0 424c5f4d 41585f31 305f4558 505f5f20  BL_MAX_10_EXP__ 
 47f0 33303800 5f5f5553 455f4d49 53432031  308.__USE_MISC 1
 4800 0073686f 72742075 6e736967 6e656420  .short unsigned 
 4810 696e7400 5f5f4758 585f4142 495f5645  int.__GXX_ABI_VE
 4820 5253494f 4e203130 3131005f 5f706963  RSION 1011.__pic
 4830 5f5f2032 005f5f41 544f4d49 435f5245  __ 2.__ATOMIC_RE
 4840 4c454153 45203300 5f5f5353 455f5f20  LEASE 3.__SSE__ 
 4850 31005f49 4f5f4e4f 5f524541 44532034  1._IO_NO_READS 4
 4860 005f5f47 4c494243 5f555345 5f494543  .__GLIBC_USE_IEC
 4870 5f363035 35395f46 554e4353 5f455854  _60559_FUNCS_EXT
 4880 2030006d 61696e00 5f53495a 45545f20   0.main._SIZET_ 
 4890 005f5f46 4c543132 385f4445 4e4f524d  .__FLT128_DENORM
 48a0 5f4d494e 5f5f2036 2e343735 31373531  _MIN__ 6.4751751
 48b0 31393433 38303235 31313039 32343433  1943802511092443
 48c0 38393538 32323736 34363535 652d3439  895822764655e-49
 48d0 36364631 3238005f 5f474c49 42435f55  66F128.__GLIBC_U
 48e0 53455f49 45435f36 30353539 5f424650  SE_IEC_60559_BFP
 48f0 5f455854 2030005f 5f737475 625f7265  _EXT 0.__stub_re
 4900 766f6b65 20005f5f 494e544d 41585f54  voke .__INTMAX_T
 4910 5950455f 5f206c6f 6e672069 6e74005f  YPE__ long int._
 4920 5f464c54 5f4d494e 5f455850 5f5f2028  _FLT_MIN_EXP__ (
 4930 2d313235 29005f5f 5353505f 5354524f  -125).__SSP_STRO
 4940 4e475f5f 2033005f 5f657272 6f726465  NG__ 3.__errorde
 4950 636c286e 616d652c 6d736729 20657874  cl(name,msg) ext
 4960 65726e20 766f6964 206e616d 65202876  ern void name (v
 4970 6f696429 205f5f61 74747269 62757465  oid) __attribute
 4980 5f5f2828 5f5f6572 726f725f 5f20286d  __((__error__ (m
 4990 73672929 29005f5f 44454331 32385f4d  sg))).__DEC128_M
 49a0 41585f5f 20392e39 39393939 39393939  AX__ 9.999999999
 49b0 39393939 39393939 39393939 39393939  9999999999999999
 49c0 39393939 39393939 45363134 34444c00  99999999E6144DL.
 49d0 5f5f464c 545f4d41 585f4558 505f5f20  __FLT_MAX_EXP__ 
 49e0 31323800 5f5f4154 4f4d4943 5f484c45  128.__ATOMIC_HLE
 49f0 5f414351 55495245 20363535 3336005f  _ACQUIRE 65536._
 4a00 5f4f4646 36345f54 5f545950 45205f5f  _OFF64_T_TYPE __
 4a10 53515541 445f5459 5045005f 5f555345  SQUAD_TYPE.__USE
 4a20 5f49534f 43313100 5f5f4445 565f545f  _ISOC11.__DEV_T_
 4a30 54595045 205f5f55 51554144 5f545950  TYPE __UQUAD_TYP
 4a40 45005f5f 4350555f 4d41534b 5f545950  E.__CPU_MASK_TYP
 4a50 45205f5f 53595343 414c4c5f 554c4f4e  E __SYSCALL_ULON
 4a60 475f5459 5045005f 5f55494e 545f4c45  G_TYPE.__UINT_LE
 4a70 41535433 325f4d41 585f5f20 30786666  AST32_MAX__ 0xff
 4a80 66666666 66665500 5f494f5f 42452865  ffffffU._IO_BE(e
 4a90 7870722c 72657329 205f5f62 75696c74  xpr,res) __built
 4aa0 696e5f65 78706563 74202828 65787072  in_expect ((expr
 4ab0 292c2072 65732900 5f5f4153 4d4e414d  ), res).__ASMNAM
 4ac0 4528636e 616d6529 205f5f41 534d4e41  E(cname) __ASMNA
 4ad0 4d453220 285f5f55 5345525f 4c414245  ME2 (__USER_LABE
 4ae0 4c5f5052 45464958 5f5f2c20 636e616d  L_PREFIX__, cnam
 4af0 6529005f 5f464c54 3332585f 4d41585f  e).__FLT32X_MAX_
 4b00 31305f45 58505f5f 20333038 005f5f61  10_EXP__ 308.__a
 4b10 6d643634 2031005f 5f574f52 4453495a  md64 1.__WORDSIZ
 4b20 45203634 005f5f75 6e697820 31005f63  E 64.__unix 1._c
 4b30 6861696e 005f5f46 4c543634 5f44454e  hain.__FLT64_DEN
 4b40 4f524d5f 4d494e5f 5f20342e 39343036  ORM_MIN__ 4.9406
 4b50 35363435 38343132 34363534 34313736  5645841246544176
 4b60 35363837 39323836 38323231 33373265  568792868221372e
 4b70 2d333234 46363400 4c5f6374 65726d69  -324F64.L_ctermi
 4b80 64203900 5f5f5054 52444946 465f5459  d 9.__PTRDIFF_TY
 4b90 50455f5f 206c6f6e 6720696e 74005f5f  PE__ long int.__
 4ba0 464c5433 325f4d41 585f3130 5f455850  FLT32_MAX_10_EXP
 4bb0 5f5f2033 38005f5f 574f5244 53495a45  __ 38.__WORDSIZE
 4bc0 5f54494d 4536345f 434f4d50 41543332  _TIME64_COMPAT32
 4bd0 2031005f 5f464c54 3132385f 44454349   1.__FLT128_DECI
 4be0 4d414c5f 4449475f 5f203336 005f5f50  MAL_DIG__ 36.__P
 4bf0 54524449 46465f57 49445448 5f5f2036  TRDIFF_WIDTH__ 6
 4c00 34005f5f 494e545f 4c454153 5433325f  4.__INT_LEAST32_
 4c10 4d41585f 5f203078 37666666 66666666  MAX__ 0x7fffffff
 4c20 005f5f55 494e545f 46415354 36345f54  .__UINT_FAST64_T
 4c30 5950455f 5f206c6f 6e672075 6e736967  YPE__ long unsig
 4c40 6e656420 696e7400 5f5f7374 75625f73  ned int.__stub_s
 4c50 73746b20 005f494f 5f66706f 7336345f  stk ._IO_fpos64_
 4c60 74205f47 5f66706f 7336345f 74005f5f  t _G_fpos64_t.__
 4c70 5448524f 574e4c20 5f5f6174 74726962  THROWNL __attrib
 4c80 7574655f 5f202828 5f5f6e6f 7468726f  ute__ ((__nothro
 4c90 775f5f29 29005f5f 4c44424c 5f4d4158  w__)).__LDBL_MAX
 4ca0 5f31305f 4558505f 5f203439 3332005f  _10_EXP__ 4932._
 4cb0 5f444543 36345f4d 494e5f5f 2031452d  _DEC64_MIN__ 1E-
 4cc0 33383344 44005f5f 464c5433 325f4d41  383DD.__FLT32_MA
 4cd0 585f5f20 332e3430 32383233 34363633  X__ 3.4028234663
 4ce0 38353238 38353938 31313730 34313833  8528859811704183
 4cf0 34383435 31363932 35652b33 38463332  484516925e+38F32
 4d00 005f5f44 424c5f45 5053494c 4f4e5f5f  .__DBL_EPSILON__
 4d10 20282864 6f75626c 6529322e 32323034   ((double)2.2204
 4d20 34363034 39323530 33313330 38303834  4604925031308084
 4d30 37323633 33333631 38313634 30363265  726333618164062e
 4d40 2d31364c 29005f63 75725f63 6f6c756d  -16L)._cur_colum
 4d50 6e00756e 69782031 005f5f50 5241474d  n.unix 1.__PRAGM
 4d60 415f5245 44454649 4e455f45 58544e41  A_REDEFINE_EXTNA
 4d70 4d452031 005f5f53 49475f41 544f4d49  ME 1.__SIG_ATOMI
 4d80 435f5459 50455f5f 20696e74 005f5f46  C_TYPE__ int.__F
 4d90 4c543634 585f4445 4e4f524d 5f4d494e  LT64X_DENORM_MIN
 4da0 5f5f2033 2e363435 31393935 33313838  __ 3.64519953188
 4db0 32343734 36303235 32383430 35393333  2474602528405933
 4dc0 36313934 31393832 652d3439 35314636  61941982e-4951F6
 4dd0 3478005f 5f555345 5f504f53 4958005f  4x.__USE_POSIX._
 4de0 5f464c54 3132385f 4841535f 44454e4f  _FLT128_HAS_DENO
 4df0 524d5f5f 2031005f 494f5f43 55525245  RM__ 1._IO_CURRE
 4e00 4e544c59 5f505554 54494e47 20307838  NTLY_PUTTING 0x8
 4e10 3030005f 5f44424c 5f444543 494d414c  00.__DBL_DECIMAL
 4e20 5f444947 5f5f2031 37005f5f 4c44424c  _DIG__ 17.__LDBL
 4e30 5f484153 5f44454e 4f524d5f 5f203100  _HAS_DENORM__ 1.
 4e40 5f756e75 73656432 005f494f 5f627566  _unused2._IO_buf
 4e50 5f626173 65005f5f 73747562 5f6c6368  _base.__stub_lch
 4e60 6d6f6420 005f5f46 4c543634 5f4d414e  mod .__FLT64_MAN
 4e70 545f4449 475f5f20 3533005f 5f444543  T_DIG__ 53.__DEC
 4e80 36345f4d 414e545f 4449475f 5f203136  64_MANT_DIG__ 16
 4e90 005f5f46 4c545f48 41535f44 454e4f52  .__FLT_HAS_DENOR
 4ea0 4d5f5f20 31005f5f 6f666636 345f7400  M__ 1.__off64_t.
 4eb0 5f5f4445 43494d41 4c5f4449 475f5f20  __DECIMAL_DIG__ 
 4ec0 323100                               21.             
Contents of section .comment:
 0000 00474343 3a202855 62756e74 7520372e  .GCC: (Ubuntu 7.
 0010 332e302d 32377562 756e7475 317e3138  3.0-27ubuntu1~18
 0020 2e303429 20372e33 2e3000             .04) 7.3.0.     
Contents of section .eh_frame:
 0000 14000000 00000000 017a5200 01781001  .........zR..x..
 0010 1b0c0708 90010000 1c000000 1c000000  ................
 0020 00000000 7d000000 00410e10 8602430d  ....}....A....C.
 0030 0602780c 07080000                    ..x.....        

Disassembly of section .group:

0000000000000000 <wm4.0.52c9fc51a3c7999e669b5384b1132782>:
   0:	01 00                	add    DWORD PTR [rax],eax
#include <stdio.h>

int main(int argc, char * argv[]) {
   2:	00 00                	add    BYTE PTR [rax],al
   4:	23 00                	and    eax,DWORD PTR [rax]
   6:	00 00                	add    BYTE PTR [rax],al
   8:	24 00                	and    al,0x0
	...

Disassembly of section .group:

0000000000000000 <wm4.stdcpredef.h.19.006d14bbbe0dc07ba9b1ce3fdc8e40d3>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	25 00 00 00 26       	and    eax,0x26000000
   9:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .group:

0000000000000000 <wm4.stdio.h.24.5c1b97eef3c86b7a2549420f69f4f128>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	27                   	(bad)  
   5:	00 00                	add    BYTE PTR [rax],al
   7:	00 28                	add    BYTE PTR [rax],ch
   9:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .group:

0000000000000000 <wm4.features.h.19.1be55438336ba50251e758fdf3017259>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	29 00                	sub    DWORD PTR [rax],eax
   6:	00 00                	add    BYTE PTR [rax],al
   8:	2a 00                	sub    al,BYTE PTR [rax]
	...

Disassembly of section .group:

0000000000000000 <wm4.cdefs.h.19.03c02fc74e2fa9127d728e4a4b2cb426>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	2b 00                	sub    eax,DWORD PTR [rax]
   6:	00 00                	add    BYTE PTR [rax],al
   8:	2c 00                	sub    al,0x0
	...

Disassembly of section .group:

0000000000000000 <wm4.wordsize.h.4.baf119258a1e53d8dba67ceac44ab6bc>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	2d 00 00 00 2e       	sub    eax,0x2e000000
   9:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .group:

0000000000000000 <wm4.cdefs.h.450.b8b622c02668a696f36e4785e7471677>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	2f                   	(bad)  
   5:	00 00                	add    BYTE PTR [rax],al
   7:	00 30                	add    BYTE PTR [rax],dh
   9:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .group:

0000000000000000 <wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	31 00                	xor    DWORD PTR [rax],eax
   6:	00 00                	add    BYTE PTR [rax],al
   8:	32 00                	xor    al,BYTE PTR [rax]
	...

Disassembly of section .group:

0000000000000000 <wm4.libcheaderstart.h.37.59f0e5f6a6103fb6c1d4abef1aacf8fb>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	33 00                	xor    eax,DWORD PTR [rax]
   6:	00 00                	add    BYTE PTR [rax],al
   8:	34 00                	xor    al,0x0
	...

Disassembly of section .group:

0000000000000000 <wm4.stdio.h.31.e39a94e203ad4e1d978c0fc68ce016ee>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	35 00 00 00 36       	xor    eax,0x36000000
   9:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .group:

0000000000000000 <wm4.stddef.h.187.2ff233552538c6ff9b8575ca8ea52cb3>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	37                   	(bad)  
   5:	00 00                	add    BYTE PTR [rax],al
   7:	00 38                	add    BYTE PTR [rax],bh
   9:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .group:

0000000000000000 <wm4.types.h.98.2414c985b07b6bc05c8aeed70b12c683>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	39 00                	cmp    DWORD PTR [rax],eax
   6:	00 00                	add    BYTE PTR [rax],al
   8:	3a 00                	cmp    al,BYTE PTR [rax]
	...

Disassembly of section .group:

0000000000000000 <wm4.typesizes.h.24.292526668b3d7d0c797f011b553fed17>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	3b 00                	cmp    eax,DWORD PTR [rax]
   6:	00 00                	add    BYTE PTR [rax],al
   8:	3c 00                	cmp    al,0x0
	...

Disassembly of section .group:

0000000000000000 <wm4._G_config.h.5.13ce51c385dcc835f259e1016a4e99c8>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	3d 00 00 00 3e       	cmp    eax,0x3e000000
   9:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .group:

0000000000000000 <wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	3f                   	(bad)  
   5:	00 00                	add    BYTE PTR [rax],al
   7:	00 40 00             	add    BYTE PTR [rax+0x0],al
	...

Disassembly of section .group:

0000000000000000 <wm4._G_config.h.51.34b843a0419f1549acdb14c3c66edb4e>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	41 00 00             	add    BYTE PTR [r8],al
   7:	00 42 00             	add    BYTE PTR [rdx+0x0],al
	...

Disassembly of section .group:

0000000000000000 <wm4.libio.h.37.a10f23ff0c406c3c402d761ed92ba872>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	43 00 00             	rex.XB add BYTE PTR [r8],al
   7:	00 44 00 00          	add    BYTE PTR [rax+rax*1+0x0],al
	...

Disassembly of section .group:

0000000000000000 <wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	45 00 00             	add    BYTE PTR [r8],r8b
   7:	00 46 00             	add    BYTE PTR [rsi+0x0],al
	...

Disassembly of section .group:

0000000000000000 <wm4.libio.h.55.2264ffedaa8d3f567283a630afe6e738>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	47 00 00             	rex.RXB add BYTE PTR [r8],r8b
   7:	00 48 00             	add    BYTE PTR [rax+0x0],cl
	...

Disassembly of section .group:

0000000000000000 <wm4.stdio.h.47.29bae166896130ef16bc0206bf46f074>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	49 00 00             	rex.WB add BYTE PTR [r8],al
   7:	00 4a 00             	add    BYTE PTR [rdx+0x0],cl
	...

Disassembly of section .group:

0000000000000000 <wm4.stdio_lim.h.19.e4b00b560d878dcfbc6635b3406640c5>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	4b 00 00             	rex.WXB add BYTE PTR [r8],al
   7:	00 4c 00 00          	add    BYTE PTR [rax+rax*1+0x0],cl
	...

Disassembly of section .group:

0000000000000000 <wm4.stdio.h.139.81d529aa6b2372d0b323a208652caa26>:
   0:	01 00                	add    DWORD PTR [rax],eax
   2:	00 00                	add    BYTE PTR [rax],al
   4:	4d 00 00             	rex.WRB add BYTE PTR [r8],r8b
   7:	00 4e 00             	add    BYTE PTR [rsi+0x0],cl
	...

Disassembly of section .text:

0000000000000000 <main>:
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp
   4:	48 83 ec 20          	sub    rsp,0x20
   8:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   f:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  16:	00 00 
  18:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  1c:	31 c0                	xor    eax,eax

	int a, b;

	b = 5;
  1e:	c7 45 f4 05 00 00 00 	mov    DWORD PTR [rbp-0xc],0x5

	printf ("Enter a number between 1 and 10 -> ");
  25:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 2c <main+0x2c>
			28: R_X86_64_PC32	.rodata-0x4
  2c:	b8 00 00 00 00       	mov    eax,0x0
  31:	e8 00 00 00 00       	call   36 <main+0x36>
			32: R_X86_64_PLT32	printf-0x4
	scanf ("%d", &a);
  36:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  3a:	48 89 c6             	mov    rsi,rax
  3d:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 44 <main+0x44>
			40: R_X86_64_PC32	.rodata+0x20
  44:	b8 00 00 00 00       	mov    eax,0x0
  49:	e8 00 00 00 00       	call   4e <main+0x4e>
			4a: R_X86_64_PLT32	__isoc99_scanf-0x4

	if (a > b) {
  4e:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  51:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
  54:	7d 0c                	jge    62 <main+0x62>
		printf ("The number was higher than 5!\n");
  56:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 5d <main+0x5d>
			59: R_X86_64_PC32	.rodata+0x23
  5d:	e8 00 00 00 00       	call   62 <main+0x62>
			5e: R_X86_64_PLT32	puts-0x4
  62:	b8 00 00 00 00       	mov    eax,0x0
	}

}
  67:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  6b:	64 48 33 14 25 28 00 	xor    rdx,QWORD PTR fs:0x28
  72:	00 00 
  74:	74 05                	je     7b <main+0x7b>
  76:	e8 00 00 00 00       	call   7b <main+0x7b>
			77: R_X86_64_PLT32	__stack_chk_fail-0x4
  7b:	c9                   	leave  
  7c:	c3                   	ret    

Disassembly of section .rodata:

0000000000000000 <.rodata>:
   0:	45 6e                	rex.RB outs dx,BYTE PTR ds:[rsi]
   2:	74 65                	je     69 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x69>
   4:	72 20                	jb     26 <.rodata+0x26>
   6:	61                   	(bad)  
   7:	20 6e 75             	and    BYTE PTR [rsi+0x75],ch
   a:	6d                   	ins    DWORD PTR es:[rdi],dx
   b:	62                   	(bad)  
   c:	65 72 20             	gs jb  2f <.rodata+0x2f>
   f:	62                   	(bad)  
  10:	65 74 77             	gs je  8a <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x8a>
  13:	65 65 6e             	gs outs dx,BYTE PTR gs:[rsi]
  16:	20 31                	and    BYTE PTR [rcx],dh
  18:	20 61 6e             	and    BYTE PTR [rcx+0x6e],ah
  1b:	64 20 31             	and    BYTE PTR fs:[rcx],dh
  1e:	30 20                	xor    BYTE PTR [rax],ah
  20:	2d 3e 20 00 25       	sub    eax,0x2500203e
  25:	64 00 54 68 65       	add    BYTE PTR fs:[rax+rbp*2+0x65],dl
  2a:	20 6e 75             	and    BYTE PTR [rsi+0x75],ch
  2d:	6d                   	ins    DWORD PTR es:[rdi],dx
  2e:	62                   	(bad)  
  2f:	65 72 20             	gs jb  52 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x52>
  32:	77 61                	ja     95 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x95>
  34:	73 20                	jae    56 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x56>
  36:	68 69 67 68 65       	push   0x65686769
  3b:	72 20                	jb     5d <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x5d>
  3d:	74 68                	je     a7 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0xa7>
  3f:	61                   	(bad)  
  40:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  41:	20                   	.byte 0x20
  42:	35                   	.byte 0x35
  43:	21 00                	and    DWORD PTR [rax],eax

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
int main(int argc, char * argv[]) {
   0:	5c                   	pop    rsp
   1:	03 00                	add    eax,DWORD PTR [rax]
   3:	00 04 00             	add    BYTE PTR [rax+rax*1],al
   6:	00 00                	add    BYTE PTR [rax],al
			6: R_X86_64_32	.debug_abbrev
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 01                	or     BYTE PTR [rcx],al
   c:	00 00                	add    BYTE PTR [rax],al
			c: R_X86_64_32	.debug_str+0xc4a
   e:	00 00                	add    BYTE PTR [rax],al
  10:	0c 00                	or     al,0x0
			11: R_X86_64_32	.debug_str+0xd47
	...
			15: R_X86_64_32	.debug_str+0x740
			19: R_X86_64_64	.text
	b = 5;
  1e:	00 00                	add    BYTE PTR [rax],al
  20:	00 7d 00             	add    BYTE PTR [rbp+0x0],bh
	...
			29: R_X86_64_32	.debug_line
			2d: R_X86_64_32	.debug_macro
	printf ("Enter a number between 1 and 10 -> ");
  2f:	00 00                	add    BYTE PTR [rax],al
  31:	02 00                	add    al,BYTE PTR [rax]
			32: R_X86_64_32	.debug_str+0x1890
  33:	00 00                	add    BYTE PTR [rax],al
  35:	00 02                	add    BYTE PTR [rdx],al
	scanf ("%d", &a);
  37:	d8 3c 00             	fdivr  DWORD PTR [rax+rax*1]
  3a:	00 00                	add    BYTE PTR [rax],al
  3c:	03 08                	add    ecx,DWORD PTR [rax]
  3e:	07                   	(bad)  
  3f:	00 00                	add    BYTE PTR [rax],al
			3f: R_X86_64_32	.debug_str+0x3d59
  41:	00 00                	add    BYTE PTR [rax],al
  43:	03 01                	add    eax,DWORD PTR [rcx]
  45:	08 00                	or     BYTE PTR [rax],al
			46: R_X86_64_32	.debug_str+0x419b
  47:	00 00                	add    BYTE PTR [rax],al
  49:	00 03                	add    BYTE PTR [rbx],al
  4b:	02 07                	add    al,BYTE PTR [rdi]
  4d:	00 00                	add    BYTE PTR [rax],al
			4d: R_X86_64_32	.debug_str+0x4801
	if (a > b) {
  4f:	00 00                	add    BYTE PTR [rax],al
  51:	03 04 07             	add    eax,DWORD PTR [rdi+rax*1]
  54:	00 00                	add    BYTE PTR [rax],al
			54: R_X86_64_32	.debug_str+0x630
		printf ("The number was higher than 5!\n");
  56:	00 00                	add    BYTE PTR [rax],al
  58:	03 01                	add    eax,DWORD PTR [rcx]
  5a:	06                   	(bad)  
  5b:	00 00                	add    BYTE PTR [rax],al
			5b: R_X86_64_32	.debug_str+0x47a0
  5d:	00 00                	add    BYTE PTR [rax],al
  5f:	03 02                	add    eax,DWORD PTR [rdx]
  61:	05 00 00 00 00       	add    eax,0x0
			62: R_X86_64_32	.debug_str+0x3496
  66:	04 04                	add    al,0x4
}
  68:	05 69 6e 74 00       	add    eax,0x746e69
  6d:	03 08                	add    ecx,DWORD PTR [rax]
  6f:	05 00 00 00 00       	add    eax,0x0
			70: R_X86_64_32	.debug_str+0x3510
  74:	02 00                	add    al,BYTE PTR [rax]
			75: R_X86_64_32	.debug_str+0x4788
  76:	00 00                	add    BYTE PTR [rax],al
  78:	00 03                	add    BYTE PTR [rbx],al
  7a:	8c 6d 00             	mov    WORD PTR [rbp+0x0],gs
  7d:	00 00                	add    BYTE PTR [rax],al
  7f:	02 00                	add    al,BYTE PTR [rax]
			80: R_X86_64_32	.debug_str+0x4ea6
  81:	00 00                	add    BYTE PTR [rax],al
  83:	00 03                	add    BYTE PTR [rbx],al
  85:	8d 6d 00             	lea    ebp,[rbp+0x0]
  88:	00 00                	add    BYTE PTR [rax],al
  8a:	05 08 06 08 92       	add    eax,0x92080608
  8f:	00 00                	add    BYTE PTR [rax],al
  91:	00 03                	add    BYTE PTR [rbx],al
  93:	01 06                	add    DWORD PTR [rsi],eax
  95:	00 00                	add    BYTE PTR [rax],al
			95: R_X86_64_32	.debug_str+0x29b
  97:	00 00                	add    BYTE PTR [rax],al
  99:	07                   	(bad)  
  9a:	92                   	xchg   edx,eax
  9b:	00 00                	add    BYTE PTR [rax],al
  9d:	00 08                	add    BYTE PTR [rax],cl
  9f:	00 00                	add    BYTE PTR [rax],al
			9f: R_X86_64_32	.debug_str+0x3de4
  a1:	00 00                	add    BYTE PTR [rax],al
  a3:	d8 04 f5 1e 02 00 00 	fadd   DWORD PTR [rsi*8+0x21e]
  aa:	09 00                	or     DWORD PTR [rax],eax
			ab: R_X86_64_32	.debug_str+0x7cd
  ac:	00 00                	add    BYTE PTR [rax],al
  ae:	00 04 f6             	add    BYTE PTR [rsi+rsi*8],al
  b1:	66 00 00             	data16 add BYTE PTR [rax],al
  b4:	00 00                	add    BYTE PTR [rax],al
  b6:	09 00                	or     DWORD PTR [rax],eax
			b7: R_X86_64_32	.debug_str+0x213a
  b8:	00 00                	add    BYTE PTR [rax],al
  ba:	00 04 fb             	add    BYTE PTR [rbx+rdi*8],al
  bd:	8c 00                	mov    WORD PTR [rax],es
  bf:	00 00                	add    BYTE PTR [rax],al
  c1:	08 09                	or     BYTE PTR [rcx],cl
  c3:	00 00                	add    BYTE PTR [rax],al
			c3: R_X86_64_32	.debug_str+0x338b
  c5:	00 00                	add    BYTE PTR [rax],al
  c7:	04 fc                	add    al,0xfc
  c9:	8c 00                	mov    WORD PTR [rax],es
  cb:	00 00                	add    BYTE PTR [rax],al
  cd:	10 09                	adc    BYTE PTR [rcx],cl
  cf:	00 00                	add    BYTE PTR [rax],al
			cf: R_X86_64_32	.debug_str+0x198c
  d1:	00 00                	add    BYTE PTR [rax],al
  d3:	04 fd                	add    al,0xfd
  d5:	8c 00                	mov    WORD PTR [rax],es
  d7:	00 00                	add    BYTE PTR [rax],al
  d9:	18 09                	sbb    BYTE PTR [rcx],cl
  db:	00 00                	add    BYTE PTR [rax],al
			db: R_X86_64_32	.debug_str+0x251e
  dd:	00 00                	add    BYTE PTR [rax],al
  df:	04 fe                	add    al,0xfe
  e1:	8c 00                	mov    WORD PTR [rax],es
  e3:	00 00                	add    BYTE PTR [rax],al
  e5:	20 09                	and    BYTE PTR [rcx],cl
  e7:	00 00                	add    BYTE PTR [rax],al
			e7: R_X86_64_32	.debug_str+0x427e
  e9:	00 00                	add    BYTE PTR [rax],al
  eb:	04 ff                	add    al,0xff
  ed:	8c 00                	mov    WORD PTR [rax],es
  ef:	00 00                	add    BYTE PTR [rax],al
  f1:	28 0a                	sub    BYTE PTR [rdx],cl
  f3:	00 00                	add    BYTE PTR [rax],al
			f3: R_X86_64_32	.debug_str+0x622
  f5:	00 00                	add    BYTE PTR [rax],al
  f7:	04 00                	add    al,0x0
  f9:	01 8c 00 00 00 30 0a 	add    DWORD PTR [rax+rax*1+0xa300000],ecx
 100:	00 00                	add    BYTE PTR [rax],al
			100: R_X86_64_32	.debug_str+0x4e49
 102:	00 00                	add    BYTE PTR [rax],al
 104:	04 01                	add    al,0x1
 106:	01 8c 00 00 00 38 0a 	add    DWORD PTR [rax+rax*1+0xa380000],ecx
 10d:	00 00                	add    BYTE PTR [rax],al
			10d: R_X86_64_32	.debug_str+0x314
 10f:	00 00                	add    BYTE PTR [rax],al
 111:	04 02                	add    al,0x2
 113:	01 8c 00 00 00 40 0a 	add    DWORD PTR [rax+rax*1+0xa400000],ecx
 11a:	00 00                	add    BYTE PTR [rax],al
			11a: R_X86_64_32	.debug_str+0x2659
 11c:	00 00                	add    BYTE PTR [rax],al
 11e:	04 04                	add    al,0x4
 120:	01 8c 00 00 00 48 0a 	add    DWORD PTR [rax+rax*1+0xa480000],ecx
 127:	00 00                	add    BYTE PTR [rax],al
			127: R_X86_64_32	.debug_str+0x435c
 129:	00 00                	add    BYTE PTR [rax],al
 12b:	04 05                	add    al,0x5
 12d:	01 8c 00 00 00 50 0a 	add    DWORD PTR [rax+rax*1+0xa500000],ecx
 134:	00 00                	add    BYTE PTR [rax],al
			134: R_X86_64_32	.debug_str+0x1066
 136:	00 00                	add    BYTE PTR [rax],al
 138:	04 06                	add    al,0x6
 13a:	01 8c 00 00 00 58 0a 	add    DWORD PTR [rax+rax*1+0xa580000],ecx
 141:	00 00                	add    BYTE PTR [rax],al
			141: R_X86_64_32	.debug_str+0x99d
 143:	00 00                	add    BYTE PTR [rax],al
 145:	04 08                	add    al,0x8
 147:	01 56 02             	add    DWORD PTR [rsi+0x2],edx
 14a:	00 00                	add    BYTE PTR [rax],al
 14c:	60                   	(bad)  
 14d:	0a 00                	or     al,BYTE PTR [rax]
			14e: R_X86_64_32	.debug_str+0x4b2e
 14f:	00 00                	add    BYTE PTR [rax],al
 151:	00 04 0a             	add    BYTE PTR [rdx+rcx*1],al
 154:	01 5c 02 00          	add    DWORD PTR [rdx+rax*1+0x0],ebx
 158:	00 68 0a             	add    BYTE PTR [rax+0xa],ch
 15b:	00 00                	add    BYTE PTR [rax],al
			15b: R_X86_64_32	.debug_str+0x1718
 15d:	00 00                	add    BYTE PTR [rax],al
 15f:	04 0c                	add    al,0xc
 161:	01 66 00             	add    DWORD PTR [rsi+0x0],esp
 164:	00 00                	add    BYTE PTR [rax],al
 166:	70 0a                	jo     172 <.debug_info+0x172>
 168:	00 00                	add    BYTE PTR [rax],al
			168: R_X86_64_32	.debug_str+0x8d6
 16a:	00 00                	add    BYTE PTR [rax],al
 16c:	04 10                	add    al,0x10
 16e:	01 66 00             	add    DWORD PTR [rsi+0x0],esp
 171:	00 00                	add    BYTE PTR [rax],al
 173:	74 0a                	je     17f <.debug_info+0x17f>
 175:	00 00                	add    BYTE PTR [rax],al
			175: R_X86_64_32	.debug_str+0x3dd2
 177:	00 00                	add    BYTE PTR [rax],al
 179:	04 12                	add    al,0x12
 17b:	01 74 00 00          	add    DWORD PTR [rax+rax*1+0x0],esi
 17f:	00 78 0a             	add    BYTE PTR [rax+0xa],bh
 182:	00 00                	add    BYTE PTR [rax],al
			182: R_X86_64_32	.debug_str+0x4d46
 184:	00 00                	add    BYTE PTR [rax],al
 186:	04 16                	add    al,0x16
 188:	01 4a 00             	add    DWORD PTR [rdx+0x0],ecx
 18b:	00 00                	add    BYTE PTR [rax],al
 18d:	80 0a 00             	or     BYTE PTR [rdx],0x0
			18f: R_X86_64_32	.debug_str+0x18a5
 190:	00 00                	add    BYTE PTR [rax],al
 192:	00 04 17             	add    BYTE PTR [rdi+rdx*1],al
 195:	01 58 00             	add    DWORD PTR [rax+0x0],ebx
 198:	00 00                	add    BYTE PTR [rax],al
 19a:	82                   	(bad)  
 19b:	0a 00                	or     al,BYTE PTR [rax]
			19c: R_X86_64_32	.debug_str+0x16e
 19d:	00 00                	add    BYTE PTR [rax],al
 19f:	00 04 18             	add    BYTE PTR [rax+rbx*1],al
 1a2:	01 62 02             	add    DWORD PTR [rdx+0x2],esp
 1a5:	00 00                	add    BYTE PTR [rax],al
 1a7:	83 0a 00             	or     DWORD PTR [rdx],0x0
			1a9: R_X86_64_32	.debug_str+0x3ca1
 1aa:	00 00                	add    BYTE PTR [rax],al
 1ac:	00 04 1c             	add    BYTE PTR [rsp+rbx*1],al
 1af:	01 72 02             	add    DWORD PTR [rdx+0x2],esi
 1b2:	00 00                	add    BYTE PTR [rax],al
 1b4:	88 0a                	mov    BYTE PTR [rdx],cl
 1b6:	00 00                	add    BYTE PTR [rax],al
			1b6: R_X86_64_32	.debug_str+0x15e8
 1b8:	00 00                	add    BYTE PTR [rax],al
 1ba:	04 25                	add    al,0x25
 1bc:	01 7f 00             	add    DWORD PTR [rdi+0x0],edi
 1bf:	00 00                	add    BYTE PTR [rax],al
 1c1:	90                   	nop
 1c2:	0a 00                	or     al,BYTE PTR [rax]
			1c3: R_X86_64_32	.debug_str+0x2bac
 1c4:	00 00                	add    BYTE PTR [rax],al
 1c6:	00 04 2d 01 8a 00 00 	add    BYTE PTR [rbp*1+0x8a01],al
 1cd:	00 98 0a 00 00 00    	add    BYTE PTR [rax+0xa],bl
			1d0: R_X86_64_32	.debug_str+0x2bb3
 1d3:	00 04 2e             	add    BYTE PTR [rsi+rbp*1],al
 1d6:	01 8a 00 00 00 a0    	add    DWORD PTR [rdx-0x60000000],ecx
 1dc:	0a 00                	or     al,BYTE PTR [rax]
			1dd: R_X86_64_32	.debug_str+0x2bba
 1de:	00 00                	add    BYTE PTR [rax],al
 1e0:	00 04 2f             	add    BYTE PTR [rdi+rbp*1],al
 1e3:	01 8a 00 00 00 a8    	add    DWORD PTR [rdx-0x58000000],ecx
 1e9:	0a 00                	or     al,BYTE PTR [rax]
			1ea: R_X86_64_32	.debug_str+0x2bc1
 1eb:	00 00                	add    BYTE PTR [rax],al
 1ed:	00 04 30             	add    BYTE PTR [rax+rsi*1],al
 1f0:	01 8a 00 00 00 b0    	add    DWORD PTR [rdx-0x50000000],ecx
 1f6:	0a 00                	or     al,BYTE PTR [rax]
			1f7: R_X86_64_32	.debug_str+0x2bc8
 1f8:	00 00                	add    BYTE PTR [rax],al
 1fa:	00 04 32             	add    BYTE PTR [rdx+rsi*1],al
 1fd:	01 31                	add    DWORD PTR [rcx],esi
 1ff:	00 00                	add    BYTE PTR [rax],al
 201:	00 b8 0a 00 00 00    	add    BYTE PTR [rax+0xa],bh
			204: R_X86_64_32	.debug_str+0x1fb2
 207:	00 04 33             	add    BYTE PTR [rbx+rsi*1],al
 20a:	01 66 00             	add    DWORD PTR [rsi+0x0],esp
 20d:	00 00                	add    BYTE PTR [rax],al
 20f:	c0 0a 00             	ror    BYTE PTR [rdx],0x0
			211: R_X86_64_32	.debug_str+0x4e40
 212:	00 00                	add    BYTE PTR [rax],al
 214:	00 04 35 01 78 02 00 	add    BYTE PTR [rsi*1+0x27801],al
 21b:	00 c4                	add    ah,al
 21d:	00 0b                	add    BYTE PTR [rbx],cl
 21f:	00 00                	add    BYTE PTR [rax],al
			21f: R_X86_64_32	.debug_str+0x219
 221:	00 00                	add    BYTE PTR [rax],al
 223:	04 9a                	add    al,0x9a
 225:	08 00                	or     BYTE PTR [rax],al
			226: R_X86_64_32	.debug_str+0x1c42
 227:	00 00                	add    BYTE PTR [rax],al
 229:	00 18                	add    BYTE PTR [rax],bl
 22b:	04 a0                	add    al,0xa0
 22d:	56                   	push   rsi
 22e:	02 00                	add    al,BYTE PTR [rax]
 230:	00 09                	add    BYTE PTR [rcx],cl
 232:	00 00                	add    BYTE PTR [rax],al
			232: R_X86_64_32	.debug_str+0x1ad3
 234:	00 00                	add    BYTE PTR [rax],al
 236:	04 a1                	add    al,0xa1
 238:	56                   	push   rsi
 239:	02 00                	add    al,BYTE PTR [rax]
 23b:	00 00                	add    BYTE PTR [rax],al
 23d:	09 00                	or     DWORD PTR [rax],eax
			23e: R_X86_64_32	.debug_str+0x423e
 23f:	00 00                	add    BYTE PTR [rax],al
 241:	00 04 a2             	add    BYTE PTR [rdx+riz*4],al
 244:	5c                   	pop    rsp
 245:	02 00                	add    al,BYTE PTR [rax]
 247:	00 08                	add    BYTE PTR [rax],cl
 249:	09 00                	or     DWORD PTR [rax],eax
			24a: R_X86_64_32	.debug_str+0xf84
 24b:	00 00                	add    BYTE PTR [rax],al
 24d:	00 04 a6             	add    BYTE PTR [rsi+riz*4],al
 250:	66 00 00             	data16 add BYTE PTR [rax],al
 253:	00 10                	add    BYTE PTR [rax],dl
 255:	00 06                	add    BYTE PTR [rsi],al
 257:	08 25 02 00 00 06    	or     BYTE PTR [rip+0x6000002],ah        # 600025f <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x600025f>
 25d:	08 9e 00 00 00 0c    	or     BYTE PTR [rsi+0xc000000],bl
 263:	92                   	xchg   edx,eax
 264:	00 00                	add    BYTE PTR [rax],al
 266:	00 72 02             	add    BYTE PTR [rdx+0x2],dh
 269:	00 00                	add    BYTE PTR [rax],al
 26b:	0d 3c 00 00 00       	or     eax,0x3c
 270:	00 00                	add    BYTE PTR [rax],al
 272:	06                   	(bad)  
 273:	08 1e                	or     BYTE PTR [rsi],bl
 275:	02 00                	add    al,BYTE PTR [rax]
 277:	00 0c 92             	add    BYTE PTR [rdx+rdx*4],cl
 27a:	00 00                	add    BYTE PTR [rax],al
 27c:	00 88 02 00 00 0d    	add    BYTE PTR [rax+0xd000002],cl
 282:	3c 00                	cmp    al,0x0
 284:	00 00                	add    BYTE PTR [rax],al
 286:	13 00                	adc    eax,DWORD PTR [rax]
 288:	0e                   	(bad)  
 289:	00 00                	add    BYTE PTR [rax],al
			289: R_X86_64_32	.debug_str+0x394d
 28b:	00 00                	add    BYTE PTR [rax],al
 28d:	0f 00 00             	sldt   WORD PTR [rax]
			28e: R_X86_64_32	.debug_str+0x2592
 290:	00 00                	add    BYTE PTR [rax],al
 292:	04 3f                	add    al,0x3f
 294:	01 88 02 00 00 0f    	add    DWORD PTR [rax+0xf000002],ecx
 29a:	00 00                	add    BYTE PTR [rax],al
			29a: R_X86_64_32	.debug_str+0x2609
 29c:	00 00                	add    BYTE PTR [rax],al
 29e:	04 40                	add    al,0x40
 2a0:	01 88 02 00 00 0f    	add    DWORD PTR [rax+0xf000002],ecx
 2a6:	00 00                	add    BYTE PTR [rax],al
			2a6: R_X86_64_32	.debug_str+0x1f61
 2a8:	00 00                	add    BYTE PTR [rax],al
 2aa:	04 41                	add    al,0x41
 2ac:	01 88 02 00 00 06    	add    DWORD PTR [rax+0x6000002],ecx
 2b2:	08 99 00 00 00 07    	or     BYTE PTR [rcx+0x7000000],bl
 2b8:	b1 02                	mov    cl,0x2
 2ba:	00 00                	add    BYTE PTR [rax],al
 2bc:	10 00                	adc    BYTE PTR [rax],al
			2bd: R_X86_64_32	.debug_str+0x3dde
 2be:	00 00                	add    BYTE PTR [rax],al
 2c0:	00 05 87 5c 02 00    	add    BYTE PTR [rip+0x25c87],al        # 25f4d <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x25f4d>
 2c6:	00 10                	add    BYTE PTR [rax],dl
 2c8:	00 00                	add    BYTE PTR [rax],al
			2c8: R_X86_64_32	.debug_str+0x1018
 2ca:	00 00                	add    BYTE PTR [rax],al
 2cc:	05 88 5c 02 00       	add    eax,0x25c88
 2d1:	00 10                	add    BYTE PTR [rax],dl
 2d3:	00 00                	add    BYTE PTR [rax],al
			2d3: R_X86_64_32	.debug_str+0x2f5
 2d5:	00 00                	add    BYTE PTR [rax],al
 2d7:	05 89 5c 02 00       	add    eax,0x25c89
 2dc:	00 10                	add    BYTE PTR [rax],dl
 2de:	00 00                	add    BYTE PTR [rax],al
			2de: R_X86_64_32	.debug_str+0x1695
 2e0:	00 00                	add    BYTE PTR [rax],al
 2e2:	06                   	(bad)  
 2e3:	1a 66 00             	sbb    ah,BYTE PTR [rsi+0x0]
 2e6:	00 00                	add    BYTE PTR [rax],al
 2e8:	0c b7                	or     al,0xb7
 2ea:	02 00                	add    al,BYTE PTR [rax]
 2ec:	00 f3                	add    bl,dh
 2ee:	02 00                	add    al,BYTE PTR [rax]
 2f0:	00 11                	add    BYTE PTR [rcx],dl
 2f2:	00 07                	add    BYTE PTR [rdi],al
 2f4:	e8 02 00 00 10       	call   100002fb <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x100002fb>
 2f9:	00 00                	add    BYTE PTR [rax],al
			2f9: R_X86_64_32	.debug_str+0x1578
 2fb:	00 00                	add    BYTE PTR [rax],al
 2fd:	06                   	(bad)  
 2fe:	1b f3                	sbb    esi,ebx
 300:	02 00                	add    al,BYTE PTR [rax]
 302:	00 12                	add    BYTE PTR [rdx],dl
 304:	00 00                	add    BYTE PTR [rax],al
			304: R_X86_64_32	.debug_str+0x4883
 306:	00 00                	add    BYTE PTR [rax],al
 308:	01 03                	add    DWORD PTR [rbx],eax
 30a:	66 00 00             	data16 add BYTE PTR [rax],al
	...
			30e: R_X86_64_64	.text
 315:	00 7d 00             	add    BYTE PTR [rbp+0x0],bh
 318:	00 00                	add    BYTE PTR [rax],al
 31a:	00 00                	add    BYTE PTR [rax],al
 31c:	00 00                	add    BYTE PTR [rax],al
 31e:	01 9c 59 03 00 00 13 	add    DWORD PTR [rcx+rbx*2+0x13000003],ebx
 325:	00 00                	add    BYTE PTR [rax],al
			325: R_X86_64_32	.debug_str+0x7c8
 327:	00 00                	add    BYTE PTR [rax],al
 329:	01 03                	add    DWORD PTR [rbx],eax
 32b:	66 00 00             	data16 add BYTE PTR [rax],al
 32e:	00 02                	add    BYTE PTR [rdx],al
 330:	91                   	xchg   ecx,eax
 331:	5c                   	pop    rsp
 332:	13 00                	adc    eax,DWORD PTR [rax]
			333: R_X86_64_32	.debug_str+0x1d48
 334:	00 00                	add    BYTE PTR [rax],al
 336:	00 01                	add    BYTE PTR [rcx],al
 338:	03 59 03             	add    ebx,DWORD PTR [rcx+0x3]
 33b:	00 00                	add    BYTE PTR [rax],al
 33d:	02 91 50 14 61 00    	add    dl,BYTE PTR [rcx+0x611450]
 343:	01 05 66 00 00 00    	add    DWORD PTR [rip+0x66],eax        # 3af <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x3af>
 349:	02 91 60 14 62 00    	add    dl,BYTE PTR [rcx+0x621460]
 34f:	01 05 66 00 00 00    	add    DWORD PTR [rip+0x66],eax        # 3bb <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x3bb>
 355:	02 91 64 00 06 08    	add    dl,BYTE PTR [rcx+0x8060064]
 35b:	8c 00                	mov    WORD PTR [rax],es
 35d:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
int main(int argc, char * argv[]) {
   0:	01 11                	add    DWORD PTR [rcx],edx
   2:	01 25 0e 13 0b 03    	add    DWORD PTR [rip+0x30b130e],esp        # 30b1316 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x30b1316>
   8:	0e                   	(bad)  
   9:	1b 0e                	sbb    ecx,DWORD PTR [rsi]
   b:	11 01                	adc    DWORD PTR [rcx],eax
   d:	12 07                	adc    al,BYTE PTR [rdi]
   f:	10 17                	adc    BYTE PTR [rdi],dl
  11:	99                   	cdq    
  12:	42 17                	rex.X (bad) 
  14:	00 00                	add    BYTE PTR [rax],al
  16:	02 16                	add    dl,BYTE PTR [rsi]
  18:	00 03                	add    BYTE PTR [rbx],al
  1a:	0e                   	(bad)  
  1b:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  1d:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
	b = 5;
  1f:	49 13 00             	adc    rax,QWORD PTR [r8]
  22:	00 03                	add    BYTE PTR [rbx],al
  24:	24 00                	and    al,0x0
	printf ("Enter a number between 1 and 10 -> ");
  26:	0b 0b                	or     ecx,DWORD PTR [rbx]
  28:	3e 0b 03             	or     eax,DWORD PTR ds:[rbx]
  2b:	0e                   	(bad)  
  2c:	00 00                	add    BYTE PTR [rax],al
  2e:	04 24                	add    al,0x24
  30:	00 0b                	add    BYTE PTR [rbx],cl
  32:	0b 3e                	or     edi,DWORD PTR [rsi]
  34:	0b 03                	or     eax,DWORD PTR [rbx]
	scanf ("%d", &a);
  36:	08 00                	or     BYTE PTR [rax],al
  38:	00 05 0f 00 0b 0b    	add    BYTE PTR [rip+0xb0b000f],al        # b0b004d <wm4.0.52c9fc51a3c7999e669b5384b1132782+0xb0b004d>
  3e:	00 00                	add    BYTE PTR [rax],al
  40:	06                   	(bad)  
  41:	0f 00 0b             	str    WORD PTR [rbx]
  44:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  47:	00 00                	add    BYTE PTR [rax],al
  49:	07                   	(bad)  
  4a:	26 00 49 13          	add    BYTE PTR es:[rcx+0x13],cl
	if (a > b) {
  4e:	00 00                	add    BYTE PTR [rax],al
  50:	08 13                	or     BYTE PTR [rbx],dl
  52:	01 03                	add    DWORD PTR [rbx],eax
  54:	0e                   	(bad)  
  55:	0b 0b                	or     ecx,DWORD PTR [rbx]
		printf ("The number was higher than 5!\n");
  57:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  59:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  5b:	01 13                	add    DWORD PTR [rbx],edx
  5d:	00 00                	add    BYTE PTR [rax],al
  5f:	09 0d 00 03 0e 3a    	or     DWORD PTR [rip+0x3a0e0300],ecx        # 3a0e0365 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x3a0e0365>
  65:	0b 3b                	or     edi,DWORD PTR [rbx]
}
  67:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  6a:	38 0b                	cmp    BYTE PTR [rbx],cl
  6c:	00 00                	add    BYTE PTR [rax],al
  6e:	0a 0d 00 03 0e 3a    	or     cl,BYTE PTR [rip+0x3a0e0300]        # 3a0e0374 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x3a0e0374>
  74:	0b 3b                	or     edi,DWORD PTR [rbx]
  76:	05 49 13 38 0b       	add    eax,0xb381349
  7b:	00 00                	add    BYTE PTR [rax],al
  7d:	0b 16                	or     edx,DWORD PTR [rsi]
  7f:	00 03                	add    BYTE PTR [rbx],al
  81:	0e                   	(bad)  
  82:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  84:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  86:	00 00                	add    BYTE PTR [rax],al
  88:	0c 01                	or     al,0x1
  8a:	01 49 13             	add    DWORD PTR [rcx+0x13],ecx
  8d:	01 13                	add    DWORD PTR [rbx],edx
  8f:	00 00                	add    BYTE PTR [rax],al
  91:	0d 21 00 49 13       	or     eax,0x13490021
  96:	2f                   	(bad)  
  97:	0b 00                	or     eax,DWORD PTR [rax]
  99:	00 0e                	add    BYTE PTR [rsi],cl
  9b:	13 00                	adc    eax,DWORD PTR [rax]
  9d:	03 0e                	add    ecx,DWORD PTR [rsi]
  9f:	3c 19                	cmp    al,0x19
  a1:	00 00                	add    BYTE PTR [rax],al
  a3:	0f 34                	sysenter 
  a5:	00 03                	add    BYTE PTR [rbx],al
  a7:	0e                   	(bad)  
  a8:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  aa:	3b 05 49 13 3f 19    	cmp    eax,DWORD PTR [rip+0x193f1349]        # 193f13f9 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x193f13f9>
  b0:	3c 19                	cmp    al,0x19
  b2:	00 00                	add    BYTE PTR [rax],al
  b4:	10 34 00             	adc    BYTE PTR [rax+rax*1],dh
  b7:	03 0e                	add    ecx,DWORD PTR [rsi]
  b9:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  bb:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  bd:	49 13 3f             	adc    rdi,QWORD PTR [r15]
  c0:	19 3c 19             	sbb    DWORD PTR [rcx+rbx*1],edi
  c3:	00 00                	add    BYTE PTR [rax],al
  c5:	11 21                	adc    DWORD PTR [rcx],esp
  c7:	00 00                	add    BYTE PTR [rax],al
  c9:	00 12                	add    BYTE PTR [rdx],dl
  cb:	2e 01 3f             	add    DWORD PTR cs:[rdi],edi
  ce:	19 03                	sbb    DWORD PTR [rbx],eax
  d0:	0e                   	(bad)  
  d1:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  d3:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  d5:	27                   	(bad)  
  d6:	19 49 13             	sbb    DWORD PTR [rcx+0x13],ecx
  d9:	11 01                	adc    DWORD PTR [rcx],eax
  db:	12 07                	adc    al,BYTE PTR [rdi]
  dd:	40 18 96 42 19 01 13 	sbb    BYTE PTR [rsi+0x13011942],dl
  e4:	00 00                	add    BYTE PTR [rax],al
  e6:	13 05 00 03 0e 3a    	adc    eax,DWORD PTR [rip+0x3a0e0300]        # 3a0e03ec <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x3a0e03ec>
  ec:	0b 3b                	or     edi,DWORD PTR [rbx]
  ee:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  f1:	02 18                	add    bl,BYTE PTR [rax]
  f3:	00 00                	add    BYTE PTR [rax],al
  f5:	14 34                	adc    al,0x34
  f7:	00 03                	add    BYTE PTR [rbx],al
  f9:	08 3a                	or     BYTE PTR [rdx],bh
  fb:	0b 3b                	or     edi,DWORD PTR [rbx]
  fd:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
 100:	02 18                	add    bl,BYTE PTR [rax]
 102:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
int main(int argc, char * argv[]) {
   0:	2c 00                	sub    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   4:	02 00                	add    al,BYTE PTR [rax]
   6:	00 00                	add    BYTE PTR [rax],al
			6: R_X86_64_32	.debug_info
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 00                	or     BYTE PTR [rax],al
	...
			10: R_X86_64_64	.text
  18:	7d 00                	jge    1a <.debug_aranges+0x1a>
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
   0:	04 00                	add    al,0x0
   2:	02 00                	add    al,BYTE PTR [rax]
			3: R_X86_64_32	.debug_line
   4:	00 00                	add    BYTE PTR [rax],al
   6:	00 07                	add    BYTE PTR [rdi],al
   8:	00 00                	add    BYTE PTR [rax],al
			8: R_X86_64_32	.debug_macro
   a:	00 00                	add    BYTE PTR [rax],al
   c:	03 00                	add    eax,DWORD PTR [rax]
   e:	01 03                	add    DWORD PTR [rbx],eax
  10:	1f                   	(bad)  
  11:	07                   	(bad)  
  12:	07                   	(bad)  
  13:	00 00                	add    BYTE PTR [rax],al
			13: R_X86_64_32	.debug_macro
  15:	00 00                	add    BYTE PTR [rax],al
  17:	04 03                	add    al,0x3
  19:	01 05 07 00 00 00    	add    DWORD PTR [rip+0x7],eax        # 26 <.debug_macro+0x26>
			1c: R_X86_64_32	.debug_macro
	b = 5;
  1f:	00 03                	add    BYTE PTR [rbx],al
  21:	1b 08                	sbb    ecx,DWORD PTR [rax]
  23:	06                   	(bad)  
  24:	1f                   	(bad)  
	printf ("Enter a number between 1 and 10 -> ");
  25:	00 00                	add    BYTE PTR [rax],al
			25: R_X86_64_32	.debug_str+0x45fb
  27:	00 00                	add    BYTE PTR [rax],al
  29:	03 21                	add    esp,DWORD PTR [rcx]
  2b:	09 07                	or     DWORD PTR [rdi],eax
  2d:	00 00                	add    BYTE PTR [rax],al
			2d: R_X86_64_32	.debug_macro
  2f:	00 00                	add    BYTE PTR [rax],al
  31:	03 a8 03 0a 07 00    	add    ebp,DWORD PTR [rax+0x70a03]
			36: R_X86_64_32	.debug_macro
	scanf ("%d", &a);
  37:	00 00                	add    BYTE PTR [rax],al
  39:	00 03                	add    BYTE PTR [rbx],al
  3b:	ab                   	stos   DWORD PTR es:[rdi],eax
  3c:	03 0b                	add    ecx,DWORD PTR [rbx]
  3e:	07                   	(bad)  
  3f:	00 00                	add    BYTE PTR [rax],al
			3f: R_X86_64_32	.debug_macro
  41:	00 00                	add    BYTE PTR [rax],al
  43:	04 03                	add    al,0x3
  45:	ac                   	lods   al,BYTE PTR ds:[rsi]
  46:	03 0c 04             	add    ecx,DWORD PTR [rsp+rax*1]
  49:	07                   	(bad)  
  4a:	00 00                	add    BYTE PTR [rax],al
			4a: R_X86_64_32	.debug_macro
  4c:	00 00                	add    BYTE PTR [rax],al
	if (a > b) {
  4e:	04 03                	add    al,0x3
  50:	c0 03 0d             	rol    BYTE PTR [rbx],0xd
  53:	03 0a                	add    ecx,DWORD PTR [rdx]
  55:	0e                   	(bad)  
		printf ("The number was higher than 5!\n");
  56:	07                   	(bad)  
  57:	00 00                	add    BYTE PTR [rax],al
			57: R_X86_64_32	.debug_macro
  59:	00 00                	add    BYTE PTR [rax],al
  5b:	04 04                	add    al,0x4
  5d:	04 07                	add    al,0x7
  5f:	00 00                	add    BYTE PTR [rax],al
			5f: R_X86_64_32	.debug_macro
  61:	00 00                	add    BYTE PTR [rax],al
  63:	04 07                	add    al,0x7
  65:	00 00                	add    BYTE PTR [rax],al
			65: R_X86_64_32	.debug_macro
}
  67:	00 00                	add    BYTE PTR [rax],al
  69:	03 21                	add    esp,DWORD PTR [rcx]
  6b:	02 07                	add    al,BYTE PTR [rdi]
  6d:	00 00                	add    BYTE PTR [rax],al
			6d: R_X86_64_32	.debug_macro
  6f:	00 00                	add    BYTE PTR [rax],al
  71:	04 03                	add    al,0x3
  73:	23 03                	and    eax,DWORD PTR [rbx]
  75:	05 18 00 00 00       	add    eax,0x18
			77: R_X86_64_32	.debug_str+0x14ff
  7a:	00 03                	add    BYTE PTR [rbx],al
  7c:	1b 0b                	sbb    ecx,DWORD PTR [rbx]
  7e:	07                   	(bad)  
  7f:	00 00                	add    BYTE PTR [rax],al
			7f: R_X86_64_32	.debug_macro
  81:	00 00                	add    BYTE PTR [rax],al
  83:	04 07                	add    al,0x7
  85:	00 00                	add    BYTE PTR [rax],al
			85: R_X86_64_32	.debug_macro
  87:	00 00                	add    BYTE PTR [rax],al
  89:	03 82 01 0f 07 00    	add    eax,DWORD PTR [rdx+0x70f01]
			8e: R_X86_64_32	.debug_macro
  8f:	00 00                	add    BYTE PTR [rax],al
  91:	00 04 06             	add    BYTE PTR [rsi+rax*1],al
  94:	cc                   	int3   
  95:	01 00                	add    DWORD PTR [rax],eax
			96: R_X86_64_32	.debug_str+0x28fd
  97:	00 00                	add    BYTE PTR [rax],al
  99:	00 04 03             	add    BYTE PTR [rbx+rax*1],al
  9c:	24 10                	and    al,0x10
  9e:	05 02 00 00 00       	add    eax,0x2
			a0: R_X86_64_32	.debug_str+0x2c92
  a3:	00 04 03             	add    BYTE PTR [rbx+rax*1],al
  a6:	25 11 05 02 00       	and    eax,0x20511
			aa: R_X86_64_32	.debug_str+0x333c
  ab:	00 00                	add    BYTE PTR [rax],al
  ad:	00 04 05 27 00 00 00 	add    BYTE PTR [rax*1+0x27],al
			b1: R_X86_64_32	.debug_str+0x2af5
  b4:	00 03                	add    BYTE PTR [rbx],al
  b6:	29 04 05 1d 00 00 00 	sub    DWORD PTR [rax*1+0x1d],eax
			ba: R_X86_64_32	.debug_str+0x1152
  bd:	00 03                	add    BYTE PTR [rbx],al
  bf:	23 12                	and    edx,DWORD PTR [rdx]
  c1:	07                   	(bad)  
  c2:	00 00                	add    BYTE PTR [rax],al
			c2: R_X86_64_32	.debug_macro
  c4:	00 00                	add    BYTE PTR [rax],al
  c6:	03 13                	add    edx,DWORD PTR [rbx]
  c8:	02 07                	add    al,BYTE PTR [rdi]
  ca:	00 00                	add    BYTE PTR [rax],al
			ca: R_X86_64_32	.debug_macro
  cc:	00 00                	add    BYTE PTR [rax],al
  ce:	04 03                	add    al,0x3
  d0:	15 13 05 02 00       	adc    eax,0x20513
			d4: R_X86_64_32	.debug_str+0x1b55
  d5:	00 00                	add    BYTE PTR [rax],al
  d7:	00 04 07             	add    BYTE PTR [rdi+rax*1],al
  da:	00 00                	add    BYTE PTR [rax],al
			da: R_X86_64_32	.debug_macro
  dc:	00 00                	add    BYTE PTR [rax],al
  de:	04 07                	add    al,0x7
  e0:	00 00                	add    BYTE PTR [rax],al
			e0: R_X86_64_32	.debug_macro
  e2:	00 00                	add    BYTE PTR [rax],al
  e4:	03 35 14 07 00 00    	add    esi,DWORD PTR [rip+0x714]        # 7fe <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x7fe>
			e8: R_X86_64_32	.debug_macro
  ea:	00 00                	add    BYTE PTR [rax],al
  ec:	04 07                	add    al,0x7
  ee:	00 00                	add    BYTE PTR [rax],al
			ee: R_X86_64_32	.debug_macro
  f0:	00 00                	add    BYTE PTR [rax],al
  f2:	04 07                	add    al,0x7
  f4:	00 00                	add    BYTE PTR [rax],al
			f4: R_X86_64_32	.debug_macro
  f6:	00 00                	add    BYTE PTR [rax],al
  f8:	03 83 01 15 07 00    	add    eax,DWORD PTR [rbx+0x71501]
			fd: R_X86_64_32	.debug_macro
  fe:	00 00                	add    BYTE PTR [rax],al
 100:	00 04 07             	add    BYTE PTR [rdi+rax*1],al
 103:	00 00                	add    BYTE PTR [rax],al
			103: R_X86_64_32	.debug_macro
 105:	00 00                	add    BYTE PTR [rax],al
 107:	03 8d 06 06 04 04    	add    ecx,DWORD PTR [rbp+0x4040606]
 10d:	04 00                	add    al,0x0

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
int main(int argc, char * argv[]) {
   0:	04 00                	add    al,0x0
   2:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 8 <.debug_macro+0x8>
			5: R_X86_64_32	.debug_str+0x295c
   8:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # e <.debug_macro+0xe>
			b: R_X86_64_32	.debug_str+0x232a
   e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 14 <.debug_macro+0x14>
			11: R_X86_64_32	.debug_str+0x2bcf
  14:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 1a <.debug_macro+0x1a>
			17: R_X86_64_32	.debug_str+0xbde
  1a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 20 <.debug_macro+0x20>
			1d: R_X86_64_32	.debug_str+0x3e5a
	b = 5;
  20:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 26 <.debug_macro+0x26>
			23: R_X86_64_32	.debug_str+0x7ee
	printf ("Enter a number between 1 and 10 -> ");
  26:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 2c <.debug_macro+0x2c>
			29: R_X86_64_32	.debug_str+0x5b8
  2c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 32 <.debug_macro+0x32>
			2f: R_X86_64_32	.debug_str+0x370f
  32:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 38 <.debug_macro+0x38>
			35: R_X86_64_32	.debug_str+0x2071
	scanf ("%d", &a);
  38:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 3e <.debug_macro+0x3e>
			3b: R_X86_64_32	.debug_str+0x3e31
  3e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 44 <.debug_macro+0x44>
			41: R_X86_64_32	.debug_str+0x9a6
  44:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 4a <.debug_macro+0x4a>
			47: R_X86_64_32	.debug_str+0x2f42
  4a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 50 <.debug_macro+0x50>
			4d: R_X86_64_32	.debug_str+0x4835
	if (a > b) {
  50:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 56 <.debug_macro+0x56>
			53: R_X86_64_32	.debug_str+0x4120
		printf ("The number was higher than 5!\n");
  56:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 5c <.debug_macro+0x5c>
			59: R_X86_64_32	.debug_str+0x29cc
  5c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 62 <.debug_macro+0x62>
			5f: R_X86_64_32	.debug_str+0x482b
  62:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 68 <.debug_macro+0x68>
			65: R_X86_64_32	.debug_str+0x4378
}
  68:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 6e <.debug_macro+0x6e>
			6b: R_X86_64_32	.debug_str+0x1104
  6e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 74 <.debug_macro+0x74>
			71: R_X86_64_32	.debug_str+0xd27
  74:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 7a <.debug_macro+0x7a>
			77: R_X86_64_32	.debug_str+0x2642
  7a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 80 <.debug_macro+0x80>
			7d: R_X86_64_32	.debug_str+0x252d
  80:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 86 <.debug_macro+0x86>
			83: R_X86_64_32	.debug_str+0x24b6
  86:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 8c <.debug_macro+0x8c>
			89: R_X86_64_32	.debug_str+0x46e6
  8c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 92 <.debug_macro+0x92>
			8f: R_X86_64_32	.debug_str+0x29ba
  92:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 98 <.debug_macro+0x98>
			95: R_X86_64_32	.debug_str+0x3998
  98:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 9e <.debug_macro+0x9e>
			9b: R_X86_64_32	.debug_str+0x9d7
  9e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # a4 <.debug_macro+0xa4>
			a1: R_X86_64_32	.debug_str+0x2867
  a4:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # aa <.debug_macro+0xaa>
			a7: R_X86_64_32	.debug_str+0x2b0b
  aa:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # b0 <.debug_macro+0xb0>
			ad: R_X86_64_32	.debug_str+0x14c6
  b0:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # b6 <.debug_macro+0xb6>
			b3: R_X86_64_32	.debug_str+0x7b4
  b6:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # bc <.debug_macro+0xbc>
			b9: R_X86_64_32	.debug_str+0x3dfe
  bc:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # c2 <.debug_macro+0xc2>
			bf: R_X86_64_32	.debug_str+0x1c4d
  c2:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # c8 <.debug_macro+0xc8>
			c5: R_X86_64_32	.debug_str+0x1770
  c8:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # ce <.debug_macro+0xce>
			cb: R_X86_64_32	.debug_str+0x7d4
  ce:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # d4 <.debug_macro+0xd4>
			d1: R_X86_64_32	.debug_str+0x322a
  d4:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # da <.debug_macro+0xda>
			d7: R_X86_64_32	.debug_str+0xae0
  da:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # e0 <.debug_macro+0xe0>
			dd: R_X86_64_32	.debug_str+0x2dd3
  e0:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # e6 <.debug_macro+0xe6>
			e3: R_X86_64_32	.debug_str+0x3b06
  e6:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # ec <.debug_macro+0xec>
			e9: R_X86_64_32	.debug_str+0x1e8e
  ec:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # f2 <.debug_macro+0xf2>
			ef: R_X86_64_32	.debug_str+0x4b84
  f2:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # f8 <.debug_macro+0xf8>
			f5: R_X86_64_32	.debug_str+0x12f6
  f8:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # fe <.debug_macro+0xfe>
			fb: R_X86_64_32	.debug_str+0x2a40
  fe:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 104 <.debug_macro+0x104>
			101: R_X86_64_32	.debug_str+0x4906
 104:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 10a <.debug_macro+0x10a>
			107: R_X86_64_32	.debug_str+0x305d
 10a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 110 <.debug_macro+0x110>
			10d: R_X86_64_32	.debug_str+0x40ab
 110:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 116 <.debug_macro+0x116>
			113: R_X86_64_32	.debug_str+0x3565
 116:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 11c <.debug_macro+0x11c>
			119: R_X86_64_32	.debug_str+0x4d75
 11c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 122 <.debug_macro+0x122>
			11f: R_X86_64_32	.debug_str+0x42be
 122:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 128 <.debug_macro+0x128>
			125: R_X86_64_32	.debug_str+0x91e
 128:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 12e <.debug_macro+0x12e>
			12b: R_X86_64_32	.debug_str+0x17e8
 12e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 134 <.debug_macro+0x134>
			131: R_X86_64_32	.debug_str+0x41d2
 134:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 13a <.debug_macro+0x13a>
			137: R_X86_64_32	.debug_str+0x26d6
 13a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 140 <.debug_macro+0x140>
			13d: R_X86_64_32	.debug_str+0x1bb2
 140:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 146 <.debug_macro+0x146>
			143: R_X86_64_32	.debug_str+0x3822
 146:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 14c <.debug_macro+0x14c>
			149: R_X86_64_32	.debug_str+0xa04
 14c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 152 <.debug_macro+0x152>
			14f: R_X86_64_32	.debug_str+0xa4d
 152:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 158 <.debug_macro+0x158>
			155: R_X86_64_32	.debug_str+0x23b9
 158:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 15e <.debug_macro+0x15e>
			15b: R_X86_64_32	.debug_str+0x4382
 15e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 164 <.debug_macro+0x164>
			161: R_X86_64_32	.debug_str+0xb79
 164:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 16a <.debug_macro+0x16a>
			167: R_X86_64_32	.debug_str+0xdca
 16a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 170 <.debug_macro+0x170>
			16d: R_X86_64_32	.debug_str+0x1ca9
 170:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 176 <.debug_macro+0x176>
			173: R_X86_64_32	.debug_str+0xa77
 176:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 17c <.debug_macro+0x17c>
			179: R_X86_64_32	.debug_str+0x439b
 17c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 182 <.debug_macro+0x182>
			17f: R_X86_64_32	.debug_str+0xd08
 182:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 188 <.debug_macro+0x188>
			185: R_X86_64_32	.debug_str+0x4713
 188:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 18e <.debug_macro+0x18e>
			18b: R_X86_64_32	.debug_str+0x271b
 18e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 194 <.debug_macro+0x194>
			191: R_X86_64_32	.debug_str+0x22cb
 194:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 19a <.debug_macro+0x19a>
			197: R_X86_64_32	.debug_str+0x36a4
 19a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 1a0 <.debug_macro+0x1a0>
			19d: R_X86_64_32	.debug_str+0x3ce4
 1a0:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 1a6 <.debug_macro+0x1a6>
			1a3: R_X86_64_32	.debug_str+0x39c1
 1a6:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 1ac <.debug_macro+0x1ac>
			1a9: R_X86_64_32	.debug_str+0x4c21
 1ac:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 1b2 <.debug_macro+0x1b2>
			1af: R_X86_64_32	.debug_str+0x1656
 1b2:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 1b8 <.debug_macro+0x1b8>
			1b5: R_X86_64_32	.debug_str+0x2819
 1b8:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 1be <.debug_macro+0x1be>
			1bb: R_X86_64_32	.debug_str+0x3ed0
 1be:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 1c4 <.debug_macro+0x1c4>
			1c1: R_X86_64_32	.debug_str+0x3b7
 1c4:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 1ca <.debug_macro+0x1ca>
			1c7: R_X86_64_32	.debug_str+0x4814
 1ca:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 1d0 <.debug_macro+0x1d0>
			1cd: R_X86_64_32	.debug_str+0xc95
 1d0:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 1d6 <.debug_macro+0x1d6>
			1d3: R_X86_64_32	.debug_str+0x3193
 1d6:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 1dc <.debug_macro+0x1dc>
			1d9: R_X86_64_32	.debug_str+0x8bf
 1dc:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 1e2 <.debug_macro+0x1e2>
			1df: R_X86_64_32	.debug_str+0x34a0
 1e2:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 1e8 <.debug_macro+0x1e8>
			1e5: R_X86_64_32	.debug_str+0x1c66
 1e8:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 1ee <.debug_macro+0x1ee>
			1eb: R_X86_64_32	.debug_str+0x3b98
 1ee:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 1f4 <.debug_macro+0x1f4>
			1f1: R_X86_64_32	.debug_str+0xb97
 1f4:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 1fa <.debug_macro+0x1fa>
			1f7: R_X86_64_32	.debug_str+0x3725
 1fa:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 200 <.debug_macro+0x200>
			1fd: R_X86_64_32	.debug_str+0x2b87
 200:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 206 <.debug_macro+0x206>
			203: R_X86_64_32	.debug_str+0x2383
 206:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 20c <.debug_macro+0x20c>
			209: R_X86_64_32	.debug_str+0x44bc
 20c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 212 <.debug_macro+0x212>
			20f: R_X86_64_32	.debug_str+0x2ab2
 212:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 218 <.debug_macro+0x218>
			215: R_X86_64_32	.debug_str+0x39e8
 218:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 21e <.debug_macro+0x21e>
			21b: R_X86_64_32	.debug_str+0x3c34
 21e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 224 <.debug_macro+0x224>
			221: R_X86_64_32	.debug_str+0x3fec
 224:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 22a <.debug_macro+0x22a>
			227: R_X86_64_32	.debug_str+0x6dd
 22a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 230 <.debug_macro+0x230>
			22d: R_X86_64_32	.debug_str+0x1c11
 230:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 236 <.debug_macro+0x236>
			233: R_X86_64_32	.debug_str+0x3367
 236:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 23c <.debug_macro+0x23c>
			239: R_X86_64_32	.debug_str+0x4bed
 23c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 242 <.debug_macro+0x242>
			23f: R_X86_64_32	.debug_str+0x3e6c
 242:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 248 <.debug_macro+0x248>
			245: R_X86_64_32	.debug_str+0x112f
 248:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 24e <.debug_macro+0x24e>
			24b: R_X86_64_32	.debug_str+0x3a68
 24e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 254 <.debug_macro+0x254>
			251: R_X86_64_32	.debug_str+0x4317
 254:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 25a <.debug_macro+0x25a>
			257: R_X86_64_32	.debug_str+0x354e
 25a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 260 <.debug_macro+0x260>
			25d: R_X86_64_32	.debug_str+0x2343
 260:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 266 <.debug_macro+0x266>
			263: R_X86_64_32	.debug_str+0x16
 266:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 26c <.debug_macro+0x26c>
			269: R_X86_64_32	.debug_str+0x2d11
 26c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 272 <.debug_macro+0x272>
			26f: R_X86_64_32	.debug_str+0x311d
 272:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 278 <.debug_macro+0x278>
			275: R_X86_64_32	.debug_str+0x1309
 278:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 27e <.debug_macro+0x27e>
			27b: R_X86_64_32	.debug_str+0x2a85
 27e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 284 <.debug_macro+0x284>
			281: R_X86_64_32	.debug_str+0x2ed5
 284:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 28a <.debug_macro+0x28a>
			287: R_X86_64_32	.debug_str+0x2f7c
 28a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 290 <.debug_macro+0x290>
			28d: R_X86_64_32	.debug_str+0x2218
 290:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 296 <.debug_macro+0x296>
			293: R_X86_64_32	.debug_str+0x227f
 296:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 29c <.debug_macro+0x29c>
			299: R_X86_64_32	.debug_str+0x1f71
 29c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 2a2 <.debug_macro+0x2a2>
			29f: R_X86_64_32	.debug_str+0x3ffe
 2a2:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 2a8 <.debug_macro+0x2a8>
			2a5: R_X86_64_32	.debug_str+0x2489
 2a8:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 2ae <.debug_macro+0x2ae>
			2ab: R_X86_64_32	.debug_str+0x3af8
 2ae:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 2b4 <.debug_macro+0x2b4>
			2b1: R_X86_64_32	.debug_str+0x21ca
 2b4:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 2ba <.debug_macro+0x2ba>
			2b7: R_X86_64_32	.debug_str+0xc16
 2ba:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 2c0 <.debug_macro+0x2c0>
			2bd: R_X86_64_32	.debug_str+0x283c
 2c0:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 2c6 <.debug_macro+0x2c6>
			2c3: R_X86_64_32	.debug_str+0xf27
 2c6:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 2cc <.debug_macro+0x2cc>
			2c9: R_X86_64_32	.debug_str+0x4c02
 2cc:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 2d2 <.debug_macro+0x2d2>
			2cf: R_X86_64_32	.debug_str+0x36c6
 2d2:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 2d8 <.debug_macro+0x2d8>
			2d5: R_X86_64_32	.debug_str+0x42d8
 2d8:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 2de <.debug_macro+0x2de>
			2db: R_X86_64_32	.debug_str+0x21a2
 2de:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 2e4 <.debug_macro+0x2e4>
			2e1: R_X86_64_32	.debug_str+0x46ad
 2e4:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 2ea <.debug_macro+0x2ea>
			2e7: R_X86_64_32	.debug_str+0x3abd
 2ea:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 2f0 <.debug_macro+0x2f0>
			2ed: R_X86_64_32	.debug_str+0x1294
 2f0:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 2f6 <.debug_macro+0x2f6>
			2f3: R_X86_64_32	.debug_str+0x2b1f
 2f6:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 2fc <.debug_macro+0x2fc>
			2f9: R_X86_64_32	.debug_str+0x11be
 2fc:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 302 <.debug_macro+0x302>
			2ff: R_X86_64_32	.debug_str+0x2f55
 302:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 308 <.debug_macro+0x308>
			305: R_X86_64_32	.debug_str+0x4a67
 308:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 30e <.debug_macro+0x30e>
			30b: R_X86_64_32	.debug_str+0x2ac4
 30e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 314 <.debug_macro+0x314>
			311: R_X86_64_32	.debug_str+0x2782
 314:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 31a <.debug_macro+0x31a>
			317: R_X86_64_32	.debug_str+0x861
 31a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 320 <.debug_macro+0x320>
			31d: R_X86_64_32	.debug_str+0x33e5
 320:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 326 <.debug_macro+0x326>
			323: R_X86_64_32	.debug_str+0x1a91
 326:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 32c <.debug_macro+0x32c>
			329: R_X86_64_32	.debug_str+0x4572
 32c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 332 <.debug_macro+0x332>
			32f: R_X86_64_32	.debug_str+0x10bc
 332:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 338 <.debug_macro+0x338>
			335: R_X86_64_32	.debug_str+0xa26
 338:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 33e <.debug_macro+0x33e>
			33b: R_X86_64_32	.debug_str+0x3a94
 33e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 344 <.debug_macro+0x344>
			341: R_X86_64_32	.debug_str+0x390
 344:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 34a <.debug_macro+0x34a>
			347: R_X86_64_32	.debug_str+0x320
 34a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 350 <.debug_macro+0x350>
			34d: R_X86_64_32	.debug_str+0x159d
 350:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 356 <.debug_macro+0x356>
			353: R_X86_64_32	.debug_str+0x2e9b
 356:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 35c <.debug_macro+0x35c>
			359: R_X86_64_32	.debug_str+0x2619
 35c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 362 <.debug_macro+0x362>
			35f: R_X86_64_32	.debug_str+0x11da
 362:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 368 <.debug_macro+0x368>
			365: R_X86_64_32	.debug_str+0x224
 368:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 36e <.debug_macro+0x36e>
			36b: R_X86_64_32	.debug_str+0x366e
 36e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 374 <.debug_macro+0x374>
			371: R_X86_64_32	.debug_str+0x4ee
 374:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 37a <.debug_macro+0x37a>
			377: R_X86_64_32	.debug_str+0x1162
 37a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 380 <.debug_macro+0x380>
			37d: R_X86_64_32	.debug_str+0x2cf9
 380:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 386 <.debug_macro+0x386>
			383: R_X86_64_32	.debug_str+0x1ff6
 386:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 38c <.debug_macro+0x38c>
			389: R_X86_64_32	.debug_str+0x462b
 38c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 392 <.debug_macro+0x392>
			38f: R_X86_64_32	.debug_str+0x1ee8
 392:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 398 <.debug_macro+0x398>
			395: R_X86_64_32	.debug_str+0x1425
 398:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 39e <.debug_macro+0x39e>
			39b: R_X86_64_32	.debug_str+0x1e09
 39e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 3a4 <.debug_macro+0x3a4>
			3a1: R_X86_64_32	.debug_str+0x10ae
 3a4:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 3aa <.debug_macro+0x3aa>
			3a7: R_X86_64_32	.debug_str+0x491f
 3aa:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 3b0 <.debug_macro+0x3b0>
			3ad: R_X86_64_32	.debug_str+0xd6
 3b0:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 3b6 <.debug_macro+0x3b6>
			3b3: R_X86_64_32	.debug_str+0x49d0
 3b6:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 3bc <.debug_macro+0x3bc>
			3b9: R_X86_64_32	.debug_str+0x1cd2
 3bc:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 3c2 <.debug_macro+0x3c2>
			3bf: R_X86_64_32	.debug_str+0x32ae
 3c2:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 3c8 <.debug_macro+0x3c8>
			3c5: R_X86_64_32	.debug_str+0x1efe
 3c8:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 3ce <.debug_macro+0x3ce>
			3cb: R_X86_64_32	.debug_str+0x41ea
 3ce:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 3d4 <.debug_macro+0x3d4>
			3d1: R_X86_64_32	.debug_str+0x4599
 3d4:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 3da <.debug_macro+0x3da>
			3d7: R_X86_64_32	.debug_str+0x702
 3da:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 3e0 <.debug_macro+0x3e0>
			3dd: R_X86_64_32	.debug_str+0x4e91
 3e0:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 3e6 <.debug_macro+0x3e6>
			3e3: R_X86_64_32	.debug_str+0x28d4
 3e6:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 3ec <.debug_macro+0x3ec>
			3e9: R_X86_64_32	.debug_str+0x46ce
 3ec:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 3f2 <.debug_macro+0x3f2>
			3ef: R_X86_64_32	.debug_str+0x887
 3f2:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 3f8 <.debug_macro+0x3f8>
			3f5: R_X86_64_32	.debug_str+0x2458
 3f8:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 3fe <.debug_macro+0x3fe>
			3fb: R_X86_64_32	.debug_str+0x378
 3fe:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 404 <.debug_macro+0x404>
			401: R_X86_64_32	.debug_str+0x1f47
 404:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 40a <.debug_macro+0x40a>
			407: R_X86_64_32	.debug_str+0x29a5
 40a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 410 <.debug_macro+0x410>
			40d: R_X86_64_32	.debug_str+0x47dd
 410:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 416 <.debug_macro+0x416>
			413: R_X86_64_32	.debug_str+0x4e13
 416:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 41c <.debug_macro+0x41c>
			419: R_X86_64_32	.debug_str+0x1ad9
 41c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 422 <.debug_macro+0x422>
			41f: R_X86_64_32	.debug_str+0x25c7
 422:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 428 <.debug_macro+0x428>
			425: R_X86_64_32	.debug_str+0x4d01
 428:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 42e <.debug_macro+0x42e>
			42b: R_X86_64_32	.debug_str+0x1d0
 42e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 434 <.debug_macro+0x434>
			431: R_X86_64_32	.debug_str+0xb64
 434:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 43a <.debug_macro+0x43a>
			437: R_X86_64_32	.debug_str+0x464c
 43a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 440 <.debug_macro+0x440>
			43d: R_X86_64_32	.debug_str+0x14e0
 440:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 446 <.debug_macro+0x446>
			443: R_X86_64_32	.debug_str+0x2b97
 446:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 44c <.debug_macro+0x44c>
			449: R_X86_64_32	.debug_str+0x98d
 44c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 452 <.debug_macro+0x452>
			44f: R_X86_64_32	.debug_str+0x334d
 452:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 458 <.debug_macro+0x458>
			455: R_X86_64_32	.debug_str+0x2ad9
 458:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 45e <.debug_macro+0x45e>
			45b: R_X86_64_32	.debug_str+0x15d1
 45e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 464 <.debug_macro+0x464>
			461: R_X86_64_32	.debug_str+0x4c96
 464:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 46a <.debug_macro+0x46a>
			467: R_X86_64_32	.debug_str+0x4eb0
 46a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 470 <.debug_macro+0x470>
			46d: R_X86_64_32	.debug_str+0x3c45
 470:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 476 <.debug_macro+0x476>
			473: R_X86_64_32	.debug_str+0x1eae
 476:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 47c <.debug_macro+0x47c>
			479: R_X86_64_32	.debug_str+0xb07
 47c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 482 <.debug_macro+0x482>
			47f: R_X86_64_32	.debug_str+0x2be1
 482:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 488 <.debug_macro+0x488>
			485: R_X86_64_32	.debug_str+0x150f
 488:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 48e <.debug_macro+0x48e>
			48b: R_X86_64_32	.debug_str+0x4e2a
 48e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 494 <.debug_macro+0x494>
			491: R_X86_64_32	.debug_str+0x2cb9
 494:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 49a <.debug_macro+0x49a>
			497: R_X86_64_32	.debug_str+0x36f6
 49a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 4a0 <.debug_macro+0x4a0>
			49d: R_X86_64_32	.debug_str+0x285
 4a0:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 4a6 <.debug_macro+0x4a6>
			4a3: R_X86_64_32	.debug_str+0x2543
 4a6:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 4ac <.debug_macro+0x4ac>
			4a9: R_X86_64_32	.debug_str+0x1e75
 4ac:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 4b2 <.debug_macro+0x4b2>
			4af: R_X86_64_32	.debug_str+0xb49
 4b2:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 4b8 <.debug_macro+0x4b8>
			4b5: R_X86_64_32	.debug_str+0x23d8
 4b8:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 4be <.debug_macro+0x4be>
			4bb: R_X86_64_32	.debug_str+0x4b9e
 4be:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 4c4 <.debug_macro+0x4c4>
			4c1: R_X86_64_32	.debug_str+0x1b88
 4c4:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 4ca <.debug_macro+0x4ca>
			4c7: R_X86_64_32	.debug_str+0x4cc6
 4ca:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 4d0 <.debug_macro+0x4d0>
			4cd: R_X86_64_32	.debug_str+0x2a05
 4d0:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 4d6 <.debug_macro+0x4d6>
			4d3: R_X86_64_32	.debug_str+0x3411
 4d6:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 4dc <.debug_macro+0x4dc>
			4d9: R_X86_64_32	.debug_str+0x2e4b
 4dc:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 4e2 <.debug_macro+0x4e2>
			4df: R_X86_64_32	.debug_str+0x101f
 4e2:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 4e8 <.debug_macro+0x4e8>
			4e5: R_X86_64_32	.debug_str+0xa6
 4e8:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 4ee <.debug_macro+0x4ee>
			4eb: R_X86_64_32	.debug_str+0x118e
 4ee:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 4f4 <.debug_macro+0x4f4>
			4f1: R_X86_64_32	.debug_str+0x4e65
 4f4:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 4fa <.debug_macro+0x4fa>
			4f7: R_X86_64_32	.debug_str+0xcf7
 4fa:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 500 <.debug_macro+0x500>
			4fd: R_X86_64_32	.debug_str+0x45d3
 500:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 506 <.debug_macro+0x506>
			503: R_X86_64_32	.debug_str+0x1aa7
 506:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 50c <.debug_macro+0x50c>
			509: R_X86_64_32	.debug_str+0xbf
 50c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 512 <.debug_macro+0x512>
			50f: R_X86_64_32	.debug_str+0x3314
 512:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 518 <.debug_macro+0x518>
			515: R_X86_64_32	.debug_str+0x1e37
 518:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 51e <.debug_macro+0x51e>
			51b: R_X86_64_32	.debug_str+0x268e
 51e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 524 <.debug_macro+0x524>
			521: R_X86_64_32	.debug_str+0x6a1
 524:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 52a <.debug_macro+0x52a>
			527: R_X86_64_32	.debug_str+0x3b1b
 52a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 530 <.debug_macro+0x530>
			52d: R_X86_64_32	.debug_str+0x4b35
 530:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 536 <.debug_macro+0x536>
			533: R_X86_64_32	.debug_str+0x1fdf
 536:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 53c <.debug_macro+0x53c>
			539: R_X86_64_32	.debug_str+0x1584
 53c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 542 <.debug_macro+0x542>
			53f: R_X86_64_32	.debug_str+0x34
 542:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 548 <.debug_macro+0x548>
			545: R_X86_64_32	.debug_str+0x1758
 548:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 54e <.debug_macro+0x54e>
			54b: R_X86_64_32	.debug_str+0x1ba0
 54e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 554 <.debug_macro+0x554>
			551: R_X86_64_32	.debug_str+0x1172
 554:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 55a <.debug_macro+0x55a>
			557: R_X86_64_32	.debug_str+0x2db5
 55a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 560 <.debug_macro+0x560>
			55d: R_X86_64_32	.debug_str+0x140c
 560:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 566 <.debug_macro+0x566>
			563: R_X86_64_32	.debug_str+0x1a04
 566:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 56c <.debug_macro+0x56c>
			569: R_X86_64_32	.debug_str+0x4bd3
 56c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 572 <.debug_macro+0x572>
			56f: R_X86_64_32	.debug_str+0xeb3
 572:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 578 <.debug_macro+0x578>
			575: R_X86_64_32	.debug_str+0x1a1f
 578:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 57e <.debug_macro+0x57e>
			57b: R_X86_64_32	.debug_str+0x38ff
 57e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 584 <.debug_macro+0x584>
			581: R_X86_64_32	.debug_str+0x4891
 584:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 58a <.debug_macro+0x58a>
			587: R_X86_64_32	.debug_str+0x4ddf
 58a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 590 <.debug_macro+0x590>
			58d: R_X86_64_32	.debug_str+0x1f98
 590:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 596 <.debug_macro+0x596>
			593: R_X86_64_32	.debug_str+0xe8f
 596:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 59c <.debug_macro+0x59c>
			599: R_X86_64_32	.debug_str+0x2507
 59c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 5a2 <.debug_macro+0x5a2>
			59f: R_X86_64_32	.debug_str+0x24f5
 5a2:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 5a8 <.debug_macro+0x5a8>
			5a5: R_X86_64_32	.debug_str+0x35c8
 5a8:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 5ae <.debug_macro+0x5ae>
			5ab: R_X86_64_32	.debug_str+0x34e6
 5ae:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 5b4 <.debug_macro+0x5b4>
			5b1: R_X86_64_32	.debug_str+0x156
 5b4:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 5ba <.debug_macro+0x5ba>
			5b7: R_X86_64_32	.debug_str+0x4af3
 5ba:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 5c0 <.debug_macro+0x5c0>
			5bd: R_X86_64_32	.debug_str+0x355
 5c0:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 5c6 <.debug_macro+0x5c6>
			5c3: R_X86_64_32	.debug_str+0x414
 5c6:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 5cc <.debug_macro+0x5cc>
			5c9: R_X86_64_32	.debug_str+0x27db
 5cc:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 5d2 <.debug_macro+0x5d2>
			5cf: R_X86_64_32	.debug_str+0x1cf6
 5d2:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 5d8 <.debug_macro+0x5d8>
			5d5: R_X86_64_32	.debug_str+0x1435
 5d8:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 5de <.debug_macro+0x5de>
			5db: R_X86_64_32	.debug_str+0x2033
 5de:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 5e4 <.debug_macro+0x5e4>
			5e1: R_X86_64_32	.debug_str+0xd71
 5e4:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 5ea <.debug_macro+0x5ea>
			5e7: R_X86_64_32	.debug_str+0x47c2
 5ea:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 5f0 <.debug_macro+0x5f0>
			5ed: R_X86_64_32	.debug_str+0x3b71
 5f0:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 5f6 <.debug_macro+0x5f6>
			5f3: R_X86_64_32	.debug_str+0xf15
 5f6:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 5fc <.debug_macro+0x5fc>
			5f9: R_X86_64_32	.debug_str+0x1073
 5fc:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 602 <.debug_macro+0x602>
			5ff: R_X86_64_32	.debug_str+0x195f
 602:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 608 <.debug_macro+0x608>
			605: R_X86_64_32	.debug_str+0x2058
 608:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 60e <.debug_macro+0x60e>
			60b: R_X86_64_32	.debug_str+0x25ac
 60e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 614 <.debug_macro+0x614>
			611: R_X86_64_32	.debug_str+0x4538
 614:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 61a <.debug_macro+0x61a>
			617: R_X86_64_32	.debug_str+0x20fb
 61a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 620 <.debug_macro+0x620>
			61d: R_X86_64_32	.debug_str+0x3398
 620:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 626 <.debug_macro+0x626>
			623: R_X86_64_32	.debug_str+0x115
 626:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 62c <.debug_macro+0x62c>
			629: R_X86_64_32	.debug_str+0x4d8d
 62c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 632 <.debug_macro+0x632>
			62f: R_X86_64_32	.debug_str+0x184d
 632:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 638 <.debug_macro+0x638>
			635: R_X86_64_32	.debug_str+0x3582
 638:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 63e <.debug_macro+0x63e>
			63b: R_X86_64_32	.debug_str+0x28b9
 63e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 644 <.debug_macro+0x644>
			641: R_X86_64_32	.debug_str+0x2e36
 644:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 64a <.debug_macro+0x64a>
			647: R_X86_64_32	.debug_str+0x41a9
 64a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 650 <.debug_macro+0x650>
			64d: R_X86_64_32	.debug_str+0x1865
 650:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 656 <.debug_macro+0x656>
			653: R_X86_64_32	.debug_str+0x1119
 656:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 65c <.debug_macro+0x65c>
			659: R_X86_64_32	.debug_str+0x2357
 65c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 662 <.debug_macro+0x662>
			65f: R_X86_64_32	.debug_str+0x950
 662:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 668 <.debug_macro+0x668>
			665: R_X86_64_32	.debug_str+0x287a
 668:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 66e <.debug_macro+0x66e>
			66b: R_X86_64_32	.debug_str+0x4e7b
 66e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 674 <.debug_macro+0x674>
			671: R_X86_64_32	.debug_str+0x40ed
 674:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 67a <.debug_macro+0x67a>
			677: R_X86_64_32	.debug_str+0x34d0
 67a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 680 <.debug_macro+0x680>
			67d: R_X86_64_32	.debug_str+0x4caf
 680:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 686 <.debug_macro+0x686>
			683: R_X86_64_32	.debug_str+0x166f
 686:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 68c <.debug_macro+0x68c>
			689: R_X86_64_32	.debug_str+0x1b6
 68c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 692 <.debug_macro+0x692>
			68f: R_X86_64_32	.debug_str+0x75
 692:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 698 <.debug_macro+0x698>
			695: R_X86_64_32	.debug_str+0x17c2
 698:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 69e <.debug_macro+0x69e>
			69b: R_X86_64_32	.debug_str+0x12c4
 69e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 6a4 <.debug_macro+0x6a4>
			6a1: R_X86_64_32	.debug_str+0x30a0
 6a4:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 6aa <.debug_macro+0x6aa>
			6a7: R_X86_64_32	.debug_str+0x35af
 6aa:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 6b0 <.debug_macro+0x6b0>
			6ad: R_X86_64_32	.debug_str+0x4996
 6b0:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 6b6 <.debug_macro+0x6b6>
			6b3: R_X86_64_32	.debug_str+0x1334
 6b6:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 6bc <.debug_macro+0x6bc>
			6b9: R_X86_64_32	.debug_str+0x4743
 6bc:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 6c2 <.debug_macro+0x6c2>
			6bf: R_X86_64_32	.debug_str+0x33fc
 6c2:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 6c8 <.debug_macro+0x6c8>
			6c5: R_X86_64_32	.debug_str+0x3d42
 6c8:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 6ce <.debug_macro+0x6ce>
			6cb: R_X86_64_32	.debug_str+0x2441
 6ce:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 6d4 <.debug_macro+0x6d4>
			6d1: R_X86_64_32	.debug_str+0x1da5
 6d4:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 6da <.debug_macro+0x6da>
			6d7: R_X86_64_32	.debug_str+0x1041
 6da:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 6e0 <.debug_macro+0x6e0>
			6dd: R_X86_64_32	.debug_str+0x2e00
 6e0:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 6e6 <.debug_macro+0x6e6>
			6e3: R_X86_64_32	.debug_str+0x1e50
 6e6:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 6ec <.debug_macro+0x6ec>
			6e9: R_X86_64_32	.debug_str+0x2a0
 6ec:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 6f2 <.debug_macro+0x6f2>
			6ef: R_X86_64_32	.debug_str+0x10d4
 6f2:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 6f8 <.debug_macro+0x6f8>
			6f5: R_X86_64_32	.debug_str+0x1c24
 6f8:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 6fe <.debug_macro+0x6fe>
			6fb: R_X86_64_32	.debug_str+0x2467
 6fe:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 704 <.debug_macro+0x704>
			701: R_X86_64_32	.debug_str+0x3db0
 704:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 70a <.debug_macro+0x70a>
			707: R_X86_64_32	.debug_str+0x31a7
 70a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 710 <.debug_macro+0x710>
			70d: R_X86_64_32	.debug_str+0x4519
 710:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 716 <.debug_macro+0x716>
			713: R_X86_64_32	.debug_str+0x169e
 716:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 71c <.debug_macro+0x71c>
			719: R_X86_64_32	.debug_str+0x24d7
 71c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 722 <.debug_macro+0x722>
			71f: R_X86_64_32	.debug_str+0x40ce
 722:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 728 <.debug_macro+0x728>
			725: R_X86_64_32	.debug_str+0x178
 728:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 72e <.debug_macro+0x72e>
			72b: R_X86_64_32	.debug_str+0x3c5d
 72e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 734 <.debug_macro+0x734>
			731: R_X86_64_32	.debug_str+0x284b
 734:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 73a <.debug_macro+0x73a>
			737: R_X86_64_32	.debug_str+0x4d59
 73a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 740 <.debug_macro+0x740>
			73d: R_X86_64_32	.debug_str+0x4936
 740:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 746 <.debug_macro+0x746>
			743: R_X86_64_32	.debug_str+0xded
 746:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 74c <.debug_macro+0x74c>
			749: R_X86_64_32	.debug_str+0x2d66
 74c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 752 <.debug_macro+0x752>
			74f: R_X86_64_32	.debug_str+0x486
 752:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 758 <.debug_macro+0x758>
			755: R_X86_64_32	.debug_str+0x179d
 758:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 75e <.debug_macro+0x75e>
			75b: R_X86_64_32	.debug_str+0x4b0d
 75e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 764 <.debug_macro+0x764>
			761: R_X86_64_32	.debug_str+0x1b49
 764:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 76a <.debug_macro+0x76a>
			767: R_X86_64_32	.debug_str+0x25a1
 76a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 770 <.debug_macro+0x770>
			76d: R_X86_64_32	.debug_str+0x204b
 770:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 776 <.debug_macro+0x776>
			773: R_X86_64_32	.debug_str+0x47ac
 776:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 77c <.debug_macro+0x77c>
			779: R_X86_64_32	.debug_str+0x242a
 77c:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 782 <.debug_macro+0x782>
			77f: R_X86_64_32	.debug_str+0x49e4
 782:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 788 <.debug_macro+0x788>
			785: R_X86_64_32	.debug_str+0x15b5
 788:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 78e <.debug_macro+0x78e>
			78b: R_X86_64_32	.debug_str+0x2745
 78e:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 794 <.debug_macro+0x794>
			791: R_X86_64_32	.debug_str+0x40a4
 794:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 79a <.debug_macro+0x79a>
			797: R_X86_64_32	.debug_str+0x36f
 79a:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 7a0 <.debug_macro+0x7a0>
			79d: R_X86_64_32	.debug_str+0x1829
 7a0:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 7a6 <.debug_macro+0x7a6>
			7a3: R_X86_64_32	.debug_str+0x16ca
 7a6:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 7ac <.debug_macro+0x7ac>
			7a9: R_X86_64_32	.debug_str+0x4848
 7ac:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 7b2 <.debug_macro+0x7b2>
			7af: R_X86_64_32	.debug_str+0x2987
 7b2:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 7b8 <.debug_macro+0x7b8>
			7b5: R_X86_64_32	.debug_str+0x428c
 7b8:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 7be <.debug_macro+0x7be>
			7bb: R_X86_64_32	.debug_str+0x302a
 7be:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 7c4 <.debug_macro+0x7c4>
			7c1: R_X86_64_32	.debug_str+0x39fa
 7c4:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 7ca <.debug_macro+0x7ca>
			7c7: R_X86_64_32	.debug_str+0x3ca7
 7ca:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 7d0 <.debug_macro+0x7d0>
			7cd: R_X86_64_32	.debug_str+0x301f
 7d0:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 7d6 <.debug_macro+0x7d6>
			7d3: R_X86_64_32	.debug_str+0x23ee
 7d6:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 7dc <.debug_macro+0x7dc>
			7d9: R_X86_64_32	.debug_str+0x3771
 7dc:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 7e2 <.debug_macro+0x7e2>
			7df: R_X86_64_32	.debug_str+0x436c
 7e2:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 7e8 <.debug_macro+0x7e8>
			7e5: R_X86_64_32	.debug_str+0xb41
 7e8:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 7ee <.debug_macro+0x7ee>
			7eb: R_X86_64_32	.debug_str+0x4b25
 7ee:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 7f4 <.debug_macro+0x7f4>
			7f1: R_X86_64_32	.debug_str+0x1036
 7f4:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 7fa <.debug_macro+0x7fa>
			7f7: R_X86_64_32	.debug_str+0x4d52
 7fa:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 800 <.debug_macro+0x800>
			7fd: R_X86_64_32	.debug_str+0x27d1
 800:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 806 <.debug_macro+0x806>
			803: R_X86_64_32	.debug_str+0x937
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
int main(int argc, char * argv[]) {
   0:	04 00                	add    al,0x0
   2:	00 05 13 00 00 00    	add    BYTE PTR [rip+0x13],al        # 1b <.debug_macro+0x1b>
			5: R_X86_64_32	.debug_str+0x2e4
   8:	00 05 26 00 00 00    	add    BYTE PTR [rip+0x26],al        # 34 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x34>
			b: R_X86_64_32	.debug_str+0x4730
   e:	00 05 2e 00 00 00    	add    BYTE PTR [rip+0x2e],al        # 42 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x42>
			11: R_X86_64_32	.debug_str+0x1919
  14:	00 05 3a 00 00 00    	add    BYTE PTR [rip+0x3a],al        # 54 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x54>
			17: R_X86_64_32	.debug_str+0x199a
  1a:	00 05 3d 00 00 00    	add    BYTE PTR [rip+0x3d],al        # 5d <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x5d>
			1d: R_X86_64_32	.debug_str+0xaca
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
   0:	04 00                	add    al,0x0
   2:	00 05 18 00 00 00    	add    BYTE PTR [rip+0x18],al        # 20 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x20>
			5: R_X86_64_32	.debug_str+0x110e
   8:	00 05 1a 00 00 00    	add    BYTE PTR [rip+0x1a],al        # 28 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x28>
			b: R_X86_64_32	.debug_str+0x344f
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
   0:	04 00                	add    al,0x0
   2:	00 05 13 00 00 00    	add    BYTE PTR [rip+0x13],al        # 1b <.debug_macro+0x1b>
			5: R_X86_64_32	.debug_str+0x2535
   8:	00 06                	add    BYTE PTR [rsi],al
   a:	77 00                	ja     c <.debug_macro+0xc>
			b: R_X86_64_32	.debug_str+0x4a1b
   c:	00 00                	add    BYTE PTR [rax],al
   e:	00 06                	add    BYTE PTR [rsi],al
  10:	78 00                	js     12 <.debug_macro+0x12>
			11: R_X86_64_32	.debug_str+0x1883
  12:	00 00                	add    BYTE PTR [rax],al
  14:	00 06                	add    BYTE PTR [rsi],al
  16:	79 00                	jns    18 <.debug_macro+0x18>
			17: R_X86_64_32	.debug_str+0x1840
  18:	00 00                	add    BYTE PTR [rax],al
  1a:	00 06                	add    BYTE PTR [rsi],al
  1c:	7a 00                	jp     1e <.debug_macro+0x1e>
			1d: R_X86_64_32	.debug_str+0x80c
	b = 5;
  1e:	00 00                	add    BYTE PTR [rax],al
  20:	00 06                	add    BYTE PTR [rsi],al
  22:	7b 00                	jnp    24 <.debug_macro+0x24>
			23: R_X86_64_32	.debug_str+0x4dd3
  24:	00 00                	add    BYTE PTR [rax],al
	printf ("Enter a number between 1 and 10 -> ");
  26:	00 06                	add    BYTE PTR [rsi],al
  28:	7c 00                	jl     2a <.debug_macro+0x2a>
			29: R_X86_64_32	.debug_str+0x3503
  2a:	00 00                	add    BYTE PTR [rax],al
  2c:	00 06                	add    BYTE PTR [rsi],al
  2e:	7d 00                	jge    30 <.debug_macro+0x30>
			2f: R_X86_64_32	.debug_str+0x23a7
  30:	00 00                	add    BYTE PTR [rax],al
  32:	00 06                	add    BYTE PTR [rsi],al
  34:	7e 00                	jle    36 <.debug_macro+0x36>
			35: R_X86_64_32	.debug_str+0x134f
	scanf ("%d", &a);
  36:	00 00                	add    BYTE PTR [rax],al
  38:	00 06                	add    BYTE PTR [rsi],al
  3a:	7f 00                	jg     3c <.debug_macro+0x3c>
			3b: R_X86_64_32	.debug_str+0x38f3
  3c:	00 00                	add    BYTE PTR [rax],al
  3e:	00 06                	add    BYTE PTR [rsi],al
  40:	80 01 00             	add    BYTE PTR [rcx],0x0
			42: R_X86_64_32	.debug_str+0x455d
  43:	00 00                	add    BYTE PTR [rax],al
  45:	00 06                	add    BYTE PTR [rsi],al
  47:	81 01 00 00 00 00    	add    DWORD PTR [rcx],0x0
			49: R_X86_64_32	.debug_str+0xd8b
  4d:	06                   	(bad)  
	if (a > b) {
  4e:	82                   	(bad)  
  4f:	01 00                	add    DWORD PTR [rax],eax
			50: R_X86_64_32	.debug_str+0x3080
  51:	00 00                	add    BYTE PTR [rax],al
  53:	00 06                	add    BYTE PTR [rsi],al
  55:	83 01 00             	add    DWORD PTR [rcx],0x0
			57: R_X86_64_32	.debug_str+0x4038
		printf ("The number was higher than 5!\n");
  58:	00 00                	add    BYTE PTR [rax],al
  5a:	00 06                	add    BYTE PTR [rsi],al
  5c:	84 01                	test   BYTE PTR [rcx],al
  5e:	00 00                	add    BYTE PTR [rax],al
			5e: R_X86_64_32	.debug_str+0x386f
  60:	00 00                	add    BYTE PTR [rax],al
  62:	06                   	(bad)  
  63:	85 01                	test   DWORD PTR [rcx],eax
  65:	00 00                	add    BYTE PTR [rax],al
			65: R_X86_64_32	.debug_str+0x2709
}
  67:	00 00                	add    BYTE PTR [rax],al
  69:	06                   	(bad)  
  6a:	86 01                	xchg   BYTE PTR [rcx],al
  6c:	00 00                	add    BYTE PTR [rax],al
			6c: R_X86_64_32	.debug_str+0x4790
  6e:	00 00                	add    BYTE PTR [rax],al
  70:	06                   	(bad)  
  71:	87 01                	xchg   DWORD PTR [rcx],eax
  73:	00 00                	add    BYTE PTR [rax],al
			73: R_X86_64_32	.debug_str+0x5c9
  75:	00 00                	add    BYTE PTR [rax],al
  77:	06                   	(bad)  
  78:	88 01                	mov    BYTE PTR [rcx],al
  7a:	00 00                	add    BYTE PTR [rax],al
			7a: R_X86_64_32	.debug_str+0x29df
  7c:	00 00                	add    BYTE PTR [rax],al
  7e:	06                   	(bad)  
  7f:	89 01                	mov    DWORD PTR [rcx],eax
  81:	00 00                	add    BYTE PTR [rax],al
			81: R_X86_64_32	.debug_str+0x2a5b
  83:	00 00                	add    BYTE PTR [rax],al
  85:	06                   	(bad)  
  86:	8a 01                	mov    al,BYTE PTR [rcx]
  88:	00 00                	add    BYTE PTR [rax],al
			88: R_X86_64_32	.debug_str+0xdbd
  8a:	00 00                	add    BYTE PTR [rax],al
  8c:	06                   	(bad)  
  8d:	8b 01                	mov    eax,DWORD PTR [rcx]
  8f:	00 00                	add    BYTE PTR [rax],al
			8f: R_X86_64_32	.debug_str+0x425e
  91:	00 00                	add    BYTE PTR [rax],al
  93:	06                   	(bad)  
  94:	8c 01                	mov    WORD PTR [rcx],es
  96:	00 00                	add    BYTE PTR [rax],al
			96: R_X86_64_32	.debug_str+0x2b5e
  98:	00 00                	add    BYTE PTR [rax],al
  9a:	06                   	(bad)  
  9b:	8d 01                	lea    eax,[rcx]
  9d:	00 00                	add    BYTE PTR [rax],al
			9d: R_X86_64_32	.debug_str+0x17fb
  9f:	00 00                	add    BYTE PTR [rax],al
  a1:	06                   	(bad)  
  a2:	8e 01                	mov    es,WORD PTR [rcx]
  a4:	00 00                	add    BYTE PTR [rax],al
			a4: R_X86_64_32	.debug_str+0x58c
  a6:	00 00                	add    BYTE PTR [rax],al
  a8:	05 93 01 00 00       	add    eax,0x193
			ab: R_X86_64_32	.debug_str+0x12df
  ad:	00 00                	add    BYTE PTR [rax],al
  af:	05 9e 01 00 00       	add    eax,0x19e
			b2: R_X86_64_32	.debug_str+0x49a
  b4:	00 00                	add    BYTE PTR [rax],al
  b6:	05 ac 01 00 00       	add    eax,0x1ac
			b9: R_X86_64_32	.debug_str+0x433c
  bb:	00 00                	add    BYTE PTR [rax],al
  bd:	05 b0 01 00 00       	add    eax,0x1b0
			c0: R_X86_64_32	.debug_str+0x22aa
  c2:	00 00                	add    BYTE PTR [rax],al
  c4:	06                   	(bad)  
  c5:	dc 01                	fadd   QWORD PTR [rcx]
  c7:	00 00                	add    BYTE PTR [rax],al
			c7: R_X86_64_32	.debug_str+0x3b88
  c9:	00 00                	add    BYTE PTR [rax],al
  cb:	05 dd 01 00 00       	add    eax,0x1dd
			ce: R_X86_64_32	.debug_str+0x1b1b
  d0:	00 00                	add    BYTE PTR [rax],al
  d2:	05 e3 01 00 00       	add    eax,0x1e3
			d5: R_X86_64_32	.debug_str+0x2fc
  d7:	00 00                	add    BYTE PTR [rax],al
  d9:	05 e9 01 00 00       	add    eax,0x1e9
			dc: R_X86_64_32	.debug_str+0x17d9
  de:	00 00                	add    BYTE PTR [rax],al
  e0:	05 ef 01 00 00       	add    eax,0x1ef
			e3: R_X86_64_32	.debug_str+0x9c8
  e5:	00 00                	add    BYTE PTR [rax],al
  e7:	05 84 02 00 00       	add    eax,0x284
			ea: R_X86_64_32	.debug_str+0x1d4d
  ec:	00 00                	add    BYTE PTR [rax],al
  ee:	06                   	(bad)  
  ef:	86 02                	xchg   BYTE PTR [rdx],al
  f1:	00 00                	add    BYTE PTR [rax],al
			f1: R_X86_64_32	.debug_str+0x6f4
  f3:	00 00                	add    BYTE PTR [rax],al
  f5:	05 87 02 00 00       	add    eax,0x287
			f8: R_X86_64_32	.debug_str+0x4477
  fa:	00 00                	add    BYTE PTR [rax],al
  fc:	06                   	(bad)  
  fd:	88 02                	mov    BYTE PTR [rdx],al
  ff:	00 00                	add    BYTE PTR [rax],al
			ff: R_X86_64_32	.debug_str+0x395b
 101:	00 00                	add    BYTE PTR [rax],al
 103:	05 89 02 00 00       	add    eax,0x289
			106: R_X86_64_32	.debug_str+0x2a9a
 108:	00 00                	add    BYTE PTR [rax],al
 10a:	05 ac 02 00 00       	add    eax,0x2ac
			10d: R_X86_64_32	.debug_str+0x2cd1
 10f:	00 00                	add    BYTE PTR [rax],al
 111:	05 b0 02 00 00       	add    eax,0x2b0
			114: R_X86_64_32	.debug_str+0x9b9
 116:	00 00                	add    BYTE PTR [rax],al
 118:	05 b4 02 00 00       	add    eax,0x2b4
			11b: R_X86_64_32	.debug_str+0x2908
 11d:	00 00                	add    BYTE PTR [rax],al
 11f:	05 b8 02 00 00       	add    eax,0x2b8
			122: R_X86_64_32	.debug_str+0x89b
 124:	00 00                	add    BYTE PTR [rax],al
 126:	05 bc 02 00 00       	add    eax,0x2bc
			129: R_X86_64_32	.debug_str+0x178d
 12b:	00 00                	add    BYTE PTR [rax],al
 12d:	06                   	(bad)  
 12e:	bd 02 00 00 00       	mov    ebp,0x2
			130: R_X86_64_32	.debug_str+0x1840
 133:	00 05 be 02 00 00    	add    BYTE PTR [rip+0x2be],al        # 3f7 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x3f7>
			137: R_X86_64_32	.debug_str+0x9c8
 139:	00 00                	add    BYTE PTR [rax],al
 13b:	06                   	(bad)  
 13c:	bf 02 00 00 00       	mov    edi,0x2
			13e: R_X86_64_32	.debug_str+0x1883
 141:	00 05 c0 02 00 00    	add    BYTE PTR [rip+0x2c0],al        # 407 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x407>
			145: R_X86_64_32	.debug_str+0x17d9
 147:	00 00                	add    BYTE PTR [rax],al
 149:	05 c4 02 00 00       	add    eax,0x2c4
			14c: R_X86_64_32	.debug_str+0x3aac
 14e:	00 00                	add    BYTE PTR [rax],al
 150:	06                   	(bad)  
 151:	c5 02 00             	(bad)  
			153: R_X86_64_32	.debug_str+0xdae
 154:	00 00                	add    BYTE PTR [rax],al
 156:	00 05 c6 02 00 00    	add    BYTE PTR [rip+0x2c6],al        # 422 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x422>
			15a: R_X86_64_32	.debug_str+0xf04
 15c:	00 00                	add    BYTE PTR [rax],al
 15e:	05 f0 02 00 00       	add    eax,0x2f0
			161: R_X86_64_32	.debug_str+0x47f4
 163:	00 00                	add    BYTE PTR [rax],al
 165:	05 f4 02 00 00       	add    eax,0x2f4
			168: R_X86_64_32	.debug_str+0x81b
 16a:	00 00                	add    BYTE PTR [rax],al
 16c:	05 83 03 00 00       	add    eax,0x383
			16f: R_X86_64_32	.debug_str+0xd98
 171:	00 00                	add    BYTE PTR [rax],al
 173:	05 8b 03 00 00       	add    eax,0x38b
			176: R_X86_64_32	.debug_str+0x1934
 178:	00 00                	add    BYTE PTR [rax],al
 17a:	06                   	(bad)  
 17b:	9a                   	(bad)  
 17c:	03 00                	add    eax,DWORD PTR [rax]
			17d: R_X86_64_32	.debug_str+0x877
 17e:	00 00                	add    BYTE PTR [rax],al
 180:	00 05 9b 03 00 00    	add    BYTE PTR [rip+0x39b],al        # 521 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x521>
			184: R_X86_64_32	.debug_str+0x294a
 186:	00 00                	add    BYTE PTR [rax],al
 188:	05 9f 03 00 00       	add    eax,0x39f
			18b: R_X86_64_32	.debug_str+0x3d0b
 18d:	00 00                	add    BYTE PTR [rax],al
 18f:	05 a0 03 00 00       	add    eax,0x3a0
			192: R_X86_64_32	.debug_str+0x300c
 194:	00 00                	add    BYTE PTR [rax],al
 196:	05 a2 03 00 00       	add    eax,0x3a2
			199: R_X86_64_32	.debug_str+0x63d
 19b:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
int main(int argc, char * argv[]) {
   0:	04 00                	add    al,0x0
   2:	00 05 13 00 00 00    	add    BYTE PTR [rip+0x13],al        # 1b <.debug_macro+0x1b>
			5: R_X86_64_32	.debug_str+0x405
   8:	00 02                	add    BYTE PTR [rdx],al
   a:	22 5f 5f             	and    bl,BYTE PTR [rdi+0x5f]
   d:	50                   	push   rax
   e:	00 06                	add    BYTE PTR [rsi],al
  10:	23 00                	and    eax,DWORD PTR [rax]
			11: R_X86_64_32	.debug_str+0x27ac
  12:	00 00                	add    BYTE PTR [rax],al
  14:	00 05 2a 00 00 00    	add    BYTE PTR [rip+0x2a],al        # 44 <.debug_macro+0x44>
			17: R_X86_64_32	.debug_str+0x308e
  1a:	00 05 2b 00 00 00    	add    BYTE PTR [rip+0x2b],al        # 4b <.debug_macro+0x4b>
			1d: R_X86_64_32	.debug_str+0x4297
	b = 5;
  20:	00 05 37 00 00 00    	add    BYTE PTR [rip+0x37],al        # 5d <.debug_macro+0x5d>
			23: R_X86_64_32	.debug_str+0x396b
	printf ("Enter a number between 1 and 10 -> ");
  26:	00 05 38 00 00 00    	add    BYTE PTR [rip+0x38],al        # 64 <.debug_macro+0x64>
			29: R_X86_64_32	.debug_str+0x4c6e
  2c:	00 05 39 00 00 00    	add    BYTE PTR [rip+0x39],al        # 6b <.debug_macro+0x6b>
			2f: R_X86_64_32	.debug_str+0xe02
  32:	00 05 3a 00 00 00    	add    BYTE PTR [rip+0x3a],al        # 72 <.debug_macro+0x72>
			35: R_X86_64_32	.debug_str+0x8de
	scanf ("%d", &a);
  38:	00 05 59 00 00 00    	add    BYTE PTR [rip+0x59],al        # 97 <.debug_macro+0x97>
			3b: R_X86_64_32	.debug_str+0x147a
  3e:	00 05 5e 00 00 00    	add    BYTE PTR [rip+0x5e],al        # a2 <.debug_macro+0xa2>
			41: R_X86_64_32	.debug_str+0x3cb2
  44:	00 05 5f 00 00 00    	add    BYTE PTR [rip+0x5f],al        # a9 <.debug_macro+0xa9>
			47: R_X86_64_32	.debug_str+0x149d
  4a:	00 05 64 00 00 00    	add    BYTE PTR [rip+0x64],al        # b4 <.debug_macro+0xb4>
			4d: R_X86_64_32	.debug_str+0x3135
	if (a > b) {
  50:	00 05 65 00 00 00    	add    BYTE PTR [rip+0x65],al        # bb <.debug_macro+0xbb>
			53: R_X86_64_32	.debug_str+0x332d
		printf ("The number was higher than 5!\n");
  56:	00 05 68 00 00 00    	add    BYTE PTR [rip+0x68],al        # c4 <.debug_macro+0xc4>
			59: R_X86_64_32	.debug_str+0xaac
  5c:	00 05 70 00 00 00    	add    BYTE PTR [rip+0x70],al        # d2 <.debug_macro+0xd2>
			5f: R_X86_64_32	.debug_str+0x19c7
  62:	00 05 71 00 00 00    	add    BYTE PTR [rip+0x71],al        # d9 <.debug_macro+0xd9>
			65: R_X86_64_32	.debug_str+0x46c1
}
  68:	00 05 76 00 00 00    	add    BYTE PTR [rip+0x76],al        # e4 <.debug_macro+0xe4>
			6b: R_X86_64_32	.debug_str+0x2fad
  6e:	00 05 77 00 00 00    	add    BYTE PTR [rip+0x77],al        # eb <.debug_macro+0xeb>
			71: R_X86_64_32	.debug_str+0x2c1d
  74:	00 05 7a 00 00 00    	add    BYTE PTR [rip+0x7a],al        # f4 <.debug_macro+0xf4>
			77: R_X86_64_32	.debug_str+0x32c4
  7a:	00 05 7c 00 00 00    	add    BYTE PTR [rip+0x7c],al        # fc <.debug_macro+0xfc>
			7d: R_X86_64_32	.debug_str+0x3c01
  80:	00 05 7d 00 00 00    	add    BYTE PTR [rip+0x7d],al        # 103 <.debug_macro+0x103>
			83: R_X86_64_32	.debug_str+0x4947
  86:	00 05 8a 01 00 00    	add    BYTE PTR [rip+0x18a],al        # 216 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x216>
			8a: R_X86_64_32	.debug_str+0x278
  8c:	00 00                	add    BYTE PTR [rax],al
  8e:	05 8b 01 00 00       	add    eax,0x18b
			91: R_X86_64_32	.debug_str+0x2967
  93:	00 00                	add    BYTE PTR [rax],al
  95:	05 a9 01 00 00       	add    eax,0x1a9
			98: R_X86_64_32	.debug_str+0x2095
  9a:	00 00                	add    BYTE PTR [rax],al
  9c:	05 b0 01 00 00       	add    eax,0x1b0
			9f: R_X86_64_32	.debug_str+0x38a2
  a1:	00 00                	add    BYTE PTR [rax],al
  a3:	05 b2 01 00 00       	add    eax,0x1b2
			a6: R_X86_64_32	.debug_str+0x13b7
  a8:	00 00                	add    BYTE PTR [rax],al
  aa:	05 b5 01 00 00       	add    eax,0x1b5
			ad: R_X86_64_32	.debug_str+0x4ab8
  af:	00 00                	add    BYTE PTR [rax],al
  b1:	05 b6 01 00 00       	add    eax,0x1b6
			b4: R_X86_64_32	.debug_str+0x3f0a
  b6:	00 00                	add    BYTE PTR [rax],al
  b8:	05 cb 01 00 00       	add    eax,0x1cb
			bb: R_X86_64_32	.debug_str+0x37f0
  bd:	00 00                	add    BYTE PTR [rax],al
  bf:	05 d3 01 00 00       	add    eax,0x1d3
			c2: R_X86_64_32	.debug_str+0x4049
  c4:	00 00                	add    BYTE PTR [rax],al
  c6:	05 dd 01 00 00       	add    eax,0x1dd
			c9: R_X86_64_32	.debug_str+0x3a3a
  cb:	00 00                	add    BYTE PTR [rax],al
  cd:	05 e4 01 00 00       	add    eax,0x1e4
			d0: R_X86_64_32	.debug_str+0x55c
  d2:	00 00                	add    BYTE PTR [rax],al
  d4:	05 ed 01 00 00       	add    eax,0x1ed
			d7: R_X86_64_32	.debug_str+0x1215
  d9:	00 00                	add    BYTE PTR [rax],al
  db:	05 ee 01 00 00       	add    eax,0x1ee
			de: R_X86_64_32	.debug_str+0x22f4
  e0:	00 00                	add    BYTE PTR [rax],al
  e2:	05 f6 01 00 00       	add    eax,0x1f6
			e5: R_X86_64_32	.debug_str+0x2d7b
  e7:	00 00                	add    BYTE PTR [rax],al
  e9:	05 80 02 00 00       	add    eax,0x280
			ec: R_X86_64_32	.debug_str+0x314a
  ee:	00 00                	add    BYTE PTR [rax],al
  f0:	05 8d 02 00 00       	add    eax,0x28d
			f3: R_X86_64_32	.debug_str+0x2c51
  f5:	00 00                	add    BYTE PTR [rax],al
  f7:	05 97 02 00 00       	add    eax,0x297
			fa: R_X86_64_32	.debug_str+0x4148
  fc:	00 00                	add    BYTE PTR [rax],al
  fe:	05 a0 02 00 00       	add    eax,0x2a0
			101: R_X86_64_32	.debug_str+0x82a
 103:	00 00                	add    BYTE PTR [rax],al
 105:	05 a8 02 00 00       	add    eax,0x2a8
			108: R_X86_64_32	.debug_str+0x4663
 10a:	00 00                	add    BYTE PTR [rax],al
 10c:	05 b1 02 00 00       	add    eax,0x2b1
			10f: R_X86_64_32	.debug_str+0x14f8
 111:	00 00                	add    BYTE PTR [rax],al
 113:	06                   	(bad)  
 114:	b9 02 00 00 00       	mov    ecx,0x2
			116: R_X86_64_32	.debug_str+0x3ec0
 119:	00 05 ba 02 00 00    	add    BYTE PTR [rip+0x2ba],al        # 3d9 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x3d9>
			11d: R_X86_64_32	.debug_str+0x2242
 11f:	00 00                	add    BYTE PTR [rax],al
 121:	05 c3 02 00 00       	add    eax,0x2c3
			124: R_X86_64_32	.debug_str+0x1243
 126:	00 00                	add    BYTE PTR [rax],al
 128:	05 d5 02 00 00       	add    eax,0x2d5
			12b: R_X86_64_32	.debug_str+0xfca
 12d:	00 00                	add    BYTE PTR [rax],al
 12f:	05 d6 02 00 00       	add    eax,0x2d6
			132: R_X86_64_32	.debug_str+0xca8
 134:	00 00                	add    BYTE PTR [rax],al
 136:	05 df 02 00 00       	add    eax,0x2df
			139: R_X86_64_32	.debug_str+0x30c4
 13b:	00 00                	add    BYTE PTR [rax],al
 13d:	05 e5 02 00 00       	add    eax,0x2e5
			140: R_X86_64_32	.debug_str+0x1de0
 142:	00 00                	add    BYTE PTR [rax],al
 144:	05 e6 02 00 00       	add    eax,0x2e6
			147: R_X86_64_32	.debug_str+0x51c
 149:	00 00                	add    BYTE PTR [rax],al
 14b:	05 fa 02 00 00       	add    eax,0x2fa
			14e: R_X86_64_32	.debug_str+0x4106
 150:	00 00                	add    BYTE PTR [rax],al
 152:	05 89 03 00 00       	add    eax,0x389
			155: R_X86_64_32	.debug_str+0x452
 157:	00 00                	add    BYTE PTR [rax],al
 159:	05 8a 03 00 00       	add    eax,0x38a
			15c: R_X86_64_32	.debug_str+0x2f10
 15e:	00 00                	add    BYTE PTR [rax],al
 160:	05 a0 03 00 00       	add    eax,0x3a0
			163: R_X86_64_32	.debug_str+0x373e
 165:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
int main(int argc, char * argv[]) {
   0:	04 00                	add    al,0x0
   2:	00 05 04 00 00 00    	add    BYTE PTR [rip+0x4],al        # c <.debug_macro+0xc>
			5: R_X86_64_32	.debug_str+0x4b17
   8:	00 05 0c 00 00 00    	add    BYTE PTR [rip+0xc],al        # 1a <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x1a>
			b: R_X86_64_32	.debug_str+0x4bb6
   e:	00 05 0e 00 00 00    	add    BYTE PTR [rip+0xe],al        # 22 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x22>
			11: R_X86_64_32	.debug_str+0x24c1
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
   0:	04 00                	add    al,0x0
   2:	00 05 c2 03 00 00    	add    BYTE PTR [rip+0x3c2],al        # 3ca <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x3ca>
			6: R_X86_64_32	.debug_str+0x37c5
   8:	00 00                	add    BYTE PTR [rax],al
   a:	05 c3 03 00 00       	add    eax,0x3c3
			d: R_X86_64_32	.debug_str+0x5fe
   f:	00 00                	add    BYTE PTR [rax],al
  11:	05 c4 03 00 00       	add    eax,0x3c4
			14: R_X86_64_32	.debug_str+0x21e1
  16:	00 00                	add    BYTE PTR [rax],al
  18:	05 c5 03 00 00       	add    eax,0x3c5
			1b: R_X86_64_32	.debug_str+0x383f
  1d:	00 00                	add    BYTE PTR [rax],al
	b = 5;
  1f:	05 c6 03 00 00       	add    eax,0x3c6
			22: R_X86_64_32	.debug_str+0xc31
  24:	00 00                	add    BYTE PTR [rax],al
	printf ("Enter a number between 1 and 10 -> ");
  26:	05 c8 03 00 00       	add    eax,0x3c8
			29: R_X86_64_32	.debug_str+0x3e7e
  2b:	00 00                	add    BYTE PTR [rax],al
  2d:	05 c9 03 00 00       	add    eax,0x3c9
			30: R_X86_64_32	.debug_str+0x136d
  32:	00 00                	add    BYTE PTR [rax],al
  34:	05 d4 03 00 00       	add    eax,0x3d4
			37: R_X86_64_32	.debug_str+0x3d7d
	scanf ("%d", &a);
  39:	00 00                	add    BYTE PTR [rax],al
  3b:	05 d5 03 00 00       	add    eax,0x3d5
			3e: R_X86_64_32	.debug_str+0xe43
  40:	00 00                	add    BYTE PTR [rax],al
  42:	05 e7 03 00 00       	add    eax,0x3e7
			45: R_X86_64_32	.debug_str+0x1720
  47:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
int main(int argc, char * argv[]) {
   0:	04 00                	add    al,0x0
   2:	00 05 0a 00 00 00    	add    BYTE PTR [rip+0xa],al        # 12 <.debug_macro+0x12>
			5: R_X86_64_32	.debug_str+0x3c7e
   8:	00 05 0b 00 00 00    	add    BYTE PTR [rip+0xb],al        # 19 <.debug_macro+0x19>
			b: R_X86_64_32	.debug_str+0x8af
   e:	00 05 0c 00 00 00    	add    BYTE PTR [rip+0xc],al        # 20 <.debug_macro+0x20>
			11: R_X86_64_32	.debug_str+0x1568
  14:	00 05 0d 00 00 00    	add    BYTE PTR [rip+0xd],al        # 27 <.debug_macro+0x27>
			17: R_X86_64_32	.debug_str+0x90d
  1a:	00 05 0e 00 00 00    	add    BYTE PTR [rip+0xe],al        # 2e <.debug_macro+0x2e>
			1d: R_X86_64_32	.debug_str+0x1ac3
	b = 5;
  20:	00 05 0f 00 00 00    	add    BYTE PTR [rip+0xf],al        # 35 <.debug_macro+0x35>
			23: R_X86_64_32	.debug_str+0x34c1
	printf ("Enter a number between 1 and 10 -> ");
  26:	00 05 10 00 00 00    	add    BYTE PTR [rip+0x10],al        # 3c <.debug_macro+0x3c>
			29: R_X86_64_32	.debug_str+0x15f0
  2c:	00 05 11 00 00 00    	add    BYTE PTR [rip+0x11],al        # 43 <.debug_macro+0x43>
			2f: R_X86_64_32	.debug_str+0x4e56
  32:	00 05 12 00 00 00    	add    BYTE PTR [rip+0x12],al        # 4a <.debug_macro+0x4a>
			35: R_X86_64_32	.debug_str+0x197d
	scanf ("%d", &a);
  38:	00 05 13 00 00 00    	add    BYTE PTR [rip+0x13],al        # 51 <.debug_macro+0x51>
			3b: R_X86_64_32	.debug_str+0x48f7
  3e:	00 05 14 00 00 00    	add    BYTE PTR [rip+0x14],al        # 58 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x58>
			41: R_X86_64_32	.debug_str+0x109d
  44:	00 05 15 00 00 00    	add    BYTE PTR [rip+0x15],al        # 5f <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x5f>
			47: R_X86_64_32	.debug_str+0xa9a
  4a:	00 05 16 00 00 00    	add    BYTE PTR [rip+0x16],al        # 66 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x66>
			4d: R_X86_64_32	.debug_str+0x4c48
	if (a > b) {
  50:	00 05 17 00 00 00    	add    BYTE PTR [rip+0x17],al        # 6d <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x6d>
			53: R_X86_64_32	.debug_str+0x170b
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
int main(int argc, char * argv[]) {
   0:	04 00                	add    al,0x0
   2:	00 06                	add    BYTE PTR [rsi],al
   4:	25 00 00 00 00       	and    eax,0x0
			5: R_X86_64_32	.debug_str+0x2b72
   9:	05 2a 00 00 00       	add    eax,0x2a
			b: R_X86_64_32	.debug_str+0x12ad
   e:	00 06                	add    BYTE PTR [rsi],al
  10:	2f                   	(bad)  
  11:	00 00                	add    BYTE PTR [rax],al
			11: R_X86_64_32	.debug_str+0x449e
  13:	00 00                	add    BYTE PTR [rax],al
  15:	05 33 00 00 00       	add    eax,0x33
			17: R_X86_64_32	.debug_str+0x48d7
  1a:	00 06                	add    BYTE PTR [rsi],al
  1c:	38 00                	cmp    BYTE PTR [rax],al
			1d: R_X86_64_32	.debug_str+0x377b
	b = 5;
  1e:	00 00                	add    BYTE PTR [rax],al
  20:	00 05 3c 00 00 00    	add    BYTE PTR [rip+0x3c],al        # 62 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x62>
			23: R_X86_64_32	.debug_str+0x4861
	printf ("Enter a number between 1 and 10 -> ");
  26:	00 06                	add    BYTE PTR [rsi],al
  28:	41 00 00             	add    BYTE PTR [r8],al
			29: R_X86_64_32	.debug_str+0xd51
  2b:	00 00                	add    BYTE PTR [rax],al
  2d:	05 45 00 00 00       	add    eax,0x45
			2f: R_X86_64_32	.debug_str+0x3ad6
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
int main(int argc, char * argv[]) {
   0:	04 00                	add    al,0x0
   2:	00 05 1f 00 00 00    	add    BYTE PTR [rip+0x1f],al        # 27 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x27>
			5: R_X86_64_32	.debug_str+0x2f9e
   8:	00 05 20 00 00 00    	add    BYTE PTR [rip+0x20],al        # 2e <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x2e>
			b: R_X86_64_32	.debug_str+0x694
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
   0:	04 00                	add    al,0x0
   2:	00 05 bb 01 00 00    	add    BYTE PTR [rip+0x1bb],al        # 1c3 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x1c3>
			6: R_X86_64_32	.debug_str+0x26ca
   8:	00 00                	add    BYTE PTR [rax],al
   a:	05 bc 01 00 00       	add    eax,0x1bc
			d: R_X86_64_32	.debug_str+0x2168
   f:	00 00                	add    BYTE PTR [rax],al
  11:	05 bd 01 00 00       	add    eax,0x1bd
			14: R_X86_64_32	.debug_str+0x513
  16:	00 00                	add    BYTE PTR [rax],al
  18:	05 be 01 00 00       	add    eax,0x1be
			1b: R_X86_64_32	.debug_str+0x16bb
  1d:	00 00                	add    BYTE PTR [rax],al
	b = 5;
  1f:	05 bf 01 00 00       	add    eax,0x1bf
			22: R_X86_64_32	.debug_str+0xf7a
  24:	00 00                	add    BYTE PTR [rax],al
	printf ("Enter a number between 1 and 10 -> ");
  26:	05 c0 01 00 00       	add    eax,0x1c0
			29: R_X86_64_32	.debug_str+0xeaa
  2b:	00 00                	add    BYTE PTR [rax],al
  2d:	05 c1 01 00 00       	add    eax,0x1c1
			30: R_X86_64_32	.debug_str+0x2147
  32:	00 00                	add    BYTE PTR [rax],al
  34:	05 c2 01 00 00       	add    eax,0x1c2
			37: R_X86_64_32	.debug_str+0xc
	scanf ("%d", &a);
  39:	00 00                	add    BYTE PTR [rax],al
  3b:	05 c3 01 00 00       	add    eax,0x1c3
			3e: R_X86_64_32	.debug_str+0x108f
  40:	00 00                	add    BYTE PTR [rax],al
  42:	05 c4 01 00 00       	add    eax,0x1c4
			45: R_X86_64_32	.debug_str+0x19b5
  47:	00 00                	add    BYTE PTR [rax],al
  49:	05 c5 01 00 00       	add    eax,0x1c5
			4c: R_X86_64_32	.debug_str+0x4e
	if (a > b) {
  4e:	00 00                	add    BYTE PTR [rax],al
  50:	05 c6 01 00 00       	add    eax,0x1c6
			53: R_X86_64_32	.debug_str+0x11a8
  55:	00 00                	add    BYTE PTR [rax],al
		printf ("The number was higher than 5!\n");
  57:	05 c7 01 00 00       	add    eax,0x1c7
			5a: R_X86_64_32	.debug_str+0x969
  5c:	00 00                	add    BYTE PTR [rax],al
  5e:	05 c8 01 00 00       	add    eax,0x1c8
			61: R_X86_64_32	.debug_str+0x2eff
  63:	00 00                	add    BYTE PTR [rax],al
  65:	05 c9 01 00 00       	add    eax,0x1c9
			68: R_X86_64_32	.debug_str+0x100b
}
  6a:	00 00                	add    BYTE PTR [rax],al
  6c:	05 ca 01 00 00       	add    eax,0x1ca
			6f: R_X86_64_32	.debug_str+0x4888
  71:	00 00                	add    BYTE PTR [rax],al
  73:	05 d2 01 00 00       	add    eax,0x1d2
			76: R_X86_64_32	.debug_str+0xa6d
  78:	00 00                	add    BYTE PTR [rax],al
  7a:	06                   	(bad)  
  7b:	ee                   	out    dx,al
  7c:	01 00                	add    DWORD PTR [rax],eax
			7d: R_X86_64_32	.debug_str+0x2e8d
  7e:	00 00                	add    BYTE PTR [rax],al
  80:	00 06                	add    BYTE PTR [rsi],al
  82:	91                   	xchg   ecx,eax
  83:	03 00                	add    eax,DWORD PTR [rax]
			84: R_X86_64_32	.debug_str+0x19ff
  85:	00 00                	add    BYTE PTR [rax],al
  87:	00 05 96 03 00 00    	add    BYTE PTR [rip+0x396],al        # 423 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x423>
			8b: R_X86_64_32	.debug_str+0x1d37
  8d:	00 00                	add    BYTE PTR [rax],al
  8f:	06                   	(bad)  
  90:	9c                   	pushf  
  91:	03 00                	add    eax,DWORD PTR [rax]
			92: R_X86_64_32	.debug_str+0x1361
  93:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
int main(int argc, char * argv[]) {
   0:	04 00                	add    al,0x0
   2:	00 05 62 00 00 00    	add    BYTE PTR [rip+0x62],al        # 6a <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x6a>
			5: R_X86_64_32	.debug_str+0x24a1
   8:	00 05 63 00 00 00    	add    BYTE PTR [rip+0x63],al        # 71 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x71>
			b: R_X86_64_32	.debug_str+0x2667
   e:	00 05 64 00 00 00    	add    BYTE PTR [rip+0x64],al        # 78 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x78>
			11: R_X86_64_32	.debug_str+0xabb
  14:	00 05 65 00 00 00    	add    BYTE PTR [rip+0x65],al        # 7f <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x7f>
			17: R_X86_64_32	.debug_str+0x1811
  1a:	00 05 66 00 00 00    	add    BYTE PTR [rip+0x66],al        # 86 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x86>
			1d: R_X86_64_32	.debug_str+0x2578
	b = 5;
  20:	00 05 67 00 00 00    	add    BYTE PTR [rip+0x67],al        # 8d <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x8d>
			23: R_X86_64_32	.debug_str+0x44f6
	printf ("Enter a number between 1 and 10 -> ");
  26:	00 05 75 00 00 00    	add    BYTE PTR [rip+0x75],al        # a1 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0xa1>
			29: R_X86_64_32	.debug_str+0x4022
  2c:	00 05 76 00 00 00    	add    BYTE PTR [rip+0x76],al        # a8 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0xa8>
			2f: R_X86_64_32	.debug_str+0x27b2
  32:	00 05 77 00 00 00    	add    BYTE PTR [rip+0x77],al        # af <wm4.0.52c9fc51a3c7999e669b5384b1132782+0xaf>
			35: R_X86_64_32	.debug_str+0x3480
	scanf ("%d", &a);
  38:	00 05 78 00 00 00    	add    BYTE PTR [rip+0x78],al        # b6 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0xb6>
			3b: R_X86_64_32	.debug_str+0x2fed
  3e:	00 05 79 00 00 00    	add    BYTE PTR [rip+0x79],al        # bd <wm4.0.52c9fc51a3c7999e669b5384b1132782+0xbd>
			41: R_X86_64_32	.debug_str+0x2992
  44:	00 05 7a 00 00 00    	add    BYTE PTR [rip+0x7a],al        # c4 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0xc4>
			47: R_X86_64_32	.debug_str+0x1c8d
  4a:	00 05 7b 00 00 00    	add    BYTE PTR [rip+0x7b],al        # cb <wm4.0.52c9fc51a3c7999e669b5384b1132782+0xcb>
			4d: R_X86_64_32	.debug_str+0x3a26
	if (a > b) {
  50:	00 05 7c 00 00 00    	add    BYTE PTR [rip+0x7c],al        # d2 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0xd2>
			53: R_X86_64_32	.debug_str+0x4221
		printf ("The number was higher than 5!\n");
  56:	00 05 7e 00 00 00    	add    BYTE PTR [rip+0x7e],al        # da <wm4.0.52c9fc51a3c7999e669b5384b1132782+0xda>
			59: R_X86_64_32	.debug_str+0x23fe
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
int main(int argc, char * argv[]) {
   0:	04 00                	add    al,0x0
   2:	00 05 18 00 00 00    	add    BYTE PTR [rip+0x18],al        # 20 <.debug_macro+0x20>
			5: R_X86_64_32	.debug_str+0x15fd
   8:	00 05 22 00 00 00    	add    BYTE PTR [rip+0x22],al        # 30 <.debug_macro+0x30>
			b: R_X86_64_32	.debug_str+0x42f1
   e:	00 05 23 00 00 00    	add    BYTE PTR [rip+0x23],al        # 37 <.debug_macro+0x37>
			11: R_X86_64_32	.debug_str+0xef
  14:	00 05 26 00 00 00    	add    BYTE PTR [rip+0x26],al        # 40 <.debug_macro+0x40>
			17: R_X86_64_32	.debug_str+0x4a28
  1a:	00 05 27 00 00 00    	add    BYTE PTR [rip+0x27],al        # 47 <.debug_macro+0x47>
			1d: R_X86_64_32	.debug_str+0x44de
	b = 5;
  20:	00 05 28 00 00 00    	add    BYTE PTR [rip+0x28],al        # 4e <.debug_macro+0x4e>
			23: R_X86_64_32	.debug_str+0x14ae
	printf ("Enter a number between 1 and 10 -> ");
  26:	00 05 29 00 00 00    	add    BYTE PTR [rip+0x29],al        # 55 <.debug_macro+0x55>
			29: R_X86_64_32	.debug_str+0x3682
  2c:	00 05 2a 00 00 00    	add    BYTE PTR [rip+0x2a],al        # 5c <.debug_macro+0x5c>
			2f: R_X86_64_32	.debug_str+0x292e
  32:	00 05 2b 00 00 00    	add    BYTE PTR [rip+0x2b],al        # 63 <.debug_macro+0x63>
			35: R_X86_64_32	.debug_str+0x2411
	scanf ("%d", &a);
  38:	00 05 2d 00 00 00    	add    BYTE PTR [rip+0x2d],al        # 6b <.debug_macro+0x6b>
			3b: R_X86_64_32	.debug_str+0x3039
  3e:	00 05 2e 00 00 00    	add    BYTE PTR [rip+0x2e],al        # 72 <.debug_macro+0x72>
			41: R_X86_64_32	.debug_str+0x2553
  44:	00 05 33 00 00 00    	add    BYTE PTR [rip+0x33],al        # 7d <.debug_macro+0x7d>
			47: R_X86_64_32	.debug_str+0x352c
  4a:	00 05 34 00 00 00    	add    BYTE PTR [rip+0x34],al        # 84 <.debug_macro+0x84>
			4d: R_X86_64_32	.debug_str+0x49ff
	if (a > b) {
  50:	00 05 35 00 00 00    	add    BYTE PTR [rip+0x35],al        # 8b <.debug_macro+0x8b>
			53: R_X86_64_32	.debug_str+0x1550
		printf ("The number was higher than 5!\n");
  56:	00 05 36 00 00 00    	add    BYTE PTR [rip+0x36],al        # 92 <.debug_macro+0x92>
			59: R_X86_64_32	.debug_str+0x5db
  5c:	00 05 37 00 00 00    	add    BYTE PTR [rip+0x37],al        # 99 <.debug_macro+0x99>
			5f: R_X86_64_32	.debug_str+0x173b
  62:	00 05 38 00 00 00    	add    BYTE PTR [rip+0x38],al        # a0 <.debug_macro+0xa0>
			65: R_X86_64_32	.debug_str+0x16d4
}
  68:	00 05 39 00 00 00    	add    BYTE PTR [rip+0x39],al        # a7 <.debug_macro+0xa7>
			6b: R_X86_64_32	.debug_str+0x2b2e
  6e:	00 05 3a 00 00 00    	add    BYTE PTR [rip+0x3a],al        # ae <.debug_macro+0xae>
			71: R_X86_64_32	.debug_str+0x200c
  74:	00 05 3b 00 00 00    	add    BYTE PTR [rip+0x3b],al        # b5 <.debug_macro+0xb5>
			77: R_X86_64_32	.debug_str+0x20da
  7a:	00 05 3c 00 00 00    	add    BYTE PTR [rip+0x3c],al        # bc <.debug_macro+0xbc>
			7d: R_X86_64_32	.debug_str+0x3bc6
  80:	00 05 3d 00 00 00    	add    BYTE PTR [rip+0x3d],al        # c3 <.debug_macro+0xc3>
			83: R_X86_64_32	.debug_str+0x36d5
  86:	00 05 3e 00 00 00    	add    BYTE PTR [rip+0x3e],al        # ca <.debug_macro+0xca>
			89: R_X86_64_32	.debug_str+0x2151
  8c:	00 05 3f 00 00 00    	add    BYTE PTR [rip+0x3f],al        # d1 <.debug_macro+0xd1>
			8f: R_X86_64_32	.debug_str+0x3e0d
  92:	00 05 40 00 00 00    	add    BYTE PTR [rip+0x40],al        # d8 <.debug_macro+0xd8>
			95: R_X86_64_32	.debug_str+0x3cc1
  98:	00 05 41 00 00 00    	add    BYTE PTR [rip+0x41],al        # df <.debug_macro+0xdf>
			9b: R_X86_64_32	.debug_str+0x1611
  9e:	00 05 42 00 00 00    	add    BYTE PTR [rip+0x42],al        # e6 <.debug_macro+0xe6>
			a1: R_X86_64_32	.debug_str+0x1a5e
  a4:	00 05 43 00 00 00    	add    BYTE PTR [rip+0x43],al        # ed <.debug_macro+0xed>
			a7: R_X86_64_32	.debug_str+0x1e1d
  aa:	00 05 44 00 00 00    	add    BYTE PTR [rip+0x44],al        # f4 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0xf4>
			ad: R_X86_64_32	.debug_str+0x218a
  b0:	00 05 45 00 00 00    	add    BYTE PTR [rip+0x45],al        # fb <wm4.0.52c9fc51a3c7999e669b5384b1132782+0xfb>
			b3: R_X86_64_32	.debug_str+0x46f7
  b6:	00 05 46 00 00 00    	add    BYTE PTR [rip+0x46],al        # 102 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x102>
			b9: R_X86_64_32	.debug_str+0x4268
  bc:	00 05 47 00 00 00    	add    BYTE PTR [rip+0x47],al        # 109 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x109>
			bf: R_X86_64_32	.debug_str+0xbf0
  c2:	00 05 48 00 00 00    	add    BYTE PTR [rip+0x48],al        # 110 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x110>
			c5: R_X86_64_32	.debug_str+0xf40
  c8:	00 05 49 00 00 00    	add    BYTE PTR [rip+0x49],al        # 117 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x117>
			cb: R_X86_64_32	.debug_str+0x3a0a
  ce:	00 05 4a 00 00 00    	add    BYTE PTR [rip+0x4a],al        # 11e <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x11e>
			d1: R_X86_64_32	.debug_str+0x4a42
  d4:	00 05 50 00 00 00    	add    BYTE PTR [rip+0x50],al        # 12a <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x12a>
			d7: R_X86_64_32	.debug_str+0x19c
  da:	00 05 53 00 00 00    	add    BYTE PTR [rip+0x53],al        # 133 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x133>
			dd: R_X86_64_32	.debug_str+0x2cdf
  e0:	00 05 56 00 00 00    	add    BYTE PTR [rip+0x56],al        # 13c <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x13c>
			e3: R_X86_64_32	.debug_str+0x1b2d
  e6:	00 05 5c 00 00 00    	add    BYTE PTR [rip+0x5c],al        # 148 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x148>
			e9: R_X86_64_32	.debug_str+0x97b
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
int main(int argc, char * argv[]) {
   0:	04 00                	add    al,0x0
   2:	00 05 05 00 00 00    	add    BYTE PTR [rip+0x5],al        # d <.debug_macro+0xd>
			5: R_X86_64_32	.debug_str+0x359c
   8:	00 05 0e 00 00 00    	add    BYTE PTR [rip+0xe],al        # 1c <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x1c>
			b: R_X86_64_32	.debug_str+0x2f9e
   e:	00 05 12 00 00 00    	add    BYTE PTR [rip+0x12],al        # 26 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x26>
			11: R_X86_64_32	.debug_str+0x694
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
   0:	04 00                	add    al,0x0
   2:	00 06                	add    BYTE PTR [rsi],al
   4:	ee                   	out    dx,al
   5:	01 00                	add    DWORD PTR [rax],eax
			6: R_X86_64_32	.debug_str+0x2e8d
   7:	00 00                	add    BYTE PTR [rax],al
   9:	00 06                	add    BYTE PTR [rsi],al
   b:	91                   	xchg   ecx,eax
   c:	03 00                	add    eax,DWORD PTR [rax]
			d: R_X86_64_32	.debug_str+0x19ff
   e:	00 00                	add    BYTE PTR [rax],al
  10:	00 05 96 03 00 00    	add    BYTE PTR [rip+0x396],al        # 3ac <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x3ac>
			14: R_X86_64_32	.debug_str+0x1d37
  16:	00 00                	add    BYTE PTR [rax],al
  18:	06                   	(bad)  
  19:	9c                   	pushf  
  1a:	03 00                	add    eax,DWORD PTR [rax]
			1b: R_X86_64_32	.debug_str+0x1361
  1c:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
   0:	04 00                	add    al,0x0
   2:	00 05 33 00 00 00    	add    BYTE PTR [rip+0x33],al        # 3b <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x3b>
			5: R_X86_64_32	.debug_str+0x9ea
   8:	00 05 35 00 00 00    	add    BYTE PTR [rip+0x35],al        # 43 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x43>
			b: R_X86_64_32	.debug_str+0x54d
   e:	00 05 36 00 00 00    	add    BYTE PTR [rip+0x36],al        # 4a <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x4a>
			11: R_X86_64_32	.debug_str+0x2e25
  14:	00 05 38 00 00 00    	add    BYTE PTR [rip+0x38],al        # 52 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x52>
			17: R_X86_64_32	.debug_str+0x18b4
  1a:	00 05 3b 00 00 00    	add    BYTE PTR [rip+0x3b],al        # 5b <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x5b>
			1d: R_X86_64_32	.debug_str+0x247
	b = 5;
  20:	00 05 3d 00 00 00    	add    BYTE PTR [rip+0x3d],al        # 63 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x63>
			23: R_X86_64_32	.debug_str+0x37b6
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
int main(int argc, char * argv[]) {
   0:	04 00                	add    al,0x0
   2:	00 05 25 00 00 00    	add    BYTE PTR [rip+0x25],al        # 2d <.debug_macro+0x2d>
			5: R_X86_64_32	.debug_str+0x4133
   8:	00 05 26 00 00 00    	add    BYTE PTR [rip+0x26],al        # 34 <.debug_macro+0x34>
			b: R_X86_64_32	.debug_str+0x4c55
   e:	00 05 27 00 00 00    	add    BYTE PTR [rip+0x27],al        # 3b <.debug_macro+0x3b>
			11: R_X86_64_32	.debug_str+0x291c
  14:	00 05 28 00 00 00    	add    BYTE PTR [rip+0x28],al        # 42 <.debug_macro+0x42>
			17: R_X86_64_32	.debug_str+0x3e44
  1a:	00 05 29 00 00 00    	add    BYTE PTR [rip+0x29],al        # 49 <.debug_macro+0x49>
			1d: R_X86_64_32	.debug_str+0x10f2
	b = 5;
  20:	00 05 2a 00 00 00    	add    BYTE PTR [rip+0x2a],al        # 50 <.debug_macro+0x50>
			23: R_X86_64_32	.debug_str+0xd31
	printf ("Enter a number between 1 and 10 -> ");
  26:	00 05 2b 00 00 00    	add    BYTE PTR [rip+0x2b],al        # 57 <.debug_macro+0x57>
			29: R_X86_64_32	.debug_str+0x3d6b
  2c:	00 05 2c 00 00 00    	add    BYTE PTR [rip+0x2c],al        # 5e <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x5e>
			2f: R_X86_64_32	.debug_str+0x1f35
  32:	00 05 2d 00 00 00    	add    BYTE PTR [rip+0x2d],al        # 65 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x65>
			35: R_X86_64_32	.debug_str+0x3a7d
	scanf ("%d", &a);
  38:	00 05 2e 00 00 00    	add    BYTE PTR [rip+0x2e],al        # 6c <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x6c>
			3b: R_X86_64_32	.debug_str+0x1fb8
  3e:	00 05 2f 00 00 00    	add    BYTE PTR [rip+0x2f],al        # 73 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x73>
			41: R_X86_64_32	.debug_str+0x3bb1
  44:	00 05 30 00 00 00    	add    BYTE PTR [rip+0x30],al        # 7a <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x7a>
			47: R_X86_64_32	.debug_str+0x3b5a
  4a:	00 05 31 00 00 00    	add    BYTE PTR [rip+0x31],al        # 81 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x81>
			4d: R_X86_64_32	.debug_str+0x4092
	if (a > b) {
  50:	00 05 34 00 00 00    	add    BYTE PTR [rip+0x34],al        # 8a <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x8a>
			53: R_X86_64_32	.debug_str+0x3ef8
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
int main(int argc, char * argv[]) {
   0:	04 00                	add    al,0x0
   2:	00 06                	add    BYTE PTR [rsi],al
   4:	22 00                	and    al,BYTE PTR [rax]
			5: R_X86_64_32	.debug_str+0x2ec4
   6:	00 00                	add    BYTE PTR [rax],al
   8:	00 05 27 00 00 00    	add    BYTE PTR [rip+0x27],al        # 35 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x35>
			b: R_X86_64_32	.debug_str+0x2373
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
   0:	04 00                	add    al,0x0
   2:	00 06                	add    BYTE PTR [rsi],al
   4:	37                   	(bad)  
   5:	00 00                	add    BYTE PTR [rax],al
			5: R_X86_64_32	.debug_str+0x4244
   7:	00 00                	add    BYTE PTR [rax],al
   9:	05 38 00 00 00       	add    eax,0x38
			b: R_X86_64_32	.debug_str+0x379b
   e:	00 05 3f 00 00 00    	add    BYTE PTR [rip+0x3f],al        # 53 <.debug_macro+0x53>
			11: R_X86_64_32	.debug_str+0x3244
  14:	00 05 42 00 00 00    	add    BYTE PTR [rip+0x42],al        # 5c <.debug_macro+0x5c>
			17: R_X86_64_32	.debug_str+0x2685
  1a:	00 05 51 00 00 00    	add    BYTE PTR [rip+0x51],al        # 71 <.debug_macro+0x71>
			1d: R_X86_64_32	.debug_str+0x2738
	b = 5;
  20:	00 05 52 00 00 00    	add    BYTE PTR [rip+0x52],al        # 78 <.debug_macro+0x78>
			23: R_X86_64_32	.debug_str+0x33d7
	printf ("Enter a number between 1 and 10 -> ");
  26:	00 05 53 00 00 00    	add    BYTE PTR [rip+0x53],al        # 7f <.debug_macro+0x7f>
			29: R_X86_64_32	.debug_str+0xe36
  2c:	00 05 54 00 00 00    	add    BYTE PTR [rip+0x54],al        # 86 <.debug_macro+0x86>
			2f: R_X86_64_32	.debug_str+0x45ed
  32:	00 05 55 00 00 00    	add    BYTE PTR [rip+0x55],al        # 8d <.debug_macro+0x8d>
			35: R_X86_64_32	.debug_str+0x17b4
	scanf ("%d", &a);
  38:	00 05 56 00 00 00    	add    BYTE PTR [rip+0x56],al        # 94 <.debug_macro+0x94>
			3b: R_X86_64_32	.debug_str+0x1c00
  3e:	00 05 57 00 00 00    	add    BYTE PTR [rip+0x57],al        # 9b <.debug_macro+0x9b>
			41: R_X86_64_32	.debug_str+0x28eb
  44:	00 05 58 00 00 00    	add    BYTE PTR [rip+0x58],al        # a2 <.debug_macro+0xa2>
			47: R_X86_64_32	.debug_str+0x2c5
  4a:	00 05 60 00 00 00    	add    BYTE PTR [rip+0x60],al        # b0 <.debug_macro+0xb0>
			4d: R_X86_64_32	.debug_str+0x2295
	if (a > b) {
  50:	00 05 61 00 00 00    	add    BYTE PTR [rip+0x61],al        # b7 <.debug_macro+0xb7>
			53: R_X86_64_32	.debug_str+0x1be4
		printf ("The number was higher than 5!\n");
  56:	00 05 62 00 00 00    	add    BYTE PTR [rip+0x62],al        # be <.debug_macro+0xbe>
			59: R_X86_64_32	.debug_str+0x3757
  5c:	00 05 63 00 00 00    	add    BYTE PTR [rip+0x63],al        # c5 <.debug_macro+0xc5>
			5f: R_X86_64_32	.debug_str+0x3f6
  62:	00 05 64 00 00 00    	add    BYTE PTR [rip+0x64],al        # cc <.debug_macro+0xcc>
			65: R_X86_64_32	.debug_str+0x3ded
}
  68:	00 05 65 00 00 00    	add    BYTE PTR [rip+0x65],al        # d3 <.debug_macro+0xd3>
			6b: R_X86_64_32	.debug_str+0x4852
  6e:	00 05 66 00 00 00    	add    BYTE PTR [rip+0x66],al        # da <.debug_macro+0xda>
			71: R_X86_64_32	.debug_str+0x5a8
  74:	00 05 67 00 00 00    	add    BYTE PTR [rip+0x67],al        # e1 <.debug_macro+0xe1>
			77: R_X86_64_32	.debug_str+0x338
  7a:	00 05 68 00 00 00    	add    BYTE PTR [rip+0x68],al        # e8 <.debug_macro+0xe8>
			7d: R_X86_64_32	.debug_str+0x1203
  80:	00 05 69 00 00 00    	add    BYTE PTR [rip+0x69],al        # ef <.debug_macro+0xef>
			83: R_X86_64_32	.debug_str+0x1b6d
  86:	00 05 6a 00 00 00    	add    BYTE PTR [rip+0x6a],al        # f6 <.debug_macro+0xf6>
			89: R_X86_64_32	.debug_str+0x2085
  8c:	00 05 6b 00 00 00    	add    BYTE PTR [rip+0x6b],al        # fd <.debug_macro+0xfd>
			8f: R_X86_64_32	.debug_str+0x2d3e
  92:	00 05 6c 00 00 00    	add    BYTE PTR [rip+0x6c],al        # 104 <.debug_macro+0x104>
			95: R_X86_64_32	.debug_str+0x7f9
  98:	00 05 6d 00 00 00    	add    BYTE PTR [rip+0x6d],al        # 10b <.debug_macro+0x10b>
			9b: R_X86_64_32	.debug_str+0x18d2
  9e:	00 05 6e 00 00 00    	add    BYTE PTR [rip+0x6e],al        # 112 <.debug_macro+0x112>
			a1: R_X86_64_32	.debug_str+0x4df7
  a4:	00 05 6f 00 00 00    	add    BYTE PTR [rip+0x6f],al        # 119 <.debug_macro+0x119>
			a7: R_X86_64_32	.debug_str+0x28a1
  aa:	00 05 70 00 00 00    	add    BYTE PTR [rip+0x70],al        # 120 <.debug_macro+0x120>
			ad: R_X86_64_32	.debug_str+0x5f
  b0:	00 05 71 00 00 00    	add    BYTE PTR [rip+0x71],al        # 127 <.debug_macro+0x127>
			b3: R_X86_64_32	.debug_str+0x3bed
  b6:	00 05 72 00 00 00    	add    BYTE PTR [rip+0x72],al        # 12e <.debug_macro+0x12e>
			b9: R_X86_64_32	.debug_str+0x3215
  bc:	00 05 74 00 00 00    	add    BYTE PTR [rip+0x74],al        # 136 <.debug_macro+0x136>
			bf: R_X86_64_32	.debug_str+0x29f3
  c2:	00 05 75 00 00 00    	add    BYTE PTR [rip+0x75],al        # 13d <.debug_macro+0x13d>
			c5: R_X86_64_32	.debug_str+0x222b
  c8:	00 05 79 00 00 00    	add    BYTE PTR [rip+0x79],al        # 147 <.debug_macro+0x147>
			cb: R_X86_64_32	.debug_str+0x2f65
  ce:	00 05 82 01 00 00    	add    BYTE PTR [rip+0x182],al        # 256 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x256>
			d2: R_X86_64_32	.debug_str+0x1ce8
  d4:	00 00                	add    BYTE PTR [rax],al
  d6:	05 83 01 00 00       	add    eax,0x183
			d9: R_X86_64_32	.debug_str+0x30b8
  db:	00 00                	add    BYTE PTR [rax],al
  dd:	05 84 01 00 00       	add    eax,0x184
			e0: R_X86_64_32	.debug_str+0x3e9
  e2:	00 00                	add    BYTE PTR [rax],al
  e4:	05 85 01 00 00       	add    eax,0x185
			e7: R_X86_64_32	.debug_str+0x2eee
  e9:	00 00                	add    BYTE PTR [rax],al
  eb:	05 86 01 00 00       	add    eax,0x186
			ee: R_X86_64_32	.debug_str
  f0:	00 00                	add    BYTE PTR [rax],al
  f2:	05 87 01 00 00       	add    eax,0x187
			f5: R_X86_64_32	.debug_str+0x1f8c
  f7:	00 00                	add    BYTE PTR [rax],al
  f9:	05 88 01 00 00       	add    eax,0x188
			fc: R_X86_64_32	.debug_str+0x1952
  fe:	00 00                	add    BYTE PTR [rax],al
 100:	05 89 01 00 00       	add    eax,0x189
			103: R_X86_64_32	.debug_str+0x16f9
 105:	00 00                	add    BYTE PTR [rax],al
 107:	05 8a 01 00 00       	add    eax,0x18a
			10a: R_X86_64_32	.debug_str+0xbba
 10c:	00 00                	add    BYTE PTR [rax],al
 10e:	05 8b 01 00 00       	add    eax,0x18b
			111: R_X86_64_32	.debug_str+0x387e
 113:	00 00                	add    BYTE PTR [rax],al
 115:	05 8c 01 00 00       	add    eax,0x18c
			118: R_X86_64_32	.debug_str+0x3379
 11a:	00 00                	add    BYTE PTR [rax],al
 11c:	05 8d 01 00 00       	add    eax,0x18d
			11f: R_X86_64_32	.debug_str+0x3f3b
 121:	00 00                	add    BYTE PTR [rax],al
 123:	05 8e 01 00 00       	add    eax,0x18e
			126: R_X86_64_32	.debug_str+0x41c1
 128:	00 00                	add    BYTE PTR [rax],al
 12a:	05 8f 01 00 00       	add    eax,0x18f
			12d: R_X86_64_32	.debug_str+0x3519
 12f:	00 00                	add    BYTE PTR [rax],al
 131:	05 90 01 00 00       	add    eax,0x190
			134: R_X86_64_32	.debug_str+0x2b4d
 136:	00 00                	add    BYTE PTR [rax],al
 138:	05 91 01 00 00       	add    eax,0x191
			13b: R_X86_64_32	.debug_str+0x4487
 13d:	00 00                	add    BYTE PTR [rax],al
 13f:	05 92 01 00 00       	add    eax,0x192
			142: R_X86_64_32	.debug_str+0x3107
 144:	00 00                	add    BYTE PTR [rax],al
 146:	05 f7 01 00 00       	add    eax,0x1f7
			149: R_X86_64_32	.debug_str+0x26f3
 14b:	00 00                	add    BYTE PTR [rax],al
 14d:	05 94 02 00 00       	add    eax,0x294
			150: R_X86_64_32	.debug_str+0x1bd5
 152:	00 00                	add    BYTE PTR [rax],al
 154:	05 c3 02 00 00       	add    eax,0x2c3
			157: R_X86_64_32	.debug_str+0x19d6
 159:	00 00                	add    BYTE PTR [rax],al
 15b:	05 c4 02 00 00       	add    eax,0x2c4
			15e: R_X86_64_32	.debug_str+0x3d17
 160:	00 00                	add    BYTE PTR [rax],al
 162:	05 c5 02 00 00       	add    eax,0x2c5
			165: R_X86_64_32	.debug_str+0x1db5
 167:	00 00                	add    BYTE PTR [rax],al
 169:	05 8f 03 00 00       	add    eax,0x38f
			16c: R_X86_64_32	.debug_str+0x4a88
 16e:	00 00                	add    BYTE PTR [rax],al
 170:	05 94 03 00 00       	add    eax,0x394
			173: R_X86_64_32	.debug_str+0x35e3
 175:	00 00                	add    BYTE PTR [rax],al
 177:	05 97 03 00 00       	add    eax,0x397
			17a: R_X86_64_32	.debug_str+0x3f50
 17c:	00 00                	add    BYTE PTR [rax],al
 17e:	05 9b 03 00 00       	add    eax,0x39b
			181: R_X86_64_32	.debug_str+0x43c3
 183:	00 00                	add    BYTE PTR [rax],al
 185:	05 ae 03 00 00       	add    eax,0x3ae
			188: R_X86_64_32	.debug_str+0x1d66
 18a:	00 00                	add    BYTE PTR [rax],al
 18c:	05 af 03 00 00       	add    eax,0x3af
			18f: R_X86_64_32	.debug_str+0xf89
 191:	00 00                	add    BYTE PTR [rax],al
 193:	05 b9 03 00 00       	add    eax,0x3b9
			196: R_X86_64_32	.debug_str+0x31c8
 198:	00 00                	add    BYTE PTR [rax],al
 19a:	05 c0 03 00 00       	add    eax,0x3c0
			19d: R_X86_64_32	.debug_str+0x162e
 19f:	00 00                	add    BYTE PTR [rax],al
 1a1:	05 c1 03 00 00       	add    eax,0x3c1
			1a4: R_X86_64_32	.debug_str+0x2d52
 1a6:	00 00                	add    BYTE PTR [rax],al
 1a8:	05 c2 03 00 00       	add    eax,0x3c2
			1ab: R_X86_64_32	.debug_str+0x2174
 1ad:	00 00                	add    BYTE PTR [rax],al
 1af:	05 c3 03 00 00       	add    eax,0x3c3
			1b2: R_X86_64_32	.debug_str+0x127d
 1b4:	00 00                	add    BYTE PTR [rax],al
 1b6:	05 c5 03 00 00       	add    eax,0x3c5
			1b9: R_X86_64_32	.debug_str+0x18f5
 1bb:	00 00                	add    BYTE PTR [rax],al
 1bd:	05 c8 03 00 00       	add    eax,0x3c8
			1c0: R_X86_64_32	.debug_str+0x2a66
 1c2:	00 00                	add    BYTE PTR [rax],al
 1c4:	05 cb 03 00 00       	add    eax,0x3cb
			1c7: R_X86_64_32	.debug_str+0x326c
 1c9:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
int main(int argc, char * argv[]) {
   0:	04 00                	add    al,0x0
   2:	00 05 2f 00 00 00    	add    BYTE PTR [rip+0x2f],al        # 37 <.debug_macro+0x37>
			5: R_X86_64_32	.debug_str+0x39af
   8:	00 05 3d 00 00 00    	add    BYTE PTR [rip+0x3d],al        # 4b <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x4b>
			b: R_X86_64_32	.debug_str+0xbcd
   e:	00 05 48 00 00 00    	add    BYTE PTR [rip+0x48],al        # 5c <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x5c>
			11: R_X86_64_32	.debug_str+0xf67
  14:	00 05 57 00 00 00    	add    BYTE PTR [rip+0x57],al        # 71 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x71>
			17: R_X86_64_32	.debug_str+0x30b
  1a:	00 05 58 00 00 00    	add    BYTE PTR [rip+0x58],al        # 78 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x78>
			1d: R_X86_64_32	.debug_str+0x2c48
	b = 5;
  20:	00 05 59 00 00 00    	add    BYTE PTR [rip+0x59],al        # 7f <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x7f>
			23: R_X86_64_32	.debug_str+0x187a
	printf ("Enter a number between 1 and 10 -> ");
  26:	00 05 5e 00 00 00    	add    BYTE PTR [rip+0x5e],al        # 8a <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x8a>
			29: R_X86_64_32	.debug_str+0xef2
  2c:	00 05 6b 00 00 00    	add    BYTE PTR [rip+0x6b],al        # 9d <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x9d>
			2f: R_X86_64_32	.debug_str+0x4552
  32:	00 05 6c 00 00 00    	add    BYTE PTR [rip+0x6c],al        # a4 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0xa4>
			35: R_X86_64_32	.debug_str+0x34a
	scanf ("%d", &a);
  38:	00 05 6d 00 00 00    	add    BYTE PTR [rip+0x6d],al        # ab <wm4.0.52c9fc51a3c7999e669b5384b1132782+0xab>
			3b: R_X86_64_32	.debug_str+0x1a86
  3e:	00 05 76 00 00 00    	add    BYTE PTR [rip+0x76],al        # ba <wm4.0.52c9fc51a3c7999e669b5384b1132782+0xba>
			41: R_X86_64_32	.debug_str+0x3892
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
int main(int argc, char * argv[]) {
   0:	04 00                	add    al,0x0
   2:	00 05 13 00 00 00    	add    BYTE PTR [rip+0x13],al        # 1b <.debug_macro+0x1b>
			5: R_X86_64_32	.debug_str+0x2ca5
   8:	00 05 19 00 00 00    	add    BYTE PTR [rip+0x19],al        # 27 <.debug_macro+0x27>
			b: R_X86_64_32	.debug_str+0x18e9
   e:	00 05 1a 00 00 00    	add    BYTE PTR [rip+0x1a],al        # 2e <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x2e>
			11: R_X86_64_32	.debug_str+0x325d
  14:	00 05 1b 00 00 00    	add    BYTE PTR [rip+0x1b],al        # 35 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x35>
			17: R_X86_64_32	.debug_str+0x2d2
  1a:	00 05 1e 00 00 00    	add    BYTE PTR [rip+0x1e],al        # 3e <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x3e>
			1d: R_X86_64_32	.debug_str+0x4b78
	b = 5;
  20:	00 06                	add    BYTE PTR [rsi],al
  22:	24 00                	and    al,0x0
			23: R_X86_64_32	.debug_str+0x3c97
  24:	00 00                	add    BYTE PTR [rax],al
	printf ("Enter a number between 1 and 10 -> ");
  26:	00 05 25 00 00 00    	add    BYTE PTR [rip+0x25],al        # 51 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x51>
			29: R_X86_64_32	.debug_str+0x3940
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
int main(int argc, char * argv[]) {
   0:	04 00                	add    al,0x0
   2:	00 05 8b 01 00 00    	add    BYTE PTR [rip+0x18b],al        # 193 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x193>
			6: R_X86_64_32	.debug_str+0x22e8
   8:	00 00                	add    BYTE PTR [rax],al
   a:	05 8c 01 00 00       	add    eax,0x18c
			d: R_X86_64_32	.debug_str+0x4250
   f:	00 00                	add    BYTE PTR [rax],al
  11:	05 8d 01 00 00       	add    eax,0x18d
			14: R_X86_64_32	.debug_str+0x1897
  16:	00 00                	add    BYTE PTR [rax],al
  18:	05 e8 03 00 00       	add    eax,0x3e8
			1b: R_X86_64_32	.debug_str+0x131b
  1d:	00 00                	add    BYTE PTR [rax],al
	b = 5;
  1f:	05 90 04 00 00       	add    eax,0x490
			22: R_X86_64_32	.debug_str+0x2760
  24:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
int main(int argc, char * argv[]) {
   0:	2e 02 00             	add    al,BYTE PTR cs:[rax]
   3:	00 02                	add    BYTE PTR [rdx],al
   5:	00 0d 02 00 00 01    	add    BYTE PTR [rip+0x1000002],cl        # 100000d <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x100000d>
   b:	01 fb                	add    ebx,edi
   d:	0e                   	(bad)  
   e:	0d 00 01 01 01       	or     eax,0x1010100
  13:	01 00                	add    DWORD PTR [rax],eax
  15:	00 00                	add    BYTE PTR [rax],al
  17:	01 00                	add    DWORD PTR [rax],eax
  19:	00 01                	add    BYTE PTR [rcx],al
  1b:	2f                   	(bad)  
  1c:	75 73                	jne    91 <.debug_line+0x91>
	b = 5;
  1e:	72 2f                	jb     4f <.debug_line+0x4f>
  20:	6c                   	ins    BYTE PTR es:[rdi],dx
  21:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [rdx+0x2f],0x2f636367
	printf ("Enter a number between 1 and 10 -> ");
  28:	78 38                	js     62 <.debug_line+0x62>
  2a:	36 5f                	ss pop rdi
  2c:	36 34 2d             	ss xor al,0x2d
  2f:	6c                   	ins    BYTE PTR es:[rdi],dx
  30:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [rsi+0x75],0x6e672d78
	scanf ("%d", &a);
  37:	75 2f                	jne    68 <.debug_line+0x68>
  39:	37                   	(bad)  
  3a:	2f                   	(bad)  
  3b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
  42:	00 2f                	add    BYTE PTR [rdi],ch
  44:	75 73                	jne    b9 <.debug_line+0xb9>
  46:	72 2f                	jb     77 <.debug_line+0x77>
  48:	78 38                	js     82 <.debug_line+0x82>
  4a:	36 5f                	ss pop rdi
  4c:	36 34 2d             	ss xor al,0x2d
	if (a > b) {
  4f:	6c                   	ins    BYTE PTR es:[rdi],dx
  50:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [rsi+0x75],0x6e672d78
		printf ("The number was higher than 5!\n");
  57:	75 2f                	jne    88 <.debug_line+0x88>
  59:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
  60:	2f                   	(bad)  
  61:	62                   	(bad)  
  62:	69 74 73 00 2f 75 73 	imul   esi,DWORD PTR [rbx+rsi*2+0x0],0x7273752f
  69:	72 
}
  6a:	2f                   	(bad)  
  6b:	78 38                	js     a5 <.debug_line+0xa5>
  6d:	36 5f                	ss pop rdi
  6f:	36 34 2d             	ss xor al,0x2d
  72:	6c                   	ins    BYTE PTR es:[rdi],dx
  73:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [rsi+0x75],0x6e672d78
  7a:	75 2f                	jne    ab <.debug_line+0xab>
  7c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
  83:	00 2f                	add    BYTE PTR [rdi],ch
  85:	75 73                	jne    fa <.debug_line+0xfa>
  87:	72 2f                	jb     b8 <.debug_line+0xb8>
  89:	78 38                	js     c3 <.debug_line+0xc3>
  8b:	36 5f                	ss pop rdi
  8d:	36 34 2d             	ss xor al,0x2d
  90:	6c                   	ins    BYTE PTR es:[rdi],dx
  91:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [rsi+0x75],0x6e672d78
  98:	75 2f                	jne    c9 <.debug_line+0xc9>
  9a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
  a1:	2f                   	(bad)  
  a2:	73 79                	jae    11d <.debug_line+0x11d>
  a4:	73 00                	jae    a6 <.debug_line+0xa6>
  a6:	2f                   	(bad)  
  a7:	75 73                	jne    11c <.debug_line+0x11c>
  a9:	72 2f                	jb     da <.debug_line+0xda>
  ab:	78 38                	js     e5 <.debug_line+0xe5>
  ad:	36 5f                	ss pop rdi
  af:	36 34 2d             	ss xor al,0x2d
  b2:	6c                   	ins    BYTE PTR es:[rdi],dx
  b3:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [rsi+0x75],0x6e672d78
  ba:	75 2f                	jne    eb <.debug_line+0xeb>
  bc:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
  c3:	2f                   	(bad)  
  c4:	67 6e                	outs   dx,BYTE PTR ds:[esi]
  c6:	75 00                	jne    c8 <.debug_line+0xc8>
  c8:	2f                   	(bad)  
  c9:	75 73                	jne    13e <.debug_line+0x13e>
  cb:	72 2f                	jb     fc <.debug_line+0xfc>
  cd:	78 38                	js     107 <.debug_line+0x107>
  cf:	36 5f                	ss pop rdi
  d1:	36 34 2d             	ss xor al,0x2d
  d4:	6c                   	ins    BYTE PTR es:[rdi],dx
  d5:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [rsi+0x75],0x6e672d78
  dc:	75 2f                	jne    10d <.debug_line+0x10d>
  de:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
  e5:	2f                   	(bad)  
  e6:	62                   	(bad)  
  e7:	69 74 73 2f 74 79 70 	imul   esi,DWORD PTR [rbx+rsi*2+0x2f],0x65707974
  ee:	65 
  ef:	73 00                	jae    f1 <.debug_line+0xf1>
  f1:	00 69 66             	add    BYTE PTR [rcx+0x66],ch
  f4:	5f                   	pop    rdi
  f5:	74 68                	je     15f <.debug_line+0x15f>
  f7:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
  f9:	2e 63 00             	movsxd eax,DWORD PTR cs:[rax]
  fc:	00 00                	add    BYTE PTR [rax],al
  fe:	00 73 74             	add    BYTE PTR [rbx+0x74],dh
 101:	64 64 65 66 2e 68 00 	fs fs gs cs pushw 0x100
 108:	01 
 109:	00 00                	add    BYTE PTR [rax],al
 10b:	74 79                	je     186 <.debug_line+0x186>
 10d:	70 65                	jo     174 <.debug_line+0x174>
 10f:	73 2e                	jae    13f <.debug_line+0x13f>
 111:	68 00 02 00 00       	push   0x200
 116:	6c                   	ins    BYTE PTR es:[rdi],dx
 117:	69 62 69 6f 2e 68 00 	imul   esp,DWORD PTR [rdx+0x69],0x682e6f
 11e:	02 00                	add    al,BYTE PTR [rax]
 120:	00 73 74             	add    BYTE PTR [rbx+0x74],dh
 123:	64 69 6f 2e 68 00 03 	imul   ebp,DWORD PTR fs:[rdi+0x2e],0x30068
 12a:	00 
 12b:	00 73 79             	add    BYTE PTR [rbx+0x79],dh
 12e:	73 5f                	jae    18f <.debug_line+0x18f>
 130:	65 72 72             	gs jb  1a5 <.debug_line+0x1a5>
 133:	6c                   	ins    BYTE PTR es:[rdi],dx
 134:	69 73 74 2e 68 00 02 	imul   esi,DWORD PTR [rbx+0x74],0x200682e
 13b:	00 00                	add    BYTE PTR [rax],al
 13d:	73 74                	jae    1b3 <.debug_line+0x1b3>
 13f:	64 63 2d 70 72 65 64 	movsxd ebp,DWORD PTR fs:[rip+0x64657270]        # 646573b6 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x646573b6>
 146:	65 66 2e 68 00 03    	gs cs pushw 0x300
 14c:	00 00                	add    BYTE PTR [rax],al
 14e:	6c                   	ins    BYTE PTR es:[rdi],dx
 14f:	69 62 63 2d 68 65 61 	imul   esp,DWORD PTR [rdx+0x63],0x6165682d
 156:	64 65 72 2d          	fs gs jb 187 <.debug_line+0x187>
 15a:	73 74                	jae    1d0 <.debug_line+0x1d0>
 15c:	61                   	(bad)  
 15d:	72 74                	jb     1d3 <.debug_line+0x1d3>
 15f:	2e 68 00 02 00 00    	cs push 0x200
 165:	66 65 61             	data16 gs (bad) 
 168:	74 75                	je     1df <.debug_line+0x1df>
 16a:	72 65                	jb     1d1 <.debug_line+0x1d1>
 16c:	73 2e                	jae    19c <.debug_line+0x19c>
 16e:	68 00 03 00 00       	push   0x300
 173:	63 64 65 66          	movsxd esp,DWORD PTR [rbp+riz*2+0x66]
 177:	73 2e                	jae    1a7 <.debug_line+0x1a7>
 179:	68 00 04 00 00       	push   0x400
 17e:	77 6f                	ja     1ef <.debug_line+0x1ef>
 180:	72 64                	jb     1e6 <.debug_line+0x1e6>
 182:	73 69                	jae    1ed <.debug_line+0x1ed>
 184:	7a 65                	jp     1eb <.debug_line+0x1eb>
 186:	2e 68 00 02 00 00    	cs push 0x200
 18c:	6c                   	ins    BYTE PTR es:[rdi],dx
 18d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 18e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 18f:	67 2d 64 6f 75 62    	addr32 sub eax,0x62756f64
 195:	6c                   	ins    BYTE PTR es:[rdi],dx
 196:	65 2e 68 00 02 00 00 	gs cs push 0x200
 19d:	73 74                	jae    213 <.debug_line+0x213>
 19f:	75 62                	jne    203 <.debug_line+0x203>
 1a1:	73 2e                	jae    1d1 <.debug_line+0x1d1>
 1a3:	68 00 05 00 00       	push   0x500
 1a8:	73 74                	jae    21e <.debug_line+0x21e>
 1aa:	75 62                	jne    20e <.debug_line+0x20e>
 1ac:	73 2d                	jae    1db <.debug_line+0x1db>
 1ae:	36 34 2e             	ss xor al,0x2e
 1b1:	68 00 05 00 00       	push   0x500
 1b6:	74 79                	je     231 <.debug_line+0x231>
 1b8:	70 65                	jo     21f <.debug_line+0x21f>
 1ba:	73 69                	jae    225 <.debug_line+0x225>
 1bc:	7a 65                	jp     223 <.debug_line+0x223>
 1be:	73 2e                	jae    1ee <.debug_line+0x1ee>
 1c0:	68 00 02 00 00       	push   0x200
 1c5:	5f                   	pop    rdi
 1c6:	5f                   	pop    rdi
 1c7:	46                   	rex.RX
 1c8:	49                   	rex.WB
 1c9:	4c                   	rex.WR
 1ca:	45                   	rex.RB
 1cb:	2e 68 00 06 00 00    	cs push 0x600
 1d1:	46                   	rex.RX
 1d2:	49                   	rex.WB
 1d3:	4c                   	rex.WR
 1d4:	45                   	rex.RB
 1d5:	2e 68 00 06 00 00    	cs push 0x600
 1db:	5f                   	pop    rdi
 1dc:	47 5f                	rex.RXB pop r15
 1de:	63 6f 6e             	movsxd ebp,DWORD PTR [rdi+0x6e]
 1e1:	66 69 67 2e 68 00    	imul   sp,WORD PTR [rdi+0x2e],0x68
 1e7:	02 00                	add    al,BYTE PTR [rax]
 1e9:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
 1ec:	6d                   	ins    DWORD PTR es:[rdi],dx
 1ed:	62 73 74 61 74       	(bad)  {k1}
 1f2:	65 5f                	gs pop rdi
 1f4:	74 2e                	je     224 <.debug_line+0x224>
 1f6:	68 00 06 00 00       	push   0x600
 1fb:	73 74                	jae    271 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x271>
 1fd:	64 61                	fs (bad) 
 1ff:	72 67                	jb     268 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x268>
 201:	2e 68 00 01 00 00    	cs push 0x100
 207:	73 74                	jae    27d <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x27d>
 209:	64 69 6f 5f 6c 69 6d 	imul   ebp,DWORD PTR fs:[rdi+0x5f],0x2e6d696c
 210:	2e 
 211:	68 00 02 00 00       	push   0x200
 216:	00 00                	add    BYTE PTR [rax],al
 218:	09 02                	or     DWORD PTR [rdx],eax
	...
			21a: R_X86_64_64	.text
 222:	14 e4                	adc    al,0xe4
 224:	e8 76 08 13 08       	call   8130a9f <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x8130a9f>
 229:	76 83                	jbe    1ae <.debug_line+0x1ae>
 22b:	08 15 02 16 00 01    	or     BYTE PTR [rip+0x1001602],dl        # 1001833 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x1001833>
 231:	01                   	.byte 0x1

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
int main(int argc, char * argv[]) {
       0:	5f                   	pop    rdi
       1:	49                   	rex.WB
       2:	4f 5f                	rex.WRXB pop r15
       4:	44                   	rex.R
       5:	45                   	rex.RB
       6:	43 20 30             	rex.XB and BYTE PTR [r8],sil
       9:	32 30                	xor    dh,BYTE PTR [rax]
       b:	00 5f 53             	add    BYTE PTR [rdi+0x53],bl
       e:	49 5a                	rex.WB pop r10
      10:	45 5f                	rex.RB pop r15
      12:	54                   	push   rsp
      13:	5f                   	pop    rdi
      14:	20 00                	and    BYTE PTR [rax],al
      16:	5f                   	pop    rdi
      17:	5f                   	pop    rdi
      18:	53                   	push   rbx
      19:	49                   	rex.WB
      1a:	47 5f                	rex.RXB pop r15
      1c:	41 54                	push   r12
	b = 5;
      1e:	4f                   	rex.WRXB
      1f:	4d                   	rex.WRB
      20:	49                   	rex.WB
      21:	43 5f                	rex.XB pop r15
      23:	4d                   	rex.WRB
      24:	41 58                	pop    r8
	printf ("Enter a number between 1 and 10 -> ");
      26:	5f                   	pop    rdi
      27:	5f                   	pop    rdi
      28:	20 30                	and    BYTE PTR [rax],dh
      2a:	78 37                	js     63 <.debug_str+0x63>
      2c:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 add BYTE PTR [rdi+0x5f],bl
      33:	00 5f 5f 
	scanf ("%d", &a);
      36:	46                   	rex.RX
      37:	4c 54                	rex.WR push rsp
      39:	36 34 5f             	ss xor al,0x5f
      3c:	48                   	rex.W
      3d:	41 53                	push   r11
      3f:	5f                   	pop    rdi
      40:	51                   	push   rcx
      41:	55                   	push   rbp
      42:	49                   	rex.WB
      43:	45 54                	rex.RB push r12
      45:	5f                   	pop    rdi
      46:	4e                   	rex.WRX
      47:	41                   	rex.B
      48:	4e 5f                	rex.WRX pop rdi
      4a:	5f                   	pop    rdi
      4b:	20 31                	and    BYTE PTR [rcx],dh
      4d:	00 5f 53             	add    BYTE PTR [rdi+0x53],bl
	if (a > b) {
      50:	49 5a                	rex.WB pop r10
      52:	45 5f                	rex.RB pop r15
      54:	54                   	push   rsp
      55:	5f                   	pop    rdi
		printf ("The number was higher than 5!\n");
      56:	44                   	rex.R
      57:	45                   	rex.RB
      58:	46                   	rex.RX
      59:	49                   	rex.WB
      5a:	4e                   	rex.WRX
      5b:	45                   	rex.RB
      5c:	44 20 00             	and    BYTE PTR [rax],r8b
      5f:	5f                   	pop    rdi
      60:	49                   	rex.WB
      61:	4f 5f                	rex.WRXB pop r15
      63:	49 53                	rex.WB push r11
      65:	5f                   	pop    rdi
      66:	46                   	rex.RX
}
      67:	49                   	rex.WB
      68:	4c                   	rex.WR
      69:	45                   	rex.RB
      6a:	42 55                	rex.X push rbp
      6c:	46 20 30             	rex.RX and BYTE PTR [rax],r14b
      6f:	78 32                	js     a3 <.debug_str+0xa3>
      71:	30 30                	xor    BYTE PTR [rax],dh
      73:	30 00                	xor    BYTE PTR [rax],al
      75:	5f                   	pop    rdi
      76:	5f                   	pop    rdi
      77:	44                   	rex.R
      78:	45                   	rex.RB
      79:	43                   	rex.XB
      7a:	36 34 5f             	ss xor al,0x5f
      7d:	53                   	push   rbx
      7e:	55                   	push   rbp
      7f:	42                   	rex.X
      80:	4e                   	rex.WRX
      81:	4f 52                	rex.WRXB push r10
      83:	4d                   	rex.WRB
      84:	41                   	rex.B
      85:	4c 5f                	rex.WR pop rdi
      87:	4d                   	rex.WRB
      88:	49                   	rex.WB
      89:	4e 5f                	rex.WRX pop rdi
      8b:	5f                   	pop    rdi
      8c:	20 30                	and    BYTE PTR [rax],dh
      8e:	2e 30 30             	xor    BYTE PTR cs:[rax],dh
      91:	30 30                	xor    BYTE PTR [rax],dh
      93:	30 30                	xor    BYTE PTR [rax],dh
      95:	30 30                	xor    BYTE PTR [rax],dh
      97:	30 30                	xor    BYTE PTR [rax],dh
      99:	30 30                	xor    BYTE PTR [rax],dh
      9b:	30 30                	xor    BYTE PTR [rax],dh
      9d:	31 45 2d             	xor    DWORD PTR [rbp+0x2d],eax
      a0:	33 38                	xor    edi,DWORD PTR [rax]
      a2:	33 44 44 00          	xor    eax,DWORD PTR [rsp+rax*2+0x0]
      a6:	5f                   	pop    rdi
      a7:	5f                   	pop    rdi
      a8:	46                   	rex.RX
      a9:	4c 54                	rex.WR push rsp
      ab:	33 32                	xor    esi,DWORD PTR [rdx]
      ad:	5f                   	pop    rdi
      ae:	48                   	rex.W
      af:	41 53                	push   r11
      b1:	5f                   	pop    rdi
      b2:	49                   	rex.WB
      b3:	4e                   	rex.WRX
      b4:	46                   	rex.RX
      b5:	49                   	rex.WB
      b6:	4e                   	rex.WRX
      b7:	49 54                	rex.WB push r12
      b9:	59                   	pop    rcx
      ba:	5f                   	pop    rdi
      bb:	5f                   	pop    rdi
      bc:	20 31                	and    BYTE PTR [rcx],dh
      be:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
      c1:	46                   	rex.RX
      c2:	4c 54                	rex.WR push rsp
      c4:	36 34 5f             	ss xor al,0x5f
      c7:	4d                   	rex.WRB
      c8:	41 58                	pop    r8
      ca:	5f                   	pop    rdi
      cb:	45 58                	rex.RB pop r8
      cd:	50                   	push   rax
      ce:	5f                   	pop    rdi
      cf:	5f                   	pop    rdi
      d0:	20 31                	and    BYTE PTR [rcx],dh
      d2:	30 32                	xor    BYTE PTR [rdx],dh
      d4:	34 00                	xor    al,0x0
      d6:	5f                   	pop    rdi
      d7:	5f                   	pop    rdi
      d8:	46                   	rex.RX
      d9:	4c 54                	rex.WR push rsp
      db:	5f                   	pop    rdi
      dc:	4d                   	rex.WRB
      dd:	49                   	rex.WB
      de:	4e 5f                	rex.WRX pop rdi
      e0:	31 30                	xor    DWORD PTR [rax],esi
      e2:	5f                   	pop    rdi
      e3:	45 58                	rex.RB pop r8
      e5:	50                   	push   rax
      e6:	5f                   	pop    rdi
      e7:	5f                   	pop    rdi
      e8:	20 28                	and    BYTE PTR [rax],ch
      ea:	2d 33 37 29 00       	sub    eax,0x293733
      ef:	5f                   	pop    rdi
      f0:	5f                   	pop    rdi
      f1:	53                   	push   rbx
      f2:	59                   	pop    rcx
      f3:	53                   	push   rbx
      f4:	43                   	rex.XB
      f5:	41                   	rex.B
      f6:	4c                   	rex.WR
      f7:	4c 5f                	rex.WR pop rdi
      f9:	55                   	push   rbp
      fa:	4c                   	rex.WR
      fb:	4f                   	rex.WRXB
      fc:	4e                   	rex.WRX
      fd:	47 5f                	rex.RXB pop r15
      ff:	54                   	push   rsp
     100:	59                   	pop    rcx
     101:	50                   	push   rax
     102:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
     106:	55                   	push   rbp
     107:	4c                   	rex.WR
     108:	4f                   	rex.WRXB
     109:	4e                   	rex.WRX
     10a:	47 57                	rex.RXB push r15
     10c:	4f 52                	rex.WRXB push r10
     10e:	44 5f                	rex.R pop rdi
     110:	54                   	push   rsp
     111:	59                   	pop    rcx
     112:	50                   	push   rax
     113:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
     117:	46                   	rex.RX
     118:	4c 54                	rex.WR push rsp
     11a:	36 34 58             	ss xor al,0x58
     11d:	5f                   	pop    rdi
     11e:	45 50                	rex.RB push r8
     120:	53                   	push   rbx
     121:	49                   	rex.WB
     122:	4c                   	rex.WR
     123:	4f                   	rex.WRXB
     124:	4e 5f                	rex.WRX pop rdi
     126:	5f                   	pop    rdi
     127:	20 31                	and    BYTE PTR [rcx],dh
     129:	2e 30 38             	xor    BYTE PTR cs:[rax],bh
     12c:	34 32                	xor    al,0x32
     12e:	30 32                	xor    BYTE PTR [rdx],dh
     130:	31 37                	xor    DWORD PTR [rdi],esi
     132:	32 34 38             	xor    dh,BYTE PTR [rax+rdi*1]
     135:	35 35 30 34 34       	xor    eax,0x34343035
     13a:	33 34 30             	xor    esi,DWORD PTR [rax+rsi*1]
     13d:	30 37                	xor    BYTE PTR [rdi],dh
     13f:	34 35                	xor    al,0x35
     141:	32 38                	xor    bh,BYTE PTR [rax]
     143:	30 30                	xor    BYTE PTR [rax],dh
     145:	38 36                	cmp    BYTE PTR [rsi],dh
     147:	39 39                	cmp    DWORD PTR [rcx],edi
     149:	34 31                	xor    al,0x31
     14b:	37                   	(bad)  
     14c:	31 65 2d             	xor    DWORD PTR [rbp+0x2d],esp
     14f:	31 39                	xor    DWORD PTR [rcx],edi
     151:	46                   	rex.RX
     152:	36 34 78             	ss xor al,0x78
     155:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     158:	46                   	rex.RX
     159:	4c 54                	rex.WR push rsp
     15b:	33 32                	xor    esi,DWORD PTR [rdx]
     15d:	58                   	pop    rax
     15e:	5f                   	pop    rdi
     15f:	4d                   	rex.WRB
     160:	41 58                	pop    r8
     162:	5f                   	pop    rdi
     163:	45 58                	rex.RB pop r8
     165:	50                   	push   rax
     166:	5f                   	pop    rdi
     167:	5f                   	pop    rdi
     168:	20 31                	and    BYTE PTR [rcx],dh
     16a:	30 32                	xor    BYTE PTR [rdx],dh
     16c:	34 00                	xor    al,0x0
     16e:	5f                   	pop    rdi
     16f:	73 68                	jae    1d9 <.debug_str+0x1d9>
     171:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     172:	72 74                	jb     1e8 <.debug_str+0x1e8>
     174:	62                   	(bad)  
     175:	75 66                	jne    1dd <.debug_str+0x1dd>
     177:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     17a:	47                   	rex.RXB
     17b:	43                   	rex.XB
     17c:	43 5f                	rex.XB pop r15
     17e:	41 54                	push   r12
     180:	4f                   	rex.WRXB
     181:	4d                   	rex.WRB
     182:	49                   	rex.WB
     183:	43 5f                	rex.XB pop r15
     185:	54                   	push   rsp
     186:	45 53                	rex.RB push r11
     188:	54                   	push   rsp
     189:	5f                   	pop    rdi
     18a:	41                   	rex.B
     18b:	4e                   	rex.WRX
     18c:	44 5f                	rex.R pop rdi
     18e:	53                   	push   rbx
     18f:	45 54                	rex.RB push r12
     191:	5f                   	pop    rdi
     192:	54                   	push   rsp
     193:	52                   	push   rdx
     194:	55                   	push   rbp
     195:	45 56                	rex.RB push r14
     197:	41                   	rex.B
     198:	4c 20 31             	rex.WR and BYTE PTR [rcx],r14b
     19b:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     19e:	4f                   	rex.WRXB
     19f:	46                   	rex.RX
     1a0:	46 5f                	rex.RX pop rdi
     1a2:	54                   	push   rsp
     1a3:	5f                   	pop    rdi
     1a4:	4d                   	rex.WRB
     1a5:	41 54                	push   r12
     1a7:	43                   	rex.XB
     1a8:	48                   	rex.W
     1a9:	45 53                	rex.RB push r11
     1ab:	5f                   	pop    rdi
     1ac:	4f                   	rex.WRXB
     1ad:	46                   	rex.RX
     1ae:	46                   	rex.RX
     1af:	36 34 5f             	ss xor al,0x5f
     1b2:	54                   	push   rsp
     1b3:	20 31                	and    BYTE PTR [rcx],dh
     1b5:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     1b8:	44                   	rex.R
     1b9:	45                   	rex.RB
     1ba:	43                   	rex.XB
     1bb:	36 34 5f             	ss xor al,0x5f
     1be:	45 50                	rex.RB push r8
     1c0:	53                   	push   rbx
     1c1:	49                   	rex.WB
     1c2:	4c                   	rex.WR
     1c3:	4f                   	rex.WRXB
     1c4:	4e 5f                	rex.WRX pop rdi
     1c6:	5f                   	pop    rdi
     1c7:	20 31                	and    BYTE PTR [rcx],dh
     1c9:	45 2d 31 35 44 44    	rex.RB sub eax,0x44443531
     1cf:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     1d2:	44                   	rex.R
     1d3:	42                   	rex.X
     1d4:	4c 5f                	rex.WR pop rdi
     1d6:	44                   	rex.R
     1d7:	45                   	rex.RB
     1d8:	4e                   	rex.WRX
     1d9:	4f 52                	rex.WRXB push r10
     1db:	4d 5f                	rex.WRB pop r15
     1dd:	4d                   	rex.WRB
     1de:	49                   	rex.WB
     1df:	4e 5f                	rex.WRX pop rdi
     1e1:	5f                   	pop    rdi
     1e2:	20 28                	and    BYTE PTR [rax],ch
     1e4:	28 64 6f 75          	sub    BYTE PTR [rdi+rbp*2+0x75],ah
     1e8:	62                   	(bad)  
     1e9:	6c                   	ins    BYTE PTR es:[rdi],dx
     1ea:	65 29 34 2e          	sub    DWORD PTR gs:[rsi+rbp*1],esi
     1ee:	39 34 30             	cmp    DWORD PTR [rax+rsi*1],esi
     1f1:	36 35 36 34 35 38    	ss xor eax,0x38353436
     1f7:	34 31                	xor    al,0x31
     1f9:	32 34 36             	xor    dh,BYTE PTR [rsi+rsi*1]
     1fc:	35 34 34 31 37       	xor    eax,0x37313434
     201:	36 35 36 38 37 39    	ss xor eax,0x39373836
     207:	32 38                	xor    bh,BYTE PTR [rax]
     209:	36 38 32             	cmp    BYTE PTR ss:[rdx],dh
     20c:	32 31                	xor    dh,BYTE PTR [rcx]
     20e:	33 37                	xor    esi,DWORD PTR [rdi]
     210:	32 65 2d             	xor    ah,BYTE PTR [rbp+0x2d]
     213:	33 32                	xor    esi,DWORD PTR [rdx]
     215:	34 4c                	xor    al,0x4c
     217:	29 00                	sub    DWORD PTR [rax],eax
     219:	5f                   	pop    rdi
     21a:	49                   	rex.WB
     21b:	4f 5f                	rex.WRXB pop r15
     21d:	6c                   	ins    BYTE PTR es:[rdi],dx
     21e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     21f:	63 6b 5f             	movsxd ebp,DWORD PTR [rbx+0x5f]
     222:	74 00                	je     224 <.debug_str+0x224>
     224:	5f                   	pop    rdi
     225:	5f                   	pop    rdi
     226:	49                   	rex.WB
     227:	4e 54                	rex.WRX push rsp
     229:	50                   	push   rax
     22a:	54                   	push   rsp
     22b:	52                   	push   rdx
     22c:	5f                   	pop    rdi
     22d:	4d                   	rex.WRB
     22e:	41 58                	pop    r8
     230:	5f                   	pop    rdi
     231:	5f                   	pop    rdi
     232:	20 30                	and    BYTE PTR [rax],dh
     234:	78 37                	js     26d <.debug_str+0x26d>
     236:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16
     23d:	66 66 66 66 66 66 66 
     244:	66 4c 00 5f 47       	data16 rex.WR add BYTE PTR [rdi+0x47],r11b
     249:	5f                   	pop    rdi
     24a:	48                   	rex.W
     24b:	41 56                	push   r14
     24d:	45 5f                	rex.RB pop r15
     24f:	53                   	push   rbx
     250:	54                   	push   rsp
     251:	5f                   	pop    rdi
     252:	42                   	rex.X
     253:	4c                   	rex.WR
     254:	4b 53                	rex.WXB push r11
     256:	49 5a                	rex.WB pop r10
     258:	45 20 64 65 66       	and    BYTE PTR [r13+riz*2+0x66],r12b
     25d:	69 6e 65 64 20 28 5f 	imul   ebp,DWORD PTR [rsi+0x65],0x5f282064
     264:	53                   	push   rbx
     265:	54                   	push   rsp
     266:	41 54                	push   r12
     268:	42 55                	rex.X push rbp
     26a:	46 5f                	rex.RX pop rdi
     26c:	53                   	push   rbx
     26d:	54                   	push   rsp
     26e:	5f                   	pop    rdi
     26f:	42                   	rex.X
     270:	4c                   	rex.WR
     271:	4b 53                	rex.WXB push r11
     273:	49 5a                	rex.WB pop r10
     275:	45 29 00             	sub    DWORD PTR [r8],r8d
     278:	5f                   	pop    rdi
     279:	5f                   	pop    rdi
     27a:	66 6c                	data16 ins BYTE PTR es:[rdi],dx
     27c:	65 78 61             	gs js  2e0 <.debug_str+0x2e0>
     27f:	72 72                	jb     2f3 <.debug_str+0x2f3>
     281:	20 5b 5d             	and    BYTE PTR [rbx+0x5d],bl
     284:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     287:	46                   	rex.RX
     288:	4c 54                	rex.WR push rsp
     28a:	33 32                	xor    esi,DWORD PTR [rdx]
     28c:	5f                   	pop    rdi
     28d:	4d                   	rex.WRB
     28e:	41                   	rex.B
     28f:	4e 54                	rex.WRX push rsp
     291:	5f                   	pop    rdi
     292:	44                   	rex.R
     293:	49                   	rex.WB
     294:	47 5f                	rex.RXB pop r15
     296:	5f                   	pop    rdi
     297:	20 32                	and    BYTE PTR [rdx],dh
     299:	34 00                	xor    al,0x0
     29b:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
     29e:	72 00                	jb     2a0 <.debug_str+0x2a0>
     2a0:	5f                   	pop    rdi
     2a1:	5f                   	pop    rdi
     2a2:	47                   	rex.RXB
     2a3:	43                   	rex.XB
     2a4:	43 5f                	rex.XB pop r15
     2a6:	48                   	rex.W
     2a7:	41 56                	push   r14
     2a9:	45 5f                	rex.RB pop r15
     2ab:	53                   	push   rbx
     2ac:	59                   	pop    rcx
     2ad:	4e                   	rex.WRX
     2ae:	43 5f                	rex.XB pop r15
     2b0:	43                   	rex.XB
     2b1:	4f                   	rex.WRXB
     2b2:	4d 50                	rex.WRB push r8
     2b4:	41 52                	push   r10
     2b6:	45 5f                	rex.RB pop r15
     2b8:	41                   	rex.B
     2b9:	4e                   	rex.WRX
     2ba:	44 5f                	rex.R pop rdi
     2bc:	53                   	push   rbx
     2bd:	57                   	push   rdi
     2be:	41 50                	push   r8
     2c0:	5f                   	pop    rdi
     2c1:	38 20                	cmp    BYTE PTR [rax],ah
     2c3:	31 00                	xor    DWORD PTR [rax],eax
     2c5:	5f                   	pop    rdi
     2c6:	49                   	rex.WB
     2c7:	4f 53                	rex.WRXB push r11
     2c9:	5f                   	pop    rdi
     2ca:	42                   	rex.X
     2cb:	49                   	rex.WB
     2cc:	4e 20 31             	rex.WRX and BYTE PTR [rcx],r14b
     2cf:	32 38                	xor    bh,BYTE PTR [rax]
     2d1:	00 46 49             	add    BYTE PTR [rsi+0x49],al
     2d4:	4c                   	rex.WR
     2d5:	45                   	rex.RB
     2d6:	4e                   	rex.WRX
     2d7:	41                   	rex.B
     2d8:	4d                   	rex.WRB
     2d9:	45 5f                	rex.RB pop r15
     2db:	4d                   	rex.WRB
     2dc:	41 58                	pop    r8
     2de:	20 34 30             	and    BYTE PTR [rax+rsi*1],dh
     2e1:	39 36                	cmp    DWORD PTR [rsi],esi
     2e3:	00 5f 53             	add    BYTE PTR [rdi+0x53],bl
     2e6:	54                   	push   rsp
     2e7:	44                   	rex.R
     2e8:	43 5f                	rex.XB pop r15
     2ea:	50                   	push   rax
     2eb:	52                   	push   rdx
     2ec:	45                   	rex.RB
     2ed:	44                   	rex.R
     2ee:	45                   	rex.RB
     2ef:	46 5f                	rex.RX pop rdi
     2f1:	48 20 31             	rex.W and BYTE PTR [rcx],sil
     2f4:	00 73 74             	add    BYTE PTR [rbx+0x74],dh
     2f7:	64 65 72 72          	fs gs jb 36d <.debug_str+0x36d>
     2fb:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     2fe:	55                   	push   rbp
     2ff:	53                   	push   rbx
     300:	45 5f                	rex.RB pop r15
     302:	49 53                	rex.WB push r11
     304:	4f                   	rex.WRXB
     305:	43 31 31             	rex.XB xor DWORD PTR [r9],esi
     308:	20 31                	and    BYTE PTR [rcx],dh
     30a:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
     30d:	4f                   	rex.WRXB
     30e:	46                   	rex.RX
     30f:	42                   	rex.X
     310:	46 20 30             	rex.RX and BYTE PTR [rax],r14b
     313:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
     316:	4f 5f                	rex.WRXB pop r15
     318:	62                   	(bad)  
     319:	75 66                	jne    381 <.debug_str+0x381>
     31b:	5f                   	pop    rdi
     31c:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     31e:	64 00 5f 5f          	add    BYTE PTR fs:[rdi+0x5f],bl
     322:	49                   	rex.WB
     323:	4e 54                	rex.WRX push rsp
     325:	5f                   	pop    rdi
     326:	46                   	rex.RX
     327:	41 53                	push   r11
     329:	54                   	push   rsp
     32a:	36 34 5f             	ss xor al,0x5f
     32d:	57                   	push   rdi
     32e:	49                   	rex.WB
     32f:	44 54                	rex.R push rsp
     331:	48 5f                	rex.W pop rdi
     333:	5f                   	pop    rdi
     334:	20 36                	and    BYTE PTR [rsi],dh
     336:	34 00                	xor    al,0x0
     338:	5f                   	pop    rdi
     339:	49                   	rex.WB
     33a:	4f 5f                	rex.WRXB pop r15
     33c:	45                   	rex.RB
     33d:	4f                   	rex.WRXB
     33e:	46 5f                	rex.RX pop rdi
     340:	53                   	push   rbx
     341:	45                   	rex.RB
     342:	45                   	rex.RB
     343:	4e 20 30             	rex.WRX and BYTE PTR [rax],r14b
     346:	78 31                	js     379 <.debug_str+0x379>
     348:	30 00                	xor    BYTE PTR [rax],al
     34a:	53                   	push   rbx
     34b:	45                   	rex.RB
     34c:	45                   	rex.RB
     34d:	4b 5f                	rex.WXB pop r15
     34f:	43 55                	rex.XB push r13
     351:	52                   	push   rdx
     352:	20 31                	and    BYTE PTR [rcx],dh
     354:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     357:	46                   	rex.RX
     358:	4c 54                	rex.WR push rsp
     35a:	33 32                	xor    esi,DWORD PTR [rdx]
     35c:	58                   	pop    rax
     35d:	5f                   	pop    rdi
     35e:	44                   	rex.R
     35f:	45                   	rex.RB
     360:	43                   	rex.XB
     361:	49                   	rex.WB
     362:	4d                   	rex.WRB
     363:	41                   	rex.B
     364:	4c 5f                	rex.WR pop rdi
     366:	44                   	rex.R
     367:	49                   	rex.WB
     368:	47 5f                	rex.RXB pop r15
     36a:	5f                   	pop    rdi
     36b:	20 31                	and    BYTE PTR [rcx],dh
     36d:	37                   	(bad)  
     36e:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     371:	6b 38 5f             	imul   edi,DWORD PTR [rax],0x5f
     374:	5f                   	pop    rdi
     375:	20 31                	and    BYTE PTR [rcx],dh
     377:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     37a:	44                   	rex.R
     37b:	42                   	rex.X
     37c:	4c 5f                	rex.WR pop rdi
     37e:	4d                   	rex.WRB
     37f:	49                   	rex.WB
     380:	4e 5f                	rex.WRX pop rdi
     382:	45 58                	rex.RB pop r8
     384:	50                   	push   rax
     385:	5f                   	pop    rdi
     386:	5f                   	pop    rdi
     387:	20 28                	and    BYTE PTR [rax],ch
     389:	2d 31 30 32 31       	sub    eax,0x31323031
     38e:	29 00                	sub    DWORD PTR [rax],eax
     390:	5f                   	pop    rdi
     391:	5f                   	pop    rdi
     392:	49                   	rex.WB
     393:	4e 54                	rex.WRX push rsp
     395:	5f                   	pop    rdi
     396:	46                   	rex.RX
     397:	41 53                	push   r11
     399:	54                   	push   rsp
     39a:	36 34 5f             	ss xor al,0x5f
     39d:	4d                   	rex.WRB
     39e:	41 58                	pop    r8
     3a0:	5f                   	pop    rdi
     3a1:	5f                   	pop    rdi
     3a2:	20 30                	and    BYTE PTR [rax],dh
     3a4:	78 37                	js     3dd <.debug_str+0x3dd>
     3a6:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16
     3ad:	66 66 66 66 66 66 66 
     3b4:	66 4c 00 5f 5f       	data16 rex.WR add BYTE PTR [rdi+0x5f],r11b
     3b9:	68 61 73 5f 69       	push   0x695f7361
     3be:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     3bf:	63 6c 75 64          	movsxd ebp,DWORD PTR [rbp+rsi*2+0x64]
     3c3:	65 5f                	gs pop rdi
     3c5:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     3c6:	65 78 74             	gs js  43d <.debug_str+0x43d>
     3c9:	28 53 54             	sub    BYTE PTR [rbx+0x54],dl
     3cc:	52                   	push   rdx
     3cd:	29 20                	sub    DWORD PTR [rax],esp
     3cf:	5f                   	pop    rdi
     3d0:	5f                   	pop    rdi
     3d1:	68 61 73 5f 69       	push   0x695f7361
     3d6:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     3d7:	63 6c 75 64          	movsxd ebp,DWORD PTR [rbp+rsi*2+0x64]
     3db:	65 5f                	gs pop rdi
     3dd:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     3de:	65 78 74             	gs js  455 <.debug_str+0x455>
     3e1:	5f                   	pop    rdi
     3e2:	5f                   	pop    rdi
     3e3:	28 53 54             	sub    BYTE PTR [rbx+0x54],dl
     3e6:	52                   	push   rdx
     3e7:	29 00                	sub    DWORD PTR [rax],eax
     3e9:	5f                   	pop    rdi
     3ea:	49                   	rex.WB
     3eb:	4f 5f                	rex.WRXB pop r15
     3ed:	52                   	push   rdx
     3ee:	49                   	rex.WB
     3ef:	47                   	rex.RXB
     3f0:	48 54                	rex.W push rsp
     3f2:	20 30                	and    BYTE PTR [rax],dh
     3f4:	34 00                	xor    al,0x0
     3f6:	5f                   	pop    rdi
     3f7:	49                   	rex.WB
     3f8:	4f 5f                	rex.WRXB pop r15
     3fa:	55                   	push   rbp
     3fb:	53                   	push   rbx
     3fc:	45 52                	rex.RB push r10
     3fe:	5f                   	pop    rdi
     3ff:	42 55                	rex.X push rbp
     401:	46 20 31             	rex.RX and BYTE PTR [rcx],r14b
     404:	00 5f 53             	add    BYTE PTR [rdi+0x53],bl
     407:	59                   	pop    rcx
     408:	53                   	push   rbx
     409:	5f                   	pop    rdi
     40a:	43                   	rex.XB
     40b:	44                   	rex.R
     40c:	45                   	rex.RB
     40d:	46 53                	rex.RX push rbx
     40f:	5f                   	pop    rdi
     410:	48 20 31             	rex.W and BYTE PTR [rcx],sil
     413:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     416:	46                   	rex.RX
     417:	4c 54                	rex.WR push rsp
     419:	33 32                	xor    esi,DWORD PTR [rdx]
     41b:	58                   	pop    rax
     41c:	5f                   	pop    rdi
     41d:	4d                   	rex.WRB
     41e:	41 58                	pop    r8
     420:	5f                   	pop    rdi
     421:	5f                   	pop    rdi
     422:	20 31                	and    BYTE PTR [rcx],dh
     424:	2e 37                	cs (bad) 
     426:	39 37                	cmp    DWORD PTR [rdi],esi
     428:	36 39 33             	cmp    DWORD PTR ss:[rbx],esi
     42b:	31 33                	xor    DWORD PTR [rbx],esi
     42d:	34 38                	xor    al,0x38
     42f:	36 32 33             	xor    dh,BYTE PTR ss:[rbx]
     432:	31 35 37 30 38 31    	xor    DWORD PTR [rip+0x31383037],esi        # 3138346f <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x3138346f>
     438:	34 35                	xor    al,0x35
     43a:	32 37                	xor    dh,BYTE PTR [rdi]
     43c:	34 32                	xor    al,0x32
     43e:	33 37                	xor    esi,DWORD PTR [rdi]
     440:	33 31                	xor    esi,DWORD PTR [rcx]
     442:	37                   	(bad)  
     443:	30 34 33             	xor    BYTE PTR [rbx+rsi*1],dh
     446:	35 37 65 2b 33       	xor    eax,0x332b6537
     44b:	30 38                	xor    BYTE PTR [rax],bh
     44d:	46 33 32             	rex.RX xor r14d,DWORD PTR [rdx]
     450:	78 00                	js     452 <.debug_str+0x452>
     452:	5f                   	pop    rdi
     453:	5f                   	pop    rdi
     454:	67 6c                	ins    BYTE PTR es:[edi],dx
     456:	69 62 63 5f 75 6e 6c 	imul   esp,DWORD PTR [rdx+0x63],0x6c6e755f
     45d:	69 6b 65 6c 79 28 63 	imul   ebp,DWORD PTR [rbx+0x65],0x6328796c
     464:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     465:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     466:	64 29 20             	sub    DWORD PTR fs:[rax],esp
     469:	5f                   	pop    rdi
     46a:	5f                   	pop    rdi
     46b:	62                   	(bad)  
     46c:	75 69                	jne    4d7 <.debug_str+0x4d7>
     46e:	6c                   	ins    BYTE PTR es:[rdi],dx
     46f:	74 69                	je     4da <.debug_str+0x4da>
     471:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     472:	5f                   	pop    rdi
     473:	65 78 70             	gs js  4e6 <.debug_str+0x4e6>
     476:	65 63 74 20 28       	movsxd esi,DWORD PTR gs:[rax+riz*1+0x28]
     47b:	28 63 6f             	sub    BYTE PTR [rbx+0x6f],ah
     47e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     47f:	64 29 2c 20          	sub    DWORD PTR fs:[rax+riz*1],ebp
     483:	30 29                	xor    BYTE PTR [rcx],ch
     485:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     488:	53                   	push   rbx
     489:	49 5a                	rex.WB pop r10
     48b:	45                   	rex.RB
     48c:	4f                   	rex.WRXB
     48d:	46 5f                	rex.RX pop rdi
     48f:	57                   	push   rdi
     490:	49                   	rex.WB
     491:	4e 54                	rex.WRX push rsp
     493:	5f                   	pop    rdi
     494:	54                   	push   rsp
     495:	5f                   	pop    rdi
     496:	5f                   	pop    rdi
     497:	20 34 00             	and    BYTE PTR [rax+rax*1],dh
     49a:	5f                   	pop    rdi
     49b:	5f                   	pop    rdi
     49c:	47                   	rex.RXB
     49d:	4e 55                	rex.WRX push rbp
     49f:	43 5f                	rex.XB pop r15
     4a1:	50                   	push   rax
     4a2:	52                   	push   rdx
     4a3:	45 52                	rex.RB push r10
     4a5:	45 51                	rex.RB push r9
     4a7:	28 6d 61             	sub    BYTE PTR [rbp+0x61],ch
     4aa:	6a 2c                	push   0x2c
     4ac:	6d                   	ins    DWORD PTR es:[rdi],dx
     4ad:	69 6e 29 20 28 28 5f 	imul   ebp,DWORD PTR [rsi+0x29],0x5f282820
     4b4:	5f                   	pop    rdi
     4b5:	47                   	rex.RXB
     4b6:	4e 55                	rex.WRX push rbp
     4b8:	43 5f                	rex.XB pop r15
     4ba:	5f                   	pop    rdi
     4bb:	20 3c 3c             	and    BYTE PTR [rsp+rdi*1],bh
     4be:	20 31                	and    BYTE PTR [rcx],dh
     4c0:	36 29 20             	sub    DWORD PTR ss:[rax],esp
     4c3:	2b 20                	sub    esp,DWORD PTR [rax]
     4c5:	5f                   	pop    rdi
     4c6:	5f                   	pop    rdi
     4c7:	47                   	rex.RXB
     4c8:	4e 55                	rex.WRX push rbp
     4ca:	43 5f                	rex.XB pop r15
     4cc:	4d                   	rex.WRB
     4cd:	49                   	rex.WB
     4ce:	4e                   	rex.WRX
     4cf:	4f 52                	rex.WRXB push r10
     4d1:	5f                   	pop    rdi
     4d2:	5f                   	pop    rdi
     4d3:	20 3e                	and    BYTE PTR [rsi],bh
     4d5:	3d 20 28 28 6d       	cmp    eax,0x6d282820
     4da:	61                   	(bad)  
     4db:	6a 29                	push   0x29
     4dd:	20 3c 3c             	and    BYTE PTR [rsp+rdi*1],bh
     4e0:	20 31                	and    BYTE PTR [rcx],dh
     4e2:	36 29 20             	sub    DWORD PTR ss:[rax],esp
     4e5:	2b 20                	sub    esp,DWORD PTR [rax]
     4e7:	28 6d 69             	sub    BYTE PTR [rbp+0x69],ch
     4ea:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     4eb:	29 29                	sub    DWORD PTR [rcx],ebp
     4ed:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     4f0:	55                   	push   rbp
     4f1:	49                   	rex.WB
     4f2:	4e 54                	rex.WRX push rsp
     4f4:	50                   	push   rax
     4f5:	54                   	push   rsp
     4f6:	52                   	push   rdx
     4f7:	5f                   	pop    rdi
     4f8:	4d                   	rex.WRB
     4f9:	41 58                	pop    r8
     4fb:	5f                   	pop    rdi
     4fc:	5f                   	pop    rdi
     4fd:	20 30                	and    BYTE PTR [rax],dh
     4ff:	78 66                	js     567 <.debug_str+0x567>
     501:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16
     508:	66 66 66 66 66 66 66 
     50f:	66 55                	push   bp
     511:	4c 00 5f 53          	rex.WR add BYTE PTR [rdi+0x53],r11b
     515:	49 5a                	rex.WB pop r10
     517:	45 5f                	rex.RB pop r15
     519:	54                   	push   rsp
     51a:	20 00                	and    BYTE PTR [rax],al
     51c:	5f                   	pop    rdi
     51d:	5f                   	pop    rdi
     51e:	76 61                	jbe    581 <.debug_str+0x581>
     520:	5f                   	pop    rdi
     521:	61                   	(bad)  
     522:	72 67                	jb     58b <.debug_str+0x58b>
     524:	5f                   	pop    rdi
     525:	70 61                	jo     588 <.debug_str+0x588>
     527:	63 6b 5f             	movsxd ebp,DWORD PTR [rbx+0x5f]
     52a:	6c                   	ins    BYTE PTR es:[rdi],dx
     52b:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     52d:	28 29                	sub    BYTE PTR [rcx],ch
     52f:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
     532:	62                   	(bad)  
     533:	75 69                	jne    59e <.debug_str+0x59e>
     535:	6c                   	ins    BYTE PTR es:[rdi],dx
     536:	74 69                	je     5a1 <.debug_str+0x5a1>
     538:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     539:	5f                   	pop    rdi
     53a:	76 61                	jbe    59d <.debug_str+0x59d>
     53c:	5f                   	pop    rdi
     53d:	61                   	(bad)  
     53e:	72 67                	jb     5a7 <.debug_str+0x5a7>
     540:	5f                   	pop    rdi
     541:	70 61                	jo     5a4 <.debug_str+0x5a4>
     543:	63 6b 5f             	movsxd ebp,DWORD PTR [rbx+0x5f]
     546:	6c                   	ins    BYTE PTR es:[rdi],dx
     547:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     549:	20 28                	and    BYTE PTR [rax],ch
     54b:	29 00                	sub    DWORD PTR [rax],eax
     54d:	5f                   	pop    rdi
     54e:	47 5f                	rex.RXB pop r15
     550:	48                   	rex.W
     551:	41 56                	push   r14
     553:	45 5f                	rex.RB pop r15
     555:	4d                   	rex.WRB
     556:	4d                   	rex.WRB
     557:	41 50                	push   r8
     559:	20 31                	and    BYTE PTR [rcx],dh
     55b:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     55e:	61                   	(bad)  
     55f:	74 74                	je     5d5 <.debug_str+0x5d5>
     561:	72 69                	jb     5cc <.debug_str+0x5cc>
     563:	62                   	(bad)  
     564:	75 74                	jne    5da <.debug_str+0x5da>
     566:	65 5f                	gs pop rdi
     568:	63 6f 6e             	movsxd ebp,DWORD PTR [rdi+0x6e]
     56b:	73 74                	jae    5e1 <.debug_str+0x5e1>
     56d:	5f                   	pop    rdi
     56e:	5f                   	pop    rdi
     56f:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
     572:	61                   	(bad)  
     573:	74 74                	je     5e9 <.debug_str+0x5e9>
     575:	72 69                	jb     5e0 <.debug_str+0x5e0>
     577:	62                   	(bad)  
     578:	75 74                	jne    5ee <.debug_str+0x5ee>
     57a:	65 5f                	gs pop rdi
     57c:	5f                   	pop    rdi
     57d:	20 28                	and    BYTE PTR [rax],ch
     57f:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
     582:	63 6f 6e             	movsxd ebp,DWORD PTR [rdi+0x6e]
     585:	73 74                	jae    5fb <.debug_str+0x5fb>
     587:	5f                   	pop    rdi
     588:	5f                   	pop    rdi
     589:	29 29                	sub    DWORD PTR [rcx],ebp
     58b:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     58e:	47                   	rex.RXB
     58f:	4c                   	rex.WR
     590:	49                   	rex.WB
     591:	42                   	rex.X
     592:	43 5f                	rex.XB pop r15
     594:	55                   	push   rbp
     595:	53                   	push   rbx
     596:	45 5f                	rex.RB pop r15
     598:	44                   	rex.R
     599:	45 50                	rex.RB push r8
     59b:	52                   	push   rdx
     59c:	45                   	rex.RB
     59d:	43                   	rex.XB
     59e:	41 54                	push   r12
     5a0:	45                   	rex.RB
     5a1:	44 5f                	rex.R pop rdi
     5a3:	47                   	rex.RXB
     5a4:	45 54                	rex.RB push r12
     5a6:	53                   	push   rbx
     5a7:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
     5aa:	4f 5f                	rex.WRXB pop r15
     5ac:	4e                   	rex.WRX
     5ad:	4f 5f                	rex.WRXB pop r15
     5af:	57                   	push   rdi
     5b0:	52                   	push   rdx
     5b1:	49 54                	rex.WB push r12
     5b3:	45 53                	rex.RB push r11
     5b5:	20 38                	and    BYTE PTR [rax],bh
     5b7:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     5ba:	47                   	rex.RXB
     5bb:	4e 55                	rex.WRX push rbp
     5bd:	43 5f                	rex.XB pop r15
     5bf:	4d                   	rex.WRB
     5c0:	49                   	rex.WB
     5c1:	4e                   	rex.WRX
     5c2:	4f 52                	rex.WRXB push r10
     5c4:	5f                   	pop    rdi
     5c5:	5f                   	pop    rdi
     5c6:	20 33                	and    BYTE PTR [rbx],dh
     5c8:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     5cb:	55                   	push   rbp
     5cc:	53                   	push   rbx
     5cd:	45 5f                	rex.RB pop r15
     5cf:	4c                   	rex.WR
     5d0:	41 52                	push   r10
     5d2:	47                   	rex.RXB
     5d3:	45                   	rex.RB
     5d4:	46                   	rex.RX
     5d5:	49                   	rex.WB
     5d6:	4c                   	rex.WR
     5d7:	45                   	rex.RB
     5d8:	36 34 00             	ss xor al,0x0
     5db:	5f                   	pop    rdi
     5dc:	5f                   	pop    rdi
     5dd:	52                   	push   rdx
     5de:	4c                   	rex.WR
     5df:	49                   	rex.WB
     5e0:	4d 5f                	rex.WRB pop r15
     5e2:	54                   	push   rsp
     5e3:	5f                   	pop    rdi
     5e4:	54                   	push   rsp
     5e5:	59                   	pop    rcx
     5e6:	50                   	push   rax
     5e7:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
     5eb:	53                   	push   rbx
     5ec:	59                   	pop    rcx
     5ed:	53                   	push   rbx
     5ee:	43                   	rex.XB
     5ef:	41                   	rex.B
     5f0:	4c                   	rex.WR
     5f1:	4c 5f                	rex.WR pop rdi
     5f3:	55                   	push   rbp
     5f4:	4c                   	rex.WR
     5f5:	4f                   	rex.WRXB
     5f6:	4e                   	rex.WRX
     5f7:	47 5f                	rex.RXB pop r15
     5f9:	54                   	push   rsp
     5fa:	59                   	pop    rcx
     5fb:	50                   	push   rax
     5fc:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
     600:	4c                   	rex.WR
     601:	44                   	rex.R
     602:	42                   	rex.X
     603:	4c 5f                	rex.WR pop rdi
     605:	52                   	push   rdx
     606:	45                   	rex.RB
     607:	44                   	rex.R
     608:	49 52                	rex.WB push r10
     60a:	28 6e 61             	sub    BYTE PTR [rsi+0x61],ch
     60d:	6d                   	ins    DWORD PTR es:[rdi],dx
     60e:	65 2c 70             	gs sub al,0x70
     611:	72 6f                	jb     682 <.debug_str+0x682>
     613:	74 6f                	je     684 <.debug_str+0x684>
     615:	29 20                	sub    DWORD PTR [rax],esp
     617:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     618:	61                   	(bad)  
     619:	6d                   	ins    DWORD PTR es:[rdi],dx
     61a:	65 20 70 72          	and    BYTE PTR gs:[rax+0x72],dh
     61e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     61f:	74 6f                	je     690 <.debug_str+0x690>
     621:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
     624:	4f 5f                	rex.WRXB pop r15
     626:	77 72                	ja     69a <.debug_str+0x69a>
     628:	69 74 65 5f 65 6e 64 	imul   esi,DWORD PTR [rbp+riz*2+0x5f],0x646e65
     62f:	00 
     630:	75 6e                	jne    6a0 <.debug_str+0x6a0>
     632:	73 69                	jae    69d <.debug_str+0x69d>
     634:	67 6e                	outs   dx,BYTE PTR ds:[esi]
     636:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
     63b:	74 00                	je     63d <.debug_str+0x63d>
     63d:	5f                   	pop    rdi
     63e:	5f                   	pop    rdi
     63f:	47                   	rex.RXB
     640:	4c                   	rex.WR
     641:	49                   	rex.WB
     642:	42                   	rex.X
     643:	43 5f                	rex.XB pop r15
     645:	50                   	push   rax
     646:	52                   	push   rdx
     647:	45 52                	rex.RB push r10
     649:	45 51                	rex.RB push r9
     64b:	28 6d 61             	sub    BYTE PTR [rbp+0x61],ch
     64e:	6a 2c                	push   0x2c
     650:	6d                   	ins    DWORD PTR es:[rdi],dx
     651:	69 6e 29 20 28 28 5f 	imul   ebp,DWORD PTR [rsi+0x29],0x5f282820
     658:	5f                   	pop    rdi
     659:	47                   	rex.RXB
     65a:	4c                   	rex.WR
     65b:	49                   	rex.WB
     65c:	42                   	rex.X
     65d:	43 5f                	rex.XB pop r15
     65f:	5f                   	pop    rdi
     660:	20 3c 3c             	and    BYTE PTR [rsp+rdi*1],bh
     663:	20 31                	and    BYTE PTR [rcx],dh
     665:	36 29 20             	sub    DWORD PTR ss:[rax],esp
     668:	2b 20                	sub    esp,DWORD PTR [rax]
     66a:	5f                   	pop    rdi
     66b:	5f                   	pop    rdi
     66c:	47                   	rex.RXB
     66d:	4c                   	rex.WR
     66e:	49                   	rex.WB
     66f:	42                   	rex.X
     670:	43 5f                	rex.XB pop r15
     672:	4d                   	rex.WRB
     673:	49                   	rex.WB
     674:	4e                   	rex.WRX
     675:	4f 52                	rex.WRXB push r10
     677:	5f                   	pop    rdi
     678:	5f                   	pop    rdi
     679:	20 3e                	and    BYTE PTR [rsi],bh
     67b:	3d 20 28 28 6d       	cmp    eax,0x6d282820
     680:	61                   	(bad)  
     681:	6a 29                	push   0x29
     683:	20 3c 3c             	and    BYTE PTR [rsp+rdi*1],bh
     686:	20 31                	and    BYTE PTR [rcx],dh
     688:	36 29 20             	sub    DWORD PTR ss:[rax],esp
     68b:	2b 20                	sub    esp,DWORD PTR [rax]
     68d:	28 6d 69             	sub    BYTE PTR [rbp+0x69],ch
     690:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     691:	29 29                	sub    DWORD PTR [rcx],ebp
     693:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     696:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     697:	65 65 64 5f          	gs gs fs pop rdi
     69b:	4e 55                	rex.WRX push rbp
     69d:	4c                   	rex.WR
     69e:	4c 20 00             	rex.WR and BYTE PTR [rax],r8b
     6a1:	5f                   	pop    rdi
     6a2:	5f                   	pop    rdi
     6a3:	46                   	rex.RX
     6a4:	4c 54                	rex.WR push rsp
     6a6:	36 34 5f             	ss xor al,0x5f
     6a9:	4d                   	rex.WRB
     6aa:	49                   	rex.WB
     6ab:	4e 5f                	rex.WRX pop rdi
     6ad:	5f                   	pop    rdi
     6ae:	20 32                	and    BYTE PTR [rdx],dh
     6b0:	2e 32 32             	xor    dh,BYTE PTR cs:[rdx]
     6b3:	35 30 37 33 38       	xor    eax,0x38333730
     6b8:	35 38 35 30 37       	xor    eax,0x37303538
     6bd:	32 30                	xor    dh,BYTE PTR [rax]
     6bf:	31 33                	xor    DWORD PTR [rbx],esi
     6c1:	38 33                	cmp    BYTE PTR [rbx],dh
     6c3:	30 39                	xor    BYTE PTR [rcx],bh
     6c5:	30 32                	xor    BYTE PTR [rdx],dh
     6c7:	33 32                	xor    esi,DWORD PTR [rdx]
     6c9:	37                   	(bad)  
     6ca:	31 37                	xor    DWORD PTR [rdi],esi
     6cc:	33 33                	xor    esi,DWORD PTR [rbx]
     6ce:	32 34 30             	xor    dh,BYTE PTR [rax+rsi*1]
     6d1:	34 30                	xor    al,0x30
     6d3:	36 65 2d 33 30 38 46 	ss gs sub eax,0x46383033
     6da:	36 34 00             	ss xor al,0x0
     6dd:	5f                   	pop    rdi
     6de:	5f                   	pop    rdi
     6df:	4c                   	rex.WR
     6e0:	4f                   	rex.WRXB
     6e1:	4e                   	rex.WRX
     6e2:	47 5f                	rex.RXB pop r15
     6e4:	4c                   	rex.WR
     6e5:	4f                   	rex.WRXB
     6e6:	4e                   	rex.WRX
     6e7:	47 5f                	rex.RXB pop r15
     6e9:	57                   	push   rdi
     6ea:	49                   	rex.WB
     6eb:	44 54                	rex.R push rsp
     6ed:	48 5f                	rex.W pop rdi
     6ef:	5f                   	pop    rdi
     6f0:	20 36                	and    BYTE PTR [rsi],dh
     6f2:	34 00                	xor    al,0x0
     6f4:	5f                   	pop    rdi
     6f5:	50                   	push   rax
     6f6:	4f 53                	rex.WRXB push r11
     6f8:	49 58                	rex.WB pop r8
     6fa:	5f                   	pop    rdi
     6fb:	53                   	push   rbx
     6fc:	4f 55                	rex.WRXB push r13
     6fe:	52                   	push   rdx
     6ff:	43                   	rex.XB
     700:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
     704:	46                   	rex.RX
     705:	4c 54                	rex.WR push rsp
     707:	5f                   	pop    rdi
     708:	44                   	rex.R
     709:	45                   	rex.RB
     70a:	4e                   	rex.WRX
     70b:	4f 52                	rex.WRXB push r10
     70d:	4d 5f                	rex.WRB pop r15
     70f:	4d                   	rex.WRB
     710:	49                   	rex.WB
     711:	4e 5f                	rex.WRX pop rdi
     713:	5f                   	pop    rdi
     714:	20 31                	and    BYTE PTR [rcx],dh
     716:	2e 34 30             	cs xor al,0x30
     719:	31 32                	xor    DWORD PTR [rdx],esi
     71b:	39 38                	cmp    DWORD PTR [rax],edi
     71d:	34 36                	xor    al,0x36
     71f:	34 33                	xor    al,0x33
     721:	32 34 38             	xor    dh,BYTE PTR [rax+rdi*1]
     724:	31 37                	xor    DWORD PTR [rdi],esi
     726:	30 37                	xor    BYTE PTR [rdi],dh
     728:	30 39                	xor    BYTE PTR [rcx],bh
     72a:	32 33                	xor    dh,BYTE PTR [rbx]
     72c:	37                   	(bad)  
     72d:	32 39                	xor    bh,BYTE PTR [rcx]
     72f:	35 38 33 32 38       	xor    eax,0x38323338
     734:	39 39                	cmp    DWORD PTR [rcx],edi
     736:	31 36                	xor    DWORD PTR [rsi],esi
     738:	31 33                	xor    DWORD PTR [rbx],esi
     73a:	65 2d 34 35 46 00    	gs sub eax,0x463534
     740:	2f                   	(bad)  
     741:	68 6f 6d 65 2f       	push   0x2f656d6f
     746:	75 62                	jne    7aa <.debug_str+0x7aa>
     748:	75 6e                	jne    7b8 <.debug_str+0x7b8>
     74a:	74 75                	je     7c1 <.debug_str+0x7c1>
     74c:	2f                   	(bad)  
     74d:	45 6e                	rex.RB outs dx,BYTE PTR ds:[rsi]
     74f:	67 69 6e 65 65 72 69 	imul   ebp,DWORD PTR [esi+0x65],0x6e697265
     756:	6e 
     757:	67 2f                	addr32 (bad) 
     759:	50                   	push   rax
     75a:	72 6f                	jb     7cb <.debug_str+0x7cb>
     75c:	67 72 61             	addr32 jb 7c0 <.debug_str+0x7c0>
     75f:	6d                   	ins    DWORD PTR es:[rdi],dx
     760:	6d                   	ins    DWORD PTR es:[rdi],dx
     761:	69 6e 67 2f 44 69 73 	imul   ebp,DWORD PTR [rsi+0x67],0x7369442f
     768:	61                   	(bad)  
     769:	73 73                	jae    7de <.debug_str+0x7de>
     76b:	65 6d                	gs ins DWORD PTR es:[rdi],dx
     76d:	62                   	(bad)  
     76e:	6c                   	ins    BYTE PTR es:[rdi],dx
     76f:	69 6e 67 2d 42 69 6e 	imul   ebp,DWORD PTR [rsi+0x67],0x6e69422d
     776:	61                   	(bad)  
     777:	72 69                	jb     7e2 <.debug_str+0x7e2>
     779:	65 73 2f             	gs jae 7ab <.debug_str+0x7ab>
     77c:	43 2f                	rex.XB (bad) 
     77e:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
     780:	74 65                	je     7e7 <.debug_str+0x7e7>
     782:	6c                   	ins    BYTE PTR es:[rdi],dx
     783:	5f                   	pop    rdi
     784:	61                   	(bad)  
     785:	72 63                	jb     7ea <.debug_str+0x7ea>
     787:	68 69 74 65 63       	push   0x63657469
     78c:	74 75                	je     803 <.debug_str+0x803>
     78e:	72 65                	jb     7f5 <.debug_str+0x7f5>
     790:	2f                   	(bad)  
     791:	41                   	rex.B
     792:	4d                   	rex.WRB
     793:	44                   	rex.R
     794:	36 34 2f             	ss xor al,0x2f
     797:	43 6f                	rex.XB outs dx,DWORD PTR ds:[rsi]
     799:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     79a:	64 69 74 69 6f 6e 61 	imul   esi,DWORD PTR fs:[rcx+rbp*2+0x6f],0x736c616e
     7a1:	6c 73 
     7a3:	2f                   	(bad)  
     7a4:	57                   	push   rdi
     7a5:	69 74 68 5f 44 65 62 	imul   esi,DWORD PTR [rax+rbp*2+0x5f],0x75626544
     7ac:	75 
     7ad:	67 5f                	addr32 pop rdi
     7af:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
     7b1:	66 6f                	outs   dx,WORD PTR ds:[rsi]
     7b3:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     7b6:	53                   	push   rbx
     7b7:	49 5a                	rex.WB pop r10
     7b9:	45                   	rex.RB
     7ba:	4f                   	rex.WRXB
     7bb:	46 5f                	rex.RX pop rdi
     7bd:	53                   	push   rbx
     7be:	49 5a                	rex.WB pop r10
     7c0:	45 5f                	rex.RB pop r15
     7c2:	54                   	push   rsp
     7c3:	5f                   	pop    rdi
     7c4:	5f                   	pop    rdi
     7c5:	20 38                	and    BYTE PTR [rax],bh
     7c7:	00 61 72             	add    BYTE PTR [rcx+0x72],ah
     7ca:	67 63 00             	movsxd eax,DWORD PTR [eax]
     7cd:	5f                   	pop    rdi
     7ce:	66 6c                	data16 ins BYTE PTR es:[rdi],dx
     7d0:	61                   	(bad)  
     7d1:	67 73 00             	addr32 jae 7d4 <.debug_str+0x7d4>
     7d4:	5f                   	pop    rdi
     7d5:	5f                   	pop    rdi
     7d6:	4f 52                	rex.WRXB push r10
     7d8:	44                   	rex.R
     7d9:	45 52                	rex.RB push r10
     7db:	5f                   	pop    rdi
     7dc:	42                   	rex.X
     7dd:	49                   	rex.WB
     7de:	47 5f                	rex.RXB pop r15
     7e0:	45                   	rex.RB
     7e1:	4e                   	rex.WRX
     7e2:	44                   	rex.R
     7e3:	49                   	rex.WB
     7e4:	41                   	rex.B
     7e5:	4e 5f                	rex.WRX pop rdi
     7e7:	5f                   	pop    rdi
     7e8:	20 34 33             	and    BYTE PTR [rbx+rsi*1],dh
     7eb:	32 31                	xor    dh,BYTE PTR [rcx]
     7ed:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     7f0:	47                   	rex.RXB
     7f1:	4e 55                	rex.WRX push rbp
     7f3:	43 5f                	rex.XB pop r15
     7f5:	5f                   	pop    rdi
     7f6:	20 37                	and    BYTE PTR [rdi],dh
     7f8:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
     7fb:	4f 5f                	rex.WRXB pop r15
     7fd:	4c                   	rex.WR
     7fe:	49                   	rex.WB
     7ff:	4e                   	rex.WRX
     800:	45 5f                	rex.RB pop r15
     802:	42 55                	rex.X push rbp
     804:	46 20 30             	rex.RX and BYTE PTR [rax],r14b
     807:	78 32                	js     83b <.debug_str+0x83b>
     809:	30 30                	xor    BYTE PTR [rax],dh
     80b:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     80e:	55                   	push   rbp
     80f:	53                   	push   rbx
     810:	45 5f                	rex.RB pop r15
     812:	49 53                	rex.WB push r11
     814:	4f                   	rex.WRXB
     815:	43 58                	rex.XB pop r8
     817:	58                   	pop    rax
     818:	31 31                	xor    DWORD PTR [rcx],esi
     81a:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     81d:	55                   	push   rbp
     81e:	53                   	push   rbx
     81f:	45 5f                	rex.RB pop r15
     821:	41 54                	push   r12
     823:	46                   	rex.RX
     824:	49                   	rex.WB
     825:	4c                   	rex.WR
     826:	45 20 31             	and    BYTE PTR [r9],r14b
     829:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     82c:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     82d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     82e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     82f:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     830:	75 6c                	jne    89e <.debug_str+0x89e>
     832:	6c                   	ins    BYTE PTR es:[rdi],dx
     833:	28 70 61             	sub    BYTE PTR [rax+0x61],dh
     836:	72 61                	jb     899 <.debug_str+0x899>
     838:	6d                   	ins    DWORD PTR es:[rdi],dx
     839:	73 29                	jae    864 <.debug_str+0x864>
     83b:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
     83e:	61                   	(bad)  
     83f:	74 74                	je     8b5 <.debug_str+0x8b5>
     841:	72 69                	jb     8ac <.debug_str+0x8ac>
     843:	62                   	(bad)  
     844:	75 74                	jne    8ba <.debug_str+0x8ba>
     846:	65 5f                	gs pop rdi
     848:	5f                   	pop    rdi
     849:	20 28                	and    BYTE PTR [rax],ch
     84b:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
     84e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     84f:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     850:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     851:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     852:	75 6c                	jne    8c0 <.debug_str+0x8c0>
     854:	6c                   	ins    BYTE PTR es:[rdi],dx
     855:	5f                   	pop    rdi
     856:	5f                   	pop    rdi
     857:	20 70 61             	and    BYTE PTR [rax+0x61],dh
     85a:	72 61                	jb     8bd <.debug_str+0x8bd>
     85c:	6d                   	ins    DWORD PTR es:[rdi],dx
     85d:	73 29                	jae    888 <.debug_str+0x888>
     85f:	29 00                	sub    DWORD PTR [rax],eax
     861:	5f                   	pop    rdi
     862:	5f                   	pop    rdi
     863:	55                   	push   rbp
     864:	49                   	rex.WB
     865:	4e 54                	rex.WRX push rsp
     867:	36 34 5f             	ss xor al,0x5f
     86a:	43 28 63 29          	rex.XB sub BYTE PTR [r11+0x29],spl
     86e:	20 63 20             	and    BYTE PTR [rbx+0x20],ah
     871:	23 23                	and    esp,DWORD PTR [rbx]
     873:	20 55 4c             	and    BYTE PTR [rbp+0x4c],dl
     876:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     879:	47                   	rex.RXB
     87a:	4e 55                	rex.WRX push rbp
     87c:	5f                   	pop    rdi
     87d:	4c                   	rex.WR
     87e:	49                   	rex.WB
     87f:	42 52                	rex.X push rdx
     881:	41 52                	push   r10
     883:	59                   	pop    rcx
     884:	5f                   	pop    rdi
     885:	5f                   	pop    rdi
     886:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     889:	44                   	rex.R
     88a:	42                   	rex.X
     88b:	4c 5f                	rex.WR pop rdi
     88d:	4d                   	rex.WRB
     88e:	41                   	rex.B
     88f:	4e 54                	rex.WRX push rsp
     891:	5f                   	pop    rdi
     892:	44                   	rex.R
     893:	49                   	rex.WB
     894:	47 5f                	rex.RXB pop r15
     896:	5f                   	pop    rdi
     897:	20 35 33 00 5f 5f    	and    BYTE PTR [rip+0x5f5f0033],dh        # 5f5f08d0 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x5f5f08d0>
     89d:	55                   	push   rbp
     89e:	53                   	push   rbx
     89f:	45 5f                	rex.RB pop r15
     8a1:	50                   	push   rax
     8a2:	4f 53                	rex.WRXB push r11
     8a4:	49 58                	rex.WB pop r8
     8a6:	31 39                	xor    DWORD PTR [rcx],edi
     8a8:	39 35 30 36 20 31    	cmp    DWORD PTR [rip+0x31203630],esi        # 31203ede <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x31203ede>
     8ae:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     8b1:	73 74                	jae    927 <.debug_str+0x927>
     8b3:	75 62                	jne    917 <.debug_str+0x917>
     8b5:	5f                   	pop    rdi
     8b6:	63 68 66             	movsxd ebp,DWORD PTR [rax+0x66]
     8b9:	6c                   	ins    BYTE PTR es:[rdi],dx
     8ba:	61                   	(bad)  
     8bb:	67 73 20             	addr32 jae 8de <.debug_str+0x8de>
     8be:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     8c1:	49                   	rex.WB
     8c2:	4e 54                	rex.WRX push rsp
     8c4:	5f                   	pop    rdi
     8c5:	4d                   	rex.WRB
     8c6:	41 58                	pop    r8
     8c8:	5f                   	pop    rdi
     8c9:	5f                   	pop    rdi
     8ca:	20 30                	and    BYTE PTR [rax],dh
     8cc:	78 37                	js     905 <.debug_str+0x905>
     8ce:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 add BYTE PTR [rdi+0x66],bl
     8d5:	00 5f 66 
     8d8:	6c                   	ins    BYTE PTR es:[rdi],dx
     8d9:	61                   	(bad)  
     8da:	67 73 32             	addr32 jae 90f <.debug_str+0x90f>
     8dd:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     8e0:	4e 54                	rex.WRX push rsp
     8e2:	48                   	rex.W
     8e3:	4e                   	rex.WRX
     8e4:	4c 28 66 63          	rex.WR sub BYTE PTR [rsi+0x63],r12b
     8e8:	74 29                	je     913 <.debug_str+0x913>
     8ea:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
     8ed:	61                   	(bad)  
     8ee:	74 74                	je     964 <.debug_str+0x964>
     8f0:	72 69                	jb     95b <.debug_str+0x95b>
     8f2:	62                   	(bad)  
     8f3:	75 74                	jne    969 <.debug_str+0x969>
     8f5:	65 5f                	gs pop rdi
     8f7:	5f                   	pop    rdi
     8f8:	20 28                	and    BYTE PTR [rax],ch
     8fa:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
     8fd:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     8fe:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     8ff:	74 68                	je     969 <.debug_str+0x969>
     901:	72 6f                	jb     972 <.debug_str+0x972>
     903:	77 5f                	ja     964 <.debug_str+0x964>
     905:	5f                   	pop    rdi
     906:	29 29                	sub    DWORD PTR [rcx],ebp
     908:	20 66 63             	and    BYTE PTR [rsi+0x63],ah
     90b:	74 00                	je     90d <.debug_str+0x90d>
     90d:	5f                   	pop    rdi
     90e:	5f                   	pop    rdi
     90f:	73 74                	jae    985 <.debug_str+0x985>
     911:	75 62                	jne    975 <.debug_str+0x975>
     913:	5f                   	pop    rdi
     914:	66 63 68 66          	movsxd bp,DWORD PTR [rax+0x66]
     918:	6c                   	ins    BYTE PTR es:[rdi],dx
     919:	61                   	(bad)  
     91a:	67 73 20             	addr32 jae 93d <.debug_str+0x93d>
     91d:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     920:	49                   	rex.WB
     921:	4e 54                	rex.WRX push rsp
     923:	31 36                	xor    DWORD PTR [rsi],esi
     925:	5f                   	pop    rdi
     926:	54                   	push   rsp
     927:	59                   	pop    rcx
     928:	50                   	push   rax
     929:	45 5f                	rex.RB pop r15
     92b:	5f                   	pop    rdi
     92c:	20 73 68             	and    BYTE PTR [rbx+0x68],dh
     92f:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     930:	72 74                	jb     9a6 <.debug_str+0x9a6>
     932:	20 69 6e             	and    BYTE PTR [rcx+0x6e],ch
     935:	74 00                	je     937 <.debug_str+0x937>
     937:	5f                   	pop    rdi
     938:	5f                   	pop    rdi
     939:	44                   	rex.R
     93a:	45                   	rex.RB
     93b:	43                   	rex.XB
     93c:	49                   	rex.WB
     93d:	4d                   	rex.WRB
     93e:	41                   	rex.B
     93f:	4c 5f                	rex.WR pop rdi
     941:	42                   	rex.X
     942:	49                   	rex.WB
     943:	44 5f                	rex.R pop rdi
     945:	46                   	rex.RX
     946:	4f 52                	rex.WRXB push r10
     948:	4d                   	rex.WRB
     949:	41 54                	push   r12
     94b:	5f                   	pop    rdi
     94c:	5f                   	pop    rdi
     94d:	20 31                	and    BYTE PTR [rcx],dh
     94f:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     952:	44                   	rex.R
     953:	45                   	rex.RB
     954:	43 33 32             	rex.XB xor esi,DWORD PTR [r10]
     957:	5f                   	pop    rdi
     958:	45 50                	rex.RB push r8
     95a:	53                   	push   rbx
     95b:	49                   	rex.WB
     95c:	4c                   	rex.WR
     95d:	4f                   	rex.WRXB
     95e:	4e 5f                	rex.WRX pop rdi
     960:	5f                   	pop    rdi
     961:	20 31                	and    BYTE PTR [rcx],dh
     963:	45 2d 36 44 46 00    	rex.RB sub eax,0x464436
     969:	5f                   	pop    rdi
     96a:	53                   	push   rbx
     96b:	49 5a                	rex.WB pop r10
     96d:	45 5f                	rex.RB pop r15
     96f:	54                   	push   rsp
     970:	5f                   	pop    rdi
     971:	44                   	rex.R
     972:	45                   	rex.RB
     973:	43                   	rex.XB
     974:	4c                   	rex.WR
     975:	41 52                	push   r10
     977:	45                   	rex.RB
     978:	44 20 00             	and    BYTE PTR [rax],r8b
     97b:	5f                   	pop    rdi
     97c:	5f                   	pop    rdi
     97d:	46                   	rex.RX
     97e:	44 5f                	rex.R pop rdi
     980:	53                   	push   rbx
     981:	45 54                	rex.RB push r12
     983:	53                   	push   rbx
     984:	49 5a                	rex.WB pop r10
     986:	45 20 31             	and    BYTE PTR [r9],r14b
     989:	30 32                	xor    BYTE PTR [rdx],dh
     98b:	34 00                	xor    al,0x0
     98d:	5f                   	pop    rdi
     98e:	5f                   	pop    rdi
     98f:	4c                   	rex.WR
     990:	44                   	rex.R
     991:	42                   	rex.X
     992:	4c 5f                	rex.WR pop rdi
     994:	44                   	rex.R
     995:	49                   	rex.WB
     996:	47 5f                	rex.RXB pop r15
     998:	5f                   	pop    rdi
     999:	20 31                	and    BYTE PTR [rcx],dh
     99b:	38 00                	cmp    BYTE PTR [rax],al
     99d:	5f                   	pop    rdi
     99e:	6d                   	ins    DWORD PTR es:[rdi],dx
     99f:	61                   	(bad)  
     9a0:	72 6b                	jb     a0d <.debug_str+0xa0d>
     9a2:	65 72 73             	gs jb  a18 <.debug_str+0xa18>
     9a5:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     9a8:	41 54                	push   r12
     9aa:	4f                   	rex.WRXB
     9ab:	4d                   	rex.WRB
     9ac:	49                   	rex.WB
     9ad:	43 5f                	rex.XB pop r15
     9af:	53                   	push   rbx
     9b0:	45 51                	rex.RB push r9
     9b2:	5f                   	pop    rdi
     9b3:	43 53                	rex.XB push r11
     9b5:	54                   	push   rsp
     9b6:	20 35 00 5f 5f 55    	and    BYTE PTR [rip+0x555f5f00],dh        # 555f68bc <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x555f68bc>
     9bc:	53                   	push   rbx
     9bd:	45 5f                	rex.RB pop r15
     9bf:	50                   	push   rax
     9c0:	4f 53                	rex.WRXB push r11
     9c2:	49 58                	rex.WB pop r8
     9c4:	32 20                	xor    ah,BYTE PTR [rax]
     9c6:	31 00                	xor    DWORD PTR [rax],eax
     9c8:	5f                   	pop    rdi
     9c9:	5f                   	pop    rdi
     9ca:	55                   	push   rbp
     9cb:	53                   	push   rbx
     9cc:	45 5f                	rex.RB pop r15
     9ce:	49 53                	rex.WB push r11
     9d0:	4f                   	rex.WRXB
     9d1:	43 39 35 20 31 00 5f 	rex.XB cmp DWORD PTR [rip+0x5f003120],esi        # 5f003af8 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x5f003af8>
     9d8:	5f                   	pop    rdi
     9d9:	53                   	push   rbx
     9da:	49 5a                	rex.WB pop r10
     9dc:	45                   	rex.RB
     9dd:	4f                   	rex.WRXB
     9de:	46 5f                	rex.RX pop rdi
     9e0:	53                   	push   rbx
     9e1:	48                   	rex.W
     9e2:	4f 52                	rex.WRXB push r10
     9e4:	54                   	push   rsp
     9e5:	5f                   	pop    rdi
     9e6:	5f                   	pop    rdi
     9e7:	20 32                	and    BYTE PTR [rdx],dh
     9e9:	00 5f 47             	add    BYTE PTR [rdi+0x47],bl
     9ec:	5f                   	pop    rdi
     9ed:	76 61                	jbe    a50 <.debug_str+0xa50>
     9ef:	5f                   	pop    rdi
     9f0:	6c                   	ins    BYTE PTR es:[rdi],dx
     9f1:	69 73 74 20 5f 5f 67 	imul   esi,DWORD PTR [rbx+0x74],0x675f5f20
     9f8:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     9f9:	75 63                	jne    a5e <.debug_str+0xa5e>
     9fb:	5f                   	pop    rdi
     9fc:	76 61                	jbe    a5f <.debug_str+0xa5f>
     9fe:	5f                   	pop    rdi
     9ff:	6c                   	ins    BYTE PTR es:[rdi],dx
     a00:	69 73 74 00 5f 5f 55 	imul   esi,DWORD PTR [rbx+0x74],0x555f5f00
     a07:	49                   	rex.WB
     a08:	4e 54                	rex.WRX push rsp
     a0a:	36 34 5f             	ss xor al,0x5f
     a0d:	54                   	push   rsp
     a0e:	59                   	pop    rcx
     a0f:	50                   	push   rax
     a10:	45 5f                	rex.RB pop r15
     a12:	5f                   	pop    rdi
     a13:	20 6c 6f 6e          	and    BYTE PTR [rdi+rbp*2+0x6e],ch
     a17:	67 20 75 6e          	and    BYTE PTR [ebp+0x6e],dh
     a1b:	73 69                	jae    a86 <.debug_str+0xa86>
     a1d:	67 6e                	outs   dx,BYTE PTR ds:[esi]
     a1f:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
     a24:	74 00                	je     a26 <.debug_str+0xa26>
     a26:	5f                   	pop    rdi
     a27:	5f                   	pop    rdi
     a28:	49                   	rex.WB
     a29:	4e 54                	rex.WRX push rsp
     a2b:	5f                   	pop    rdi
     a2c:	46                   	rex.RX
     a2d:	41 53                	push   r11
     a2f:	54                   	push   rsp
     a30:	33 32                	xor    esi,DWORD PTR [rdx]
     a32:	5f                   	pop    rdi
     a33:	4d                   	rex.WRB
     a34:	41 58                	pop    r8
     a36:	5f                   	pop    rdi
     a37:	5f                   	pop    rdi
     a38:	20 30                	and    BYTE PTR [rax],dh
     a3a:	78 37                	js     a73 <.debug_str+0xa73>
     a3c:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16
     a43:	66 66 66 66 66 66 66 
     a4a:	66 4c 00 5f 5f       	data16 rex.WR add BYTE PTR [rdi+0x5f],r11b
     a4f:	49                   	rex.WB
     a50:	4e 54                	rex.WRX push rsp
     a52:	5f                   	pop    rdi
     a53:	4c                   	rex.WR
     a54:	45                   	rex.RB
     a55:	41 53                	push   r11
     a57:	54                   	push   rsp
     a58:	38 5f 54             	cmp    BYTE PTR [rdi+0x54],bl
     a5b:	59                   	pop    rcx
     a5c:	50                   	push   rax
     a5d:	45 5f                	rex.RB pop r15
     a5f:	5f                   	pop    rdi
     a60:	20 73 69             	and    BYTE PTR [rbx+0x69],dh
     a63:	67 6e                	outs   dx,BYTE PTR ds:[esi]
     a65:	65 64 20 63 68       	gs and BYTE PTR fs:[rbx+0x68],ah
     a6a:	61                   	(bad)  
     a6b:	72 00                	jb     a6d <.debug_str+0xa6d>
     a6d:	5f                   	pop    rdi
     a6e:	5f                   	pop    rdi
     a6f:	73 69                	jae    ada <.debug_str+0xada>
     a71:	7a 65                	jp     ad8 <.debug_str+0xad8>
     a73:	5f                   	pop    rdi
     a74:	74 20                	je     a96 <.debug_str+0xa96>
     a76:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     a79:	55                   	push   rbp
     a7a:	49                   	rex.WB
     a7b:	4e 54                	rex.WRX push rsp
     a7d:	5f                   	pop    rdi
     a7e:	4c                   	rex.WR
     a7f:	45                   	rex.RB
     a80:	41 53                	push   r11
     a82:	54                   	push   rsp
     a83:	33 32                	xor    esi,DWORD PTR [rdx]
     a85:	5f                   	pop    rdi
     a86:	54                   	push   rsp
     a87:	59                   	pop    rcx
     a88:	50                   	push   rax
     a89:	45 5f                	rex.RB pop r15
     a8b:	5f                   	pop    rdi
     a8c:	20 75 6e             	and    BYTE PTR [rbp+0x6e],dh
     a8f:	73 69                	jae    afa <.debug_str+0xafa>
     a91:	67 6e                	outs   dx,BYTE PTR ds:[esi]
     a93:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
     a98:	74 00                	je     a9a <.debug_str+0xa9a>
     a9a:	5f                   	pop    rdi
     a9b:	5f                   	pop    rdi
     a9c:	73 74                	jae    b12 <.debug_str+0xb12>
     a9e:	75 62                	jne    b02 <.debug_str+0xb02>
     aa0:	5f                   	pop    rdi
     aa1:	73 69                	jae    b0c <.debug_str+0xb0c>
     aa3:	67 72 65             	addr32 jb b0b <.debug_str+0xb0b>
     aa6:	74 75                	je     b1d <.debug_str+0xb1d>
     aa8:	72 6e                	jb     b18 <.debug_str+0xb18>
     aaa:	20 00                	and    BYTE PTR [rax],al
     aac:	5f                   	pop    rdi
     aad:	5f                   	pop    rdi
     aae:	70 74                	jo     b24 <.debug_str+0xb24>
     ab0:	72 5f                	jb     b11 <.debug_str+0xb11>
     ab2:	74 20                	je     ad4 <.debug_str+0xad4>
     ab4:	76 6f                	jbe    b25 <.debug_str+0xb25>
     ab6:	69 64 20 2a 00 5f 5f 	imul   esp,DWORD PTR [rax+riz*1+0x2a],0x535f5f00
     abd:	53 
     abe:	33 32                	xor    esi,DWORD PTR [rdx]
     ac0:	5f                   	pop    rdi
     ac1:	54                   	push   rsp
     ac2:	59                   	pop    rcx
     ac3:	50                   	push   rax
     ac4:	45 20 69 6e          	and    BYTE PTR [r9+0x6e],r13b
     ac8:	74 00                	je     aca <.debug_str+0xaca>
     aca:	5f                   	pop    rdi
     acb:	5f                   	pop    rdi
     acc:	53                   	push   rbx
     acd:	54                   	push   rsp
     ace:	44                   	rex.R
     acf:	43 5f                	rex.XB pop r15
     ad1:	4e                   	rex.WRX
     ad2:	4f 5f                	rex.WRXB pop r15
     ad4:	54                   	push   rsp
     ad5:	48 52                	rex.W push rdx
     ad7:	45                   	rex.RB
     ad8:	41                   	rex.B
     ad9:	44 53                	rex.R push rbx
     adb:	5f                   	pop    rdi
     adc:	5f                   	pop    rdi
     add:	20 31                	and    BYTE PTR [rcx],dh
     adf:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     ae2:	42 59                	rex.X pop rcx
     ae4:	54                   	push   rsp
     ae5:	45 5f                	rex.RB pop r15
     ae7:	4f 52                	rex.WRXB push r10
     ae9:	44                   	rex.R
     aea:	45 52                	rex.RB push r10
     aec:	5f                   	pop    rdi
     aed:	5f                   	pop    rdi
     aee:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
     af1:	4f 52                	rex.WRXB push r10
     af3:	44                   	rex.R
     af4:	45 52                	rex.RB push r10
     af6:	5f                   	pop    rdi
     af7:	4c                   	rex.WR
     af8:	49 54                	rex.WB push r12
     afa:	54                   	push   rsp
     afb:	4c                   	rex.WR
     afc:	45 5f                	rex.RB pop r15
     afe:	45                   	rex.RB
     aff:	4e                   	rex.WRX
     b00:	44                   	rex.R
     b01:	49                   	rex.WB
     b02:	41                   	rex.B
     b03:	4e 5f                	rex.WRX pop rdi
     b05:	5f                   	pop    rdi
     b06:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     b09:	4c                   	rex.WR
     b0a:	44                   	rex.R
     b0b:	42                   	rex.X
     b0c:	4c 5f                	rex.WR pop rdi
     b0e:	4d                   	rex.WRB
     b0f:	49                   	rex.WB
     b10:	4e 5f                	rex.WRX pop rdi
     b12:	5f                   	pop    rdi
     b13:	20 33                	and    BYTE PTR [rbx],dh
     b15:	2e 33 36             	xor    esi,DWORD PTR cs:[rsi]
     b18:	32 31                	xor    dh,BYTE PTR [rcx]
     b1a:	30 33                	xor    BYTE PTR [rbx],dh
     b1c:	31 34 33             	xor    DWORD PTR [rbx+rsi*1],esi
     b1f:	31 31                	xor    DWORD PTR [rcx],esi
     b21:	32 30                	xor    dh,BYTE PTR [rax]
     b23:	39 33                	cmp    DWORD PTR [rbx],esi
     b25:	35 30 36 32 36       	xor    eax,0x36323630
     b2a:	32 36                	xor    dh,BYTE PTR [rsi]
     b2c:	37                   	(bad)  
     b2d:	37                   	(bad)  
     b2e:	38 31                	cmp    BYTE PTR [rcx],dh
     b30:	37                   	(bad)  
     b31:	33 32                	xor    esi,DWORD PTR [rdx]
     b33:	31 37                	xor    DWORD PTR [rdi],esi
     b35:	35 32 36 30 65       	xor    eax,0x65303632
     b3a:	2d 34 39 33 32       	sub    eax,0x32333934
     b3f:	4c 00 6c 69 6e       	rex.WR add BYTE PTR [rcx+rbp*2+0x6e],r13b
     b44:	75 78                	jne    bbe <.debug_str+0xbbe>
     b46:	20 31                	and    BYTE PTR [rcx],dh
     b48:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     b4b:	46                   	rex.RX
     b4c:	4c 54                	rex.WR push rsp
     b4e:	33 32                	xor    esi,DWORD PTR [rdx]
     b50:	5f                   	pop    rdi
     b51:	4d                   	rex.WRB
     b52:	49                   	rex.WB
     b53:	4e 5f                	rex.WRX pop rdi
     b55:	31 30                	xor    DWORD PTR [rax],esi
     b57:	5f                   	pop    rdi
     b58:	45 58                	rex.RB pop r8
     b5a:	50                   	push   rax
     b5b:	5f                   	pop    rdi
     b5c:	5f                   	pop    rdi
     b5d:	20 28                	and    BYTE PTR [rax],ch
     b5f:	2d 33 37 29 00       	sub    eax,0x293733
     b64:	5f                   	pop    rdi
     b65:	5f                   	pop    rdi
     b66:	44                   	rex.R
     b67:	42                   	rex.X
     b68:	4c 5f                	rex.WR pop rdi
     b6a:	48                   	rex.W
     b6b:	41 53                	push   r11
     b6d:	5f                   	pop    rdi
     b6e:	44                   	rex.R
     b6f:	45                   	rex.RB
     b70:	4e                   	rex.WRX
     b71:	4f 52                	rex.WRXB push r10
     b73:	4d 5f                	rex.WRB pop r15
     b75:	5f                   	pop    rdi
     b76:	20 31                	and    BYTE PTR [rcx],dh
     b78:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     b7b:	49                   	rex.WB
     b7c:	4e 54                	rex.WRX push rsp
     b7e:	5f                   	pop    rdi
     b7f:	4c                   	rex.WR
     b80:	45                   	rex.RB
     b81:	41 53                	push   r11
     b83:	54                   	push   rsp
     b84:	36 34 5f             	ss xor al,0x5f
     b87:	54                   	push   rsp
     b88:	59                   	pop    rcx
     b89:	50                   	push   rax
     b8a:	45 5f                	rex.RB pop r15
     b8c:	5f                   	pop    rdi
     b8d:	20 6c 6f 6e          	and    BYTE PTR [rdi+rbp*2+0x6e],ch
     b91:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
     b95:	74 00                	je     b97 <.debug_str+0xb97>
     b97:	5f                   	pop    rdi
     b98:	5f                   	pop    rdi
     b99:	57                   	push   rdi
     b9a:	43                   	rex.XB
     b9b:	48                   	rex.W
     b9c:	41 52                	push   r10
     b9e:	5f                   	pop    rdi
     b9f:	4d                   	rex.WRB
     ba0:	49                   	rex.WB
     ba1:	4e 5f                	rex.WRX pop rdi
     ba3:	5f                   	pop    rdi
     ba4:	20 28                	and    BYTE PTR [rax],ch
     ba6:	2d 5f 5f 57 43       	sub    eax,0x43575f5f
     bab:	48                   	rex.W
     bac:	41 52                	push   r10
     bae:	5f                   	pop    rdi
     baf:	4d                   	rex.WRB
     bb0:	41 58                	pop    r8
     bb2:	5f                   	pop    rdi
     bb3:	5f                   	pop    rdi
     bb4:	20 2d 20 31 29 00    	and    BYTE PTR [rip+0x293120],ch        # 293cda <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x293cda>
     bba:	5f                   	pop    rdi
     bbb:	49                   	rex.WB
     bbc:	4f 5f                	rex.WRXB pop r15
     bbe:	53                   	push   rbx
     bbf:	48                   	rex.W
     bc0:	4f 57                	rex.WRXB push r15
     bc2:	50                   	push   rax
     bc3:	4f                   	rex.WRXB
     bc4:	49                   	rex.WB
     bc5:	4e 54                	rex.WRX push rsp
     bc7:	20 30                	and    BYTE PTR [rax],dh
     bc9:	34 30                	xor    al,0x30
     bcb:	30 00                	xor    BYTE PTR [rax],al
     bcd:	5f                   	pop    rdi
     bce:	5f                   	pop    rdi
     bcf:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     bd0:	66 66 5f             	data16 pop di
     bd3:	74 5f                	je     c34 <.debug_str+0xc34>
     bd5:	64 65 66 69 6e 65 64 	fs imul bp,WORD PTR gs:[rsi+0x65],0x2064
     bdc:	20 
     bdd:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     be0:	53                   	push   rbx
     be1:	54                   	push   rsp
     be2:	44                   	rex.R
     be3:	43 5f                	rex.XB pop r15
     be5:	55                   	push   rbp
     be6:	54                   	push   rsp
     be7:	46 5f                	rex.RX pop rdi
     be9:	33 32                	xor    esi,DWORD PTR [rdx]
     beb:	5f                   	pop    rdi
     bec:	5f                   	pop    rdi
     bed:	20 31                	and    BYTE PTR [rcx],dh
     bef:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     bf2:	42                   	rex.X
     bf3:	4c                   	rex.WR
     bf4:	4b 53                	rex.WXB push r11
     bf6:	49 5a                	rex.WB pop r10
     bf8:	45 5f                	rex.RB pop r15
     bfa:	54                   	push   rsp
     bfb:	5f                   	pop    rdi
     bfc:	54                   	push   rsp
     bfd:	59                   	pop    rcx
     bfe:	50                   	push   rax
     bff:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
     c03:	53                   	push   rbx
     c04:	59                   	pop    rcx
     c05:	53                   	push   rbx
     c06:	43                   	rex.XB
     c07:	41                   	rex.B
     c08:	4c                   	rex.WR
     c09:	4c 5f                	rex.WR pop rdi
     c0b:	53                   	push   rbx
     c0c:	4c                   	rex.WR
     c0d:	4f                   	rex.WRXB
     c0e:	4e                   	rex.WRX
     c0f:	47 5f                	rex.RXB pop r15
     c11:	54                   	push   rsp
     c12:	59                   	pop    rcx
     c13:	50                   	push   rax
     c14:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
     c18:	49                   	rex.WB
     c19:	4e 54                	rex.WRX push rsp
     c1b:	5f                   	pop    rdi
     c1c:	4c                   	rex.WR
     c1d:	45                   	rex.RB
     c1e:	41 53                	push   r11
     c20:	54                   	push   rsp
     c21:	31 36                	xor    DWORD PTR [rsi],esi
     c23:	5f                   	pop    rdi
     c24:	4d                   	rex.WRB
     c25:	41 58                	pop    r8
     c27:	5f                   	pop    rdi
     c28:	5f                   	pop    rdi
     c29:	20 30                	and    BYTE PTR [rax],dh
     c2b:	78 37                	js     c64 <.debug_str+0xc64>
     c2d:	66 66 66 00 5f 5f    	data16 data16 data16 add BYTE PTR [rdi+0x5f],bl
     c33:	4c                   	rex.WR
     c34:	44                   	rex.R
     c35:	42                   	rex.X
     c36:	4c 5f                	rex.WR pop rdi
     c38:	52                   	push   rdx
     c39:	45                   	rex.RB
     c3a:	44                   	rex.R
     c3b:	49 52                	rex.WB push r10
     c3d:	5f                   	pop    rdi
     c3e:	44                   	rex.R
     c3f:	45                   	rex.RB
     c40:	43                   	rex.XB
     c41:	4c 28 6e 61          	rex.WR sub BYTE PTR [rsi+0x61],r13b
     c45:	6d                   	ins    DWORD PTR es:[rdi],dx
     c46:	65 29 20             	sub    DWORD PTR gs:[rax],esp
     c49:	00 47 4e             	add    BYTE PTR [rdi+0x4e],al
     c4c:	55                   	push   rbp
     c4d:	20 43 31             	and    BYTE PTR [rbx+0x31],al
     c50:	31 20                	xor    DWORD PTR [rax],esp
     c52:	37                   	(bad)  
     c53:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
     c56:	30 20                	xor    BYTE PTR [rax],ah
     c58:	2d 6d 74 75 6e       	sub    eax,0x6e75746d
     c5d:	65 3d 67 65 6e 65    	gs cmp eax,0x656e6567
     c63:	72 69                	jb     cce <.debug_str+0xcce>
     c65:	63 20                	movsxd esp,DWORD PTR [rax]
     c67:	2d 6d 61 72 63       	sub    eax,0x6372616d
     c6c:	68 3d 78 38 36       	push   0x3638783d
     c71:	2d 36 34 20 2d       	sub    eax,0x2d203436
     c76:	67 67 64 62 33       	addr32 addr32 fs (bad) 
     c7b:	20 2d 66 73 74 61    	and    BYTE PTR [rip+0x61747366],ch        # 61747fe7 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x61747fe7>
     c81:	63 6b 2d             	movsxd ebp,DWORD PTR [rbx+0x2d]
     c84:	70 72                	jo     cf8 <.debug_str+0xcf8>
     c86:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     c87:	74 65                	je     cee <.debug_str+0xcee>
     c89:	63 74 6f 72          	movsxd esi,DWORD PTR [rdi+rbp*2+0x72]
     c8d:	2d 73 74 72 6f       	sub    eax,0x6f727473
     c92:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     c93:	67 00 5f 5f          	add    BYTE PTR [edi+0x5f],bl
     c97:	53                   	push   rbx
     c98:	43                   	rex.XB
     c99:	48                   	rex.W
     c9a:	41 52                	push   r10
     c9c:	5f                   	pop    rdi
     c9d:	4d                   	rex.WRB
     c9e:	41 58                	pop    r8
     ca0:	5f                   	pop    rdi
     ca1:	5f                   	pop    rdi
     ca2:	20 30                	and    BYTE PTR [rax],dh
     ca4:	78 37                	js     cdd <.debug_str+0xcdd>
     ca6:	66 00 5f 5f          	data16 add BYTE PTR [rdi+0x5f],bl
     caa:	65 78 74             	gs js  d21 <.debug_str+0xd21>
     cad:	65 72 6e             	gs jb  d1e <.debug_str+0xd1e>
     cb0:	5f                   	pop    rdi
     cb1:	61                   	(bad)  
     cb2:	6c                   	ins    BYTE PTR es:[rdi],dx
     cb3:	77 61                	ja     d16 <.debug_str+0xd16>
     cb5:	79 73                	jns    d2a <.debug_str+0xd2a>
     cb7:	5f                   	pop    rdi
     cb8:	69 6e 6c 69 6e 65 20 	imul   ebp,DWORD PTR [rsi+0x6c],0x20656e69
     cbf:	65 78 74             	gs js  d36 <.debug_str+0xd36>
     cc2:	65 72 6e             	gs jb  d33 <.debug_str+0xd33>
     cc5:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
     cc8:	61                   	(bad)  
     cc9:	6c                   	ins    BYTE PTR es:[rdi],dx
     cca:	77 61                	ja     d2d <.debug_str+0xd2d>
     ccc:	79 73                	jns    d41 <.debug_str+0xd41>
     cce:	5f                   	pop    rdi
     ccf:	69 6e 6c 69 6e 65 20 	imul   ebp,DWORD PTR [rsi+0x6c],0x20656e69
     cd6:	5f                   	pop    rdi
     cd7:	5f                   	pop    rdi
     cd8:	61                   	(bad)  
     cd9:	74 74                	je     d4f <.debug_str+0xd4f>
     cdb:	72 69                	jb     d46 <.debug_str+0xd46>
     cdd:	62                   	(bad)  
     cde:	75 74                	jne    d54 <.debug_str+0xd54>
     ce0:	65 5f                	gs pop rdi
     ce2:	5f                   	pop    rdi
     ce3:	20 28                	and    BYTE PTR [rax],ch
     ce5:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
     ce8:	67 6e                	outs   dx,BYTE PTR ds:[esi]
     cea:	75 5f                	jne    d4b <.debug_str+0xd4b>
     cec:	69 6e 6c 69 6e 65 5f 	imul   ebp,DWORD PTR [rsi+0x6c],0x5f656e69
     cf3:	5f                   	pop    rdi
     cf4:	29 29                	sub    DWORD PTR [rcx],ebp
     cf6:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     cf9:	46                   	rex.RX
     cfa:	4c 54                	rex.WR push rsp
     cfc:	36 34 5f             	ss xor al,0x5f
     cff:	44                   	rex.R
     d00:	49                   	rex.WB
     d01:	47 5f                	rex.RXB pop r15
     d03:	5f                   	pop    rdi
     d04:	20 31                	and    BYTE PTR [rcx],dh
     d06:	35 00 5f 5f 49       	xor    eax,0x495f5f00
     d0b:	4e 54                	rex.WRX push rsp
     d0d:	5f                   	pop    rdi
     d0e:	46                   	rex.RX
     d0f:	41 53                	push   r11
     d11:	54                   	push   rsp
     d12:	38 5f 54             	cmp    BYTE PTR [rdi+0x54],bl
     d15:	59                   	pop    rcx
     d16:	50                   	push   rax
     d17:	45 5f                	rex.RB pop r15
     d19:	5f                   	pop    rdi
     d1a:	20 73 69             	and    BYTE PTR [rbx+0x69],dh
     d1d:	67 6e                	outs   dx,BYTE PTR ds:[esi]
     d1f:	65 64 20 63 68       	gs and BYTE PTR fs:[rbx+0x68],ah
     d24:	61                   	(bad)  
     d25:	72 00                	jb     d27 <.debug_str+0xd27>
     d27:	5f                   	pop    rdi
     d28:	5f                   	pop    rdi
     d29:	50                   	push   rax
     d2a:	49                   	rex.WB
     d2b:	45 5f                	rex.RB pop r15
     d2d:	5f                   	pop    rdi
     d2e:	20 32                	and    BYTE PTR [rdx],dh
     d30:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
     d33:	4f 5f                	rex.WRXB pop r15
     d35:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     d36:	66 66 36 34 5f       	data16 data16 ss xor al,0x5f
     d3b:	74 20                	je     d5d <.debug_str+0xd5d>
     d3d:	5f                   	pop    rdi
     d3e:	5f                   	pop    rdi
     d3f:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     d40:	66 66 36 34 5f       	data16 data16 ss xor al,0x5f
     d45:	74 00                	je     d47 <.debug_str+0xd47>
     d47:	69 66 5f 74 68 65 6e 	imul   esp,DWORD PTR [rsi+0x5f],0x6e656874
     d4e:	2e 63 00             	movsxd eax,DWORD PTR cs:[rax]
     d51:	5f                   	pop    rdi
     d52:	5f                   	pop    rdi
     d53:	47                   	rex.RXB
     d54:	4c                   	rex.WR
     d55:	49                   	rex.WB
     d56:	42                   	rex.X
     d57:	43 5f                	rex.XB pop r15
     d59:	55                   	push   rbp
     d5a:	53                   	push   rbx
     d5b:	45 5f                	rex.RB pop r15
     d5d:	49                   	rex.WB
     d5e:	45                   	rex.RB
     d5f:	43 5f                	rex.XB pop r15
     d61:	36 30 35 35 39 5f 54 	xor    BYTE PTR ss:[rip+0x545f3935],dh        # 545f469d <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x545f469d>
     d68:	59                   	pop    rcx
     d69:	50                   	push   rax
     d6a:	45 53                	rex.RB push r11
     d6c:	5f                   	pop    rdi
     d6d:	45 58                	rex.RB pop r8
     d6f:	54                   	push   rsp
     d70:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     d73:	46                   	rex.RX
     d74:	4c 54                	rex.WR push rsp
     d76:	33 32                	xor    esi,DWORD PTR [rdx]
     d78:	58                   	pop    rax
     d79:	5f                   	pop    rdi
     d7a:	48                   	rex.W
     d7b:	41 53                	push   r11
     d7d:	5f                   	pop    rdi
     d7e:	49                   	rex.WB
     d7f:	4e                   	rex.WRX
     d80:	46                   	rex.RX
     d81:	49                   	rex.WB
     d82:	4e                   	rex.WRX
     d83:	49 54                	rex.WB push r12
     d85:	59                   	pop    rcx
     d86:	5f                   	pop    rdi
     d87:	5f                   	pop    rdi
     d88:	20 31                	and    BYTE PTR [rcx],dh
     d8a:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     d8d:	55                   	push   rbp
     d8e:	53                   	push   rbx
     d8f:	45 5f                	rex.RB pop r15
     d91:	55                   	push   rbp
     d92:	4e                   	rex.WRX
     d93:	49 58                	rex.WB pop r8
     d95:	39 38                	cmp    DWORD PTR [rax],edi
     d97:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     d9a:	55                   	push   rbp
     d9b:	53                   	push   rbx
     d9c:	45 5f                	rex.RB pop r15
     d9e:	46                   	rex.RX
     d9f:	4f 52                	rex.WRXB push r10
     da1:	54                   	push   rsp
     da2:	49                   	rex.WB
     da3:	46 59                	rex.RX pop rcx
     da5:	5f                   	pop    rdi
     da6:	4c                   	rex.WR
     da7:	45 56                	rex.RB push r14
     da9:	45                   	rex.RB
     daa:	4c 20 30             	rex.WR and BYTE PTR [rax],r14b
     dad:	00 5f 41             	add    BYTE PTR [rdi+0x41],bl
     db0:	54                   	push   rsp
     db1:	46                   	rex.RX
     db2:	49                   	rex.WB
     db3:	4c                   	rex.WR
     db4:	45 5f                	rex.RB pop r15
     db6:	53                   	push   rbx
     db7:	4f 55                	rex.WRXB push r13
     db9:	52                   	push   rdx
     dba:	43                   	rex.XB
     dbb:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
     dbf:	55                   	push   rbp
     dc0:	53                   	push   rbx
     dc1:	45 5f                	rex.RB pop r15
     dc3:	41 54                	push   r12
     dc5:	46                   	rex.RX
     dc6:	49                   	rex.WB
     dc7:	4c                   	rex.WR
     dc8:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
     dcc:	55                   	push   rbp
     dcd:	49                   	rex.WB
     dce:	4e 54                	rex.WRX push rsp
     dd0:	5f                   	pop    rdi
     dd1:	4c                   	rex.WR
     dd2:	45                   	rex.RB
     dd3:	41 53                	push   r11
     dd5:	54                   	push   rsp
     dd6:	38 5f 54             	cmp    BYTE PTR [rdi+0x54],bl
     dd9:	59                   	pop    rcx
     dda:	50                   	push   rax
     ddb:	45 5f                	rex.RB pop r15
     ddd:	5f                   	pop    rdi
     dde:	20 75 6e             	and    BYTE PTR [rbp+0x6e],dh
     de1:	73 69                	jae    e4c <.debug_str+0xe4c>
     de3:	67 6e                	outs   dx,BYTE PTR ds:[esi]
     de5:	65 64 20 63 68       	gs and BYTE PTR fs:[rbx+0x68],ah
     dea:	61                   	(bad)  
     deb:	72 00                	jb     ded <.debug_str+0xded>
     ded:	5f                   	pop    rdi
     dee:	5f                   	pop    rdi
     def:	53                   	push   rbx
     df0:	49 5a                	rex.WB pop r10
     df2:	45                   	rex.RB
     df3:	4f                   	rex.WRXB
     df4:	46 5f                	rex.RX pop rdi
     df6:	49                   	rex.WB
     df7:	4e 54                	rex.WRX push rsp
     df9:	31 32                	xor    DWORD PTR [rdx],esi
     dfb:	38 5f 5f             	cmp    BYTE PTR [rdi+0x5f],bl
     dfe:	20 31                	and    BYTE PTR [rcx],dh
     e00:	36 00 5f 5f          	add    BYTE PTR ss:[rdi+0x5f],bl
     e04:	4e 54                	rex.WRX push rsp
     e06:	48 28 66 63          	rex.W sub BYTE PTR [rsi+0x63],spl
     e0a:	74 29                	je     e35 <.debug_str+0xe35>
     e0c:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
     e0f:	61                   	(bad)  
     e10:	74 74                	je     e86 <.debug_str+0xe86>
     e12:	72 69                	jb     e7d <.debug_str+0xe7d>
     e14:	62                   	(bad)  
     e15:	75 74                	jne    e8b <.debug_str+0xe8b>
     e17:	65 5f                	gs pop rdi
     e19:	5f                   	pop    rdi
     e1a:	20 28                	and    BYTE PTR [rax],ch
     e1c:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
     e1f:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     e20:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     e21:	74 68                	je     e8b <.debug_str+0xe8b>
     e23:	72 6f                	jb     e94 <.debug_str+0xe94>
     e25:	77 5f                	ja     e86 <.debug_str+0xe86>
     e27:	5f                   	pop    rdi
     e28:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
     e2b:	4c                   	rex.WR
     e2c:	45                   	rex.RB
     e2d:	41                   	rex.B
     e2e:	46 29 29             	rex.RX sub DWORD PTR [rcx],r13d
     e31:	20 66 63             	and    BYTE PTR [rsi+0x63],ah
     e34:	74 00                	je     e36 <.debug_str+0xe36>
     e36:	5f                   	pop    rdi
     e37:	49                   	rex.WB
     e38:	4f 53                	rex.WRXB push r11
     e3a:	5f                   	pop    rdi
     e3b:	41 54                	push   r12
     e3d:	45                   	rex.RB
     e3e:	4e                   	rex.WRX
     e3f:	44 20 34 00          	and    BYTE PTR [rax+rax*1],r14b
     e43:	5f                   	pop    rdi
     e44:	5f                   	pop    rdi
     e45:	67 6c                	ins    BYTE PTR es:[edi],dx
     e47:	69 62 63 5f 6d 61 63 	imul   esp,DWORD PTR [rdx+0x63],0x63616d5f
     e4e:	72 6f                	jb     ebf <.debug_str+0xebf>
     e50:	5f                   	pop    rdi
     e51:	77 61                	ja     eb4 <.debug_str+0xeb4>
     e53:	72 6e                	jb     ec3 <.debug_str+0xec3>
     e55:	69 6e 67 28 6d 65 73 	imul   ebp,DWORD PTR [rsi+0x67],0x73656d28
     e5c:	73 61                	jae    ebf <.debug_str+0xebf>
     e5e:	67 65 29 20          	sub    DWORD PTR gs:[eax],esp
     e62:	5f                   	pop    rdi
     e63:	5f                   	pop    rdi
     e64:	67 6c                	ins    BYTE PTR es:[edi],dx
     e66:	69 62 63 5f 6d 61 63 	imul   esp,DWORD PTR [rdx+0x63],0x63616d5f
     e6d:	72 6f                	jb     ede <.debug_str+0xede>
     e6f:	5f                   	pop    rdi
     e70:	77 61                	ja     ed3 <.debug_str+0xed3>
     e72:	72 6e                	jb     ee2 <.debug_str+0xee2>
     e74:	69 6e 67 31 20 28 47 	imul   ebp,DWORD PTR [rsi+0x67],0x47282031
     e7b:	43                   	rex.XB
     e7c:	43 20 77 61          	rex.XB and BYTE PTR [r15+0x61],sil
     e80:	72 6e                	jb     ef0 <.debug_str+0xef0>
     e82:	69 6e 67 20 6d 65 73 	imul   ebp,DWORD PTR [rsi+0x67],0x73656d20
     e89:	73 61                	jae    eec <.debug_str+0xeec>
     e8b:	67 65 29 00          	sub    DWORD PTR gs:[eax],eax
     e8f:	5f                   	pop    rdi
     e90:	5f                   	pop    rdi
     e91:	46                   	rex.RX
     e92:	4c 54                	rex.WR push rsp
     e94:	31 32                	xor    DWORD PTR [rdx],esi
     e96:	38 5f 48             	cmp    BYTE PTR [rdi+0x48],bl
     e99:	41 53                	push   r11
     e9b:	5f                   	pop    rdi
     e9c:	51                   	push   rcx
     e9d:	55                   	push   rbp
     e9e:	49                   	rex.WB
     e9f:	45 54                	rex.RB push r12
     ea1:	5f                   	pop    rdi
     ea2:	4e                   	rex.WRX
     ea3:	41                   	rex.B
     ea4:	4e 5f                	rex.WRX pop rdi
     ea6:	5f                   	pop    rdi
     ea7:	20 31                	and    BYTE PTR [rcx],dh
     ea9:	00 5f 54             	add    BYTE PTR [rdi+0x54],bl
     eac:	5f                   	pop    rdi
     ead:	53                   	push   rbx
     eae:	49 5a                	rex.WB pop r10
     eb0:	45 20 00             	and    BYTE PTR [r8],r8b
     eb3:	5f                   	pop    rdi
     eb4:	5f                   	pop    rdi
     eb5:	46                   	rex.RX
     eb6:	4c 54                	rex.WR push rsp
     eb8:	31 32                	xor    DWORD PTR [rdx],esi
     eba:	38 5f 4d             	cmp    BYTE PTR [rdi+0x4d],bl
     ebd:	41 58                	pop    r8
     ebf:	5f                   	pop    rdi
     ec0:	5f                   	pop    rdi
     ec1:	20 31                	and    BYTE PTR [rcx],dh
     ec3:	2e 31 38             	xor    DWORD PTR cs:[rax],edi
     ec6:	39 37                	cmp    DWORD PTR [rdi],esi
     ec8:	33 31                	xor    esi,DWORD PTR [rcx]
     eca:	34 39                	xor    al,0x39
     ecc:	35 33 35 37 32       	xor    eax,0x32373533
     ed1:	33 31                	xor    esi,DWORD PTR [rcx]
     ed3:	37                   	(bad)  
     ed4:	36 35 30 38 35 37    	ss xor eax,0x37353830
     eda:	35 39 33 32 36       	xor    eax,0x36323339
     edf:	36 32 38             	xor    bh,BYTE PTR ss:[rax]
     ee2:	30 30                	xor    BYTE PTR [rax],dh
     ee4:	37                   	(bad)  
     ee5:	30 32                	xor    BYTE PTR [rdx],dh
     ee7:	65 2b 34 39          	sub    esi,DWORD PTR gs:[rcx+rdi*1]
     eeb:	33 32                	xor    esi,DWORD PTR [rdx]
     eed:	46 31 32             	rex.RX xor DWORD PTR [rdx],r14d
     ef0:	38 00                	cmp    BYTE PTR [rax],al
     ef2:	42 55                	rex.X push rbp
     ef4:	46 53                	rex.RX push rbx
     ef6:	49 5a                	rex.WB pop r10
     ef8:	20 5f 49             	and    BYTE PTR [rdi+0x49],bl
     efb:	4f 5f                	rex.WRXB pop r15
     efd:	42 55                	rex.X push rbp
     eff:	46 53                	rex.RX push rbx
     f01:	49 5a                	rex.WB pop r10
     f03:	00 5f 41             	add    BYTE PTR [rdi+0x41],bl
     f06:	54                   	push   rsp
     f07:	46                   	rex.RX
     f08:	49                   	rex.WB
     f09:	4c                   	rex.WR
     f0a:	45 5f                	rex.RB pop r15
     f0c:	53                   	push   rbx
     f0d:	4f 55                	rex.WRXB push r13
     f0f:	52                   	push   rdx
     f10:	43                   	rex.XB
     f11:	45 20 31             	and    BYTE PTR [r9],r14b
     f14:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     f17:	46                   	rex.RX
     f18:	4c 54                	rex.WR push rsp
     f1a:	36 34 58             	ss xor al,0x58
     f1d:	5f                   	pop    rdi
     f1e:	44                   	rex.R
     f1f:	49                   	rex.WB
     f20:	47 5f                	rex.RXB pop r15
     f22:	5f                   	pop    rdi
     f23:	20 31                	and    BYTE PTR [rcx],dh
     f25:	38 00                	cmp    BYTE PTR [rax],al
     f27:	5f                   	pop    rdi
     f28:	5f                   	pop    rdi
     f29:	49                   	rex.WB
     f2a:	4e 54                	rex.WRX push rsp
     f2c:	5f                   	pop    rdi
     f2d:	4c                   	rex.WR
     f2e:	45                   	rex.RB
     f2f:	41 53                	push   r11
     f31:	54                   	push   rsp
     f32:	31 36                	xor    DWORD PTR [rsi],esi
     f34:	5f                   	pop    rdi
     f35:	57                   	push   rdi
     f36:	49                   	rex.WB
     f37:	44 54                	rex.R push rsp
     f39:	48 5f                	rex.W pop rdi
     f3b:	5f                   	pop    rdi
     f3c:	20 31                	and    BYTE PTR [rcx],dh
     f3e:	36 00 5f 5f          	add    BYTE PTR ss:[rdi+0x5f],bl
     f42:	46 53                	rex.RX push rbx
     f44:	49                   	rex.WB
     f45:	44 5f                	rex.R pop rdi
     f47:	54                   	push   rsp
     f48:	5f                   	pop    rdi
     f49:	54                   	push   rsp
     f4a:	59                   	pop    rcx
     f4b:	50                   	push   rax
     f4c:	45 20 73 74          	and    BYTE PTR [r11+0x74],r14b
     f50:	72 75                	jb     fc7 <.debug_str+0xfc7>
     f52:	63 74 20 7b          	movsxd esi,DWORD PTR [rax+riz*1+0x7b]
     f56:	20 69 6e             	and    BYTE PTR [rcx+0x6e],ch
     f59:	74 20                	je     f7b <.debug_str+0xf7b>
     f5b:	5f                   	pop    rdi
     f5c:	5f                   	pop    rdi
     f5d:	76 61                	jbe    fc0 <.debug_str+0xfc0>
     f5f:	6c                   	ins    BYTE PTR es:[rdi],dx
     f60:	5b                   	pop    rbx
     f61:	32 5d 3b             	xor    bl,BYTE PTR [rbp+0x3b]
     f64:	20 7d 00             	and    BYTE PTR [rbp+0x0],bh
     f67:	5f                   	pop    rdi
     f68:	5f                   	pop    rdi
     f69:	73 73                	jae    fde <.debug_str+0xfde>
     f6b:	69 7a 65 5f 74 5f 64 	imul   edi,DWORD PTR [rdx+0x65],0x645f745f
     f72:	65 66 69 6e 65 64 20 	imul   bp,WORD PTR gs:[rsi+0x65],0x2064
     f79:	00 5f 54             	add    BYTE PTR [rdi+0x54],bl
     f7c:	5f                   	pop    rdi
     f7d:	53                   	push   rbx
     f7e:	49 5a                	rex.WB pop r10
     f80:	45 5f                	rex.RB pop r15
     f82:	20 00                	and    BYTE PTR [rax],al
     f84:	5f                   	pop    rdi
     f85:	70 6f                	jo     ff6 <.debug_str+0xff6>
     f87:	73 00                	jae    f89 <.debug_str+0xf89>
     f89:	5f                   	pop    rdi
     f8a:	49                   	rex.WB
     f8b:	4f 5f                	rex.WRXB pop r15
     f8d:	66 65 72 72          	data16 gs jb 1003 <.debug_str+0x1003>
     f91:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     f92:	72 5f                	jb     ff3 <.debug_str+0xff3>
     f94:	75 6e                	jne    1004 <.debug_str+0x1004>
     f96:	6c                   	ins    BYTE PTR es:[rdi],dx
     f97:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     f98:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
     f9b:	64 28 5f 5f          	sub    BYTE PTR fs:[rdi+0x5f],bl
     f9f:	66 70 29             	data16 jo fcb <.debug_str+0xfcb>
     fa2:	20 28                	and    BYTE PTR [rax],ch
     fa4:	28 28                	sub    BYTE PTR [rax],ch
     fa6:	5f                   	pop    rdi
     fa7:	5f                   	pop    rdi
     fa8:	66 70 29             	data16 jo fd4 <.debug_str+0xfd4>
     fab:	2d 3e 5f 66 6c       	sub    eax,0x6c665f3e
     fb0:	61                   	(bad)  
     fb1:	67 73 20             	addr32 jae fd4 <.debug_str+0xfd4>
     fb4:	26 20 5f 49          	and    BYTE PTR es:[rdi+0x49],bl
     fb8:	4f 5f                	rex.WRXB pop r15
     fba:	45 52                	rex.RB push r10
     fbc:	52                   	push   rdx
     fbd:	5f                   	pop    rdi
     fbe:	53                   	push   rbx
     fbf:	45                   	rex.RB
     fc0:	45                   	rex.RB
     fc1:	4e 29 20             	rex.WRX sub QWORD PTR [rax],r12
     fc4:	21 3d 20 30 29 00    	and    DWORD PTR [rip+0x293020],edi        # 293fea <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x293fea>
     fca:	5f                   	pop    rdi
     fcb:	5f                   	pop    rdi
     fcc:	65 78 74             	gs js  1043 <.debug_str+0x1043>
     fcf:	65 72 6e             	gs jb  1040 <.debug_str+0x1040>
     fd2:	5f                   	pop    rdi
     fd3:	69 6e 6c 69 6e 65 20 	imul   ebp,DWORD PTR [rsi+0x6c],0x20656e69
     fda:	65 78 74             	gs js  1051 <.debug_str+0x1051>
     fdd:	65 72 6e             	gs jb  104e <.debug_str+0x104e>
     fe0:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
     fe3:	69 6e 6c 69 6e 65 20 	imul   ebp,DWORD PTR [rsi+0x6c],0x20656e69
     fea:	5f                   	pop    rdi
     feb:	5f                   	pop    rdi
     fec:	61                   	(bad)  
     fed:	74 74                	je     1063 <.debug_str+0x1063>
     fef:	72 69                	jb     105a <.debug_str+0x105a>
     ff1:	62                   	(bad)  
     ff2:	75 74                	jne    1068 <.debug_str+0x1068>
     ff4:	65 5f                	gs pop rdi
     ff6:	5f                   	pop    rdi
     ff7:	20 28                	and    BYTE PTR [rax],ch
     ff9:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
     ffc:	67 6e                	outs   dx,BYTE PTR ds:[esi]
     ffe:	75 5f                	jne    105f <.debug_str+0x105f>
    1000:	69 6e 6c 69 6e 65 5f 	imul   ebp,DWORD PTR [rsi+0x6c],0x5f656e69
    1007:	5f                   	pop    rdi
    1008:	29 29                	sub    DWORD PTR [rcx],ebp
    100a:	00 5f 47             	add    BYTE PTR [rdi+0x47],bl
    100d:	43                   	rex.XB
    100e:	43 5f                	rex.XB pop r15
    1010:	53                   	push   rbx
    1011:	49 5a                	rex.WB pop r10
    1013:	45 5f                	rex.RB pop r15
    1015:	54                   	push   rsp
    1016:	20 00                	and    BYTE PTR [rax],al
    1018:	73 74                	jae    108e <.debug_str+0x108e>
    101a:	64 6f                	outs   dx,DWORD PTR fs:[rsi]
    101c:	75 74                	jne    1092 <.debug_str+0x1092>
    101e:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1021:	46                   	rex.RX
    1022:	4c 54                	rex.WR push rsp
    1024:	33 32                	xor    esi,DWORD PTR [rdx]
    1026:	5f                   	pop    rdi
    1027:	48                   	rex.W
    1028:	41 53                	push   r11
    102a:	5f                   	pop    rdi
    102b:	44                   	rex.R
    102c:	45                   	rex.RB
    102d:	4e                   	rex.WRX
    102e:	4f 52                	rex.WRXB push r10
    1030:	4d 5f                	rex.WRB pop r15
    1032:	5f                   	pop    rdi
    1033:	20 31                	and    BYTE PTR [rcx],dh
    1035:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1038:	75 6e                	jne    10a8 <.debug_str+0x10a8>
    103a:	69 78 5f 5f 20 31 00 	imul   edi,DWORD PTR [rax+0x5f],0x31205f
    1041:	5f                   	pop    rdi
    1042:	5f                   	pop    rdi
    1043:	47                   	rex.RXB
    1044:	43                   	rex.XB
    1045:	43 5f                	rex.XB pop r15
    1047:	48                   	rex.W
    1048:	41 56                	push   r14
    104a:	45 5f                	rex.RB pop r15
    104c:	53                   	push   rbx
    104d:	59                   	pop    rcx
    104e:	4e                   	rex.WRX
    104f:	43 5f                	rex.XB pop r15
    1051:	43                   	rex.XB
    1052:	4f                   	rex.WRXB
    1053:	4d 50                	rex.WRB push r8
    1055:	41 52                	push   r10
    1057:	45 5f                	rex.RB pop r15
    1059:	41                   	rex.B
    105a:	4e                   	rex.WRX
    105b:	44 5f                	rex.R pop rdi
    105d:	53                   	push   rbx
    105e:	57                   	push   rdi
    105f:	41 50                	push   r8
    1061:	5f                   	pop    rdi
    1062:	31 20                	xor    DWORD PTR [rax],esp
    1064:	31 00                	xor    DWORD PTR [rax],eax
    1066:	5f                   	pop    rdi
    1067:	49                   	rex.WB
    1068:	4f 5f                	rex.WRXB pop r15
    106a:	73 61                	jae    10cd <.debug_str+0x10cd>
    106c:	76 65                	jbe    10d3 <.debug_str+0x10d3>
    106e:	5f                   	pop    rdi
    106f:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    1071:	64 00 5f 5f          	add    BYTE PTR fs:[rdi+0x5f],bl
    1075:	46                   	rex.RX
    1076:	4c 54                	rex.WR push rsp
    1078:	36 34 58             	ss xor al,0x58
    107b:	5f                   	pop    rdi
    107c:	4d                   	rex.WRB
    107d:	49                   	rex.WB
    107e:	4e 5f                	rex.WRX pop rdi
    1080:	45 58                	rex.RB pop r8
    1082:	50                   	push   rax
    1083:	5f                   	pop    rdi
    1084:	5f                   	pop    rdi
    1085:	20 28                	and    BYTE PTR [rax],ch
    1087:	2d 31 36 33 38       	sub    eax,0x38333631
    108c:	31 29                	xor    DWORD PTR [rcx],ebp
    108e:	00 5f 42             	add    BYTE PTR [rdi+0x42],bl
    1091:	53                   	push   rbx
    1092:	44 5f                	rex.R pop rdi
    1094:	53                   	push   rbx
    1095:	49 5a                	rex.WB pop r10
    1097:	45 5f                	rex.RB pop r15
    1099:	54                   	push   rsp
    109a:	5f                   	pop    rdi
    109b:	20 00                	and    BYTE PTR [rax],al
    109d:	5f                   	pop    rdi
    109e:	5f                   	pop    rdi
    109f:	73 74                	jae    1115 <.debug_str+0x1115>
    10a1:	75 62                	jne    1105 <.debug_str+0x1105>
    10a3:	5f                   	pop    rdi
    10a4:	73 65                	jae    110b <.debug_str+0x110b>
    10a6:	74 6c                	je     1114 <.debug_str+0x1114>
    10a8:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    10a9:	67 69 6e 20 00 5f 5f 	imul   ebp,DWORD PTR [esi+0x20],0x465f5f00
    10b0:	46 
    10b1:	4c 54                	rex.WR push rsp
    10b3:	5f                   	pop    rdi
    10b4:	44                   	rex.R
    10b5:	49                   	rex.WB
    10b6:	47 5f                	rex.RXB pop r15
    10b8:	5f                   	pop    rdi
    10b9:	20 36                	and    BYTE PTR [rsi],dh
    10bb:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    10be:	49                   	rex.WB
    10bf:	4e 54                	rex.WRX push rsp
    10c1:	5f                   	pop    rdi
    10c2:	46                   	rex.RX
    10c3:	41 53                	push   r11
    10c5:	54                   	push   rsp
    10c6:	31 36                	xor    DWORD PTR [rsi],esi
    10c8:	5f                   	pop    rdi
    10c9:	57                   	push   rdi
    10ca:	49                   	rex.WB
    10cb:	44 54                	rex.R push rsp
    10cd:	48 5f                	rex.W pop rdi
    10cf:	5f                   	pop    rdi
    10d0:	20 36                	and    BYTE PTR [rsi],dh
    10d2:	34 00                	xor    al,0x0
    10d4:	5f                   	pop    rdi
    10d5:	5f                   	pop    rdi
    10d6:	47                   	rex.RXB
    10d7:	43                   	rex.XB
    10d8:	43 5f                	rex.XB pop r15
    10da:	41 54                	push   r12
    10dc:	4f                   	rex.WRXB
    10dd:	4d                   	rex.WRB
    10de:	49                   	rex.WB
    10df:	43 5f                	rex.XB pop r15
    10e1:	42                   	rex.X
    10e2:	4f                   	rex.WRXB
    10e3:	4f                   	rex.WRXB
    10e4:	4c 5f                	rex.WR pop rdi
    10e6:	4c                   	rex.WR
    10e7:	4f                   	rex.WRXB
    10e8:	43                   	rex.XB
    10e9:	4b 5f                	rex.WXB pop r15
    10eb:	46 52                	rex.RX push rdx
    10ed:	45                   	rex.RB
    10ee:	45 20 32             	and    BYTE PTR [r10],r14b
    10f1:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    10f4:	4f 5f                	rex.WRXB pop r15
    10f6:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    10f7:	66 66 5f             	data16 pop di
    10fa:	74 20                	je     111c <.debug_str+0x111c>
    10fc:	5f                   	pop    rdi
    10fd:	5f                   	pop    rdi
    10fe:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    10ff:	66 66 5f             	data16 pop di
    1102:	74 00                	je     1104 <.debug_str+0x1104>
    1104:	5f                   	pop    rdi
    1105:	5f                   	pop    rdi
    1106:	70 69                	jo     1171 <.debug_str+0x1171>
    1108:	65 5f                	gs pop rdi
    110a:	5f                   	pop    rdi
    110b:	20 32                	and    BYTE PTR [rdx],dh
    110d:	00 5f 53             	add    BYTE PTR [rdi+0x53],bl
    1110:	54                   	push   rsp
    1111:	44                   	rex.R
    1112:	49                   	rex.WB
    1113:	4f 5f                	rex.WRXB pop r15
    1115:	48 20 31             	rex.W and BYTE PTR [rcx],sil
    1118:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    111b:	44                   	rex.R
    111c:	45                   	rex.RB
    111d:	43 33 32             	rex.XB xor esi,DWORD PTR [r10]
    1120:	5f                   	pop    rdi
    1121:	4d                   	rex.WRB
    1122:	49                   	rex.WB
    1123:	4e 5f                	rex.WRX pop rdi
    1125:	5f                   	pop    rdi
    1126:	20 31                	and    BYTE PTR [rcx],dh
    1128:	45 2d 39 35 44 46    	rex.RB sub eax,0x46443539
    112e:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1131:	49                   	rex.WB
    1132:	4e 54                	rex.WRX push rsp
    1134:	4d                   	rex.WRB
    1135:	41 58                	pop    r8
    1137:	5f                   	pop    rdi
    1138:	4d                   	rex.WRB
    1139:	41 58                	pop    r8
    113b:	5f                   	pop    rdi
    113c:	5f                   	pop    rdi
    113d:	20 30                	and    BYTE PTR [rax],dh
    113f:	78 37                	js     1178 <.debug_str+0x1178>
    1141:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16
    1148:	66 66 66 66 66 66 66 
    114f:	66 4c 00 5f 42       	data16 rex.WR add BYTE PTR [rdi+0x42],r11b
    1154:	49 54                	rex.WB push r12
    1156:	53                   	push   rbx
    1157:	5f                   	pop    rdi
    1158:	4c                   	rex.WR
    1159:	49                   	rex.WB
    115a:	42                   	rex.X
    115b:	49                   	rex.WB
    115c:	4f 5f                	rex.WRXB pop r15
    115e:	48 20 31             	rex.W and BYTE PTR [rcx],sil
    1161:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1164:	47                   	rex.RXB
    1165:	43                   	rex.XB
    1166:	43 5f                	rex.XB pop r15
    1168:	49                   	rex.WB
    1169:	45                   	rex.RB
    116a:	43 5f                	rex.XB pop r15
    116c:	35 35 39 20 32       	xor    eax,0x32203935
    1171:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1174:	46                   	rex.RX
    1175:	4c 54                	rex.WR push rsp
    1177:	31 32                	xor    DWORD PTR [rdx],esi
    1179:	38 5f 4d             	cmp    BYTE PTR [rdi+0x4d],bl
    117c:	49                   	rex.WB
    117d:	4e 5f                	rex.WRX pop rdi
    117f:	45 58                	rex.RB pop r8
    1181:	50                   	push   rax
    1182:	5f                   	pop    rdi
    1183:	5f                   	pop    rdi
    1184:	20 28                	and    BYTE PTR [rax],ch
    1186:	2d 31 36 33 38       	sub    eax,0x38333631
    118b:	31 29                	xor    DWORD PTR [rcx],ebp
    118d:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1190:	46                   	rex.RX
    1191:	4c 54                	rex.WR push rsp
    1193:	33 32                	xor    esi,DWORD PTR [rdx]
    1195:	5f                   	pop    rdi
    1196:	48                   	rex.W
    1197:	41 53                	push   r11
    1199:	5f                   	pop    rdi
    119a:	51                   	push   rcx
    119b:	55                   	push   rbp
    119c:	49                   	rex.WB
    119d:	45 54                	rex.RB push r12
    119f:	5f                   	pop    rdi
    11a0:	4e                   	rex.WRX
    11a1:	41                   	rex.B
    11a2:	4e 5f                	rex.WRX pop rdi
    11a4:	5f                   	pop    rdi
    11a5:	20 31                	and    BYTE PTR [rcx],dh
    11a7:	00 5f 42             	add    BYTE PTR [rdi+0x42],bl
    11aa:	53                   	push   rbx
    11ab:	44 5f                	rex.R pop rdi
    11ad:	53                   	push   rbx
    11ae:	49 5a                	rex.WB pop r10
    11b0:	45 5f                	rex.RB pop r15
    11b2:	54                   	push   rsp
    11b3:	5f                   	pop    rdi
    11b4:	44                   	rex.R
    11b5:	45                   	rex.RB
    11b6:	46                   	rex.RX
    11b7:	49                   	rex.WB
    11b8:	4e                   	rex.WRX
    11b9:	45                   	rex.RB
    11ba:	44 5f                	rex.R pop rdi
    11bc:	20 00                	and    BYTE PTR [rax],al
    11be:	5f                   	pop    rdi
    11bf:	5f                   	pop    rdi
    11c0:	55                   	push   rbp
    11c1:	49                   	rex.WB
    11c2:	4e 54                	rex.WRX push rsp
    11c4:	5f                   	pop    rdi
    11c5:	4c                   	rex.WR
    11c6:	45                   	rex.RB
    11c7:	41 53                	push   r11
    11c9:	54                   	push   rsp
    11ca:	31 36                	xor    DWORD PTR [rsi],esi
    11cc:	5f                   	pop    rdi
    11cd:	4d                   	rex.WRB
    11ce:	41 58                	pop    r8
    11d0:	5f                   	pop    rdi
    11d1:	5f                   	pop    rdi
    11d2:	20 30                	and    BYTE PTR [rax],dh
    11d4:	78 66                	js     123c <.debug_str+0x123c>
    11d6:	66 66 66 00 5f 5f    	data16 data16 data16 add BYTE PTR [rdi+0x5f],bl
    11dc:	55                   	push   rbp
    11dd:	49                   	rex.WB
    11de:	4e 54                	rex.WRX push rsp
    11e0:	5f                   	pop    rdi
    11e1:	46                   	rex.RX
    11e2:	41 53                	push   r11
    11e4:	54                   	push   rsp
    11e5:	36 34 5f             	ss xor al,0x5f
    11e8:	4d                   	rex.WRB
    11e9:	41 58                	pop    r8
    11eb:	5f                   	pop    rdi
    11ec:	5f                   	pop    rdi
    11ed:	20 30                	and    BYTE PTR [rax],dh
    11ef:	78 66                	js     1257 <.debug_str+0x1257>
    11f1:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16
    11f8:	66 66 66 66 66 66 66 
    11ff:	66 55                	push   bp
    1201:	4c 00 5f 49          	rex.WR add BYTE PTR [rdi+0x49],r11b
    1205:	4f 5f                	rex.WRXB pop r15
    1207:	45 52                	rex.RB push r10
    1209:	52                   	push   rdx
    120a:	5f                   	pop    rdi
    120b:	53                   	push   rbx
    120c:	45                   	rex.RB
    120d:	45                   	rex.RB
    120e:	4e 20 30             	rex.WRX and BYTE PTR [rax],r14b
    1211:	78 32                	js     1245 <.debug_str+0x1245>
    1213:	30 00                	xor    BYTE PTR [rax],al
    1215:	5f                   	pop    rdi
    1216:	5f                   	pop    rdi
    1217:	61                   	(bad)  
    1218:	74 74                	je     128e <.debug_str+0x128e>
    121a:	72 69                	jb     1285 <.debug_str+0x1285>
    121c:	62                   	(bad)  
    121d:	75 74                	jne    1293 <.debug_str+0x1293>
    121f:	65 5f                	gs pop rdi
    1221:	75 73                	jne    1296 <.debug_str+0x1296>
    1223:	65 64 5f             	gs fs pop rdi
    1226:	5f                   	pop    rdi
    1227:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    122a:	61                   	(bad)  
    122b:	74 74                	je     12a1 <.debug_str+0x12a1>
    122d:	72 69                	jb     1298 <.debug_str+0x1298>
    122f:	62                   	(bad)  
    1230:	75 74                	jne    12a6 <.debug_str+0x12a6>
    1232:	65 5f                	gs pop rdi
    1234:	5f                   	pop    rdi
    1235:	20 28                	and    BYTE PTR [rax],ch
    1237:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
    123a:	75 73                	jne    12af <.debug_str+0x12af>
    123c:	65 64 5f             	gs fs pop rdi
    123f:	5f                   	pop    rdi
    1240:	29 29                	sub    DWORD PTR [rcx],ebp
    1242:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1245:	61                   	(bad)  
    1246:	74 74                	je     12bc <.debug_str+0x12bc>
    1248:	72 69                	jb     12b3 <.debug_str+0x12b3>
    124a:	62                   	(bad)  
    124b:	75 74                	jne    12c1 <.debug_str+0x12c1>
    124d:	65 5f                	gs pop rdi
    124f:	61                   	(bad)  
    1250:	72 74                	jb     12c6 <.debug_str+0x12c6>
    1252:	69 66 69 63 69 61 6c 	imul   esp,DWORD PTR [rsi+0x69],0x6c616963
    1259:	5f                   	pop    rdi
    125a:	5f                   	pop    rdi
    125b:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    125e:	61                   	(bad)  
    125f:	74 74                	je     12d5 <.debug_str+0x12d5>
    1261:	72 69                	jb     12cc <.debug_str+0x12cc>
    1263:	62                   	(bad)  
    1264:	75 74                	jne    12da <.debug_str+0x12da>
    1266:	65 5f                	gs pop rdi
    1268:	5f                   	pop    rdi
    1269:	20 28                	and    BYTE PTR [rax],ch
    126b:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
    126e:	61                   	(bad)  
    126f:	72 74                	jb     12e5 <.debug_str+0x12e5>
    1271:	69 66 69 63 69 61 6c 	imul   esp,DWORD PTR [rsi+0x69],0x6c616963
    1278:	5f                   	pop    rdi
    1279:	5f                   	pop    rdi
    127a:	29 29                	sub    DWORD PTR [rcx],ebp
    127c:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    127f:	4f 5f                	rex.WRXB pop r15
    1281:	66 74 72             	data16 je 12f6 <.debug_str+0x12f6>
    1284:	79 6c                	jns    12f2 <.debug_str+0x12f2>
    1286:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1287:	63 6b 66             	movsxd ebp,DWORD PTR [rbx+0x66]
    128a:	69 6c 65 28 5f 66 70 	imul   ebp,DWORD PTR [rbp+riz*2+0x28],0x2970665f
    1291:	29 
    1292:	20 00                	and    BYTE PTR [rax],al
    1294:	5f                   	pop    rdi
    1295:	5f                   	pop    rdi
    1296:	55                   	push   rbp
    1297:	49                   	rex.WB
    1298:	4e 54                	rex.WRX push rsp
    129a:	5f                   	pop    rdi
    129b:	4c                   	rex.WR
    129c:	45                   	rex.RB
    129d:	41 53                	push   r11
    129f:	54                   	push   rsp
    12a0:	38 5f 4d             	cmp    BYTE PTR [rdi+0x4d],bl
    12a3:	41 58                	pop    r8
    12a5:	5f                   	pop    rdi
    12a6:	5f                   	pop    rdi
    12a7:	20 30                	and    BYTE PTR [rax],dh
    12a9:	78 66                	js     1311 <.debug_str+0x1311>
    12ab:	66 00 5f 5f          	data16 add BYTE PTR [rdi+0x5f],bl
    12af:	47                   	rex.RXB
    12b0:	4c                   	rex.WR
    12b1:	49                   	rex.WB
    12b2:	42                   	rex.X
    12b3:	43 5f                	rex.XB pop r15
    12b5:	55                   	push   rbp
    12b6:	53                   	push   rbx
    12b7:	45 5f                	rex.RB pop r15
    12b9:	4c                   	rex.WR
    12ba:	49                   	rex.WB
    12bb:	42 5f                	rex.X pop rdi
    12bd:	45 58                	rex.RB pop r8
    12bf:	54                   	push   rsp
    12c0:	32 20                	xor    ah,BYTE PTR [rax]
    12c2:	30 00                	xor    BYTE PTR [rax],al
    12c4:	5f                   	pop    rdi
    12c5:	5f                   	pop    rdi
    12c6:	44                   	rex.R
    12c7:	45                   	rex.RB
    12c8:	43 31 32             	rex.XB xor DWORD PTR [r10],esi
    12cb:	38 5f 4d             	cmp    BYTE PTR [rdi+0x4d],bl
    12ce:	49                   	rex.WB
    12cf:	4e 5f                	rex.WRX pop rdi
    12d1:	45 58                	rex.RB pop r8
    12d3:	50                   	push   rax
    12d4:	5f                   	pop    rdi
    12d5:	5f                   	pop    rdi
    12d6:	20 28                	and    BYTE PTR [rax],ch
    12d8:	2d 36 31 34 32       	sub    eax,0x32343136
    12dd:	29 00                	sub    DWORD PTR [rax],eax
    12df:	5f                   	pop    rdi
    12e0:	5f                   	pop    rdi
    12e1:	4b                   	rex.WXB
    12e2:	45 52                	rex.RB push r10
    12e4:	4e                   	rex.WRX
    12e5:	45                   	rex.RB
    12e6:	4c 5f                	rex.WR pop rdi
    12e8:	53                   	push   rbx
    12e9:	54                   	push   rsp
    12ea:	52                   	push   rdx
    12eb:	49                   	rex.WB
    12ec:	43 54                	rex.XB push r12
    12ee:	5f                   	pop    rdi
    12ef:	4e                   	rex.WRX
    12f0:	41                   	rex.B
    12f1:	4d                   	rex.WRB
    12f2:	45 53                	rex.RB push r11
    12f4:	20 00                	and    BYTE PTR [rax],al
    12f6:	5f                   	pop    rdi
    12f7:	5f                   	pop    rdi
    12f8:	57                   	push   rdi
    12f9:	43                   	rex.XB
    12fa:	48                   	rex.W
    12fb:	41 52                	push   r10
    12fd:	5f                   	pop    rdi
    12fe:	54                   	push   rsp
    12ff:	59                   	pop    rcx
    1300:	50                   	push   rax
    1301:	45 5f                	rex.RB pop r15
    1303:	5f                   	pop    rdi
    1304:	20 69 6e             	and    BYTE PTR [rcx+0x6e],ch
    1307:	74 00                	je     1309 <.debug_str+0x1309>
    1309:	5f                   	pop    rdi
    130a:	5f                   	pop    rdi
    130b:	49                   	rex.WB
    130c:	4e 54                	rex.WRX push rsp
    130e:	38 5f 4d             	cmp    BYTE PTR [rdi+0x4d],bl
    1311:	41 58                	pop    r8
    1313:	5f                   	pop    rdi
    1314:	5f                   	pop    rdi
    1315:	20 30                	and    BYTE PTR [rax],dh
    1317:	78 37                	js     1350 <.debug_str+0x1350>
    1319:	66 00 67 65          	data16 add BYTE PTR [rdi+0x65],ah
    131d:	74 63                	je     1382 <.debug_str+0x1382>
    131f:	28 5f 66             	sub    BYTE PTR [rdi+0x66],bl
    1322:	70 29                	jo     134d <.debug_str+0x134d>
    1324:	20 5f 49             	and    BYTE PTR [rdi+0x49],bl
    1327:	4f 5f                	rex.WRXB pop r15
    1329:	67 65 74 63          	addr32 gs je 1390 <.debug_str+0x1390>
    132d:	20 28                	and    BYTE PTR [rax],ch
    132f:	5f                   	pop    rdi
    1330:	66 70 29             	data16 jo 135c <.debug_str+0x135c>
    1333:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1336:	44                   	rex.R
    1337:	45                   	rex.RB
    1338:	43 31 32             	rex.XB xor DWORD PTR [r10],esi
    133b:	38 5f 45             	cmp    BYTE PTR [rdi+0x45],bl
    133e:	50                   	push   rax
    133f:	53                   	push   rbx
    1340:	49                   	rex.WB
    1341:	4c                   	rex.WR
    1342:	4f                   	rex.WRXB
    1343:	4e 5f                	rex.WRX pop rdi
    1345:	5f                   	pop    rdi
    1346:	20 31                	and    BYTE PTR [rcx],dh
    1348:	45 2d 33 33 44 4c    	rex.RB sub eax,0x4c443333
    134e:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1351:	55                   	push   rbp
    1352:	53                   	push   rbx
    1353:	45 5f                	rex.RB pop r15
    1355:	50                   	push   rax
    1356:	4f 53                	rex.WRXB push r11
    1358:	49 58                	rex.WB pop r8
    135a:	31 39                	xor    DWORD PTR [rcx],edi
    135c:	39 35 30 36 00 5f    	cmp    DWORD PTR [rip+0x5f003630],esi        # 5f004992 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x5f004992>
    1362:	5f                   	pop    rdi
    1363:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1364:	65 65 64 5f          	gs gs fs pop rdi
    1368:	4e 55                	rex.WRX push rbp
    136a:	4c                   	rex.WR
    136b:	4c 00 5f 5f          	rex.WR add BYTE PTR [rdi+0x5f],r11b
    136f:	52                   	push   rdx
    1370:	45                   	rex.RB
    1371:	44                   	rex.R
    1372:	49 52                	rex.WB push r10
    1374:	45                   	rex.RB
    1375:	43 54                	rex.XB push r12
    1377:	5f                   	pop    rdi
    1378:	4e 54                	rex.WRX push rsp
    137a:	48 5f                	rex.W pop rdi
    137c:	4c                   	rex.WR
    137d:	44                   	rex.R
    137e:	42                   	rex.X
    137f:	4c 28 6e 61          	rex.WR sub BYTE PTR [rsi+0x61],r13b
    1383:	6d                   	ins    DWORD PTR es:[rdi],dx
    1384:	65 2c 70             	gs sub al,0x70
    1387:	72 6f                	jb     13f8 <.debug_str+0x13f8>
    1389:	74 6f                	je     13fa <.debug_str+0x13fa>
    138b:	2c 61                	sub    al,0x61
    138d:	6c                   	ins    BYTE PTR es:[rdi],dx
    138e:	69 61 73 29 20 5f 5f 	imul   esp,DWORD PTR [rcx+0x73],0x5f5f2029
    1395:	52                   	push   rdx
    1396:	45                   	rex.RB
    1397:	44                   	rex.R
    1398:	49 52                	rex.WB push r10
    139a:	45                   	rex.RB
    139b:	43 54                	rex.XB push r12
    139d:	5f                   	pop    rdi
    139e:	4e 54                	rex.WRX push rsp
    13a0:	48 20 28             	rex.W and BYTE PTR [rax],bpl
    13a3:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    13a4:	61                   	(bad)  
    13a5:	6d                   	ins    DWORD PTR es:[rdi],dx
    13a6:	65 2c 20             	gs sub al,0x20
    13a9:	70 72                	jo     141d <.debug_str+0x141d>
    13ab:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    13ac:	74 6f                	je     141d <.debug_str+0x141d>
    13ae:	2c 20                	sub    al,0x20
    13b0:	61                   	(bad)  
    13b1:	6c                   	ins    BYTE PTR es:[rdi],dx
    13b2:	69 61 73 29 00 5f 5f 	imul   esp,DWORD PTR [rcx+0x73],0x5f5f0029
    13b9:	52                   	push   rdx
    13ba:	45                   	rex.RB
    13bb:	44                   	rex.R
    13bc:	49 52                	rex.WB push r10
    13be:	45                   	rex.RB
    13bf:	43 54                	rex.XB push r12
    13c1:	5f                   	pop    rdi
    13c2:	4e 54                	rex.WRX push rsp
    13c4:	48                   	rex.W
    13c5:	4e                   	rex.WRX
    13c6:	4c 28 6e 61          	rex.WR sub BYTE PTR [rsi+0x61],r13b
    13ca:	6d                   	ins    DWORD PTR es:[rdi],dx
    13cb:	65 2c 70             	gs sub al,0x70
    13ce:	72 6f                	jb     143f <.debug_str+0x143f>
    13d0:	74 6f                	je     1441 <.debug_str+0x1441>
    13d2:	2c 61                	sub    al,0x61
    13d4:	6c                   	ins    BYTE PTR es:[rdi],dx
    13d5:	69 61 73 29 20 6e 61 	imul   esp,DWORD PTR [rcx+0x73],0x616e2029
    13dc:	6d                   	ins    DWORD PTR es:[rdi],dx
    13dd:	65 20 70 72          	and    BYTE PTR gs:[rax+0x72],dh
    13e1:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    13e2:	74 6f                	je     1453 <.debug_str+0x1453>
    13e4:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    13e7:	61                   	(bad)  
    13e8:	73 6d                	jae    1457 <.debug_str+0x1457>
    13ea:	5f                   	pop    rdi
    13eb:	5f                   	pop    rdi
    13ec:	20 28                	and    BYTE PTR [rax],ch
    13ee:	5f                   	pop    rdi
    13ef:	5f                   	pop    rdi
    13f0:	41 53                	push   r11
    13f2:	4d                   	rex.WRB
    13f3:	4e                   	rex.WRX
    13f4:	41                   	rex.B
    13f5:	4d                   	rex.WRB
    13f6:	45 20 28             	and    BYTE PTR [r8],r13b
    13f9:	23 61 6c             	and    esp,DWORD PTR [rcx+0x6c]
    13fc:	69 61 73 29 29 20 5f 	imul   esp,DWORD PTR [rcx+0x73],0x5f202929
    1403:	5f                   	pop    rdi
    1404:	54                   	push   rsp
    1405:	48 52                	rex.W push rdx
    1407:	4f 57                	rex.WRXB push r15
    1409:	4e                   	rex.WRX
    140a:	4c 00 5f 5f          	rex.WR add BYTE PTR [rdi+0x5f],r11b
    140e:	46                   	rex.RX
    140f:	4c 54                	rex.WR push rsp
    1411:	31 32                	xor    DWORD PTR [rdx],esi
    1413:	38 5f 4d             	cmp    BYTE PTR [rdi+0x4d],bl
    1416:	41 58                	pop    r8
    1418:	5f                   	pop    rdi
    1419:	45 58                	rex.RB pop r8
    141b:	50                   	push   rax
    141c:	5f                   	pop    rdi
    141d:	5f                   	pop    rdi
    141e:	20 31                	and    BYTE PTR [rcx],dh
    1420:	36 33 38             	xor    edi,DWORD PTR ss:[rax]
    1423:	34 00                	xor    al,0x0
    1425:	5f                   	pop    rdi
    1426:	5f                   	pop    rdi
    1427:	46                   	rex.RX
    1428:	4c 54                	rex.WR push rsp
    142a:	5f                   	pop    rdi
    142b:	52                   	push   rdx
    142c:	41                   	rex.B
    142d:	44                   	rex.R
    142e:	49 58                	rex.WB pop r8
    1430:	5f                   	pop    rdi
    1431:	5f                   	pop    rdi
    1432:	20 32                	and    BYTE PTR [rdx],dh
    1434:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1437:	46                   	rex.RX
    1438:	4c 54                	rex.WR push rsp
    143a:	33 32                	xor    esi,DWORD PTR [rdx]
    143c:	58                   	pop    rax
    143d:	5f                   	pop    rdi
    143e:	44                   	rex.R
    143f:	45                   	rex.RB
    1440:	4e                   	rex.WRX
    1441:	4f 52                	rex.WRXB push r10
    1443:	4d 5f                	rex.WRB pop r15
    1445:	4d                   	rex.WRB
    1446:	49                   	rex.WB
    1447:	4e 5f                	rex.WRX pop rdi
    1449:	5f                   	pop    rdi
    144a:	20 34 2e             	and    BYTE PTR [rsi+rbp*1],dh
    144d:	39 34 30             	cmp    DWORD PTR [rax+rsi*1],esi
    1450:	36 35 36 34 35 38    	ss xor eax,0x38353436
    1456:	34 31                	xor    al,0x31
    1458:	32 34 36             	xor    dh,BYTE PTR [rsi+rsi*1]
    145b:	35 34 34 31 37       	xor    eax,0x37313434
    1460:	36 35 36 38 37 39    	ss xor eax,0x39373836
    1466:	32 38                	xor    bh,BYTE PTR [rax]
    1468:	36 38 32             	cmp    BYTE PTR ss:[rdx],dh
    146b:	32 31                	xor    dh,BYTE PTR [rcx]
    146d:	33 37                	xor    esi,DWORD PTR [rdi]
    146f:	32 65 2d             	xor    ah,BYTE PTR [rbp+0x2d]
    1472:	33 32                	xor    esi,DWORD PTR [rdx]
    1474:	34 46                	xor    al,0x46
    1476:	33 32                	xor    esi,DWORD PTR [rdx]
    1478:	78 00                	js     147a <.debug_str+0x147a>
    147a:	5f                   	pop    rdi
    147b:	5f                   	pop    rdi
    147c:	67 6c                	ins    BYTE PTR es:[edi],dx
    147e:	69 62 63 5f 63 6c 61 	imul   esp,DWORD PTR [rdx+0x63],0x616c635f
    1485:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1486:	67 5f                	addr32 pop rdi
    1488:	68 61 73 5f 65       	push   0x655f7361
    148d:	78 74                	js     1503 <.debug_str+0x1503>
    148f:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    1491:	73 69                	jae    14fc <.debug_str+0x14fc>
    1493:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1494:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1495:	28 65 78             	sub    BYTE PTR [rbp+0x78],ah
    1498:	74 29                	je     14c3 <.debug_str+0x14c3>
    149a:	20 30                	and    BYTE PTR [rax],dh
    149c:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    149f:	50                   	push   rax
    14a0:	4d 54                	rex.WRB push r12
    14a2:	28 61 72             	sub    BYTE PTR [rcx+0x72],ah
    14a5:	67 73 29             	addr32 jae 14d1 <.debug_str+0x14d1>
    14a8:	20 61 72             	and    BYTE PTR [rcx+0x72],ah
    14ab:	67 73 00             	addr32 jae 14ae <.debug_str+0x14ae>
    14ae:	5f                   	pop    rdi
    14af:	5f                   	pop    rdi
    14b0:	47                   	rex.RXB
    14b1:	49                   	rex.WB
    14b2:	44 5f                	rex.R pop rdi
    14b4:	54                   	push   rsp
    14b5:	5f                   	pop    rdi
    14b6:	54                   	push   rsp
    14b7:	59                   	pop    rcx
    14b8:	50                   	push   rax
    14b9:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    14bd:	55                   	push   rbp
    14be:	33 32                	xor    esi,DWORD PTR [rdx]
    14c0:	5f                   	pop    rdi
    14c1:	54                   	push   rsp
    14c2:	59                   	pop    rcx
    14c3:	50                   	push   rax
    14c4:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    14c8:	53                   	push   rbx
    14c9:	49 5a                	rex.WB pop r10
    14cb:	45                   	rex.RB
    14cc:	4f                   	rex.WRXB
    14cd:	46 5f                	rex.RX pop rdi
    14cf:	4c                   	rex.WR
    14d0:	4f                   	rex.WRXB
    14d1:	4e                   	rex.WRX
    14d2:	47 5f                	rex.RXB pop r15
    14d4:	44                   	rex.R
    14d5:	4f 55                	rex.WRXB push r13
    14d7:	42                   	rex.X
    14d8:	4c                   	rex.WR
    14d9:	45 5f                	rex.RB pop r15
    14db:	5f                   	pop    rdi
    14dc:	20 31                	and    BYTE PTR [rcx],dh
    14de:	36 00 5f 5f          	add    BYTE PTR ss:[rdi+0x5f],bl
    14e2:	44                   	rex.R
    14e3:	42                   	rex.X
    14e4:	4c 5f                	rex.WR pop rdi
    14e6:	48                   	rex.W
    14e7:	41 53                	push   r11
    14e9:	5f                   	pop    rdi
    14ea:	51                   	push   rcx
    14eb:	55                   	push   rbp
    14ec:	49                   	rex.WB
    14ed:	45 54                	rex.RB push r12
    14ef:	5f                   	pop    rdi
    14f0:	4e                   	rex.WRX
    14f1:	41                   	rex.B
    14f2:	4e 5f                	rex.WRX pop rdi
    14f4:	5f                   	pop    rdi
    14f5:	20 31                	and    BYTE PTR [rcx],dh
    14f7:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    14fa:	77 75                	ja     1571 <.debug_str+0x1571>
    14fc:	72 20                	jb     151e <.debug_str+0x151e>
    14fe:	00 5f 42             	add    BYTE PTR [rdi+0x42],bl
    1501:	49 54                	rex.WB push r12
    1503:	53                   	push   rbx
    1504:	5f                   	pop    rdi
    1505:	54                   	push   rsp
    1506:	59                   	pop    rcx
    1507:	50                   	push   rax
    1508:	45 53                	rex.RB push r11
    150a:	5f                   	pop    rdi
    150b:	48 20 31             	rex.W and BYTE PTR [rcx],sil
    150e:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1511:	4c                   	rex.WR
    1512:	44                   	rex.R
    1513:	42                   	rex.X
    1514:	4c 5f                	rex.WR pop rdi
    1516:	44                   	rex.R
    1517:	45                   	rex.RB
    1518:	4e                   	rex.WRX
    1519:	4f 52                	rex.WRXB push r10
    151b:	4d 5f                	rex.WRB pop r15
    151d:	4d                   	rex.WRB
    151e:	49                   	rex.WB
    151f:	4e 5f                	rex.WRX pop rdi
    1521:	5f                   	pop    rdi
    1522:	20 33                	and    BYTE PTR [rbx],dh
    1524:	2e 36 34 35          	cs ss xor al,0x35
    1528:	31 39                	xor    DWORD PTR [rcx],edi
    152a:	39 35 33 31 38 38    	cmp    DWORD PTR [rip+0x38383133],esi        # 38384663 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x38384663>
    1530:	32 34 37             	xor    dh,BYTE PTR [rdi+rsi*1]
    1533:	34 36                	xor    al,0x36
    1535:	30 32                	xor    BYTE PTR [rdx],dh
    1537:	35 32 38 34 30       	xor    eax,0x30343832
    153c:	35 39 33 33 36       	xor    eax,0x36333339
    1541:	31 39                	xor    DWORD PTR [rcx],edi
    1543:	34 31                	xor    al,0x31
    1545:	39 38                	cmp    DWORD PTR [rax],edi
    1547:	32 65 2d             	xor    ah,BYTE PTR [rbp+0x2d]
    154a:	34 39                	xor    al,0x39
    154c:	35 31 4c 00 5f       	xor    eax,0x5f004c31
    1551:	5f                   	pop    rdi
    1552:	50                   	push   rax
    1553:	49                   	rex.WB
    1554:	44 5f                	rex.R pop rdi
    1556:	54                   	push   rsp
    1557:	5f                   	pop    rdi
    1558:	54                   	push   rsp
    1559:	59                   	pop    rcx
    155a:	50                   	push   rax
    155b:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    155f:	53                   	push   rbx
    1560:	33 32                	xor    esi,DWORD PTR [rdx]
    1562:	5f                   	pop    rdi
    1563:	54                   	push   rsp
    1564:	59                   	pop    rcx
    1565:	50                   	push   rax
    1566:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    156a:	73 74                	jae    15e0 <.debug_str+0x15e0>
    156c:	75 62                	jne    15d0 <.debug_str+0x15d0>
    156e:	5f                   	pop    rdi
    156f:	66 61                	data16 (bad) 
    1571:	74 74                	je     15e7 <.debug_str+0x15e7>
    1573:	61                   	(bad)  
    1574:	63 68 20             	movsxd ebp,DWORD PTR [rax+0x20]
    1577:	00 73 79             	add    BYTE PTR [rbx+0x79],dh
    157a:	73 5f                	jae    15db <.debug_str+0x15db>
    157c:	65 72 72             	gs jb  15f1 <.debug_str+0x15f1>
    157f:	6c                   	ins    BYTE PTR es:[rdi],dx
    1580:	69 73 74 00 5f 5f 46 	imul   esi,DWORD PTR [rbx+0x74],0x465f5f00
    1587:	4c 54                	rex.WR push rsp
    1589:	36 34 5f             	ss xor al,0x5f
    158c:	48                   	rex.W
    158d:	41 53                	push   r11
    158f:	5f                   	pop    rdi
    1590:	49                   	rex.WB
    1591:	4e                   	rex.WRX
    1592:	46                   	rex.RX
    1593:	49                   	rex.WB
    1594:	4e                   	rex.WRX
    1595:	49 54                	rex.WB push r12
    1597:	59                   	pop    rcx
    1598:	5f                   	pop    rdi
    1599:	5f                   	pop    rdi
    159a:	20 31                	and    BYTE PTR [rcx],dh
    159c:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    159f:	55                   	push   rbp
    15a0:	49                   	rex.WB
    15a1:	4e 54                	rex.WRX push rsp
    15a3:	5f                   	pop    rdi
    15a4:	46                   	rex.RX
    15a5:	41 53                	push   r11
    15a7:	54                   	push   rsp
    15a8:	38 5f 4d             	cmp    BYTE PTR [rdi+0x4d],bl
    15ab:	41 58                	pop    r8
    15ad:	5f                   	pop    rdi
    15ae:	5f                   	pop    rdi
    15af:	20 30                	and    BYTE PTR [rax],dh
    15b1:	78 66                	js     1619 <.debug_str+0x1619>
    15b3:	66 00 5f 5f          	data16 add BYTE PTR [rdi+0x5f],bl
    15b7:	41 54                	push   r12
    15b9:	4f                   	rex.WRXB
    15ba:	4d                   	rex.WRB
    15bb:	49                   	rex.WB
    15bc:	43 5f                	rex.XB pop r15
    15be:	48                   	rex.W
    15bf:	4c                   	rex.WR
    15c0:	45 5f                	rex.RB pop r15
    15c2:	52                   	push   rdx
    15c3:	45                   	rex.RB
    15c4:	4c                   	rex.WR
    15c5:	45                   	rex.RB
    15c6:	41 53                	push   r11
    15c8:	45 20 31             	and    BYTE PTR [r9],r14b
    15cb:	33 31                	xor    esi,DWORD PTR [rcx]
    15cd:	30 37                	xor    BYTE PTR [rdi],dh
    15cf:	32 00                	xor    al,BYTE PTR [rax]
    15d1:	5f                   	pop    rdi
    15d2:	5f                   	pop    rdi
    15d3:	4c                   	rex.WR
    15d4:	44                   	rex.R
    15d5:	42                   	rex.X
    15d6:	4c 5f                	rex.WR pop rdi
    15d8:	4d                   	rex.WRB
    15d9:	41 58                	pop    r8
    15db:	5f                   	pop    rdi
    15dc:	45 58                	rex.RB pop r8
    15de:	50                   	push   rax
    15df:	5f                   	pop    rdi
    15e0:	5f                   	pop    rdi
    15e1:	20 31                	and    BYTE PTR [rcx],dh
    15e3:	36 33 38             	xor    edi,DWORD PTR ss:[rax]
    15e6:	34 00                	xor    al,0x0
    15e8:	5f                   	pop    rdi
    15e9:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    15ea:	66 66 73 65          	data16 data16 jae 1653 <.debug_str+0x1653>
    15ee:	74 00                	je     15f0 <.debug_str+0x15f0>
    15f0:	5f                   	pop    rdi
    15f1:	5f                   	pop    rdi
    15f2:	73 74                	jae    1668 <.debug_str+0x1668>
    15f4:	75 62                	jne    1658 <.debug_str+0x1658>
    15f6:	5f                   	pop    rdi
    15f7:	67 74 74             	addr32 je 166e <.debug_str+0x166e>
    15fa:	79 20                	jns    161c <.debug_str+0x161c>
    15fc:	00 5f 42             	add    BYTE PTR [rdi+0x42],bl
    15ff:	49 54                	rex.WB push r12
    1601:	53                   	push   rbx
    1602:	5f                   	pop    rdi
    1603:	54                   	push   rsp
    1604:	59                   	pop    rcx
    1605:	50                   	push   rax
    1606:	45 53                	rex.RB push r11
    1608:	49 5a                	rex.WB pop r10
    160a:	45 53                	rex.RB push r11
    160c:	5f                   	pop    rdi
    160d:	48 20 31             	rex.W and BYTE PTR [rcx],sil
    1610:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1613:	55                   	push   rbp
    1614:	53                   	push   rbx
    1615:	45                   	rex.RB
    1616:	43                   	rex.XB
    1617:	4f                   	rex.WRXB
    1618:	4e                   	rex.WRX
    1619:	44 53                	rex.R push rbx
    161b:	5f                   	pop    rdi
    161c:	54                   	push   rsp
    161d:	5f                   	pop    rdi
    161e:	54                   	push   rsp
    161f:	59                   	pop    rcx
    1620:	50                   	push   rax
    1621:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    1625:	55                   	push   rbp
    1626:	33 32                	xor    esi,DWORD PTR [rdx]
    1628:	5f                   	pop    rdi
    1629:	54                   	push   rsp
    162a:	59                   	pop    rcx
    162b:	50                   	push   rax
    162c:	45 00 5f 49          	add    BYTE PTR [r15+0x49],r11b
    1630:	4f 5f                	rex.WRXB pop r15
    1632:	70 65                	jo     1699 <.debug_str+0x1699>
    1634:	65 6b 63 28 5f       	imul   esp,DWORD PTR gs:[rbx+0x28],0x5f
    1639:	66 70 29             	data16 jo 1665 <.debug_str+0x1665>
    163c:	20 5f 49             	and    BYTE PTR [rdi+0x49],bl
    163f:	4f 5f                	rex.WRXB pop r15
    1641:	70 65                	jo     16a8 <.debug_str+0x16a8>
    1643:	65 6b 63 5f 75       	imul   esp,DWORD PTR gs:[rbx+0x5f],0x75
    1648:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1649:	6c                   	ins    BYTE PTR es:[rdi],dx
    164a:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    164b:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
    164e:	64 20 28             	and    BYTE PTR fs:[rax],ch
    1651:	5f                   	pop    rdi
    1652:	66 70 29             	data16 jo 167e <.debug_str+0x167e>
    1655:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1658:	49                   	rex.WB
    1659:	4e 54                	rex.WRX push rsp
    165b:	50                   	push   rax
    165c:	54                   	push   rsp
    165d:	52                   	push   rdx
    165e:	5f                   	pop    rdi
    165f:	54                   	push   rsp
    1660:	59                   	pop    rcx
    1661:	50                   	push   rax
    1662:	45 5f                	rex.RB pop r15
    1664:	5f                   	pop    rdi
    1665:	20 6c 6f 6e          	and    BYTE PTR [rdi+rbp*2+0x6e],ch
    1669:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
    166d:	74 00                	je     166f <.debug_str+0x166f>
    166f:	5f                   	pop    rdi
    1670:	5f                   	pop    rdi
    1671:	44                   	rex.R
    1672:	45                   	rex.RB
    1673:	43                   	rex.XB
    1674:	36 34 5f             	ss xor al,0x5f
    1677:	4d                   	rex.WRB
    1678:	41 58                	pop    r8
    167a:	5f                   	pop    rdi
    167b:	5f                   	pop    rdi
    167c:	20 39                	and    BYTE PTR [rcx],bh
    167e:	2e 39 39             	cmp    DWORD PTR cs:[rcx],edi
    1681:	39 39                	cmp    DWORD PTR [rcx],edi
    1683:	39 39                	cmp    DWORD PTR [rcx],edi
    1685:	39 39                	cmp    DWORD PTR [rcx],edi
    1687:	39 39                	cmp    DWORD PTR [rcx],edi
    1689:	39 39                	cmp    DWORD PTR [rcx],edi
    168b:	39 39                	cmp    DWORD PTR [rcx],edi
    168d:	39 45 33             	cmp    DWORD PTR [rbp+0x33],eax
    1690:	38 34 44             	cmp    BYTE PTR [rsp+rax*2],dh
    1693:	44 00 73 79          	add    BYTE PTR [rbx+0x79],r14b
    1697:	73 5f                	jae    16f8 <.debug_str+0x16f8>
    1699:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    169a:	65 72 72             	gs jb  170f <.debug_str+0x170f>
    169d:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    16a0:	47                   	rex.RXB
    16a1:	43                   	rex.XB
    16a2:	43 5f                	rex.XB pop r15
    16a4:	41 54                	push   r12
    16a6:	4f                   	rex.WRXB
    16a7:	4d                   	rex.WRB
    16a8:	49                   	rex.WB
    16a9:	43 5f                	rex.XB pop r15
    16ab:	49                   	rex.WB
    16ac:	4e 54                	rex.WRX push rsp
    16ae:	5f                   	pop    rdi
    16af:	4c                   	rex.WR
    16b0:	4f                   	rex.WRXB
    16b1:	43                   	rex.XB
    16b2:	4b 5f                	rex.WXB pop r15
    16b4:	46 52                	rex.RX push rdx
    16b6:	45                   	rex.RB
    16b7:	45 20 32             	and    BYTE PTR [r10],r14b
    16ba:	00 5f 53             	add    BYTE PTR [rdi+0x53],bl
    16bd:	59                   	pop    rcx
    16be:	53                   	push   rbx
    16bf:	5f                   	pop    rdi
    16c0:	53                   	push   rbx
    16c1:	49 5a                	rex.WB pop r10
    16c3:	45 5f                	rex.RB pop r15
    16c5:	54                   	push   rsp
    16c6:	5f                   	pop    rdi
    16c7:	48 20 00             	rex.W and BYTE PTR [rax],al
    16ca:	5f                   	pop    rdi
    16cb:	5f                   	pop    rdi
    16cc:	4d                   	rex.WRB
    16cd:	4d 58                	rex.WRB pop r8
    16cf:	5f                   	pop    rdi
    16d0:	5f                   	pop    rdi
    16d1:	20 31                	and    BYTE PTR [rcx],dh
    16d3:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    16d6:	42                   	rex.X
    16d7:	4c                   	rex.WR
    16d8:	4b                   	rex.WXB
    16d9:	43                   	rex.XB
    16da:	4e 54                	rex.WRX push rsp
    16dc:	5f                   	pop    rdi
    16dd:	54                   	push   rsp
    16de:	5f                   	pop    rdi
    16df:	54                   	push   rsp
    16e0:	59                   	pop    rcx
    16e1:	50                   	push   rax
    16e2:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    16e6:	53                   	push   rbx
    16e7:	59                   	pop    rcx
    16e8:	53                   	push   rbx
    16e9:	43                   	rex.XB
    16ea:	41                   	rex.B
    16eb:	4c                   	rex.WR
    16ec:	4c 5f                	rex.WR pop rdi
    16ee:	53                   	push   rbx
    16ef:	4c                   	rex.WR
    16f0:	4f                   	rex.WRXB
    16f1:	4e                   	rex.WRX
    16f2:	47 5f                	rex.RXB pop r15
    16f4:	54                   	push   rsp
    16f5:	59                   	pop    rcx
    16f6:	50                   	push   rax
    16f7:	45 00 5f 49          	add    BYTE PTR [r15+0x49],r11b
    16fb:	4f 5f                	rex.WRXB pop r15
    16fd:	53                   	push   rbx
    16fe:	48                   	rex.W
    16ff:	4f 57                	rex.WRXB push r15
    1701:	42                   	rex.X
    1702:	41 53                	push   r11
    1704:	45 20 30             	and    BYTE PTR [r8],r14b
    1707:	32 30                	xor    dh,BYTE PTR [rax]
    1709:	30 00                	xor    BYTE PTR [rax],al
    170b:	5f                   	pop    rdi
    170c:	5f                   	pop    rdi
    170d:	73 74                	jae    1783 <.debug_str+0x1783>
    170f:	75 62                	jne    1773 <.debug_str+0x1773>
    1711:	5f                   	pop    rdi
    1712:	73 74                	jae    1788 <.debug_str+0x1788>
    1714:	74 79                	je     178f <.debug_str+0x178f>
    1716:	20 00                	and    BYTE PTR [rax],al
    1718:	5f                   	pop    rdi
    1719:	66 69 6c 65 6e 6f 00 	imul   bp,WORD PTR [rbp+riz*2+0x6e],0x6f
    1720:	5f                   	pop    rdi
    1721:	5f                   	pop    rdi
    1722:	48                   	rex.W
    1723:	41 56                	push   r14
    1725:	45 5f                	rex.RB pop r15
    1727:	47                   	rex.RXB
    1728:	45                   	rex.RB
    1729:	4e                   	rex.WRX
    172a:	45 52                	rex.RB push r10
    172c:	49                   	rex.WB
    172d:	43 5f                	rex.XB pop r15
    172f:	53                   	push   rbx
    1730:	45                   	rex.RB
    1731:	4c                   	rex.WR
    1732:	45                   	rex.RB
    1733:	43 54                	rex.XB push r12
    1735:	49                   	rex.WB
    1736:	4f                   	rex.WRXB
    1737:	4e 20 31             	rex.WRX and BYTE PTR [rcx],r14b
    173a:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    173d:	52                   	push   rdx
    173e:	4c                   	rex.WR
    173f:	49                   	rex.WB
    1740:	4d                   	rex.WRB
    1741:	36 34 5f             	ss xor al,0x5f
    1744:	54                   	push   rsp
    1745:	5f                   	pop    rdi
    1746:	54                   	push   rsp
    1747:	59                   	pop    rcx
    1748:	50                   	push   rax
    1749:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    174d:	55                   	push   rbp
    174e:	51                   	push   rcx
    174f:	55                   	push   rbp
    1750:	41                   	rex.B
    1751:	44 5f                	rex.R pop rdi
    1753:	54                   	push   rsp
    1754:	59                   	pop    rcx
    1755:	50                   	push   rax
    1756:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    175a:	46                   	rex.RX
    175b:	4c 54                	rex.WR push rsp
    175d:	31 32                	xor    DWORD PTR [rdx],esi
    175f:	38 5f 4d             	cmp    BYTE PTR [rdi+0x4d],bl
    1762:	41                   	rex.B
    1763:	4e 54                	rex.WRX push rsp
    1765:	5f                   	pop    rdi
    1766:	44                   	rex.R
    1767:	49                   	rex.WB
    1768:	47 5f                	rex.RXB pop r15
    176a:	5f                   	pop    rdi
    176b:	20 31                	and    BYTE PTR [rcx],dh
    176d:	31 33                	xor    DWORD PTR [rbx],esi
    176f:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1772:	4f 52                	rex.WRXB push r10
    1774:	44                   	rex.R
    1775:	45 52                	rex.RB push r10
    1777:	5f                   	pop    rdi
    1778:	4c                   	rex.WR
    1779:	49 54                	rex.WB push r12
    177b:	54                   	push   rsp
    177c:	4c                   	rex.WR
    177d:	45 5f                	rex.RB pop r15
    177f:	45                   	rex.RB
    1780:	4e                   	rex.WRX
    1781:	44                   	rex.R
    1782:	49                   	rex.WB
    1783:	41                   	rex.B
    1784:	4e 5f                	rex.WRX pop rdi
    1786:	5f                   	pop    rdi
    1787:	20 31                	and    BYTE PTR [rcx],dh
    1789:	32 33                	xor    dh,BYTE PTR [rbx]
    178b:	34 00                	xor    al,0x0
    178d:	5f                   	pop    rdi
    178e:	5f                   	pop    rdi
    178f:	55                   	push   rbp
    1790:	53                   	push   rbx
    1791:	45 5f                	rex.RB pop r15
    1793:	58                   	pop    rax
    1794:	4f 50                	rex.WRXB push r8
    1796:	45                   	rex.RB
    1797:	4e 32 4b 20          	rex.WRX xor r9b,BYTE PTR [rbx+0x20]
    179b:	31 00                	xor    DWORD PTR [rax],eax
    179d:	5f                   	pop    rdi
    179e:	5f                   	pop    rdi
    179f:	53                   	push   rbx
    17a0:	49 5a                	rex.WB pop r10
    17a2:	45                   	rex.RB
    17a3:	4f                   	rex.WRXB
    17a4:	46 5f                	rex.RX pop rdi
    17a6:	50                   	push   rax
    17a7:	54                   	push   rsp
    17a8:	52                   	push   rdx
    17a9:	44                   	rex.R
    17aa:	49                   	rex.WB
    17ab:	46                   	rex.RX
    17ac:	46 5f                	rex.RX pop rdi
    17ae:	54                   	push   rsp
    17af:	5f                   	pop    rdi
    17b0:	5f                   	pop    rdi
    17b1:	20 38                	and    BYTE PTR [rax],bh
    17b3:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    17b6:	4f 53                	rex.WRXB push r11
    17b8:	5f                   	pop    rdi
    17b9:	54                   	push   rsp
    17ba:	52                   	push   rdx
    17bb:	55                   	push   rbp
    17bc:	4e                   	rex.WRX
    17bd:	43 20 31             	rex.XB and BYTE PTR [r9],sil
    17c0:	36 00 5f 5f          	add    BYTE PTR ss:[rdi+0x5f],bl
    17c4:	44                   	rex.R
    17c5:	45                   	rex.RB
    17c6:	43 31 32             	rex.XB xor DWORD PTR [r10],esi
    17c9:	38 5f 4d             	cmp    BYTE PTR [rdi+0x4d],bl
    17cc:	41                   	rex.B
    17cd:	4e 54                	rex.WRX push rsp
    17cf:	5f                   	pop    rdi
    17d0:	44                   	rex.R
    17d1:	49                   	rex.WB
    17d2:	47 5f                	rex.RXB pop r15
    17d4:	5f                   	pop    rdi
    17d5:	20 33                	and    BYTE PTR [rbx],dh
    17d7:	34 00                	xor    al,0x0
    17d9:	5f                   	pop    rdi
    17da:	5f                   	pop    rdi
    17db:	55                   	push   rbp
    17dc:	53                   	push   rbx
    17dd:	45 5f                	rex.RB pop r15
    17df:	49 53                	rex.WB push r11
    17e1:	4f                   	rex.WRXB
    17e2:	43 39 39             	rex.XB cmp DWORD PTR [r9],edi
    17e5:	20 31                	and    BYTE PTR [rcx],dh
    17e7:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    17ea:	49                   	rex.WB
    17eb:	4e 54                	rex.WRX push rsp
    17ed:	33 32                	xor    esi,DWORD PTR [rdx]
    17ef:	5f                   	pop    rdi
    17f0:	54                   	push   rsp
    17f1:	59                   	pop    rcx
    17f2:	50                   	push   rax
    17f3:	45 5f                	rex.RB pop r15
    17f5:	5f                   	pop    rdi
    17f6:	20 69 6e             	and    BYTE PTR [rcx+0x6e],ch
    17f9:	74 00                	je     17fb <.debug_str+0x17fb>
    17fb:	5f                   	pop    rdi
    17fc:	5f                   	pop    rdi
    17fd:	4b                   	rex.WXB
    17fe:	45 52                	rex.RB push r10
    1800:	4e                   	rex.WRX
    1801:	45                   	rex.RB
    1802:	4c 5f                	rex.WR pop rdi
    1804:	53                   	push   rbx
    1805:	54                   	push   rsp
    1806:	52                   	push   rdx
    1807:	49                   	rex.WB
    1808:	43 54                	rex.XB push r12
    180a:	5f                   	pop    rdi
    180b:	4e                   	rex.WRX
    180c:	41                   	rex.B
    180d:	4d                   	rex.WRB
    180e:	45 53                	rex.RB push r11
    1810:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1813:	55                   	push   rbp
    1814:	33 32                	xor    esi,DWORD PTR [rdx]
    1816:	5f                   	pop    rdi
    1817:	54                   	push   rsp
    1818:	59                   	pop    rcx
    1819:	50                   	push   rax
    181a:	45 20 75 6e          	and    BYTE PTR [r13+0x6e],r14b
    181e:	73 69                	jae    1889 <.debug_str+0x1889>
    1820:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    1822:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    1827:	74 00                	je     1829 <.debug_str+0x1829>
    1829:	5f                   	pop    rdi
    182a:	5f                   	pop    rdi
    182b:	63 6f 64             	movsxd ebp,DWORD PTR [rdi+0x64]
    182e:	65 5f                	gs pop rdi
    1830:	6d                   	ins    DWORD PTR es:[rdi],dx
    1831:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1832:	64 65 6c             	fs gs ins BYTE PTR es:[rdi],dx
    1835:	5f                   	pop    rdi
    1836:	73 6d                	jae    18a5 <.debug_str+0x18a5>
    1838:	61                   	(bad)  
    1839:	6c                   	ins    BYTE PTR es:[rdi],dx
    183a:	6c                   	ins    BYTE PTR es:[rdi],dx
    183b:	5f                   	pop    rdi
    183c:	5f                   	pop    rdi
    183d:	20 31                	and    BYTE PTR [rcx],dh
    183f:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1842:	55                   	push   rbp
    1843:	53                   	push   rbx
    1844:	45 5f                	rex.RB pop r15
    1846:	49 53                	rex.WB push r11
    1848:	4f                   	rex.WRXB
    1849:	43 39 35 00 5f 5f 46 	rex.XB cmp DWORD PTR [rip+0x465f5f00],esi        # 465f7750 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x465f7750>
    1850:	4c 54                	rex.WR push rsp
    1852:	36 34 58             	ss xor al,0x58
    1855:	5f                   	pop    rdi
    1856:	48                   	rex.W
    1857:	41 53                	push   r11
    1859:	5f                   	pop    rdi
    185a:	44                   	rex.R
    185b:	45                   	rex.RB
    185c:	4e                   	rex.WRX
    185d:	4f 52                	rex.WRXB push r10
    185f:	4d 5f                	rex.WRB pop r15
    1861:	5f                   	pop    rdi
    1862:	20 31                	and    BYTE PTR [rcx],dh
    1864:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1867:	44                   	rex.R
    1868:	45                   	rex.RB
    1869:	43 33 32             	rex.XB xor esi,DWORD PTR [r10]
    186c:	5f                   	pop    rdi
    186d:	4d                   	rex.WRB
    186e:	41 58                	pop    r8
    1870:	5f                   	pop    rdi
    1871:	45 58                	rex.RB pop r8
    1873:	50                   	push   rax
    1874:	5f                   	pop    rdi
    1875:	5f                   	pop    rdi
    1876:	20 39                	and    BYTE PTR [rcx],bh
    1878:	37                   	(bad)  
    1879:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    187c:	4f                   	rex.WRXB
    187d:	4e                   	rex.WRX
    187e:	42                   	rex.X
    187f:	46 20 32             	rex.RX and BYTE PTR [rdx],r14b
    1882:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1885:	55                   	push   rbp
    1886:	53                   	push   rbx
    1887:	45 5f                	rex.RB pop r15
    1889:	49 53                	rex.WB push r11
    188b:	4f                   	rex.WRXB
    188c:	43 39 39             	rex.XB cmp DWORD PTR [r9],edi
    188f:	00 73 69             	add    BYTE PTR [rbx+0x69],dh
    1892:	7a 65                	jp     18f9 <.debug_str+0x18f9>
    1894:	5f                   	pop    rdi
    1895:	74 00                	je     1897 <.debug_str+0x1897>
    1897:	73 74                	jae    190d <.debug_str+0x190d>
    1899:	64 65 72 72          	fs gs jb 190f <.debug_str+0x190f>
    189d:	20 73 74             	and    BYTE PTR [rbx+0x74],dh
    18a0:	64 65 72 72          	fs gs jb 1916 <.debug_str+0x1916>
    18a4:	00 5f 76             	add    BYTE PTR [rdi+0x76],bl
    18a7:	74 61                	je     190a <.debug_str+0x190a>
    18a9:	62                   	(bad)  
    18aa:	6c                   	ins    BYTE PTR es:[rdi],dx
    18ab:	65 5f                	gs pop rdi
    18ad:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    18ae:	66 66 73 65          	data16 data16 jae 1917 <.debug_str+0x1917>
    18b2:	74 00                	je     18b4 <.debug_str+0x18b4>
    18b4:	5f                   	pop    rdi
    18b5:	47 5f                	rex.RXB pop r15
    18b7:	49                   	rex.WB
    18b8:	4f 5f                	rex.WRXB pop r15
    18ba:	49                   	rex.WB
    18bb:	4f 5f                	rex.WRXB pop r15
    18bd:	46                   	rex.RX
    18be:	49                   	rex.WB
    18bf:	4c                   	rex.WR
    18c0:	45 5f                	rex.RB pop r15
    18c2:	56                   	push   rsi
    18c3:	45 52                	rex.RB push r10
    18c5:	53                   	push   rbx
    18c6:	49                   	rex.WB
    18c7:	4f                   	rex.WRXB
    18c8:	4e 20 30             	rex.WRX and BYTE PTR [rax],r14b
    18cb:	78 32                	js     18ff <.debug_str+0x18ff>
    18cd:	30 30                	xor    BYTE PTR [rax],dh
    18cf:	30 31                	xor    BYTE PTR [rcx],dh
    18d1:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    18d4:	4f 5f                	rex.WRXB pop r15
    18d6:	54                   	push   rsp
    18d7:	49                   	rex.WB
    18d8:	45                   	rex.RB
    18d9:	44 5f                	rex.R pop rdi
    18db:	50                   	push   rax
    18dc:	55                   	push   rbp
    18dd:	54                   	push   rsp
    18de:	5f                   	pop    rdi
    18df:	47                   	rex.RXB
    18e0:	45 54                	rex.RB push r12
    18e2:	20 30                	and    BYTE PTR [rax],dh
    18e4:	78 34                	js     191a <.debug_str+0x191a>
    18e6:	30 30                	xor    BYTE PTR [rax],dh
    18e8:	00 4c 5f 74          	add    BYTE PTR [rdi+rbx*2+0x74],cl
    18ec:	6d                   	ins    DWORD PTR es:[rdi],dx
    18ed:	70 6e                	jo     195d <.debug_str+0x195d>
    18ef:	61                   	(bad)  
    18f0:	6d                   	ins    DWORD PTR es:[rdi],dx
    18f1:	20 32                	and    BYTE PTR [rdx],dh
    18f3:	30 00                	xor    BYTE PTR [rax],al
    18f5:	5f                   	pop    rdi
    18f6:	49                   	rex.WB
    18f7:	4f 5f                	rex.WRXB pop r15
    18f9:	63 6c 65 61          	movsxd ebp,DWORD PTR [rbp+riz*2+0x61]
    18fd:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    18fe:	75 70                	jne    1970 <.debug_str+0x1970>
    1900:	5f                   	pop    rdi
    1901:	72 65                	jb     1968 <.debug_str+0x1968>
    1903:	67 69 6f 6e 5f 73 74 	imul   ebp,DWORD PTR [edi+0x6e],0x6174735f
    190a:	61 
    190b:	72 74                	jb     1981 <.debug_str+0x1981>
    190d:	28 5f 66             	sub    BYTE PTR [rdi+0x66],bl
    1910:	63 74 2c 5f          	movsxd esi,DWORD PTR [rsp+rbp*1+0x5f]
    1914:	66 70 29             	data16 jo 1940 <.debug_str+0x1940>
    1917:	20 00                	and    BYTE PTR [rax],al
    1919:	5f                   	pop    rdi
    191a:	5f                   	pop    rdi
    191b:	53                   	push   rbx
    191c:	54                   	push   rsp
    191d:	44                   	rex.R
    191e:	43 5f                	rex.XB pop r15
    1920:	49                   	rex.WB
    1921:	45                   	rex.RB
    1922:	43 5f                	rex.XB pop r15
    1924:	35 35 39 5f 43       	xor    eax,0x435f3935
    1929:	4f                   	rex.WRXB
    192a:	4d 50                	rex.WRB push r8
    192c:	4c                   	rex.WR
    192d:	45 58                	rex.RB pop r8
    192f:	5f                   	pop    rdi
    1930:	5f                   	pop    rdi
    1931:	20 31                	and    BYTE PTR [rcx],dh
    1933:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1936:	47                   	rex.RXB
    1937:	4c                   	rex.WR
    1938:	49                   	rex.WB
    1939:	42                   	rex.X
    193a:	43 5f                	rex.XB pop r15
    193c:	55                   	push   rbp
    193d:	53                   	push   rbx
    193e:	45 5f                	rex.RB pop r15
    1940:	44                   	rex.R
    1941:	45 50                	rex.RB push r8
    1943:	52                   	push   rdx
    1944:	45                   	rex.RB
    1945:	43                   	rex.XB
    1946:	41 54                	push   r12
    1948:	45                   	rex.RB
    1949:	44 5f                	rex.R pop rdi
    194b:	47                   	rex.RXB
    194c:	45 54                	rex.RB push r12
    194e:	53                   	push   rbx
    194f:	20 30                	and    BYTE PTR [rax],dh
    1951:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    1954:	4f 5f                	rex.WRXB pop r15
    1956:	48                   	rex.W
    1957:	45 58                	rex.RB pop r8
    1959:	20 30                	and    BYTE PTR [rax],dh
    195b:	31 30                	xor    DWORD PTR [rax],esi
    195d:	30 00                	xor    BYTE PTR [rax],al
    195f:	5f                   	pop    rdi
    1960:	5f                   	pop    rdi
    1961:	46                   	rex.RX
    1962:	4c 54                	rex.WR push rsp
    1964:	36 34 58             	ss xor al,0x58
    1967:	5f                   	pop    rdi
    1968:	4d                   	rex.WRB
    1969:	49                   	rex.WB
    196a:	4e 5f                	rex.WRX pop rdi
    196c:	31 30                	xor    DWORD PTR [rax],esi
    196e:	5f                   	pop    rdi
    196f:	45 58                	rex.RB pop r8
    1971:	50                   	push   rax
    1972:	5f                   	pop    rdi
    1973:	5f                   	pop    rdi
    1974:	20 28                	and    BYTE PTR [rax],ch
    1976:	2d 34 39 33 31       	sub    eax,0x31333934
    197b:	29 00                	sub    DWORD PTR [rax],eax
    197d:	5f                   	pop    rdi
    197e:	5f                   	pop    rdi
    197f:	73 74                	jae    19f5 <.debug_str+0x19f5>
    1981:	75 62                	jne    19e5 <.debug_str+0x19e5>
    1983:	5f                   	pop    rdi
    1984:	70 75                	jo     19fb <.debug_str+0x19fb>
    1986:	74 6d                	je     19f5 <.debug_str+0x19f5>
    1988:	73 67                	jae    19f1 <.debug_str+0x19f1>
    198a:	20 00                	and    BYTE PTR [rax],al
    198c:	5f                   	pop    rdi
    198d:	49                   	rex.WB
    198e:	4f 5f                	rex.WRXB pop r15
    1990:	72 65                	jb     19f7 <.debug_str+0x19f7>
    1992:	61                   	(bad)  
    1993:	64 5f                	fs pop rdi
    1995:	62 61                	(bad)  
    1997:	73 65                	jae    19fe <.debug_str+0x19fe>
    1999:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    199c:	53                   	push   rbx
    199d:	54                   	push   rsp
    199e:	44                   	rex.R
    199f:	43 5f                	rex.XB pop r15
    19a1:	49 53                	rex.WB push r11
    19a3:	4f 5f                	rex.WRXB pop r15
    19a5:	31 30                	xor    DWORD PTR [rax],esi
    19a7:	36 34 36             	ss xor al,0x36
    19aa:	5f                   	pop    rdi
    19ab:	5f                   	pop    rdi
    19ac:	20 32                	and    BYTE PTR [rdx],dh
    19ae:	30 31                	xor    BYTE PTR [rcx],dh
    19b0:	37                   	(bad)  
    19b1:	30 36                	xor    BYTE PTR [rsi],dh
    19b3:	4c 00 5f 53          	rex.WR add BYTE PTR [rdi+0x53],r11b
    19b7:	49 5a                	rex.WB pop r10
    19b9:	45 5f                	rex.RB pop r15
    19bb:	54                   	push   rsp
    19bc:	5f                   	pop    rdi
    19bd:	44                   	rex.R
    19be:	45                   	rex.RB
    19bf:	46                   	rex.RX
    19c0:	49                   	rex.WB
    19c1:	4e                   	rex.WRX
    19c2:	45                   	rex.RB
    19c3:	44 5f                	rex.R pop rdi
    19c5:	20 00                	and    BYTE PTR [rax],al
    19c7:	5f                   	pop    rdi
    19c8:	5f                   	pop    rdi
    19c9:	42                   	rex.X
    19ca:	45                   	rex.RB
    19cb:	47                   	rex.RXB
    19cc:	49                   	rex.WB
    19cd:	4e 5f                	rex.WRX pop rdi
    19cf:	44                   	rex.R
    19d0:	45                   	rex.RB
    19d1:	43                   	rex.XB
    19d2:	4c 53                	rex.WR push rbx
    19d4:	20 00                	and    BYTE PTR [rax],al
    19d6:	5f                   	pop    rdi
    19d7:	49                   	rex.WB
    19d8:	4f 5f                	rex.WRXB pop r15
    19da:	73 74                	jae    1a50 <.debug_str+0x1a50>
    19dc:	64 69 6e 20 28 28 5f 	imul   ebp,DWORD PTR fs:[rsi+0x20],0x495f2828
    19e3:	49 
    19e4:	4f 5f                	rex.WRXB pop r15
    19e6:	46                   	rex.RX
    19e7:	49                   	rex.WB
    19e8:	4c                   	rex.WR
    19e9:	45 2a 29             	sub    r13b,BYTE PTR [r9]
    19ec:	28 26                	sub    BYTE PTR [rsi],ah
    19ee:	5f                   	pop    rdi
    19ef:	49                   	rex.WB
    19f0:	4f 5f                	rex.WRXB pop r15
    19f2:	32 5f 31             	xor    bl,BYTE PTR [rdi+0x31]
    19f5:	5f                   	pop    rdi
    19f6:	73 74                	jae    1a6c <.debug_str+0x1a6c>
    19f8:	64 69 6e 5f 29 29 00 	imul   ebp,DWORD PTR fs:[rsi+0x5f],0x4e002929
    19ff:	4e 
    1a00:	55                   	push   rbp
    1a01:	4c                   	rex.WR
    1a02:	4c 00 5f 5f          	rex.WR add BYTE PTR [rdi+0x5f],r11b
    1a06:	46                   	rex.RX
    1a07:	4c 54                	rex.WR push rsp
    1a09:	31 32                	xor    DWORD PTR [rdx],esi
    1a0b:	38 5f 4d             	cmp    BYTE PTR [rdi+0x4d],bl
    1a0e:	41 58                	pop    r8
    1a10:	5f                   	pop    rdi
    1a11:	31 30                	xor    DWORD PTR [rax],esi
    1a13:	5f                   	pop    rdi
    1a14:	45 58                	rex.RB pop r8
    1a16:	50                   	push   rax
    1a17:	5f                   	pop    rdi
    1a18:	5f                   	pop    rdi
    1a19:	20 34 39             	and    BYTE PTR [rcx+rdi*1],dh
    1a1c:	33 32                	xor    esi,DWORD PTR [rdx]
    1a1e:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1a21:	46                   	rex.RX
    1a22:	4c 54                	rex.WR push rsp
    1a24:	31 32                	xor    DWORD PTR [rdx],esi
    1a26:	38 5f 4d             	cmp    BYTE PTR [rdi+0x4d],bl
    1a29:	49                   	rex.WB
    1a2a:	4e 5f                	rex.WRX pop rdi
    1a2c:	5f                   	pop    rdi
    1a2d:	20 33                	and    BYTE PTR [rbx],dh
    1a2f:	2e 33 36             	xor    esi,DWORD PTR cs:[rsi]
    1a32:	32 31                	xor    dh,BYTE PTR [rcx]
    1a34:	30 33                	xor    BYTE PTR [rbx],dh
    1a36:	31 34 33             	xor    DWORD PTR [rbx+rsi*1],esi
    1a39:	31 31                	xor    DWORD PTR [rcx],esi
    1a3b:	32 30                	xor    dh,BYTE PTR [rax]
    1a3d:	39 33                	cmp    DWORD PTR [rbx],esi
    1a3f:	35 30 36 32 36       	xor    eax,0x36323630
    1a44:	32 36                	xor    dh,BYTE PTR [rsi]
    1a46:	37                   	(bad)  
    1a47:	37                   	(bad)  
    1a48:	38 31                	cmp    BYTE PTR [rcx],dh
    1a4a:	37                   	(bad)  
    1a4b:	33 32                	xor    esi,DWORD PTR [rdx]
    1a4d:	31 37                	xor    DWORD PTR [rdi],esi
    1a4f:	35 32 36 30 65       	xor    eax,0x65303632
    1a54:	2d 34 39 33 32       	sub    eax,0x32333934
    1a59:	46 31 32             	rex.RX xor DWORD PTR [rdx],r14d
    1a5c:	38 00                	cmp    BYTE PTR [rax],al
    1a5e:	5f                   	pop    rdi
    1a5f:	5f                   	pop    rdi
    1a60:	53                   	push   rbx
    1a61:	55                   	push   rbp
    1a62:	53                   	push   rbx
    1a63:	45                   	rex.RB
    1a64:	43                   	rex.XB
    1a65:	4f                   	rex.WRXB
    1a66:	4e                   	rex.WRX
    1a67:	44 53                	rex.R push rbx
    1a69:	5f                   	pop    rdi
    1a6a:	54                   	push   rsp
    1a6b:	5f                   	pop    rdi
    1a6c:	54                   	push   rsp
    1a6d:	59                   	pop    rcx
    1a6e:	50                   	push   rax
    1a6f:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    1a73:	53                   	push   rbx
    1a74:	59                   	pop    rcx
    1a75:	53                   	push   rbx
    1a76:	43                   	rex.XB
    1a77:	41                   	rex.B
    1a78:	4c                   	rex.WR
    1a79:	4c 5f                	rex.WR pop rdi
    1a7b:	53                   	push   rbx
    1a7c:	4c                   	rex.WR
    1a7d:	4f                   	rex.WRXB
    1a7e:	4e                   	rex.WRX
    1a7f:	47 5f                	rex.RXB pop r15
    1a81:	54                   	push   rsp
    1a82:	59                   	pop    rcx
    1a83:	50                   	push   rax
    1a84:	45 00 53 45          	add    BYTE PTR [r11+0x45],r10b
    1a88:	45                   	rex.RB
    1a89:	4b 5f                	rex.WXB pop r15
    1a8b:	45                   	rex.RB
    1a8c:	4e                   	rex.WRX
    1a8d:	44 20 32             	and    BYTE PTR [rdx],r14b
    1a90:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1a93:	49                   	rex.WB
    1a94:	4e 54                	rex.WRX push rsp
    1a96:	5f                   	pop    rdi
    1a97:	46                   	rex.RX
    1a98:	41 53                	push   r11
    1a9a:	54                   	push   rsp
    1a9b:	38 5f 57             	cmp    BYTE PTR [rdi+0x57],bl
    1a9e:	49                   	rex.WB
    1a9f:	44 54                	rex.R push rsp
    1aa1:	48 5f                	rex.W pop rdi
    1aa3:	5f                   	pop    rdi
    1aa4:	20 38                	and    BYTE PTR [rax],bh
    1aa6:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1aa9:	46                   	rex.RX
    1aaa:	4c 54                	rex.WR push rsp
    1aac:	36 34 5f             	ss xor al,0x5f
    1aaf:	4d                   	rex.WRB
    1ab0:	49                   	rex.WB
    1ab1:	4e 5f                	rex.WRX pop rdi
    1ab3:	31 30                	xor    DWORD PTR [rax],esi
    1ab5:	5f                   	pop    rdi
    1ab6:	45 58                	rex.RB pop r8
    1ab8:	50                   	push   rax
    1ab9:	5f                   	pop    rdi
    1aba:	5f                   	pop    rdi
    1abb:	20 28                	and    BYTE PTR [rax],ch
    1abd:	2d 33 30 37 29       	sub    eax,0x29373033
    1ac2:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1ac5:	73 74                	jae    1b3b <.debug_str+0x1b3b>
    1ac7:	75 62                	jne    1b2b <.debug_str+0x1b2b>
    1ac9:	5f                   	pop    rdi
    1aca:	66 64 65 74 61       	data16 fs gs je 1b30 <.debug_str+0x1b30>
    1acf:	63 68 20             	movsxd ebp,DWORD PTR [rax+0x20]
    1ad2:	00 5f 6e             	add    BYTE PTR [rdi+0x6e],bl
    1ad5:	65 78 74             	gs js  1b4c <.debug_str+0x1b4c>
    1ad8:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1adb:	44                   	rex.R
    1adc:	42                   	rex.X
    1add:	4c 5f                	rex.WR pop rdi
    1adf:	4d                   	rex.WRB
    1ae0:	41 58                	pop    r8
    1ae2:	5f                   	pop    rdi
    1ae3:	5f                   	pop    rdi
    1ae4:	20 28                	and    BYTE PTR [rax],ch
    1ae6:	28 64 6f 75          	sub    BYTE PTR [rdi+rbp*2+0x75],ah
    1aea:	62                   	(bad)  
    1aeb:	6c                   	ins    BYTE PTR es:[rdi],dx
    1aec:	65 29 31             	sub    DWORD PTR gs:[rcx],esi
    1aef:	2e 37                	cs (bad) 
    1af1:	39 37                	cmp    DWORD PTR [rdi],esi
    1af3:	36 39 33             	cmp    DWORD PTR ss:[rbx],esi
    1af6:	31 33                	xor    DWORD PTR [rbx],esi
    1af8:	34 38                	xor    al,0x38
    1afa:	36 32 33             	xor    dh,BYTE PTR ss:[rbx]
    1afd:	31 35 37 30 38 31    	xor    DWORD PTR [rip+0x31383037],esi        # 31384b3a <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x31384b3a>
    1b03:	34 35                	xor    al,0x35
    1b05:	32 37                	xor    dh,BYTE PTR [rdi]
    1b07:	34 32                	xor    al,0x32
    1b09:	33 37                	xor    esi,DWORD PTR [rdi]
    1b0b:	33 31                	xor    esi,DWORD PTR [rcx]
    1b0d:	37                   	(bad)  
    1b0e:	30 34 33             	xor    BYTE PTR [rbx+rsi*1],dh
    1b11:	35 37 65 2b 33       	xor    eax,0x332b6537
    1b16:	30 38                	xor    BYTE PTR [rax],bh
    1b18:	4c 29 00             	sub    QWORD PTR [rax],r8
    1b1b:	5f                   	pop    rdi
    1b1c:	44                   	rex.R
    1b1d:	45                   	rex.RB
    1b1e:	46                   	rex.RX
    1b1f:	41 55                	push   r13
    1b21:	4c 54                	rex.WR push rsp
    1b23:	5f                   	pop    rdi
    1b24:	53                   	push   rbx
    1b25:	4f 55                	rex.WRXB push r13
    1b27:	52                   	push   rdx
    1b28:	43                   	rex.XB
    1b29:	45 20 31             	and    BYTE PTR [r9],r14b
    1b2c:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1b2f:	52                   	push   rdx
    1b30:	4c                   	rex.WR
    1b31:	49                   	rex.WB
    1b32:	4d 5f                	rex.WRB pop r15
    1b34:	54                   	push   rsp
    1b35:	5f                   	pop    rdi
    1b36:	4d                   	rex.WRB
    1b37:	41 54                	push   r12
    1b39:	43                   	rex.XB
    1b3a:	48                   	rex.W
    1b3b:	45 53                	rex.RB push r11
    1b3d:	5f                   	pop    rdi
    1b3e:	52                   	push   rdx
    1b3f:	4c                   	rex.WR
    1b40:	49                   	rex.WB
    1b41:	4d                   	rex.WRB
    1b42:	36 34 5f             	ss xor al,0x5f
    1b45:	54                   	push   rsp
    1b46:	20 31                	and    BYTE PTR [rcx],dh
    1b48:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1b4b:	61                   	(bad)  
    1b4c:	6d                   	ins    DWORD PTR es:[rdi],dx
    1b4d:	64 36 34 5f          	fs ss xor al,0x5f
    1b51:	5f                   	pop    rdi
    1b52:	20 31                	and    BYTE PTR [rcx],dh
    1b54:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1b57:	5f                   	pop    rdi
    1b58:	5f                   	pop    rdi
    1b59:	6d                   	ins    DWORD PTR es:[rdi],dx
    1b5a:	62 73 74 61 74       	(bad)  {k1}
    1b5f:	65 5f                	gs pop rdi
    1b61:	74 5f                	je     1bc2 <.debug_str+0x1bc2>
    1b63:	64 65 66 69 6e 65 64 	fs imul bp,WORD PTR gs:[rsi+0x65],0x2064
    1b6a:	20 
    1b6b:	31 00                	xor    DWORD PTR [rax],eax
    1b6d:	5f                   	pop    rdi
    1b6e:	49                   	rex.WB
    1b6f:	4f 5f                	rex.WRXB pop r15
    1b71:	44                   	rex.R
    1b72:	45                   	rex.RB
    1b73:	4c                   	rex.WR
    1b74:	45 54                	rex.RB push r12
    1b76:	45 5f                	rex.RB pop r15
    1b78:	44                   	rex.R
    1b79:	4f                   	rex.WRXB
    1b7a:	4e 54                	rex.WRX push rsp
    1b7c:	5f                   	pop    rdi
    1b7d:	43                   	rex.XB
    1b7e:	4c                   	rex.WR
    1b7f:	4f 53                	rex.WRXB push r11
    1b81:	45 20 30             	and    BYTE PTR [r8],r14b
    1b84:	78 34                	js     1bba <.debug_str+0x1bba>
    1b86:	30 00                	xor    BYTE PTR [rax],al
    1b88:	5f                   	pop    rdi
    1b89:	5f                   	pop    rdi
    1b8a:	46                   	rex.RX
    1b8b:	4c 54                	rex.WR push rsp
    1b8d:	33 32                	xor    esi,DWORD PTR [rdx]
    1b8f:	5f                   	pop    rdi
    1b90:	44                   	rex.R
    1b91:	45                   	rex.RB
    1b92:	43                   	rex.XB
    1b93:	49                   	rex.WB
    1b94:	4d                   	rex.WRB
    1b95:	41                   	rex.B
    1b96:	4c 5f                	rex.WR pop rdi
    1b98:	44                   	rex.R
    1b99:	49                   	rex.WB
    1b9a:	47 5f                	rex.RXB pop r15
    1b9c:	5f                   	pop    rdi
    1b9d:	20 39                	and    BYTE PTR [rcx],bh
    1b9f:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1ba2:	46                   	rex.RX
    1ba3:	4c 54                	rex.WR push rsp
    1ba5:	31 32                	xor    DWORD PTR [rdx],esi
    1ba7:	38 5f 44             	cmp    BYTE PTR [rdi+0x44],bl
    1baa:	49                   	rex.WB
    1bab:	47 5f                	rex.RXB pop r15
    1bad:	5f                   	pop    rdi
    1bae:	20 33                	and    BYTE PTR [rbx],dh
    1bb0:	33 00                	xor    eax,DWORD PTR [rax]
    1bb2:	5f                   	pop    rdi
    1bb3:	5f                   	pop    rdi
    1bb4:	55                   	push   rbp
    1bb5:	49                   	rex.WB
    1bb6:	4e 54                	rex.WRX push rsp
    1bb8:	31 36                	xor    DWORD PTR [rsi],esi
    1bba:	5f                   	pop    rdi
    1bbb:	54                   	push   rsp
    1bbc:	59                   	pop    rcx
    1bbd:	50                   	push   rax
    1bbe:	45 5f                	rex.RB pop r15
    1bc0:	5f                   	pop    rdi
    1bc1:	20 73 68             	and    BYTE PTR [rbx+0x68],dh
    1bc4:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1bc5:	72 74                	jb     1c3b <.debug_str+0x1c3b>
    1bc7:	20 75 6e             	and    BYTE PTR [rbp+0x6e],dh
    1bca:	73 69                	jae    1c35 <.debug_str+0x1c35>
    1bcc:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    1bce:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    1bd3:	74 00                	je     1bd5 <.debug_str+0x1bd5>
    1bd5:	5f                   	pop    rdi
    1bd6:	5f                   	pop    rdi
    1bd7:	48                   	rex.W
    1bd8:	41 56                	push   r14
    1bda:	45 5f                	rex.RB pop r15
    1bdc:	43                   	rex.XB
    1bdd:	4f                   	rex.WRXB
    1bde:	4c 55                	rex.WR push rbp
    1be0:	4d                   	rex.WRB
    1be1:	4e 20 00             	rex.WRX and BYTE PTR [rax],r8b
    1be4:	5f                   	pop    rdi
    1be5:	4f                   	rex.WRXB
    1be6:	4c                   	rex.WR
    1be7:	44 5f                	rex.R pop rdi
    1be9:	53                   	push   rbx
    1bea:	54                   	push   rsp
    1beb:	44                   	rex.R
    1bec:	49                   	rex.WB
    1bed:	4f 5f                	rex.WRXB pop r15
    1bef:	4d                   	rex.WRB
    1bf0:	41                   	rex.B
    1bf1:	47                   	rex.RXB
    1bf2:	49                   	rex.WB
    1bf3:	43 20 30             	rex.XB and BYTE PTR [r8],sil
    1bf6:	78 46                	js     1c3e <.debug_str+0x1c3e>
    1bf8:	41                   	rex.B
    1bf9:	42                   	rex.X
    1bfa:	43 30 30             	rex.XB xor BYTE PTR [r8],sil
    1bfd:	30 30                	xor    BYTE PTR [rax],dh
    1bff:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    1c02:	4f 53                	rex.WRXB push r11
    1c04:	5f                   	pop    rdi
    1c05:	4e                   	rex.WRX
    1c06:	4f                   	rex.WRXB
    1c07:	43 52                	rex.XB push r10
    1c09:	45                   	rex.RB
    1c0a:	41 54                	push   r12
    1c0c:	45 20 33             	and    BYTE PTR [r11],r14b
    1c0f:	32 00                	xor    al,BYTE PTR [rax]
    1c11:	5f                   	pop    rdi
    1c12:	5f                   	pop    rdi
    1c13:	57                   	push   rdi
    1c14:	43                   	rex.XB
    1c15:	48                   	rex.W
    1c16:	41 52                	push   r10
    1c18:	5f                   	pop    rdi
    1c19:	57                   	push   rdi
    1c1a:	49                   	rex.WB
    1c1b:	44 54                	rex.R push rsp
    1c1d:	48 5f                	rex.W pop rdi
    1c1f:	5f                   	pop    rdi
    1c20:	20 33                	and    BYTE PTR [rbx],dh
    1c22:	32 00                	xor    al,BYTE PTR [rax]
    1c24:	5f                   	pop    rdi
    1c25:	5f                   	pop    rdi
    1c26:	47                   	rex.RXB
    1c27:	43                   	rex.XB
    1c28:	43 5f                	rex.XB pop r15
    1c2a:	41 54                	push   r12
    1c2c:	4f                   	rex.WRXB
    1c2d:	4d                   	rex.WRB
    1c2e:	49                   	rex.WB
    1c2f:	43 5f                	rex.XB pop r15
    1c31:	43                   	rex.XB
    1c32:	48                   	rex.W
    1c33:	41 52                	push   r10
    1c35:	5f                   	pop    rdi
    1c36:	4c                   	rex.WR
    1c37:	4f                   	rex.WRXB
    1c38:	43                   	rex.XB
    1c39:	4b 5f                	rex.WXB pop r15
    1c3b:	46 52                	rex.RX push rdx
    1c3d:	45                   	rex.RB
    1c3e:	45 20 32             	and    BYTE PTR [r10],r14b
    1c41:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    1c44:	4f 5f                	rex.WRXB pop r15
    1c46:	6d                   	ins    DWORD PTR es:[rdi],dx
    1c47:	61                   	(bad)  
    1c48:	72 6b                	jb     1cb5 <.debug_str+0x1cb5>
    1c4a:	65 72 00             	gs jb  1c4d <.debug_str+0x1c4d>
    1c4d:	5f                   	pop    rdi
    1c4e:	5f                   	pop    rdi
    1c4f:	42                   	rex.X
    1c50:	49                   	rex.WB
    1c51:	47                   	rex.RXB
    1c52:	47                   	rex.RXB
    1c53:	45 53                	rex.RB push r11
    1c55:	54                   	push   rsp
    1c56:	5f                   	pop    rdi
    1c57:	41                   	rex.B
    1c58:	4c                   	rex.WR
    1c59:	49                   	rex.WB
    1c5a:	47                   	rex.RXB
    1c5b:	4e                   	rex.WRX
    1c5c:	4d                   	rex.WRB
    1c5d:	45                   	rex.RB
    1c5e:	4e 54                	rex.WRX push rsp
    1c60:	5f                   	pop    rdi
    1c61:	5f                   	pop    rdi
    1c62:	20 31                	and    BYTE PTR [rcx],dh
    1c64:	36 00 5f 5f          	add    BYTE PTR ss:[rdi+0x5f],bl
    1c68:	4c                   	rex.WR
    1c69:	4f                   	rex.WRXB
    1c6a:	4e                   	rex.WRX
    1c6b:	47 5f                	rex.RXB pop r15
    1c6d:	4c                   	rex.WR
    1c6e:	4f                   	rex.WRXB
    1c6f:	4e                   	rex.WRX
    1c70:	47 5f                	rex.RXB pop r15
    1c72:	4d                   	rex.WRB
    1c73:	41 58                	pop    r8
    1c75:	5f                   	pop    rdi
    1c76:	5f                   	pop    rdi
    1c77:	20 30                	and    BYTE PTR [rax],dh
    1c79:	78 37                	js     1cb2 <.debug_str+0x1cb2>
    1c7b:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16
    1c82:	66 66 66 66 66 66 66 
    1c89:	66 4c                	data16 rex.WR
    1c8b:	4c 00 5f 5f          	rex.WR add BYTE PTR [rdi+0x5f],r11b
    1c8f:	55                   	push   rbp
    1c90:	4c                   	rex.WR
    1c91:	4f                   	rex.WRXB
    1c92:	4e                   	rex.WRX
    1c93:	47 33 32             	rex.RXB xor r14d,DWORD PTR [r10]
    1c96:	5f                   	pop    rdi
    1c97:	54                   	push   rsp
    1c98:	59                   	pop    rcx
    1c99:	50                   	push   rax
    1c9a:	45 20 75 6e          	and    BYTE PTR [r13+0x6e],r14b
    1c9e:	73 69                	jae    1d09 <.debug_str+0x1d09>
    1ca0:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    1ca2:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    1ca7:	74 00                	je     1ca9 <.debug_str+0x1ca9>
    1ca9:	5f                   	pop    rdi
    1caa:	5f                   	pop    rdi
    1cab:	55                   	push   rbp
    1cac:	49                   	rex.WB
    1cad:	4e 54                	rex.WRX push rsp
    1caf:	5f                   	pop    rdi
    1cb0:	4c                   	rex.WR
    1cb1:	45                   	rex.RB
    1cb2:	41 53                	push   r11
    1cb4:	54                   	push   rsp
    1cb5:	31 36                	xor    DWORD PTR [rsi],esi
    1cb7:	5f                   	pop    rdi
    1cb8:	54                   	push   rsp
    1cb9:	59                   	pop    rcx
    1cba:	50                   	push   rax
    1cbb:	45 5f                	rex.RB pop r15
    1cbd:	5f                   	pop    rdi
    1cbe:	20 73 68             	and    BYTE PTR [rbx+0x68],dh
    1cc1:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1cc2:	72 74                	jb     1d38 <.debug_str+0x1d38>
    1cc4:	20 75 6e             	and    BYTE PTR [rbp+0x6e],dh
    1cc7:	73 69                	jae    1d32 <.debug_str+0x1d32>
    1cc9:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    1ccb:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    1cd0:	74 00                	je     1cd2 <.debug_str+0x1cd2>
    1cd2:	5f                   	pop    rdi
    1cd3:	5f                   	pop    rdi
    1cd4:	46                   	rex.RX
    1cd5:	4c 54                	rex.WR push rsp
    1cd7:	5f                   	pop    rdi
    1cd8:	4d                   	rex.WRB
    1cd9:	41 58                	pop    r8
    1cdb:	5f                   	pop    rdi
    1cdc:	31 30                	xor    DWORD PTR [rax],esi
    1cde:	5f                   	pop    rdi
    1cdf:	45 58                	rex.RB pop r8
    1ce1:	50                   	push   rax
    1ce2:	5f                   	pop    rdi
    1ce3:	5f                   	pop    rdi
    1ce4:	20 33                	and    BYTE PTR [rbx],dh
    1ce6:	38 00                	cmp    BYTE PTR [rax],al
    1ce8:	5f                   	pop    rdi
    1ce9:	49                   	rex.WB
    1cea:	4f 5f                	rex.WRXB pop r15
    1cec:	53                   	push   rbx
    1ced:	4b                   	rex.WXB
    1cee:	49 50                	rex.WB push r8
    1cf0:	57                   	push   rdi
    1cf1:	53                   	push   rbx
    1cf2:	20 30                	and    BYTE PTR [rax],dh
    1cf4:	31 00                	xor    DWORD PTR [rax],eax
    1cf6:	5f                   	pop    rdi
    1cf7:	5f                   	pop    rdi
    1cf8:	46                   	rex.RX
    1cf9:	4c 54                	rex.WR push rsp
    1cfb:	33 32                	xor    esi,DWORD PTR [rdx]
    1cfd:	58                   	pop    rax
    1cfe:	5f                   	pop    rdi
    1cff:	45 50                	rex.RB push r8
    1d01:	53                   	push   rbx
    1d02:	49                   	rex.WB
    1d03:	4c                   	rex.WR
    1d04:	4f                   	rex.WRXB
    1d05:	4e 5f                	rex.WRX pop rdi
    1d07:	5f                   	pop    rdi
    1d08:	20 32                	and    BYTE PTR [rdx],dh
    1d0a:	2e 32 32             	xor    dh,BYTE PTR cs:[rdx]
    1d0d:	30 34 34             	xor    BYTE PTR [rsp+rsi*1],dh
    1d10:	36 30 34 39          	xor    BYTE PTR ss:[rcx+rdi*1],dh
    1d14:	32 35 30 33 31 33    	xor    dh,BYTE PTR [rip+0x33313330]        # 3331504a <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x3331504a>
    1d1a:	30 38                	xor    BYTE PTR [rax],bh
    1d1c:	30 38                	xor    BYTE PTR [rax],bh
    1d1e:	34 37                	xor    al,0x37
    1d20:	32 36                	xor    dh,BYTE PTR [rsi]
    1d22:	33 33                	xor    esi,DWORD PTR [rbx]
    1d24:	33 36                	xor    esi,DWORD PTR [rsi]
    1d26:	31 38                	xor    DWORD PTR [rax],edi
    1d28:	31 36                	xor    DWORD PTR [rsi],esi
    1d2a:	34 30                	xor    al,0x30
    1d2c:	36 32 65 2d          	xor    ah,BYTE PTR ss:[rbp+0x2d]
    1d30:	31 36                	xor    DWORD PTR [rsi],esi
    1d32:	46 33 32             	rex.RX xor r14d,DWORD PTR [rdx]
    1d35:	78 00                	js     1d37 <.debug_str+0x1d37>
    1d37:	4e 55                	rex.WRX push rbp
    1d39:	4c                   	rex.WR
    1d3a:	4c 20 28             	rex.WR and BYTE PTR [rax],r13b
    1d3d:	28 76 6f             	sub    BYTE PTR [rsi+0x6f],dh
    1d40:	69 64 20 2a 29 30 29 	imul   esp,DWORD PTR [rax+riz*1+0x2a],0x293029
    1d47:	00 
    1d48:	61                   	(bad)  
    1d49:	72 67                	jb     1db2 <.debug_str+0x1db2>
    1d4b:	76 00                	jbe    1d4d <.debug_str+0x1d4d>
    1d4d:	5f                   	pop    rdi
    1d4e:	5f                   	pop    rdi
    1d4f:	55                   	push   rbp
    1d50:	53                   	push   rbx
    1d51:	45 5f                	rex.RB pop r15
    1d53:	50                   	push   rax
    1d54:	4f 53                	rex.WRXB push r11
    1d56:	49 58                	rex.WB pop r8
    1d58:	5f                   	pop    rdi
    1d59:	49                   	rex.WB
    1d5a:	4d 50                	rex.WRB push r8
    1d5c:	4c                   	rex.WR
    1d5d:	49                   	rex.WB
    1d5e:	43                   	rex.XB
    1d5f:	49 54                	rex.WB push r12
    1d61:	4c 59                	rex.WR pop rcx
    1d63:	20 31                	and    BYTE PTR [rcx],dh
    1d65:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    1d68:	4f 5f                	rex.WRXB pop r15
    1d6a:	66 65 6f             	outs   dx,WORD PTR gs:[rsi]
    1d6d:	66 5f                	pop    di
    1d6f:	75 6e                	jne    1ddf <.debug_str+0x1ddf>
    1d71:	6c                   	ins    BYTE PTR es:[rdi],dx
    1d72:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1d73:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
    1d76:	64 28 5f 5f          	sub    BYTE PTR fs:[rdi+0x5f],bl
    1d7a:	66 70 29             	data16 jo 1da6 <.debug_str+0x1da6>
    1d7d:	20 28                	and    BYTE PTR [rax],ch
    1d7f:	28 28                	sub    BYTE PTR [rax],ch
    1d81:	5f                   	pop    rdi
    1d82:	5f                   	pop    rdi
    1d83:	66 70 29             	data16 jo 1daf <.debug_str+0x1daf>
    1d86:	2d 3e 5f 66 6c       	sub    eax,0x6c665f3e
    1d8b:	61                   	(bad)  
    1d8c:	67 73 20             	addr32 jae 1daf <.debug_str+0x1daf>
    1d8f:	26 20 5f 49          	and    BYTE PTR es:[rdi+0x49],bl
    1d93:	4f 5f                	rex.WRXB pop r15
    1d95:	45                   	rex.RB
    1d96:	4f                   	rex.WRXB
    1d97:	46 5f                	rex.RX pop rdi
    1d99:	53                   	push   rbx
    1d9a:	45                   	rex.RB
    1d9b:	45                   	rex.RB
    1d9c:	4e 29 20             	rex.WRX sub QWORD PTR [rax],r12
    1d9f:	21 3d 20 30 29 00    	and    DWORD PTR [rip+0x293020],edi        # 294dc5 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x294dc5>
    1da5:	5f                   	pop    rdi
    1da6:	5f                   	pop    rdi
    1da7:	4e                   	rex.WRX
    1da8:	4f 5f                	rex.WRXB pop r15
    1daa:	49                   	rex.WB
    1dab:	4e                   	rex.WRX
    1dac:	4c                   	rex.WR
    1dad:	49                   	rex.WB
    1dae:	4e                   	rex.WRX
    1daf:	45 5f                	rex.RB pop r15
    1db1:	5f                   	pop    rdi
    1db2:	20 31                	and    BYTE PTR [rcx],dh
    1db4:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    1db7:	4f 5f                	rex.WRXB pop r15
    1db9:	73 74                	jae    1e2f <.debug_str+0x1e2f>
    1dbb:	64 65 72 72          	fs gs jb 1e31 <.debug_str+0x1e31>
    1dbf:	20 28                	and    BYTE PTR [rax],ch
    1dc1:	28 5f 49             	sub    BYTE PTR [rdi+0x49],bl
    1dc4:	4f 5f                	rex.WRXB pop r15
    1dc6:	46                   	rex.RX
    1dc7:	49                   	rex.WB
    1dc8:	4c                   	rex.WR
    1dc9:	45 2a 29             	sub    r13b,BYTE PTR [r9]
    1dcc:	28 26                	sub    BYTE PTR [rsi],ah
    1dce:	5f                   	pop    rdi
    1dcf:	49                   	rex.WB
    1dd0:	4f 5f                	rex.WRXB pop r15
    1dd2:	32 5f 31             	xor    bl,BYTE PTR [rdi+0x31]
    1dd5:	5f                   	pop    rdi
    1dd6:	73 74                	jae    1e4c <.debug_str+0x1e4c>
    1dd8:	64 65 72 72          	fs gs jb 1e4e <.debug_str+0x1e4e>
    1ddc:	5f                   	pop    rdi
    1ddd:	29 29                	sub    DWORD PTR [rcx],ebp
    1ddf:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1de2:	76 61                	jbe    1e45 <.debug_str+0x1e45>
    1de4:	5f                   	pop    rdi
    1de5:	61                   	(bad)  
    1de6:	72 67                	jb     1e4f <.debug_str+0x1e4f>
    1de8:	5f                   	pop    rdi
    1de9:	70 61                	jo     1e4c <.debug_str+0x1e4c>
    1deb:	63 6b 28             	movsxd ebp,DWORD PTR [rbx+0x28]
    1dee:	29 20                	sub    DWORD PTR [rax],esp
    1df0:	5f                   	pop    rdi
    1df1:	5f                   	pop    rdi
    1df2:	62                   	(bad)  
    1df3:	75 69                	jne    1e5e <.debug_str+0x1e5e>
    1df5:	6c                   	ins    BYTE PTR es:[rdi],dx
    1df6:	74 69                	je     1e61 <.debug_str+0x1e61>
    1df8:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1df9:	5f                   	pop    rdi
    1dfa:	76 61                	jbe    1e5d <.debug_str+0x1e5d>
    1dfc:	5f                   	pop    rdi
    1dfd:	61                   	(bad)  
    1dfe:	72 67                	jb     1e67 <.debug_str+0x1e67>
    1e00:	5f                   	pop    rdi
    1e01:	70 61                	jo     1e64 <.debug_str+0x1e64>
    1e03:	63 6b 20             	movsxd ebp,DWORD PTR [rbx+0x20]
    1e06:	28 29                	sub    BYTE PTR [rcx],ch
    1e08:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1e0b:	46                   	rex.RX
    1e0c:	4c 54                	rex.WR push rsp
    1e0e:	5f                   	pop    rdi
    1e0f:	4d                   	rex.WRB
    1e10:	41                   	rex.B
    1e11:	4e 54                	rex.WRX push rsp
    1e13:	5f                   	pop    rdi
    1e14:	44                   	rex.R
    1e15:	49                   	rex.WB
    1e16:	47 5f                	rex.RXB pop r15
    1e18:	5f                   	pop    rdi
    1e19:	20 32                	and    BYTE PTR [rdx],dh
    1e1b:	34 00                	xor    al,0x0
    1e1d:	5f                   	pop    rdi
    1e1e:	5f                   	pop    rdi
    1e1f:	44                   	rex.R
    1e20:	41                   	rex.B
    1e21:	44                   	rex.R
    1e22:	44 52                	rex.R push rdx
    1e24:	5f                   	pop    rdi
    1e25:	54                   	push   rsp
    1e26:	5f                   	pop    rdi
    1e27:	54                   	push   rsp
    1e28:	59                   	pop    rcx
    1e29:	50                   	push   rax
    1e2a:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    1e2e:	53                   	push   rbx
    1e2f:	33 32                	xor    esi,DWORD PTR [rdx]
    1e31:	5f                   	pop    rdi
    1e32:	54                   	push   rsp
    1e33:	59                   	pop    rcx
    1e34:	50                   	push   rax
    1e35:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    1e39:	46                   	rex.RX
    1e3a:	4c 54                	rex.WR push rsp
    1e3c:	36 34 5f             	ss xor al,0x5f
    1e3f:	44                   	rex.R
    1e40:	45                   	rex.RB
    1e41:	43                   	rex.XB
    1e42:	49                   	rex.WB
    1e43:	4d                   	rex.WRB
    1e44:	41                   	rex.B
    1e45:	4c 5f                	rex.WR pop rdi
    1e47:	44                   	rex.R
    1e48:	49                   	rex.WB
    1e49:	47 5f                	rex.RXB pop r15
    1e4b:	5f                   	pop    rdi
    1e4c:	20 31                	and    BYTE PTR [rcx],dh
    1e4e:	37                   	(bad)  
    1e4f:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1e52:	47                   	rex.RXB
    1e53:	43                   	rex.XB
    1e54:	43 5f                	rex.XB pop r15
    1e56:	48                   	rex.W
    1e57:	41 56                	push   r14
    1e59:	45 5f                	rex.RB pop r15
    1e5b:	53                   	push   rbx
    1e5c:	59                   	pop    rcx
    1e5d:	4e                   	rex.WRX
    1e5e:	43 5f                	rex.XB pop r15
    1e60:	43                   	rex.XB
    1e61:	4f                   	rex.WRXB
    1e62:	4d 50                	rex.WRB push r8
    1e64:	41 52                	push   r10
    1e66:	45 5f                	rex.RB pop r15
    1e68:	41                   	rex.B
    1e69:	4e                   	rex.WRX
    1e6a:	44 5f                	rex.R pop rdi
    1e6c:	53                   	push   rbx
    1e6d:	57                   	push   rdi
    1e6e:	41 50                	push   r8
    1e70:	5f                   	pop    rdi
    1e71:	34 20                	xor    al,0x20
    1e73:	31 00                	xor    DWORD PTR [rax],eax
    1e75:	5f                   	pop    rdi
    1e76:	5f                   	pop    rdi
    1e77:	46                   	rex.RX
    1e78:	4c 54                	rex.WR push rsp
    1e7a:	33 32                	xor    esi,DWORD PTR [rdx]
    1e7c:	5f                   	pop    rdi
    1e7d:	4d                   	rex.WRB
    1e7e:	49                   	rex.WB
    1e7f:	4e 5f                	rex.WRX pop rdi
    1e81:	45 58                	rex.RB pop r8
    1e83:	50                   	push   rax
    1e84:	5f                   	pop    rdi
    1e85:	5f                   	pop    rdi
    1e86:	20 28                	and    BYTE PTR [rax],ch
    1e88:	2d 31 32 35 29       	sub    eax,0x29353231
    1e8d:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1e90:	53                   	push   rbx
    1e91:	49 5a                	rex.WB pop r10
    1e93:	45 5f                	rex.RB pop r15
    1e95:	54                   	push   rsp
    1e96:	59                   	pop    rcx
    1e97:	50                   	push   rax
    1e98:	45 5f                	rex.RB pop r15
    1e9a:	5f                   	pop    rdi
    1e9b:	20 6c 6f 6e          	and    BYTE PTR [rdi+rbp*2+0x6e],ch
    1e9f:	67 20 75 6e          	and    BYTE PTR [ebp+0x6e],dh
    1ea3:	73 69                	jae    1f0e <.debug_str+0x1f0e>
    1ea5:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    1ea7:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    1eac:	74 00                	je     1eae <.debug_str+0x1eae>
    1eae:	5f                   	pop    rdi
    1eaf:	5f                   	pop    rdi
    1eb0:	4c                   	rex.WR
    1eb1:	44                   	rex.R
    1eb2:	42                   	rex.X
    1eb3:	4c 5f                	rex.WR pop rdi
    1eb5:	4d                   	rex.WRB
    1eb6:	41 58                	pop    r8
    1eb8:	5f                   	pop    rdi
    1eb9:	5f                   	pop    rdi
    1eba:	20 31                	and    BYTE PTR [rcx],dh
    1ebc:	2e 31 38             	xor    DWORD PTR cs:[rax],edi
    1ebf:	39 37                	cmp    DWORD PTR [rdi],esi
    1ec1:	33 31                	xor    esi,DWORD PTR [rcx]
    1ec3:	34 39                	xor    al,0x39
    1ec5:	35 33 35 37 32       	xor    eax,0x32373533
    1eca:	33 31                	xor    esi,DWORD PTR [rcx]
    1ecc:	37                   	(bad)  
    1ecd:	36 35 30 32 31 32    	ss xor eax,0x32313230
    1ed3:	36 33 38             	xor    edi,DWORD PTR ss:[rax]
    1ed6:	35 33 30 33 30       	xor    eax,0x30333033
    1edb:	39 37                	cmp    DWORD PTR [rdi],esi
    1edd:	30 32                	xor    BYTE PTR [rdx],dh
    1edf:	31 65 2b             	xor    DWORD PTR [rbp+0x2b],esp
    1ee2:	34 39                	xor    al,0x39
    1ee4:	33 32                	xor    esi,DWORD PTR [rdx]
    1ee6:	4c 00 5f 5f          	rex.WR add BYTE PTR [rdi+0x5f],r11b
    1eea:	44                   	rex.R
    1eeb:	45                   	rex.RB
    1eec:	43 5f                	rex.XB pop r15
    1eee:	45 56                	rex.RB push r14
    1ef0:	41                   	rex.B
    1ef1:	4c 5f                	rex.WR pop rdi
    1ef3:	4d                   	rex.WRB
    1ef4:	45 54                	rex.RB push r12
    1ef6:	48                   	rex.W
    1ef7:	4f                   	rex.WRXB
    1ef8:	44 5f                	rex.R pop rdi
    1efa:	5f                   	pop    rdi
    1efb:	20 32                	and    BYTE PTR [rdx],dh
    1efd:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1f00:	46                   	rex.RX
    1f01:	4c 54                	rex.WR push rsp
    1f03:	5f                   	pop    rdi
    1f04:	4d                   	rex.WRB
    1f05:	41 58                	pop    r8
    1f07:	5f                   	pop    rdi
    1f08:	5f                   	pop    rdi
    1f09:	20 33                	and    BYTE PTR [rbx],dh
    1f0b:	2e 34 30             	cs xor al,0x30
    1f0e:	32 38                	xor    bh,BYTE PTR [rax]
    1f10:	32 33                	xor    dh,BYTE PTR [rbx]
    1f12:	34 36                	xor    al,0x36
    1f14:	36 33 38             	xor    edi,DWORD PTR ss:[rax]
    1f17:	35 32 38 38 35       	xor    eax,0x35383832
    1f1c:	39 38                	cmp    DWORD PTR [rax],edi
    1f1e:	31 31                	xor    DWORD PTR [rcx],esi
    1f20:	37                   	(bad)  
    1f21:	30 34 31             	xor    BYTE PTR [rcx+rsi*1],dh
    1f24:	38 33                	cmp    BYTE PTR [rbx],dh
    1f26:	34 38                	xor    al,0x38
    1f28:	34 35                	xor    al,0x35
    1f2a:	31 36                	xor    DWORD PTR [rsi],esi
    1f2c:	39 32                	cmp    DWORD PTR [rdx],esi
    1f2e:	35 65 2b 33 38       	xor    eax,0x38332b65
    1f33:	46 00 5f 49          	rex.RX add BYTE PTR [rdi+0x49],r11b
    1f37:	4f 5f                	rex.WRXB pop r15
    1f39:	75 69                	jne    1fa4 <.debug_str+0x1fa4>
    1f3b:	64 5f                	fs pop rdi
    1f3d:	74 20                	je     1f5f <.debug_str+0x1f5f>
    1f3f:	5f                   	pop    rdi
    1f40:	5f                   	pop    rdi
    1f41:	75 69                	jne    1fac <.debug_str+0x1fac>
    1f43:	64 5f                	fs pop rdi
    1f45:	74 00                	je     1f47 <.debug_str+0x1f47>
    1f47:	5f                   	pop    rdi
    1f48:	5f                   	pop    rdi
    1f49:	44                   	rex.R
    1f4a:	42                   	rex.X
    1f4b:	4c 5f                	rex.WR pop rdi
    1f4d:	4d                   	rex.WRB
    1f4e:	49                   	rex.WB
    1f4f:	4e 5f                	rex.WRX pop rdi
    1f51:	31 30                	xor    DWORD PTR [rax],esi
    1f53:	5f                   	pop    rdi
    1f54:	45 58                	rex.RB pop r8
    1f56:	50                   	push   rax
    1f57:	5f                   	pop    rdi
    1f58:	5f                   	pop    rdi
    1f59:	20 28                	and    BYTE PTR [rax],ch
    1f5b:	2d 33 30 37 29       	sub    eax,0x29373033
    1f60:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    1f63:	4f 5f                	rex.WRXB pop r15
    1f65:	32 5f 31             	xor    bl,BYTE PTR [rdi+0x31]
    1f68:	5f                   	pop    rdi
    1f69:	73 74                	jae    1fdf <.debug_str+0x1fdf>
    1f6b:	64 65 72 72          	fs gs jb 1fe1 <.debug_str+0x1fe1>
    1f6f:	5f                   	pop    rdi
    1f70:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1f73:	55                   	push   rbp
    1f74:	49                   	rex.WB
    1f75:	4e 54                	rex.WRX push rsp
    1f77:	33 32                	xor    esi,DWORD PTR [rdx]
    1f79:	5f                   	pop    rdi
    1f7a:	4d                   	rex.WRB
    1f7b:	41 58                	pop    r8
    1f7d:	5f                   	pop    rdi
    1f7e:	5f                   	pop    rdi
    1f7f:	20 30                	and    BYTE PTR [rax],dh
    1f81:	78 66                	js     1fe9 <.debug_str+0x1fe9>
    1f83:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 push bp
    1f8a:	55 
    1f8b:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    1f8e:	4f 5f                	rex.WRXB pop r15
    1f90:	4f                   	rex.WRXB
    1f91:	43 54                	rex.XB push r12
    1f93:	20 30                	and    BYTE PTR [rax],dh
    1f95:	34 30                	xor    al,0x30
    1f97:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1f9a:	46                   	rex.RX
    1f9b:	4c 54                	rex.WR push rsp
    1f9d:	31 32                	xor    DWORD PTR [rdx],esi
    1f9f:	38 5f 48             	cmp    BYTE PTR [rdi+0x48],bl
    1fa2:	41 53                	push   r11
    1fa4:	5f                   	pop    rdi
    1fa5:	49                   	rex.WB
    1fa6:	4e                   	rex.WRX
    1fa7:	46                   	rex.RX
    1fa8:	49                   	rex.WB
    1fa9:	4e                   	rex.WRX
    1faa:	49 54                	rex.WB push r12
    1fac:	59                   	pop    rcx
    1fad:	5f                   	pop    rdi
    1fae:	5f                   	pop    rdi
    1faf:	20 31                	and    BYTE PTR [rcx],dh
    1fb1:	00 5f 6d             	add    BYTE PTR [rdi+0x6d],bl
    1fb4:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1fb5:	64 65 00 5f 49       	fs add BYTE PTR gs:[rdi+0x49],bl
    1fba:	4f 5f                	rex.WRXB pop r15
    1fbc:	48                   	rex.W
    1fbd:	41 56                	push   r14
    1fbf:	45 5f                	rex.RB pop r15
    1fc1:	53                   	push   rbx
    1fc2:	54                   	push   rsp
    1fc3:	5f                   	pop    rdi
    1fc4:	42                   	rex.X
    1fc5:	4c                   	rex.WR
    1fc6:	4b 53                	rex.WXB push r11
    1fc8:	49 5a                	rex.WB pop r10
    1fca:	45 20 5f 47          	and    BYTE PTR [r15+0x47],r11b
    1fce:	5f                   	pop    rdi
    1fcf:	48                   	rex.W
    1fd0:	41 56                	push   r14
    1fd2:	45 5f                	rex.RB pop r15
    1fd4:	53                   	push   rbx
    1fd5:	54                   	push   rsp
    1fd6:	5f                   	pop    rdi
    1fd7:	42                   	rex.X
    1fd8:	4c                   	rex.WR
    1fd9:	4b 53                	rex.WXB push r11
    1fdb:	49 5a                	rex.WB pop r10
    1fdd:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    1fe1:	46                   	rex.RX
    1fe2:	4c 54                	rex.WR push rsp
    1fe4:	36 34 5f             	ss xor al,0x5f
    1fe7:	48                   	rex.W
    1fe8:	41 53                	push   r11
    1fea:	5f                   	pop    rdi
    1feb:	44                   	rex.R
    1fec:	45                   	rex.RB
    1fed:	4e                   	rex.WRX
    1fee:	4f 52                	rex.WRXB push r10
    1ff0:	4d 5f                	rex.WRB pop r15
    1ff2:	5f                   	pop    rdi
    1ff3:	20 31                	and    BYTE PTR [rcx],dh
    1ff5:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1ff8:	46                   	rex.RX
    1ff9:	4c 54                	rex.WR push rsp
    1ffb:	5f                   	pop    rdi
    1ffc:	45 56                	rex.RB push r14
    1ffe:	41                   	rex.B
    1fff:	4c 5f                	rex.WR pop rdi
    2001:	4d                   	rex.WRB
    2002:	45 54                	rex.RB push r12
    2004:	48                   	rex.W
    2005:	4f                   	rex.WRXB
    2006:	44 5f                	rex.R pop rdi
    2008:	5f                   	pop    rdi
    2009:	20 30                	and    BYTE PTR [rax],dh
    200b:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    200e:	46 53                	rex.RX push rbx
    2010:	42                   	rex.X
    2011:	4c                   	rex.WR
    2012:	4b                   	rex.WXB
    2013:	43                   	rex.XB
    2014:	4e 54                	rex.WRX push rsp
    2016:	5f                   	pop    rdi
    2017:	54                   	push   rsp
    2018:	5f                   	pop    rdi
    2019:	54                   	push   rsp
    201a:	59                   	pop    rcx
    201b:	50                   	push   rax
    201c:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    2020:	53                   	push   rbx
    2021:	59                   	pop    rcx
    2022:	53                   	push   rbx
    2023:	43                   	rex.XB
    2024:	41                   	rex.B
    2025:	4c                   	rex.WR
    2026:	4c 5f                	rex.WR pop rdi
    2028:	55                   	push   rbp
    2029:	4c                   	rex.WR
    202a:	4f                   	rex.WRXB
    202b:	4e                   	rex.WRX
    202c:	47 5f                	rex.RXB pop r15
    202e:	54                   	push   rsp
    202f:	59                   	pop    rcx
    2030:	50                   	push   rax
    2031:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    2035:	46                   	rex.RX
    2036:	4c 54                	rex.WR push rsp
    2038:	33 32                	xor    esi,DWORD PTR [rdx]
    203a:	58                   	pop    rax
    203b:	5f                   	pop    rdi
    203c:	48                   	rex.W
    203d:	41 53                	push   r11
    203f:	5f                   	pop    rdi
    2040:	44                   	rex.R
    2041:	45                   	rex.RB
    2042:	4e                   	rex.WRX
    2043:	4f 52                	rex.WRXB push r10
    2045:	4d 5f                	rex.WRB pop r15
    2047:	5f                   	pop    rdi
    2048:	20 31                	and    BYTE PTR [rcx],dh
    204a:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    204d:	78 38                	js     2087 <.debug_str+0x2087>
    204f:	36 5f                	ss pop rdi
    2051:	36 34 5f             	ss xor al,0x5f
    2054:	5f                   	pop    rdi
    2055:	20 31                	and    BYTE PTR [rcx],dh
    2057:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    205a:	46                   	rex.RX
    205b:	4c 54                	rex.WR push rsp
    205d:	36 34 58             	ss xor al,0x58
    2060:	5f                   	pop    rdi
    2061:	4d                   	rex.WRB
    2062:	41 58                	pop    r8
    2064:	5f                   	pop    rdi
    2065:	45 58                	rex.RB pop r8
    2067:	50                   	push   rax
    2068:	5f                   	pop    rdi
    2069:	5f                   	pop    rdi
    206a:	20 31                	and    BYTE PTR [rcx],dh
    206c:	36 33 38             	xor    edi,DWORD PTR ss:[rax]
    206f:	34 00                	xor    al,0x0
    2071:	5f                   	pop    rdi
    2072:	5f                   	pop    rdi
    2073:	56                   	push   rsi
    2074:	45 52                	rex.RB push r10
    2076:	53                   	push   rbx
    2077:	49                   	rex.WB
    2078:	4f                   	rex.WRXB
    2079:	4e 5f                	rex.WRX pop rdi
    207b:	5f                   	pop    rdi
    207c:	20 22                	and    BYTE PTR [rdx],ah
    207e:	37                   	(bad)  
    207f:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
    2082:	30 22                	xor    BYTE PTR [rdx],ah
    2084:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    2087:	4f 5f                	rex.WRXB pop r15
    2089:	4c                   	rex.WR
    208a:	49                   	rex.WB
    208b:	4e                   	rex.WRX
    208c:	4b                   	rex.WXB
    208d:	45                   	rex.RB
    208e:	44 20 30             	and    BYTE PTR [rax],r14b
    2091:	78 38                	js     20cb <.debug_str+0x20cb>
    2093:	30 00                	xor    BYTE PTR [rax],al
    2095:	5f                   	pop    rdi
    2096:	5f                   	pop    rdi
    2097:	52                   	push   rdx
    2098:	45                   	rex.RB
    2099:	44                   	rex.R
    209a:	49 52                	rex.WB push r10
    209c:	45                   	rex.RB
    209d:	43 54                	rex.XB push r12
    209f:	28 6e 61             	sub    BYTE PTR [rsi+0x61],ch
    20a2:	6d                   	ins    DWORD PTR es:[rdi],dx
    20a3:	65 2c 70             	gs sub al,0x70
    20a6:	72 6f                	jb     2117 <.debug_str+0x2117>
    20a8:	74 6f                	je     2119 <.debug_str+0x2119>
    20aa:	2c 61                	sub    al,0x61
    20ac:	6c                   	ins    BYTE PTR es:[rdi],dx
    20ad:	69 61 73 29 20 6e 61 	imul   esp,DWORD PTR [rcx+0x73],0x616e2029
    20b4:	6d                   	ins    DWORD PTR es:[rdi],dx
    20b5:	65 20 70 72          	and    BYTE PTR gs:[rax+0x72],dh
    20b9:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    20ba:	74 6f                	je     212b <.debug_str+0x212b>
    20bc:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    20bf:	61                   	(bad)  
    20c0:	73 6d                	jae    212f <.debug_str+0x212f>
    20c2:	5f                   	pop    rdi
    20c3:	5f                   	pop    rdi
    20c4:	20 28                	and    BYTE PTR [rax],ch
    20c6:	5f                   	pop    rdi
    20c7:	5f                   	pop    rdi
    20c8:	41 53                	push   r11
    20ca:	4d                   	rex.WRB
    20cb:	4e                   	rex.WRX
    20cc:	41                   	rex.B
    20cd:	4d                   	rex.WRB
    20ce:	45 20 28             	and    BYTE PTR [r8],r13b
    20d1:	23 61 6c             	and    esp,DWORD PTR [rcx+0x6c]
    20d4:	69 61 73 29 29 00 5f 	imul   esp,DWORD PTR [rcx+0x73],0x5f002929
    20db:	5f                   	pop    rdi
    20dc:	46 53                	rex.RX push rbx
    20de:	42                   	rex.X
    20df:	4c                   	rex.WR
    20e0:	4b                   	rex.WXB
    20e1:	43                   	rex.XB
    20e2:	4e 54                	rex.WRX push rsp
    20e4:	36 34 5f             	ss xor al,0x5f
    20e7:	54                   	push   rsp
    20e8:	5f                   	pop    rdi
    20e9:	54                   	push   rsp
    20ea:	59                   	pop    rcx
    20eb:	50                   	push   rax
    20ec:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    20f0:	55                   	push   rbp
    20f1:	51                   	push   rcx
    20f2:	55                   	push   rbp
    20f3:	41                   	rex.B
    20f4:	44 5f                	rex.R pop rdi
    20f6:	54                   	push   rsp
    20f7:	59                   	pop    rcx
    20f8:	50                   	push   rax
    20f9:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    20fd:	46                   	rex.RX
    20fe:	4c 54                	rex.WR push rsp
    2100:	36 34 58             	ss xor al,0x58
    2103:	5f                   	pop    rdi
    2104:	4d                   	rex.WRB
    2105:	41 58                	pop    r8
    2107:	5f                   	pop    rdi
    2108:	5f                   	pop    rdi
    2109:	20 31                	and    BYTE PTR [rcx],dh
    210b:	2e 31 38             	xor    DWORD PTR cs:[rax],edi
    210e:	39 37                	cmp    DWORD PTR [rdi],esi
    2110:	33 31                	xor    esi,DWORD PTR [rcx]
    2112:	34 39                	xor    al,0x39
    2114:	35 33 35 37 32       	xor    eax,0x32373533
    2119:	33 31                	xor    esi,DWORD PTR [rcx]
    211b:	37                   	(bad)  
    211c:	36 35 30 32 31 32    	ss xor eax,0x32313230
    2122:	36 33 38             	xor    edi,DWORD PTR ss:[rax]
    2125:	35 33 30 33 30       	xor    eax,0x30333033
    212a:	39 37                	cmp    DWORD PTR [rdi],esi
    212c:	30 32                	xor    BYTE PTR [rdx],dh
    212e:	31 65 2b             	xor    DWORD PTR [rbp+0x2b],esp
    2131:	34 39                	xor    al,0x39
    2133:	33 32                	xor    esi,DWORD PTR [rdx]
    2135:	46                   	rex.RX
    2136:	36 34 78             	ss xor al,0x78
    2139:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    213c:	4f 5f                	rex.WRXB pop r15
    213e:	72 65                	jb     21a5 <.debug_str+0x21a5>
    2140:	61                   	(bad)  
    2141:	64 5f                	fs pop rdi
    2143:	70 74                	jo     21b9 <.debug_str+0x21b9>
    2145:	72 00                	jb     2147 <.debug_str+0x2147>
    2147:	5f                   	pop    rdi
    2148:	5f                   	pop    rdi
    2149:	53                   	push   rbx
    214a:	49 5a                	rex.WB pop r10
    214c:	45 5f                	rex.RB pop r15
    214e:	54                   	push   rsp
    214f:	20 00                	and    BYTE PTR [rax],al
    2151:	5f                   	pop    rdi
    2152:	5f                   	pop    rdi
    2153:	49                   	rex.WB
    2154:	44 5f                	rex.R pop rdi
    2156:	54                   	push   rsp
    2157:	5f                   	pop    rdi
    2158:	54                   	push   rsp
    2159:	59                   	pop    rcx
    215a:	50                   	push   rax
    215b:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    215f:	55                   	push   rbp
    2160:	33 32                	xor    esi,DWORD PTR [rdx]
    2162:	5f                   	pop    rdi
    2163:	54                   	push   rsp
    2164:	59                   	pop    rcx
    2165:	50                   	push   rax
    2166:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    216a:	53                   	push   rbx
    216b:	49 5a                	rex.WB pop r10
    216d:	45 5f                	rex.RB pop r15
    216f:	54                   	push   rsp
    2170:	5f                   	pop    rdi
    2171:	5f                   	pop    rdi
    2172:	20 00                	and    BYTE PTR [rax],al
    2174:	5f                   	pop    rdi
    2175:	49                   	rex.WB
    2176:	4f 5f                	rex.WRXB pop r15
    2178:	66 75 6e             	data16 jne 21e9 <.debug_str+0x21e9>
    217b:	6c                   	ins    BYTE PTR es:[rdi],dx
    217c:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    217d:	63 6b 66             	movsxd ebp,DWORD PTR [rbx+0x66]
    2180:	69 6c 65 28 5f 66 70 	imul   ebp,DWORD PTR [rbp+riz*2+0x28],0x2970665f
    2187:	29 
    2188:	20 00                	and    BYTE PTR [rax],al
    218a:	5f                   	pop    rdi
    218b:	5f                   	pop    rdi
    218c:	4b                   	rex.WXB
    218d:	45 59                	rex.RB pop r9
    218f:	5f                   	pop    rdi
    2190:	54                   	push   rsp
    2191:	5f                   	pop    rdi
    2192:	54                   	push   rsp
    2193:	59                   	pop    rcx
    2194:	50                   	push   rax
    2195:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    2199:	53                   	push   rbx
    219a:	33 32                	xor    esi,DWORD PTR [rdx]
    219c:	5f                   	pop    rdi
    219d:	54                   	push   rsp
    219e:	59                   	pop    rcx
    219f:	50                   	push   rax
    21a0:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    21a4:	49                   	rex.WB
    21a5:	4e 54                	rex.WRX push rsp
    21a7:	5f                   	pop    rdi
    21a8:	4c                   	rex.WR
    21a9:	45                   	rex.RB
    21aa:	41 53                	push   r11
    21ac:	54                   	push   rsp
    21ad:	36 34 5f             	ss xor al,0x5f
    21b0:	4d                   	rex.WRB
    21b1:	41 58                	pop    r8
    21b3:	5f                   	pop    rdi
    21b4:	5f                   	pop    rdi
    21b5:	20 30                	and    BYTE PTR [rax],dh
    21b7:	78 37                	js     21f0 <.debug_str+0x21f0>
    21b9:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16
    21c0:	66 66 66 66 66 66 66 
    21c7:	66 4c 00 5f 5f       	data16 rex.WR add BYTE PTR [rdi+0x5f],r11b
    21cc:	49                   	rex.WB
    21cd:	4e 54                	rex.WRX push rsp
    21cf:	5f                   	pop    rdi
    21d0:	4c                   	rex.WR
    21d1:	45                   	rex.RB
    21d2:	41 53                	push   r11
    21d4:	54                   	push   rsp
    21d5:	38 5f 57             	cmp    BYTE PTR [rdi+0x57],bl
    21d8:	49                   	rex.WB
    21d9:	44 54                	rex.R push rsp
    21db:	48 5f                	rex.W pop rdi
    21dd:	5f                   	pop    rdi
    21de:	20 38                	and    BYTE PTR [rax],bh
    21e0:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    21e3:	4c                   	rex.WR
    21e4:	44                   	rex.R
    21e5:	42                   	rex.X
    21e6:	4c 5f                	rex.WR pop rdi
    21e8:	52                   	push   rdx
    21e9:	45                   	rex.RB
    21ea:	44                   	rex.R
    21eb:	49 52                	rex.WB push r10
    21ed:	31 5f 4e             	xor    DWORD PTR [rdi+0x4e],ebx
    21f0:	54                   	push   rsp
    21f1:	48 28 6e 61          	rex.W sub BYTE PTR [rsi+0x61],bpl
    21f5:	6d                   	ins    DWORD PTR es:[rdi],dx
    21f6:	65 2c 70             	gs sub al,0x70
    21f9:	72 6f                	jb     226a <.debug_str+0x226a>
    21fb:	74 6f                	je     226c <.debug_str+0x226c>
    21fd:	2c 61                	sub    al,0x61
    21ff:	6c                   	ins    BYTE PTR es:[rdi],dx
    2200:	69 61 73 29 20 6e 61 	imul   esp,DWORD PTR [rcx+0x73],0x616e2029
    2207:	6d                   	ins    DWORD PTR es:[rdi],dx
    2208:	65 20 70 72          	and    BYTE PTR gs:[rax+0x72],dh
    220c:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    220d:	74 6f                	je     227e <.debug_str+0x227e>
    220f:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    2212:	54                   	push   rsp
    2213:	48 52                	rex.W push rdx
    2215:	4f 57                	rex.WRXB push r15
    2217:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    221a:	55                   	push   rbp
    221b:	49                   	rex.WB
    221c:	4e 54                	rex.WRX push rsp
    221e:	38 5f 4d             	cmp    BYTE PTR [rdi+0x4d],bl
    2221:	41 58                	pop    r8
    2223:	5f                   	pop    rdi
    2224:	5f                   	pop    rdi
    2225:	20 30                	and    BYTE PTR [rax],dh
    2227:	78 66                	js     228f <.debug_str+0x228f>
    2229:	66 00 5f 49          	data16 add BYTE PTR [rdi+0x49],bl
    222d:	4f 5f                	rex.WRXB pop r15
    222f:	46                   	rex.RX
    2230:	4c                   	rex.WR
    2231:	41                   	rex.B
    2232:	47 53                	rex.RXB push r11
    2234:	32 5f 4e             	xor    bl,BYTE PTR [rdi+0x4e]
    2237:	4f 54                	rex.WRXB push r12
    2239:	43                   	rex.XB
    223a:	41                   	rex.B
    223b:	4e                   	rex.WRX
    223c:	43                   	rex.XB
    223d:	45                   	rex.RB
    223e:	4c 20 32             	rex.WR and BYTE PTR [rdx],r14b
    2241:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2244:	61                   	(bad)  
    2245:	6c                   	ins    BYTE PTR es:[rdi],dx
    2246:	77 61                	ja     22a9 <.debug_str+0x22a9>
    2248:	79 73                	jns    22bd <.debug_str+0x22bd>
    224a:	5f                   	pop    rdi
    224b:	69 6e 6c 69 6e 65 20 	imul   ebp,DWORD PTR [rsi+0x6c],0x20656e69
    2252:	5f                   	pop    rdi
    2253:	5f                   	pop    rdi
    2254:	69 6e 6c 69 6e 65 20 	imul   ebp,DWORD PTR [rsi+0x6c],0x20656e69
    225b:	5f                   	pop    rdi
    225c:	5f                   	pop    rdi
    225d:	61                   	(bad)  
    225e:	74 74                	je     22d4 <.debug_str+0x22d4>
    2260:	72 69                	jb     22cb <.debug_str+0x22cb>
    2262:	62                   	(bad)  
    2263:	75 74                	jne    22d9 <.debug_str+0x22d9>
    2265:	65 5f                	gs pop rdi
    2267:	5f                   	pop    rdi
    2268:	20 28                	and    BYTE PTR [rax],ch
    226a:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
    226d:	61                   	(bad)  
    226e:	6c                   	ins    BYTE PTR es:[rdi],dx
    226f:	77 61                	ja     22d2 <.debug_str+0x22d2>
    2271:	79 73                	jns    22e6 <.debug_str+0x22e6>
    2273:	5f                   	pop    rdi
    2274:	69 6e 6c 69 6e 65 5f 	imul   ebp,DWORD PTR [rsi+0x6c],0x5f656e69
    227b:	5f                   	pop    rdi
    227c:	29 29                	sub    DWORD PTR [rcx],ebp
    227e:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2281:	55                   	push   rbp
    2282:	49                   	rex.WB
    2283:	4e 54                	rex.WRX push rsp
    2285:	31 36                	xor    DWORD PTR [rsi],esi
    2287:	5f                   	pop    rdi
    2288:	4d                   	rex.WRB
    2289:	41 58                	pop    r8
    228b:	5f                   	pop    rdi
    228c:	5f                   	pop    rdi
    228d:	20 30                	and    BYTE PTR [rax],dh
    228f:	78 66                	js     22f7 <.debug_str+0x22f7>
    2291:	66 66 66 00 5f 49    	data16 data16 data16 add BYTE PTR [rdi+0x49],bl
    2297:	4f 5f                	rex.WRXB pop r15
    2299:	4d                   	rex.WRB
    229a:	41                   	rex.B
    229b:	47                   	rex.RXB
    229c:	49                   	rex.WB
    229d:	43 20 30             	rex.XB and BYTE PTR [r8],sil
    22a0:	78 46                	js     22e8 <.debug_str+0x22e8>
    22a2:	42                   	rex.X
    22a3:	41                   	rex.B
    22a4:	44 30 30             	xor    BYTE PTR [rax],r14b
    22a7:	30 30                	xor    BYTE PTR [rax],dh
    22a9:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    22ac:	47                   	rex.RXB
    22ad:	4c                   	rex.WR
    22ae:	49                   	rex.WB
    22af:	42                   	rex.X
    22b0:	43 5f                	rex.XB pop r15
    22b2:	55                   	push   rbp
    22b3:	53                   	push   rbx
    22b4:	45 28 46 29          	sub    BYTE PTR [r14+0x29],r8b
    22b8:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    22bb:	47                   	rex.RXB
    22bc:	4c                   	rex.WR
    22bd:	49                   	rex.WB
    22be:	42                   	rex.X
    22bf:	43 5f                	rex.XB pop r15
    22c1:	55                   	push   rbp
    22c2:	53                   	push   rbx
    22c3:	45 5f                	rex.RB pop r15
    22c5:	20 23                	and    BYTE PTR [rbx],ah
    22c7:	23 20                	and    esp,DWORD PTR [rax]
    22c9:	46 00 5f 5f          	rex.RX add BYTE PTR [rdi+0x5f],r11b
    22cd:	49                   	rex.WB
    22ce:	4e 54                	rex.WRX push rsp
    22d0:	5f                   	pop    rdi
    22d1:	46                   	rex.RX
    22d2:	41 53                	push   r11
    22d4:	54                   	push   rsp
    22d5:	36 34 5f             	ss xor al,0x5f
    22d8:	54                   	push   rsp
    22d9:	59                   	pop    rcx
    22da:	50                   	push   rax
    22db:	45 5f                	rex.RB pop r15
    22dd:	5f                   	pop    rdi
    22de:	20 6c 6f 6e          	and    BYTE PTR [rdi+rbp*2+0x6e],ch
    22e2:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
    22e6:	74 00                	je     22e8 <.debug_str+0x22e8>
    22e8:	73 74                	jae    235e <.debug_str+0x235e>
    22ea:	64 69 6e 20 73 74 64 	imul   ebp,DWORD PTR fs:[rsi+0x20],0x69647473
    22f1:	69 
    22f2:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    22f3:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    22f6:	61                   	(bad)  
    22f7:	74 74                	je     236d <.debug_str+0x236d>
    22f9:	72 69                	jb     2364 <.debug_str+0x2364>
    22fb:	62                   	(bad)  
    22fc:	75 74                	jne    2372 <.debug_str+0x2372>
    22fe:	65 5f                	gs pop rdi
    2300:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    2301:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2302:	69 6e 6c 69 6e 65 5f 	imul   ebp,DWORD PTR [rsi+0x6c],0x5f656e69
    2309:	5f                   	pop    rdi
    230a:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    230d:	61                   	(bad)  
    230e:	74 74                	je     2384 <.debug_str+0x2384>
    2310:	72 69                	jb     237b <.debug_str+0x237b>
    2312:	62                   	(bad)  
    2313:	75 74                	jne    2389 <.debug_str+0x2389>
    2315:	65 5f                	gs pop rdi
    2317:	5f                   	pop    rdi
    2318:	20 28                	and    BYTE PTR [rax],ch
    231a:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
    231d:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    231e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    231f:	69 6e 6c 69 6e 65 5f 	imul   ebp,DWORD PTR [rsi+0x6c],0x5f656e69
    2326:	5f                   	pop    rdi
    2327:	29 29                	sub    DWORD PTR [rcx],ebp
    2329:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    232c:	53                   	push   rbx
    232d:	54                   	push   rsp
    232e:	44                   	rex.R
    232f:	43 5f                	rex.XB pop r15
    2331:	56                   	push   rsi
    2332:	45 52                	rex.RB push r10
    2334:	53                   	push   rbx
    2335:	49                   	rex.WB
    2336:	4f                   	rex.WRXB
    2337:	4e 5f                	rex.WRX pop rdi
    2339:	5f                   	pop    rdi
    233a:	20 32                	and    BYTE PTR [rdx],dh
    233c:	30 31                	xor    BYTE PTR [rcx],dh
    233e:	31 31                	xor    DWORD PTR [rcx],esi
    2340:	32 4c 00 5f          	xor    cl,BYTE PTR [rax+rax*1+0x5f]
    2344:	5f                   	pop    rdi
    2345:	49                   	rex.WB
    2346:	4e 54                	rex.WRX push rsp
    2348:	4d                   	rex.WRB
    2349:	41 58                	pop    r8
    234b:	5f                   	pop    rdi
    234c:	57                   	push   rdi
    234d:	49                   	rex.WB
    234e:	44 54                	rex.R push rsp
    2350:	48 5f                	rex.W pop rdi
    2352:	5f                   	pop    rdi
    2353:	20 36                	and    BYTE PTR [rsi],dh
    2355:	34 00                	xor    al,0x0
    2357:	5f                   	pop    rdi
    2358:	5f                   	pop    rdi
    2359:	44                   	rex.R
    235a:	45                   	rex.RB
    235b:	43 33 32             	rex.XB xor esi,DWORD PTR [r10]
    235e:	5f                   	pop    rdi
    235f:	4d                   	rex.WRB
    2360:	41 58                	pop    r8
    2362:	5f                   	pop    rdi
    2363:	5f                   	pop    rdi
    2364:	20 39                	and    BYTE PTR [rcx],bh
    2366:	2e 39 39             	cmp    DWORD PTR cs:[rcx],edi
    2369:	39 39                	cmp    DWORD PTR [rcx],edi
    236b:	39 39                	cmp    DWORD PTR [rcx],edi
    236d:	45 39 36             	cmp    DWORD PTR [r14],r14d
    2370:	44                   	rex.R
    2371:	46 00 5f 5f          	rex.RX add BYTE PTR [rdi+0x5f],r11b
    2375:	47                   	rex.RXB
    2376:	4e 55                	rex.WRX push rbp
    2378:	43 5f                	rex.XB pop r15
    237a:	56                   	push   rsi
    237b:	41 5f                	pop    r15
    237d:	4c                   	rex.WR
    237e:	49 53                	rex.WB push r11
    2380:	54                   	push   rsp
    2381:	20 00                	and    BYTE PTR [rax],al
    2383:	5f                   	pop    rdi
    2384:	5f                   	pop    rdi
    2385:	50                   	push   rax
    2386:	54                   	push   rsp
    2387:	52                   	push   rdx
    2388:	44                   	rex.R
    2389:	49                   	rex.WB
    238a:	46                   	rex.RX
    238b:	46 5f                	rex.RX pop rdi
    238d:	4d                   	rex.WRB
    238e:	41 58                	pop    r8
    2390:	5f                   	pop    rdi
    2391:	5f                   	pop    rdi
    2392:	20 30                	and    BYTE PTR [rax],dh
    2394:	78 37                	js     23cd <.debug_str+0x23cd>
    2396:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16
    239d:	66 66 66 66 66 66 66 
    23a4:	66 4c 00 5f 5f       	data16 rex.WR add BYTE PTR [rdi+0x5f],r11b
    23a9:	55                   	push   rbp
    23aa:	53                   	push   rbx
    23ab:	45 5f                	rex.RB pop r15
    23ad:	50                   	push   rax
    23ae:	4f 53                	rex.WRXB push r11
    23b0:	49 58                	rex.WB pop r8
    23b2:	31 39                	xor    DWORD PTR [rcx],edi
    23b4:	39 33                	cmp    DWORD PTR [rbx],esi
    23b6:	30 39                	xor    BYTE PTR [rcx],bh
    23b8:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    23bb:	49                   	rex.WB
    23bc:	4e 54                	rex.WRX push rsp
    23be:	5f                   	pop    rdi
    23bf:	4c                   	rex.WR
    23c0:	45                   	rex.RB
    23c1:	41 53                	push   r11
    23c3:	54                   	push   rsp
    23c4:	31 36                	xor    DWORD PTR [rsi],esi
    23c6:	5f                   	pop    rdi
    23c7:	54                   	push   rsp
    23c8:	59                   	pop    rcx
    23c9:	50                   	push   rax
    23ca:	45 5f                	rex.RB pop r15
    23cc:	5f                   	pop    rdi
    23cd:	20 73 68             	and    BYTE PTR [rbx+0x68],dh
    23d0:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    23d1:	72 74                	jb     2447 <.debug_str+0x2447>
    23d3:	20 69 6e             	and    BYTE PTR [rcx+0x6e],ch
    23d6:	74 00                	je     23d8 <.debug_str+0x23d8>
    23d8:	5f                   	pop    rdi
    23d9:	5f                   	pop    rdi
    23da:	46                   	rex.RX
    23db:	4c 54                	rex.WR push rsp
    23dd:	33 32                	xor    esi,DWORD PTR [rdx]
    23df:	5f                   	pop    rdi
    23e0:	4d                   	rex.WRB
    23e1:	41 58                	pop    r8
    23e3:	5f                   	pop    rdi
    23e4:	45 58                	rex.RB pop r8
    23e6:	50                   	push   rax
    23e7:	5f                   	pop    rdi
    23e8:	5f                   	pop    rdi
    23e9:	20 31                	and    BYTE PTR [rcx],dh
    23eb:	32 38                	xor    bh,BYTE PTR [rax]
    23ed:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    23f0:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    23f2:	75 5f                	jne    2453 <.debug_str+0x2453>
    23f4:	6c                   	ins    BYTE PTR es:[rdi],dx
    23f5:	69 6e 75 78 5f 5f 20 	imul   ebp,DWORD PTR [rsi+0x75],0x205f5f78
    23fc:	31 00                	xor    DWORD PTR [rax],eax
    23fe:	5f                   	pop    rdi
    23ff:	5f                   	pop    rdi
    2400:	53                   	push   rbx
    2401:	54                   	push   rsp
    2402:	44 5f                	rex.R pop rdi
    2404:	54                   	push   rsp
    2405:	59                   	pop    rcx
    2406:	50                   	push   rax
    2407:	45 20 74 79 70       	and    BYTE PTR [r9+rdi*2+0x70],r14b
    240c:	65 64 65 66 00 5f 5f 	gs fs data16 add BYTE PTR gs:[rdi+0x5f],bl
    2413:	4d                   	rex.WRB
    2414:	4f                   	rex.WRXB
    2415:	44                   	rex.R
    2416:	45 5f                	rex.RB pop r15
    2418:	54                   	push   rsp
    2419:	5f                   	pop    rdi
    241a:	54                   	push   rsp
    241b:	59                   	pop    rcx
    241c:	50                   	push   rax
    241d:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    2421:	55                   	push   rbp
    2422:	33 32                	xor    esi,DWORD PTR [rdx]
    2424:	5f                   	pop    rdi
    2425:	54                   	push   rsp
    2426:	59                   	pop    rcx
    2427:	50                   	push   rax
    2428:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    242c:	53                   	push   rbx
    242d:	49 5a                	rex.WB pop r10
    242f:	45                   	rex.RB
    2430:	4f                   	rex.WRXB
    2431:	46 5f                	rex.RX pop rdi
    2433:	46                   	rex.RX
    2434:	4c                   	rex.WR
    2435:	4f                   	rex.WRXB
    2436:	41 54                	push   r12
    2438:	31 32                	xor    DWORD PTR [rdx],esi
    243a:	38 5f 5f             	cmp    BYTE PTR [rdi+0x5f],bl
    243d:	20 31                	and    BYTE PTR [rcx],dh
    243f:	36 00 5f 5f          	add    BYTE PTR ss:[rdi+0x5f],bl
    2443:	47                   	rex.RXB
    2444:	4e 55                	rex.WRX push rbp
    2446:	43 5f                	rex.XB pop r15
    2448:	53                   	push   rbx
    2449:	54                   	push   rsp
    244a:	44                   	rex.R
    244b:	43 5f                	rex.XB pop r15
    244d:	49                   	rex.WB
    244e:	4e                   	rex.WRX
    244f:	4c                   	rex.WR
    2450:	49                   	rex.WB
    2451:	4e                   	rex.WRX
    2452:	45 5f                	rex.RB pop r15
    2454:	5f                   	pop    rdi
    2455:	20 31                	and    BYTE PTR [rcx],dh
    2457:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    245a:	44                   	rex.R
    245b:	42                   	rex.X
    245c:	4c 5f                	rex.WR pop rdi
    245e:	44                   	rex.R
    245f:	49                   	rex.WB
    2460:	47 5f                	rex.RXB pop r15
    2462:	5f                   	pop    rdi
    2463:	20 31                	and    BYTE PTR [rcx],dh
    2465:	35 00 5f 5f 47       	xor    eax,0x475f5f00
    246a:	43                   	rex.XB
    246b:	43 5f                	rex.XB pop r15
    246d:	41 54                	push   r12
    246f:	4f                   	rex.WRXB
    2470:	4d                   	rex.WRB
    2471:	49                   	rex.WB
    2472:	43 5f                	rex.XB pop r15
    2474:	43                   	rex.XB
    2475:	48                   	rex.W
    2476:	41 52                	push   r10
    2478:	31 36                	xor    DWORD PTR [rsi],esi
    247a:	5f                   	pop    rdi
    247b:	54                   	push   rsp
    247c:	5f                   	pop    rdi
    247d:	4c                   	rex.WR
    247e:	4f                   	rex.WRXB
    247f:	43                   	rex.XB
    2480:	4b 5f                	rex.WXB pop r15
    2482:	46 52                	rex.RX push rdx
    2484:	45                   	rex.RB
    2485:	45 20 32             	and    BYTE PTR [r10],r14b
    2488:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    248b:	49                   	rex.WB
    248c:	4e 54                	rex.WRX push rsp
    248e:	5f                   	pop    rdi
    248f:	4c                   	rex.WR
    2490:	45                   	rex.RB
    2491:	41 53                	push   r11
    2493:	54                   	push   rsp
    2494:	38 5f 4d             	cmp    BYTE PTR [rdi+0x4d],bl
    2497:	41 58                	pop    r8
    2499:	5f                   	pop    rdi
    249a:	5f                   	pop    rdi
    249b:	20 30                	and    BYTE PTR [rax],dh
    249d:	78 37                	js     24d6 <.debug_str+0x24d6>
    249f:	66 00 5f 5f          	data16 add BYTE PTR [rdi+0x5f],bl
    24a3:	53                   	push   rbx
    24a4:	31 36                	xor    DWORD PTR [rsi],esi
    24a6:	5f                   	pop    rdi
    24a7:	54                   	push   rsp
    24a8:	59                   	pop    rcx
    24a9:	50                   	push   rax
    24aa:	45 20 73 68          	and    BYTE PTR [r11+0x68],r14b
    24ae:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    24af:	72 74                	jb     2525 <.debug_str+0x2525>
    24b1:	20 69 6e             	and    BYTE PTR [rcx+0x6e],ch
    24b4:	74 00                	je     24b6 <.debug_str+0x24b6>
    24b6:	5f                   	pop    rdi
    24b7:	5f                   	pop    rdi
    24b8:	4c 50                	rex.WR push rax
    24ba:	36 34 5f             	ss xor al,0x5f
    24bd:	5f                   	pop    rdi
    24be:	20 31                	and    BYTE PTR [rcx],dh
    24c0:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    24c3:	53                   	push   rbx
    24c4:	59                   	pop    rcx
    24c5:	53                   	push   rbx
    24c6:	43                   	rex.XB
    24c7:	41                   	rex.B
    24c8:	4c                   	rex.WR
    24c9:	4c 5f                	rex.WR pop rdi
    24cb:	57                   	push   rdi
    24cc:	4f 52                	rex.WRXB push r10
    24ce:	44 53                	rex.R push rbx
    24d0:	49 5a                	rex.WB pop r10
    24d2:	45 20 36             	and    BYTE PTR [r14],r14b
    24d5:	34 00                	xor    al,0x0
    24d7:	5f                   	pop    rdi
    24d8:	5f                   	pop    rdi
    24d9:	47                   	rex.RXB
    24da:	43                   	rex.XB
    24db:	43 5f                	rex.XB pop r15
    24dd:	41 54                	push   r12
    24df:	4f                   	rex.WRXB
    24e0:	4d                   	rex.WRB
    24e1:	49                   	rex.WB
    24e2:	43 5f                	rex.XB pop r15
    24e4:	4c                   	rex.WR
    24e5:	4f                   	rex.WRXB
    24e6:	4e                   	rex.WRX
    24e7:	47 5f                	rex.RXB pop r15
    24e9:	4c                   	rex.WR
    24ea:	4f                   	rex.WRXB
    24eb:	43                   	rex.XB
    24ec:	4b 5f                	rex.WXB pop r15
    24ee:	46 52                	rex.RX push rdx
    24f0:	45                   	rex.RB
    24f1:	45 20 32             	and    BYTE PTR [r10],r14b
    24f4:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    24f7:	46                   	rex.RX
    24f8:	4c 54                	rex.WR push rsp
    24fa:	33 32                	xor    esi,DWORD PTR [rdx]
    24fc:	58                   	pop    rax
    24fd:	5f                   	pop    rdi
    24fe:	44                   	rex.R
    24ff:	49                   	rex.WB
    2500:	47 5f                	rex.RXB pop r15
    2502:	5f                   	pop    rdi
    2503:	20 31                	and    BYTE PTR [rcx],dh
    2505:	35 00 5f 5f 46       	xor    eax,0x465f5f00
    250a:	4c 54                	rex.WR push rsp
    250c:	33 32                	xor    esi,DWORD PTR [rdx]
    250e:	58                   	pop    rax
    250f:	5f                   	pop    rdi
    2510:	4d                   	rex.WRB
    2511:	41                   	rex.B
    2512:	4e 54                	rex.WRX push rsp
    2514:	5f                   	pop    rdi
    2515:	44                   	rex.R
    2516:	49                   	rex.WB
    2517:	47 5f                	rex.RXB pop r15
    2519:	5f                   	pop    rdi
    251a:	20 35 33 00 5f 49    	and    BYTE PTR [rip+0x495f0033],dh        # 495f2553 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x495f2553>
    2520:	4f 5f                	rex.WRXB pop r15
    2522:	77 72                	ja     2596 <.debug_str+0x2596>
    2524:	69 74 65 5f 62 61 73 	imul   esi,DWORD PTR [rbp+riz*2+0x5f],0x65736162
    252b:	65 
    252c:	00 5f 4c             	add    BYTE PTR [rdi+0x4c],bl
    252f:	50                   	push   rax
    2530:	36 34 20             	ss xor al,0x20
    2533:	31 00                	xor    DWORD PTR [rax],eax
    2535:	5f                   	pop    rdi
    2536:	46                   	rex.RX
    2537:	45                   	rex.RB
    2538:	41 54                	push   r12
    253a:	55                   	push   rbp
    253b:	52                   	push   rdx
    253c:	45 53                	rex.RB push r11
    253e:	5f                   	pop    rdi
    253f:	48 20 31             	rex.W and BYTE PTR [rcx],sil
    2542:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2545:	46                   	rex.RX
    2546:	4c 54                	rex.WR push rsp
    2548:	33 32                	xor    esi,DWORD PTR [rdx]
    254a:	5f                   	pop    rdi
    254b:	44                   	rex.R
    254c:	49                   	rex.WB
    254d:	47 5f                	rex.RXB pop r15
    254f:	5f                   	pop    rdi
    2550:	20 36                	and    BYTE PTR [rsi],dh
    2552:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2555:	46 53                	rex.RX push rbx
    2557:	57                   	push   rdi
    2558:	4f 52                	rex.WRXB push r10
    255a:	44 5f                	rex.R pop rdi
    255c:	54                   	push   rsp
    255d:	5f                   	pop    rdi
    255e:	54                   	push   rsp
    255f:	59                   	pop    rcx
    2560:	50                   	push   rax
    2561:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    2565:	53                   	push   rbx
    2566:	59                   	pop    rcx
    2567:	53                   	push   rbx
    2568:	43                   	rex.XB
    2569:	41                   	rex.B
    256a:	4c                   	rex.WR
    256b:	4c 5f                	rex.WR pop rdi
    256d:	53                   	push   rbx
    256e:	4c                   	rex.WR
    256f:	4f                   	rex.WRXB
    2570:	4e                   	rex.WRX
    2571:	47 5f                	rex.RXB pop r15
    2573:	54                   	push   rsp
    2574:	59                   	pop    rcx
    2575:	50                   	push   rax
    2576:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    257a:	53                   	push   rbx
    257b:	4c                   	rex.WR
    257c:	4f                   	rex.WRXB
    257d:	4e                   	rex.WRX
    257e:	47 57                	rex.RXB push r15
    2580:	4f 52                	rex.WRXB push r10
    2582:	44 5f                	rex.R pop rdi
    2584:	54                   	push   rsp
    2585:	59                   	pop    rcx
    2586:	50                   	push   rax
    2587:	45 20 6c 6f 6e       	and    BYTE PTR [r15+rbp*2+0x6e],r13b
    258c:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
    2590:	74 00                	je     2592 <.debug_str+0x2592>
    2592:	5f                   	pop    rdi
    2593:	49                   	rex.WB
    2594:	4f 5f                	rex.WRXB pop r15
    2596:	32 5f 31             	xor    bl,BYTE PTR [rdi+0x31]
    2599:	5f                   	pop    rdi
    259a:	73 74                	jae    2610 <.debug_str+0x2610>
    259c:	64 69 6e 5f 00 5f 5f 	imul   ebp,DWORD PTR fs:[rsi+0x5f],0x785f5f00
    25a3:	78 
    25a4:	38 36                	cmp    BYTE PTR [rsi],dh
    25a6:	5f                   	pop    rdi
    25a7:	36 34 20             	ss xor al,0x20
    25aa:	31 00                	xor    DWORD PTR [rax],eax
    25ac:	5f                   	pop    rdi
    25ad:	5f                   	pop    rdi
    25ae:	46                   	rex.RX
    25af:	4c 54                	rex.WR push rsp
    25b1:	36 34 58             	ss xor al,0x58
    25b4:	5f                   	pop    rdi
    25b5:	4d                   	rex.WRB
    25b6:	41 58                	pop    r8
    25b8:	5f                   	pop    rdi
    25b9:	31 30                	xor    DWORD PTR [rax],esi
    25bb:	5f                   	pop    rdi
    25bc:	45 58                	rex.RB pop r8
    25be:	50                   	push   rax
    25bf:	5f                   	pop    rdi
    25c0:	5f                   	pop    rdi
    25c1:	20 34 39             	and    BYTE PTR [rcx+rdi*1],dh
    25c4:	33 32                	xor    esi,DWORD PTR [rdx]
    25c6:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    25c9:	44                   	rex.R
    25ca:	42                   	rex.X
    25cb:	4c 5f                	rex.WR pop rdi
    25cd:	4d                   	rex.WRB
    25ce:	49                   	rex.WB
    25cf:	4e 5f                	rex.WRX pop rdi
    25d1:	5f                   	pop    rdi
    25d2:	20 28                	and    BYTE PTR [rax],ch
    25d4:	28 64 6f 75          	sub    BYTE PTR [rdi+rbp*2+0x75],ah
    25d8:	62                   	(bad)  
    25d9:	6c                   	ins    BYTE PTR es:[rdi],dx
    25da:	65 29 32             	sub    DWORD PTR gs:[rdx],esi
    25dd:	2e 32 32             	xor    dh,BYTE PTR cs:[rdx]
    25e0:	35 30 37 33 38       	xor    eax,0x38333730
    25e5:	35 38 35 30 37       	xor    eax,0x37303538
    25ea:	32 30                	xor    dh,BYTE PTR [rax]
    25ec:	31 33                	xor    DWORD PTR [rbx],esi
    25ee:	38 33                	cmp    BYTE PTR [rbx],dh
    25f0:	30 39                	xor    BYTE PTR [rcx],bh
    25f2:	30 32                	xor    BYTE PTR [rdx],dh
    25f4:	33 32                	xor    esi,DWORD PTR [rdx]
    25f6:	37                   	(bad)  
    25f7:	31 37                	xor    DWORD PTR [rdi],esi
    25f9:	33 33                	xor    esi,DWORD PTR [rbx]
    25fb:	32 34 30             	xor    dh,BYTE PTR [rax+rsi*1]
    25fe:	34 30                	xor    al,0x30
    2600:	36 65 2d 33 30 38 4c 	ss gs sub eax,0x4c383033
    2607:	29 00                	sub    DWORD PTR [rax],eax
    2609:	5f                   	pop    rdi
    260a:	49                   	rex.WB
    260b:	4f 5f                	rex.WRXB pop r15
    260d:	32 5f 31             	xor    bl,BYTE PTR [rdi+0x31]
    2610:	5f                   	pop    rdi
    2611:	73 74                	jae    2687 <.debug_str+0x2687>
    2613:	64 6f                	outs   dx,DWORD PTR fs:[rsi]
    2615:	75 74                	jne    268b <.debug_str+0x268b>
    2617:	5f                   	pop    rdi
    2618:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    261b:	55                   	push   rbp
    261c:	49                   	rex.WB
    261d:	4e 54                	rex.WRX push rsp
    261f:	5f                   	pop    rdi
    2620:	46                   	rex.RX
    2621:	41 53                	push   r11
    2623:	54                   	push   rsp
    2624:	33 32                	xor    esi,DWORD PTR [rdx]
    2626:	5f                   	pop    rdi
    2627:	4d                   	rex.WRB
    2628:	41 58                	pop    r8
    262a:	5f                   	pop    rdi
    262b:	5f                   	pop    rdi
    262c:	20 30                	and    BYTE PTR [rax],dh
    262e:	78 66                	js     2696 <.debug_str+0x2696>
    2630:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16
    2637:	66 66 66 66 66 66 66 
    263e:	66 55                	push   bp
    2640:	4c 00 5f 5f          	rex.WR add BYTE PTR [rdi+0x5f],r11b
    2644:	46                   	rex.RX
    2645:	49                   	rex.WB
    2646:	4e                   	rex.WRX
    2647:	49 54                	rex.WB push r12
    2649:	45 5f                	rex.RB pop r15
    264b:	4d                   	rex.WRB
    264c:	41 54                	push   r12
    264e:	48 5f                	rex.W pop rdi
    2650:	4f                   	rex.WRXB
    2651:	4e                   	rex.WRX
    2652:	4c 59                	rex.WR pop rcx
    2654:	5f                   	pop    rdi
    2655:	5f                   	pop    rdi
    2656:	20 30                	and    BYTE PTR [rax],dh
    2658:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    265b:	4f 5f                	rex.WRXB pop r15
    265d:	73 61                	jae    26c0 <.debug_str+0x26c0>
    265f:	76 65                	jbe    26c6 <.debug_str+0x26c6>
    2661:	5f                   	pop    rdi
    2662:	62 61                	(bad)  
    2664:	73 65                	jae    26cb <.debug_str+0x26cb>
    2666:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2669:	55                   	push   rbp
    266a:	31 36                	xor    DWORD PTR [rsi],esi
    266c:	5f                   	pop    rdi
    266d:	54                   	push   rsp
    266e:	59                   	pop    rcx
    266f:	50                   	push   rax
    2670:	45 20 75 6e          	and    BYTE PTR [r13+0x6e],r14b
    2674:	73 69                	jae    26df <.debug_str+0x26df>
    2676:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    2678:	65 64 20 73 68       	gs and BYTE PTR fs:[rbx+0x68],dh
    267d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    267e:	72 74                	jb     26f4 <.debug_str+0x26f4>
    2680:	20 69 6e             	and    BYTE PTR [rcx+0x6e],ch
    2683:	74 00                	je     2685 <.debug_str+0x2685>
    2685:	45                   	rex.RB
    2686:	4f                   	rex.WRXB
    2687:	46 20 28             	rex.RX and BYTE PTR [rax],r13b
    268a:	2d 31 29 00 5f       	sub    eax,0x5f002931
    268f:	5f                   	pop    rdi
    2690:	46                   	rex.RX
    2691:	4c 54                	rex.WR push rsp
    2693:	36 34 5f             	ss xor al,0x5f
    2696:	4d                   	rex.WRB
    2697:	41 58                	pop    r8
    2699:	5f                   	pop    rdi
    269a:	5f                   	pop    rdi
    269b:	20 31                	and    BYTE PTR [rcx],dh
    269d:	2e 37                	cs (bad) 
    269f:	39 37                	cmp    DWORD PTR [rdi],esi
    26a1:	36 39 33             	cmp    DWORD PTR ss:[rbx],esi
    26a4:	31 33                	xor    DWORD PTR [rbx],esi
    26a6:	34 38                	xor    al,0x38
    26a8:	36 32 33             	xor    dh,BYTE PTR ss:[rbx]
    26ab:	31 35 37 30 38 31    	xor    DWORD PTR [rip+0x31383037],esi        # 313856e8 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x313856e8>
    26b1:	34 35                	xor    al,0x35
    26b3:	32 37                	xor    dh,BYTE PTR [rdi]
    26b5:	34 32                	xor    al,0x32
    26b7:	33 37                	xor    esi,DWORD PTR [rdi]
    26b9:	33 31                	xor    esi,DWORD PTR [rcx]
    26bb:	37                   	(bad)  
    26bc:	30 34 33             	xor    BYTE PTR [rbx+rsi*1],dh
    26bf:	35 37 65 2b 33       	xor    eax,0x332b6537
    26c4:	30 38                	xor    BYTE PTR [rax],bh
    26c6:	46                   	rex.RX
    26c7:	36 34 00             	ss xor al,0x0
    26ca:	5f                   	pop    rdi
    26cb:	5f                   	pop    rdi
    26cc:	73 69                	jae    2737 <.debug_str+0x2737>
    26ce:	7a 65                	jp     2735 <.debug_str+0x2735>
    26d0:	5f                   	pop    rdi
    26d1:	74 5f                	je     2732 <.debug_str+0x2732>
    26d3:	5f                   	pop    rdi
    26d4:	20 00                	and    BYTE PTR [rax],al
    26d6:	5f                   	pop    rdi
    26d7:	5f                   	pop    rdi
    26d8:	55                   	push   rbp
    26d9:	49                   	rex.WB
    26da:	4e 54                	rex.WRX push rsp
    26dc:	38 5f 54             	cmp    BYTE PTR [rdi+0x54],bl
    26df:	59                   	pop    rcx
    26e0:	50                   	push   rax
    26e1:	45 5f                	rex.RB pop r15
    26e3:	5f                   	pop    rdi
    26e4:	20 75 6e             	and    BYTE PTR [rbp+0x6e],dh
    26e7:	73 69                	jae    2752 <.debug_str+0x2752>
    26e9:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    26eb:	65 64 20 63 68       	gs and BYTE PTR fs:[rbx+0x68],ah
    26f0:	61                   	(bad)  
    26f1:	72 00                	jb     26f3 <.debug_str+0x26f3>
    26f3:	5f                   	pop    rdi
    26f4:	49                   	rex.WB
    26f5:	4f 5f                	rex.WRXB pop r15
    26f7:	66 69 6c 65 5f 66 6c 	imul   bp,WORD PTR [rbp+riz*2+0x5f],0x6c66
    26fe:	61                   	(bad)  
    26ff:	67 73 20             	addr32 jae 2722 <.debug_str+0x2722>
    2702:	5f                   	pop    rdi
    2703:	66 6c                	data16 ins BYTE PTR es:[rdi],dx
    2705:	61                   	(bad)  
    2706:	67 73 00             	addr32 jae 2709 <.debug_str+0x2709>
    2709:	5f                   	pop    rdi
    270a:	5f                   	pop    rdi
    270b:	55                   	push   rbp
    270c:	53                   	push   rbx
    270d:	45 5f                	rex.RB pop r15
    270f:	58                   	pop    rax
    2710:	4f 50                	rex.WRXB push r8
    2712:	45                   	rex.RB
    2713:	4e 32 4b 38          	rex.WRX xor r9b,BYTE PTR [rbx+0x38]
    2717:	58                   	pop    rax
    2718:	53                   	push   rbx
    2719:	49 00 5f 5f          	rex.WB add BYTE PTR [r15+0x5f],bl
    271d:	49                   	rex.WB
    271e:	4e 54                	rex.WRX push rsp
    2720:	5f                   	pop    rdi
    2721:	46                   	rex.RX
    2722:	41 53                	push   r11
    2724:	54                   	push   rsp
    2725:	33 32                	xor    esi,DWORD PTR [rdx]
    2727:	5f                   	pop    rdi
    2728:	54                   	push   rsp
    2729:	59                   	pop    rcx
    272a:	50                   	push   rax
    272b:	45 5f                	rex.RB pop r15
    272d:	5f                   	pop    rdi
    272e:	20 6c 6f 6e          	and    BYTE PTR [rdi+rbp*2+0x6e],ch
    2732:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
    2736:	74 00                	je     2738 <.debug_str+0x2738>
    2738:	5f                   	pop    rdi
    2739:	49                   	rex.WB
    273a:	4f 53                	rex.WRXB push r11
    273c:	5f                   	pop    rdi
    273d:	49                   	rex.WB
    273e:	4e 50                	rex.WRX push rax
    2740:	55                   	push   rbp
    2741:	54                   	push   rsp
    2742:	20 31                	and    BYTE PTR [rcx],dh
    2744:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2747:	47                   	rex.RXB
    2748:	43                   	rex.XB
    2749:	43 5f                	rex.XB pop r15
    274b:	41 53                	push   r11
    274d:	4d 5f                	rex.WRB pop r15
    274f:	46                   	rex.RX
    2750:	4c                   	rex.WR
    2751:	41                   	rex.B
    2752:	47 5f                	rex.RXB pop r15
    2754:	4f 55                	rex.WRXB push r13
    2756:	54                   	push   rsp
    2757:	50                   	push   rax
    2758:	55                   	push   rbp
    2759:	54                   	push   rsp
    275a:	53                   	push   rbx
    275b:	5f                   	pop    rdi
    275c:	5f                   	pop    rdi
    275d:	20 31                	and    BYTE PTR [rcx],dh
    275f:	00 70 75             	add    BYTE PTR [rax+0x75],dh
    2762:	74 63                	je     27c7 <.debug_str+0x27c7>
    2764:	28 5f 63             	sub    BYTE PTR [rdi+0x63],bl
    2767:	68 2c 5f 66 70       	push   0x70665f2c
    276c:	29 20                	sub    DWORD PTR [rax],esp
    276e:	5f                   	pop    rdi
    276f:	49                   	rex.WB
    2770:	4f 5f                	rex.WRXB pop r15
    2772:	70 75                	jo     27e9 <.debug_str+0x27e9>
    2774:	74 63                	je     27d9 <.debug_str+0x27d9>
    2776:	20 28                	and    BYTE PTR [rax],ch
    2778:	5f                   	pop    rdi
    2779:	63 68 2c             	movsxd ebp,DWORD PTR [rax+0x2c]
    277c:	20 5f 66             	and    BYTE PTR [rdi+0x66],bl
    277f:	70 29                	jo     27aa <.debug_str+0x27aa>
    2781:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2784:	55                   	push   rbp
    2785:	49                   	rex.WB
    2786:	4e 54                	rex.WRX push rsp
    2788:	5f                   	pop    rdi
    2789:	4c                   	rex.WR
    278a:	45                   	rex.RB
    278b:	41 53                	push   r11
    278d:	54                   	push   rsp
    278e:	36 34 5f             	ss xor al,0x5f
    2791:	4d                   	rex.WRB
    2792:	41 58                	pop    r8
    2794:	5f                   	pop    rdi
    2795:	5f                   	pop    rdi
    2796:	20 30                	and    BYTE PTR [rax],dh
    2798:	78 66                	js     2800 <.debug_str+0x2800>
    279a:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16
    27a1:	66 66 66 66 66 66 66 
    27a8:	66 55                	push   bp
    27aa:	4c 00 5f 5f          	rex.WR add BYTE PTR [rdi+0x5f],r11b
    27ae:	50                   	push   rax
    27af:	4d 54                	rex.WRB push r12
    27b1:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    27b4:	55                   	push   rbp
    27b5:	51                   	push   rcx
    27b6:	55                   	push   rbp
    27b7:	41                   	rex.B
    27b8:	44 5f                	rex.R pop rdi
    27ba:	54                   	push   rsp
    27bb:	59                   	pop    rcx
    27bc:	50                   	push   rax
    27bd:	45 20 75 6e          	and    BYTE PTR [r13+0x6e],r14b
    27c1:	73 69                	jae    282c <.debug_str+0x282c>
    27c3:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    27c5:	65 64 20 6c 6f 6e    	gs and BYTE PTR fs:[rdi+rbp*2+0x6e],ch
    27cb:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
    27cf:	74 00                	je     27d1 <.debug_str+0x27d1>
    27d1:	5f                   	pop    rdi
    27d2:	5f                   	pop    rdi
    27d3:	45                   	rex.RB
    27d4:	4c                   	rex.WR
    27d5:	46 5f                	rex.RX pop rdi
    27d7:	5f                   	pop    rdi
    27d8:	20 31                	and    BYTE PTR [rcx],dh
    27da:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    27dd:	46                   	rex.RX
    27de:	4c 54                	rex.WR push rsp
    27e0:	33 32                	xor    esi,DWORD PTR [rdx]
    27e2:	58                   	pop    rax
    27e3:	5f                   	pop    rdi
    27e4:	4d                   	rex.WRB
    27e5:	49                   	rex.WB
    27e6:	4e 5f                	rex.WRX pop rdi
    27e8:	5f                   	pop    rdi
    27e9:	20 32                	and    BYTE PTR [rdx],dh
    27eb:	2e 32 32             	xor    dh,BYTE PTR cs:[rdx]
    27ee:	35 30 37 33 38       	xor    eax,0x38333730
    27f3:	35 38 35 30 37       	xor    eax,0x37303538
    27f8:	32 30                	xor    dh,BYTE PTR [rax]
    27fa:	31 33                	xor    DWORD PTR [rbx],esi
    27fc:	38 33                	cmp    BYTE PTR [rbx],dh
    27fe:	30 39                	xor    BYTE PTR [rcx],bh
    2800:	30 32                	xor    BYTE PTR [rdx],dh
    2802:	33 32                	xor    esi,DWORD PTR [rdx]
    2804:	37                   	(bad)  
    2805:	31 37                	xor    DWORD PTR [rdi],esi
    2807:	33 33                	xor    esi,DWORD PTR [rbx]
    2809:	32 34 30             	xor    dh,BYTE PTR [rax+rsi*1]
    280c:	34 30                	xor    al,0x30
    280e:	36 65 2d 33 30 38 46 	ss gs sub eax,0x46383033
    2815:	33 32                	xor    esi,DWORD PTR [rdx]
    2817:	78 00                	js     2819 <.debug_str+0x2819>
    2819:	5f                   	pop    rdi
    281a:	5f                   	pop    rdi
    281b:	55                   	push   rbp
    281c:	49                   	rex.WB
    281d:	4e 54                	rex.WRX push rsp
    281f:	50                   	push   rax
    2820:	54                   	push   rsp
    2821:	52                   	push   rdx
    2822:	5f                   	pop    rdi
    2823:	54                   	push   rsp
    2824:	59                   	pop    rcx
    2825:	50                   	push   rax
    2826:	45 5f                	rex.RB pop r15
    2828:	5f                   	pop    rdi
    2829:	20 6c 6f 6e          	and    BYTE PTR [rdi+rbp*2+0x6e],ch
    282d:	67 20 75 6e          	and    BYTE PTR [ebp+0x6e],dh
    2831:	73 69                	jae    289c <.debug_str+0x289c>
    2833:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    2835:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    283a:	74 00                	je     283c <.debug_str+0x283c>
    283c:	5f                   	pop    rdi
    283d:	5f                   	pop    rdi
    283e:	49                   	rex.WB
    283f:	4e 54                	rex.WRX push rsp
    2841:	31 36                	xor    DWORD PTR [rsi],esi
    2843:	5f                   	pop    rdi
    2844:	43 28 63 29          	rex.XB sub BYTE PTR [r11+0x29],spl
    2848:	20 63 00             	and    BYTE PTR [rbx+0x0],ah
    284b:	5f                   	pop    rdi
    284c:	5f                   	pop    rdi
    284d:	47                   	rex.RXB
    284e:	43                   	rex.XB
    284f:	43 5f                	rex.XB pop r15
    2851:	48                   	rex.W
    2852:	41 56                	push   r14
    2854:	45 5f                	rex.RB pop r15
    2856:	44 57                	rex.R push rdi
    2858:	41 52                	push   r10
    285a:	46 32 5f 43          	rex.RX xor r11b,BYTE PTR [rdi+0x43]
    285e:	46                   	rex.RX
    285f:	49 5f                	rex.WB pop r15
    2861:	41 53                	push   r11
    2863:	4d 20 31             	rex.WRB and BYTE PTR [r9],r14b
    2866:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2869:	53                   	push   rbx
    286a:	49 5a                	rex.WB pop r10
    286c:	45                   	rex.RB
    286d:	4f                   	rex.WRXB
    286e:	46 5f                	rex.RX pop rdi
    2870:	46                   	rex.RX
    2871:	4c                   	rex.WR
    2872:	4f                   	rex.WRXB
    2873:	41 54                	push   r12
    2875:	5f                   	pop    rdi
    2876:	5f                   	pop    rdi
    2877:	20 34 00             	and    BYTE PTR [rax+rax*1],dh
    287a:	5f                   	pop    rdi
    287b:	5f                   	pop    rdi
    287c:	44                   	rex.R
    287d:	45                   	rex.RB
    287e:	43 33 32             	rex.XB xor esi,DWORD PTR [r10]
    2881:	5f                   	pop    rdi
    2882:	53                   	push   rbx
    2883:	55                   	push   rbp
    2884:	42                   	rex.X
    2885:	4e                   	rex.WRX
    2886:	4f 52                	rex.WRXB push r10
    2888:	4d                   	rex.WRB
    2889:	41                   	rex.B
    288a:	4c 5f                	rex.WR pop rdi
    288c:	4d                   	rex.WRB
    288d:	49                   	rex.WB
    288e:	4e 5f                	rex.WRX pop rdi
    2890:	5f                   	pop    rdi
    2891:	20 30                	and    BYTE PTR [rax],dh
    2893:	2e 30 30             	xor    BYTE PTR cs:[rax],dh
    2896:	30 30                	xor    BYTE PTR [rax],dh
    2898:	30 31                	xor    BYTE PTR [rcx],dh
    289a:	45 2d 39 35 44 46    	rex.RB sub eax,0x46443539
    28a0:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    28a3:	4f 5f                	rex.WRXB pop r15
    28a5:	49 53                	rex.WB push r11
    28a7:	5f                   	pop    rdi
    28a8:	41 50                	push   r8
    28aa:	50                   	push   rax
    28ab:	45                   	rex.RB
    28ac:	4e                   	rex.WRX
    28ad:	44                   	rex.R
    28ae:	49                   	rex.WB
    28af:	4e                   	rex.WRX
    28b0:	47 20 30             	rex.RXB and BYTE PTR [r8],r14b
    28b3:	78 31                	js     28e6 <.debug_str+0x28e6>
    28b5:	30 30                	xor    BYTE PTR [rax],dh
    28b7:	30 00                	xor    BYTE PTR [rax],al
    28b9:	5f                   	pop    rdi
    28ba:	5f                   	pop    rdi
    28bb:	46                   	rex.RX
    28bc:	4c 54                	rex.WR push rsp
    28be:	36 34 58             	ss xor al,0x58
    28c1:	5f                   	pop    rdi
    28c2:	48                   	rex.W
    28c3:	41 53                	push   r11
    28c5:	5f                   	pop    rdi
    28c6:	51                   	push   rcx
    28c7:	55                   	push   rbp
    28c8:	49                   	rex.WB
    28c9:	45 54                	rex.RB push r12
    28cb:	5f                   	pop    rdi
    28cc:	4e                   	rex.WRX
    28cd:	41                   	rex.B
    28ce:	4e 5f                	rex.WRX pop rdi
    28d0:	5f                   	pop    rdi
    28d1:	20 31                	and    BYTE PTR [rcx],dh
    28d3:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    28d6:	46                   	rex.RX
    28d7:	4c 54                	rex.WR push rsp
    28d9:	5f                   	pop    rdi
    28da:	48                   	rex.W
    28db:	41 53                	push   r11
    28dd:	5f                   	pop    rdi
    28de:	49                   	rex.WB
    28df:	4e                   	rex.WRX
    28e0:	46                   	rex.RX
    28e1:	49                   	rex.WB
    28e2:	4e                   	rex.WRX
    28e3:	49 54                	rex.WB push r12
    28e5:	59                   	pop    rcx
    28e6:	5f                   	pop    rdi
    28e7:	5f                   	pop    rdi
    28e8:	20 31                	and    BYTE PTR [rcx],dh
    28ea:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    28ed:	4f 53                	rex.WRXB push r11
    28ef:	5f                   	pop    rdi
    28f0:	4e                   	rex.WRX
    28f1:	4f 52                	rex.WRXB push r10
    28f3:	45 50                	rex.RB push r8
    28f5:	4c                   	rex.WR
    28f6:	41                   	rex.B
    28f7:	43                   	rex.XB
    28f8:	45 20 36             	and    BYTE PTR [r14],r14b
    28fb:	34 00                	xor    al,0x0
    28fd:	5f                   	pop    rdi
    28fe:	5f                   	pop    rdi
    28ff:	53                   	push   rbx
    2900:	54                   	push   rsp
    2901:	44 5f                	rex.R pop rdi
    2903:	54                   	push   rsp
    2904:	59                   	pop    rcx
    2905:	50                   	push   rax
    2906:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    290a:	55                   	push   rbp
    290b:	53                   	push   rbx
    290c:	45 5f                	rex.RB pop r15
    290e:	50                   	push   rax
    290f:	4f 53                	rex.WRXB push r11
    2911:	49 58                	rex.WB pop r8
    2913:	31 39                	xor    DWORD PTR [rcx],edi
    2915:	39 33                	cmp    DWORD PTR [rbx],esi
    2917:	30 39                	xor    BYTE PTR [rcx],bh
    2919:	20 31                	and    BYTE PTR [rcx],dh
    291b:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    291e:	4f 5f                	rex.WRXB pop r15
    2920:	73 69                	jae    298b <.debug_str+0x298b>
    2922:	7a 65                	jp     2989 <.debug_str+0x2989>
    2924:	5f                   	pop    rdi
    2925:	74 20                	je     2947 <.debug_str+0x2947>
    2927:	73 69                	jae    2992 <.debug_str+0x2992>
    2929:	7a 65                	jp     2990 <.debug_str+0x2990>
    292b:	5f                   	pop    rdi
    292c:	74 00                	je     292e <.debug_str+0x292e>
    292e:	5f                   	pop    rdi
    292f:	5f                   	pop    rdi
    2930:	49                   	rex.WB
    2931:	4e                   	rex.WRX
    2932:	4f                   	rex.WRXB
    2933:	36 34 5f             	ss xor al,0x5f
    2936:	54                   	push   rsp
    2937:	5f                   	pop    rdi
    2938:	54                   	push   rsp
    2939:	59                   	pop    rcx
    293a:	50                   	push   rax
    293b:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    293f:	55                   	push   rbp
    2940:	51                   	push   rcx
    2941:	55                   	push   rbp
    2942:	41                   	rex.B
    2943:	44 5f                	rex.R pop rdi
    2945:	54                   	push   rsp
    2946:	59                   	pop    rcx
    2947:	50                   	push   rax
    2948:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    294c:	47                   	rex.RXB
    294d:	4e 55                	rex.WRX push rbp
    294f:	5f                   	pop    rdi
    2950:	4c                   	rex.WR
    2951:	49                   	rex.WB
    2952:	42 52                	rex.X push rdx
    2954:	41 52                	push   r10
    2956:	59                   	pop    rcx
    2957:	5f                   	pop    rdi
    2958:	5f                   	pop    rdi
    2959:	20 36                	and    BYTE PTR [rsi],dh
    295b:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    295e:	53                   	push   rbx
    295f:	54                   	push   rsp
    2960:	44                   	rex.R
    2961:	43 5f                	rex.XB pop r15
    2963:	5f                   	pop    rdi
    2964:	20 31                	and    BYTE PTR [rcx],dh
    2966:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2969:	67 6c                	ins    BYTE PTR es:[edi],dx
    296b:	69 62 63 5f 63 39 39 	imul   esp,DWORD PTR [rdx+0x63],0x3939635f
    2972:	5f                   	pop    rdi
    2973:	66 6c                	data16 ins BYTE PTR es:[rdi],dx
    2975:	65 78 61             	gs js  29d9 <.debug_str+0x29d9>
    2978:	72 72                	jb     29ec <.debug_str+0x29ec>
    297a:	5f                   	pop    rdi
    297b:	61                   	(bad)  
    297c:	76 61                	jbe    29df <.debug_str+0x29df>
    297e:	69 6c 61 62 6c 65 20 	imul   ebp,DWORD PTR [rcx+riz*2+0x62],0x3120656c
    2985:	31 
    2986:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2989:	53                   	push   rbx
    298a:	53                   	push   rbx
    298b:	45 32 5f 5f          	xor    r11b,BYTE PTR [r15+0x5f]
    298f:	20 31                	and    BYTE PTR [rcx],dh
    2991:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2994:	53                   	push   rbx
    2995:	4c                   	rex.WR
    2996:	4f                   	rex.WRXB
    2997:	4e                   	rex.WRX
    2998:	47 33 32             	rex.RXB xor r14d,DWORD PTR [r10]
    299b:	5f                   	pop    rdi
    299c:	54                   	push   rsp
    299d:	59                   	pop    rcx
    299e:	50                   	push   rax
    299f:	45 20 69 6e          	and    BYTE PTR [r9+0x6e],r13b
    29a3:	74 00                	je     29a5 <.debug_str+0x29a5>
    29a5:	5f                   	pop    rdi
    29a6:	5f                   	pop    rdi
    29a7:	44                   	rex.R
    29a8:	42                   	rex.X
    29a9:	4c 5f                	rex.WR pop rdi
    29ab:	4d                   	rex.WRB
    29ac:	41 58                	pop    r8
    29ae:	5f                   	pop    rdi
    29af:	45 58                	rex.RB pop r8
    29b1:	50                   	push   rax
    29b2:	5f                   	pop    rdi
    29b3:	5f                   	pop    rdi
    29b4:	20 31                	and    BYTE PTR [rcx],dh
    29b6:	30 32                	xor    BYTE PTR [rdx],dh
    29b8:	34 00                	xor    al,0x0
    29ba:	5f                   	pop    rdi
    29bb:	5f                   	pop    rdi
    29bc:	53                   	push   rbx
    29bd:	49 5a                	rex.WB pop r10
    29bf:	45                   	rex.RB
    29c0:	4f                   	rex.WRXB
    29c1:	46 5f                	rex.RX pop rdi
    29c3:	4c                   	rex.WR
    29c4:	4f                   	rex.WRXB
    29c5:	4e                   	rex.WRX
    29c6:	47 5f                	rex.RXB pop r15
    29c8:	5f                   	pop    rdi
    29c9:	20 38                	and    BYTE PTR [rax],bh
    29cb:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    29ce:	41 54                	push   r12
    29d0:	4f                   	rex.WRXB
    29d1:	4d                   	rex.WRB
    29d2:	49                   	rex.WB
    29d3:	43 5f                	rex.XB pop r15
    29d5:	43                   	rex.XB
    29d6:	4f                   	rex.WRXB
    29d7:	4e 53                	rex.WRX push rbx
    29d9:	55                   	push   rbp
    29da:	4d                   	rex.WRB
    29db:	45 20 31             	and    BYTE PTR [r9],r14b
    29de:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    29e1:	55                   	push   rbp
    29e2:	53                   	push   rbx
    29e3:	45 5f                	rex.RB pop r15
    29e5:	46                   	rex.RX
    29e6:	49                   	rex.WB
    29e7:	4c                   	rex.WR
    29e8:	45 5f                	rex.RB pop r15
    29ea:	4f                   	rex.WRXB
    29eb:	46                   	rex.RX
    29ec:	46 53                	rex.RX push rbx
    29ee:	45 54                	rex.RB push r12
    29f0:	36 34 00             	ss xor al,0x0
    29f3:	5f                   	pop    rdi
    29f4:	49                   	rex.WB
    29f5:	4f 5f                	rex.WRXB pop r15
    29f7:	46                   	rex.RX
    29f8:	4c                   	rex.WR
    29f9:	41                   	rex.B
    29fa:	47 53                	rex.RXB push r11
    29fc:	32 5f 4d             	xor    bl,BYTE PTR [rdi+0x4d]
    29ff:	4d                   	rex.WRB
    2a00:	41 50                	push   r8
    2a02:	20 31                	and    BYTE PTR [rcx],dh
    2a04:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2a07:	46                   	rex.RX
    2a08:	4c 54                	rex.WR push rsp
    2a0a:	33 32                	xor    esi,DWORD PTR [rdx]
    2a0c:	5f                   	pop    rdi
    2a0d:	4d                   	rex.WRB
    2a0e:	49                   	rex.WB
    2a0f:	4e 5f                	rex.WRX pop rdi
    2a11:	5f                   	pop    rdi
    2a12:	20 31                	and    BYTE PTR [rcx],dh
    2a14:	2e 31 37             	xor    DWORD PTR cs:[rdi],esi
    2a17:	35 34 39 34 33       	xor    eax,0x33343934
    2a1c:	35 30 38 32 32       	xor    eax,0x32323830
    2a21:	32 38                	xor    bh,BYTE PTR [rax]
    2a23:	37                   	(bad)  
    2a24:	35 30 37 39 36       	xor    eax,0x36393730
    2a29:	38 37                	cmp    BYTE PTR [rdi],dh
    2a2b:	33 36                	xor    esi,DWORD PTR [rsi]
    2a2d:	35 33 37 32 32       	xor    eax,0x32323733
    2a32:	32 32                	xor    dh,BYTE PTR [rdx]
    2a34:	34 35                	xor    al,0x35
    2a36:	36 38 65 2d          	cmp    BYTE PTR ss:[rbp+0x2d],ah
    2a3a:	33 38                	xor    edi,DWORD PTR [rax]
    2a3c:	46 33 32             	rex.RX xor r14d,DWORD PTR [rdx]
    2a3f:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2a42:	57                   	push   rdi
    2a43:	49                   	rex.WB
    2a44:	4e 54                	rex.WRX push rsp
    2a46:	5f                   	pop    rdi
    2a47:	54                   	push   rsp
    2a48:	59                   	pop    rcx
    2a49:	50                   	push   rax
    2a4a:	45 5f                	rex.RB pop r15
    2a4c:	5f                   	pop    rdi
    2a4d:	20 75 6e             	and    BYTE PTR [rbp+0x6e],dh
    2a50:	73 69                	jae    2abb <.debug_str+0x2abb>
    2a52:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    2a54:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    2a59:	74 00                	je     2a5b <.debug_str+0x2a5b>
    2a5b:	5f                   	pop    rdi
    2a5c:	5f                   	pop    rdi
    2a5d:	55                   	push   rbp
    2a5e:	53                   	push   rbx
    2a5f:	45 5f                	rex.RB pop r15
    2a61:	4d                   	rex.WRB
    2a62:	49 53                	rex.WB push r11
    2a64:	43 00 5f 49          	rex.XB add BYTE PTR [r15+0x49],bl
    2a68:	4f 5f                	rex.WRXB pop r15
    2a6a:	63 6c 65 61          	movsxd ebp,DWORD PTR [rbp+riz*2+0x61]
    2a6e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    2a6f:	75 70                	jne    2ae1 <.debug_str+0x2ae1>
    2a71:	5f                   	pop    rdi
    2a72:	72 65                	jb     2ad9 <.debug_str+0x2ad9>
    2a74:	67 69 6f 6e 5f 65 6e 	imul   ebp,DWORD PTR [edi+0x6e],0x646e655f
    2a7b:	64 
    2a7c:	28 5f 44             	sub    BYTE PTR [rdi+0x44],bl
    2a7f:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2a80:	69 74 29 20 00 5f 5f 	imul   esi,DWORD PTR [rcx+rbp*1+0x20],0x495f5f00
    2a87:	49 
    2a88:	4e 54                	rex.WRX push rsp
    2a8a:	31 36                	xor    DWORD PTR [rsi],esi
    2a8c:	5f                   	pop    rdi
    2a8d:	4d                   	rex.WRB
    2a8e:	41 58                	pop    r8
    2a90:	5f                   	pop    rdi
    2a91:	5f                   	pop    rdi
    2a92:	20 30                	and    BYTE PTR [rax],dh
    2a94:	78 37                	js     2acd <.debug_str+0x2acd>
    2a96:	66 66 66 00 5f 50    	data16 data16 data16 add BYTE PTR [rdi+0x50],bl
    2a9c:	4f 53                	rex.WRXB push r11
    2a9e:	49 58                	rex.WB pop r8
    2aa0:	5f                   	pop    rdi
    2aa1:	43 5f                	rex.XB pop r15
    2aa3:	53                   	push   rbx
    2aa4:	4f 55                	rex.WRXB push r13
    2aa6:	52                   	push   rdx
    2aa7:	43                   	rex.XB
    2aa8:	45 20 32             	and    BYTE PTR [r10],r14b
    2aab:	30 30                	xor    BYTE PTR [rax],dh
    2aad:	38 30                	cmp    BYTE PTR [rax],dh
    2aaf:	39 4c 00 5f          	cmp    DWORD PTR [rax+rax*1+0x5f],ecx
    2ab3:	5f                   	pop    rdi
    2ab4:	53                   	push   rbx
    2ab5:	43                   	rex.XB
    2ab6:	48                   	rex.W
    2ab7:	41 52                	push   r10
    2ab9:	5f                   	pop    rdi
    2aba:	57                   	push   rdi
    2abb:	49                   	rex.WB
    2abc:	44 54                	rex.R push rsp
    2abe:	48 5f                	rex.W pop rdi
    2ac0:	5f                   	pop    rdi
    2ac1:	20 38                	and    BYTE PTR [rax],bh
    2ac3:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2ac6:	55                   	push   rbp
    2ac7:	49                   	rex.WB
    2ac8:	4e 54                	rex.WRX push rsp
    2aca:	33 32                	xor    esi,DWORD PTR [rdx]
    2acc:	5f                   	pop    rdi
    2acd:	43 28 63 29          	rex.XB sub BYTE PTR [r11+0x29],spl
    2ad1:	20 63 20             	and    BYTE PTR [rbx+0x20],ah
    2ad4:	23 23                	and    esp,DWORD PTR [rbx]
    2ad6:	20 55 00             	and    BYTE PTR [rbp+0x0],dl
    2ad9:	5f                   	pop    rdi
    2ada:	5f                   	pop    rdi
    2adb:	4c                   	rex.WR
    2adc:	44                   	rex.R
    2add:	42                   	rex.X
    2ade:	4c 5f                	rex.WR pop rdi
    2ae0:	4d                   	rex.WRB
    2ae1:	49                   	rex.WB
    2ae2:	4e 5f                	rex.WRX pop rdi
    2ae4:	31 30                	xor    DWORD PTR [rax],esi
    2ae6:	5f                   	pop    rdi
    2ae7:	45 58                	rex.RB pop r8
    2ae9:	50                   	push   rax
    2aea:	5f                   	pop    rdi
    2aeb:	5f                   	pop    rdi
    2aec:	20 28                	and    BYTE PTR [rax],ch
    2aee:	2d 34 39 33 31       	sub    eax,0x31333934
    2af3:	29 00                	sub    DWORD PTR [rax],eax
    2af5:	5f                   	pop    rdi
    2af6:	53                   	push   rbx
    2af7:	54                   	push   rsp
    2af8:	44                   	rex.R
    2af9:	49                   	rex.WB
    2afa:	4f 5f                	rex.WRXB pop r15
    2afc:	55                   	push   rbp
    2afd:	53                   	push   rbx
    2afe:	45 53                	rex.RB push r11
    2b00:	5f                   	pop    rdi
    2b01:	49                   	rex.WB
    2b02:	4f 53                	rex.WRXB push r11
    2b04:	54                   	push   rsp
    2b05:	52                   	push   rdx
    2b06:	45                   	rex.RB
    2b07:	41                   	rex.B
    2b08:	4d 20 00             	rex.WRB and BYTE PTR [r8],r8b
    2b0b:	5f                   	pop    rdi
    2b0c:	5f                   	pop    rdi
    2b0d:	53                   	push   rbx
    2b0e:	49 5a                	rex.WB pop r10
    2b10:	45                   	rex.RB
    2b11:	4f                   	rex.WRXB
    2b12:	46 5f                	rex.RX pop rdi
    2b14:	44                   	rex.R
    2b15:	4f 55                	rex.WRXB push r13
    2b17:	42                   	rex.X
    2b18:	4c                   	rex.WR
    2b19:	45 5f                	rex.RB pop r15
    2b1b:	5f                   	pop    rdi
    2b1c:	20 38                	and    BYTE PTR [rax],bh
    2b1e:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2b21:	55                   	push   rbp
    2b22:	49                   	rex.WB
    2b23:	4e 54                	rex.WRX push rsp
    2b25:	38 5f 43             	cmp    BYTE PTR [rdi+0x43],bl
    2b28:	28 63 29             	sub    BYTE PTR [rbx+0x29],ah
    2b2b:	20 63 00             	and    BYTE PTR [rbx+0x0],ah
    2b2e:	5f                   	pop    rdi
    2b2f:	5f                   	pop    rdi
    2b30:	42                   	rex.X
    2b31:	4c                   	rex.WR
    2b32:	4b                   	rex.WXB
    2b33:	43                   	rex.XB
    2b34:	4e 54                	rex.WRX push rsp
    2b36:	36 34 5f             	ss xor al,0x5f
    2b39:	54                   	push   rsp
    2b3a:	5f                   	pop    rdi
    2b3b:	54                   	push   rsp
    2b3c:	59                   	pop    rcx
    2b3d:	50                   	push   rax
    2b3e:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    2b42:	53                   	push   rbx
    2b43:	51                   	push   rcx
    2b44:	55                   	push   rbp
    2b45:	41                   	rex.B
    2b46:	44 5f                	rex.R pop rdi
    2b48:	54                   	push   rsp
    2b49:	59                   	pop    rcx
    2b4a:	50                   	push   rax
    2b4b:	45 00 5f 49          	add    BYTE PTR [r15+0x49],r11b
    2b4f:	4f 5f                	rex.WRXB pop r15
    2b51:	53                   	push   rbx
    2b52:	54                   	push   rsp
    2b53:	44                   	rex.R
    2b54:	49                   	rex.WB
    2b55:	4f 20 30             	rex.WRXB and BYTE PTR [r8],r14b
    2b58:	34 30                	xor    al,0x30
    2b5a:	30 30                	xor    BYTE PTR [rax],dh
    2b5c:	30 00                	xor    BYTE PTR [rax],al
    2b5e:	5f                   	pop    rdi
    2b5f:	5f                   	pop    rdi
    2b60:	55                   	push   rbp
    2b61:	53                   	push   rbx
    2b62:	45 5f                	rex.RB pop r15
    2b64:	46                   	rex.RX
    2b65:	4f 52                	rex.WRXB push r10
    2b67:	54                   	push   rsp
    2b68:	49                   	rex.WB
    2b69:	46 59                	rex.RX pop rcx
    2b6b:	5f                   	pop    rdi
    2b6c:	4c                   	rex.WR
    2b6d:	45 56                	rex.RB push r14
    2b6f:	45                   	rex.RB
    2b70:	4c 00 5f 5f          	rex.WR add BYTE PTR [rdi+0x5f],r11b
    2b74:	47                   	rex.RXB
    2b75:	4c                   	rex.WR
    2b76:	49                   	rex.WB
    2b77:	42                   	rex.X
    2b78:	43 5f                	rex.XB pop r15
    2b7a:	55                   	push   rbp
    2b7b:	53                   	push   rbx
    2b7c:	45 5f                	rex.RB pop r15
    2b7e:	4c                   	rex.WR
    2b7f:	49                   	rex.WB
    2b80:	42 5f                	rex.X pop rdi
    2b82:	45 58                	rex.RB pop r8
    2b84:	54                   	push   rsp
    2b85:	32 00                	xor    al,BYTE PTR [rax]
    2b87:	5f                   	pop    rdi
    2b88:	5f                   	pop    rdi
    2b89:	57                   	push   rdi
    2b8a:	49                   	rex.WB
    2b8b:	4e 54                	rex.WRX push rsp
    2b8d:	5f                   	pop    rdi
    2b8e:	4d                   	rex.WRB
    2b8f:	49                   	rex.WB
    2b90:	4e 5f                	rex.WRX pop rdi
    2b92:	5f                   	pop    rdi
    2b93:	20 30                	and    BYTE PTR [rax],dh
    2b95:	55                   	push   rbp
    2b96:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2b99:	4c                   	rex.WR
    2b9a:	44                   	rex.R
    2b9b:	42                   	rex.X
    2b9c:	4c 5f                	rex.WR pop rdi
    2b9e:	4d                   	rex.WRB
    2b9f:	41                   	rex.B
    2ba0:	4e 54                	rex.WRX push rsp
    2ba2:	5f                   	pop    rdi
    2ba3:	44                   	rex.R
    2ba4:	49                   	rex.WB
    2ba5:	47 5f                	rex.RXB pop r15
    2ba7:	5f                   	pop    rdi
    2ba8:	20 36                	and    BYTE PTR [rsi],dh
    2baa:	34 00                	xor    al,0x0
    2bac:	5f                   	pop    rdi
    2bad:	5f                   	pop    rdi
    2bae:	70 61                	jo     2c11 <.debug_str+0x2c11>
    2bb0:	64 31 00             	xor    DWORD PTR fs:[rax],eax
    2bb3:	5f                   	pop    rdi
    2bb4:	5f                   	pop    rdi
    2bb5:	70 61                	jo     2c18 <.debug_str+0x2c18>
    2bb7:	64 32 00             	xor    al,BYTE PTR fs:[rax]
    2bba:	5f                   	pop    rdi
    2bbb:	5f                   	pop    rdi
    2bbc:	70 61                	jo     2c1f <.debug_str+0x2c1f>
    2bbe:	64 33 00             	xor    eax,DWORD PTR fs:[rax]
    2bc1:	5f                   	pop    rdi
    2bc2:	5f                   	pop    rdi
    2bc3:	70 61                	jo     2c26 <.debug_str+0x2c26>
    2bc5:	64 34 00             	fs xor al,0x0
    2bc8:	5f                   	pop    rdi
    2bc9:	5f                   	pop    rdi
    2bca:	70 61                	jo     2c2d <.debug_str+0x2c2d>
    2bcc:	64 35 00 5f 5f 53    	fs xor eax,0x535f5f00
    2bd2:	54                   	push   rsp
    2bd3:	44                   	rex.R
    2bd4:	43 5f                	rex.XB pop r15
    2bd6:	55                   	push   rbp
    2bd7:	54                   	push   rsp
    2bd8:	46 5f                	rex.RX pop rdi
    2bda:	31 36                	xor    DWORD PTR [rsi],esi
    2bdc:	5f                   	pop    rdi
    2bdd:	5f                   	pop    rdi
    2bde:	20 31                	and    BYTE PTR [rcx],dh
    2be0:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2be3:	4c                   	rex.WR
    2be4:	44                   	rex.R
    2be5:	42                   	rex.X
    2be6:	4c 5f                	rex.WR pop rdi
    2be8:	45 50                	rex.RB push r8
    2bea:	53                   	push   rbx
    2beb:	49                   	rex.WB
    2bec:	4c                   	rex.WR
    2bed:	4f                   	rex.WRXB
    2bee:	4e 5f                	rex.WRX pop rdi
    2bf0:	5f                   	pop    rdi
    2bf1:	20 31                	and    BYTE PTR [rcx],dh
    2bf3:	2e 30 38             	xor    BYTE PTR cs:[rax],bh
    2bf6:	34 32                	xor    al,0x32
    2bf8:	30 32                	xor    BYTE PTR [rdx],dh
    2bfa:	31 37                	xor    DWORD PTR [rdi],esi
    2bfc:	32 34 38             	xor    dh,BYTE PTR [rax+rdi*1]
    2bff:	35 35 30 34 34       	xor    eax,0x34343035
    2c04:	33 34 30             	xor    esi,DWORD PTR [rax+rsi*1]
    2c07:	30 37                	xor    BYTE PTR [rdi],dh
    2c09:	34 35                	xor    al,0x35
    2c0b:	32 38                	xor    bh,BYTE PTR [rax]
    2c0d:	30 30                	xor    BYTE PTR [rax],dh
    2c0f:	38 36                	cmp    BYTE PTR [rsi],dh
    2c11:	39 39                	cmp    DWORD PTR [rcx],edi
    2c13:	34 31                	xor    al,0x31
    2c15:	37                   	(bad)  
    2c16:	31 65 2d             	xor    DWORD PTR [rbp+0x2d],esp
    2c19:	31 39                	xor    DWORD PTR [rcx],edi
    2c1b:	4c 00 5f 5f          	rex.WR add BYTE PTR [rdi+0x5f],r11b
    2c1f:	62                   	(bad)  
    2c20:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2c21:	73 30                	jae    2c53 <.debug_str+0x2c53>
    2c23:	28 70 74             	sub    BYTE PTR [rax+0x74],dh
    2c26:	72 29                	jb     2c51 <.debug_str+0x2c51>
    2c28:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    2c2b:	62                   	(bad)  
    2c2c:	75 69                	jne    2c97 <.debug_str+0x2c97>
    2c2e:	6c                   	ins    BYTE PTR es:[rdi],dx
    2c2f:	74 69                	je     2c9a <.debug_str+0x2c9a>
    2c31:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    2c32:	5f                   	pop    rdi
    2c33:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2c34:	62                   	(bad)  
    2c35:	6a 65                	push   0x65
    2c37:	63 74 5f 73          	movsxd esi,DWORD PTR [rdi+rbx*2+0x73]
    2c3b:	69 7a 65 20 28 70 74 	imul   edi,DWORD PTR [rdx+0x65],0x74702820
    2c42:	72 2c                	jb     2c70 <.debug_str+0x2c70>
    2c44:	20 30                	and    BYTE PTR [rax],dh
    2c46:	29 00                	sub    DWORD PTR [rax],eax
    2c48:	5f                   	pop    rdi
    2c49:	49                   	rex.WB
    2c4a:	4f                   	rex.WRXB
    2c4b:	4c                   	rex.WR
    2c4c:	42                   	rex.X
    2c4d:	46 20 31             	rex.RX and BYTE PTR [rcx],r14b
    2c50:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2c53:	61                   	(bad)  
    2c54:	74 74                	je     2cca <.debug_str+0x2cca>
    2c56:	72 69                	jb     2cc1 <.debug_str+0x2cc1>
    2c58:	62                   	(bad)  
    2c59:	75 74                	jne    2ccf <.debug_str+0x2ccf>
    2c5b:	65 5f                	gs pop rdi
    2c5d:	66 6f                	outs   dx,WORD PTR ds:[rsi]
    2c5f:	72 6d                	jb     2cce <.debug_str+0x2cce>
    2c61:	61                   	(bad)  
    2c62:	74 5f                	je     2cc3 <.debug_str+0x2cc3>
    2c64:	61                   	(bad)  
    2c65:	72 67                	jb     2cce <.debug_str+0x2cce>
    2c67:	5f                   	pop    rdi
    2c68:	5f                   	pop    rdi
    2c69:	28 78 29             	sub    BYTE PTR [rax+0x29],bh
    2c6c:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    2c6f:	61                   	(bad)  
    2c70:	74 74                	je     2ce6 <.debug_str+0x2ce6>
    2c72:	72 69                	jb     2cdd <.debug_str+0x2cdd>
    2c74:	62                   	(bad)  
    2c75:	75 74                	jne    2ceb <.debug_str+0x2ceb>
    2c77:	65 5f                	gs pop rdi
    2c79:	5f                   	pop    rdi
    2c7a:	20 28                	and    BYTE PTR [rax],ch
    2c7c:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
    2c7f:	66 6f                	outs   dx,WORD PTR ds:[rsi]
    2c81:	72 6d                	jb     2cf0 <.debug_str+0x2cf0>
    2c83:	61                   	(bad)  
    2c84:	74 5f                	je     2ce5 <.debug_str+0x2ce5>
    2c86:	61                   	(bad)  
    2c87:	72 67                	jb     2cf0 <.debug_str+0x2cf0>
    2c89:	5f                   	pop    rdi
    2c8a:	5f                   	pop    rdi
    2c8b:	20 28                	and    BYTE PTR [rax],ch
    2c8d:	78 29                	js     2cb8 <.debug_str+0x2cb8>
    2c8f:	29 29                	sub    DWORD PTR [rcx],ebp
    2c91:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2c94:	5f                   	pop    rdi
    2c95:	5f                   	pop    rdi
    2c96:	46                   	rex.RX
    2c97:	49                   	rex.WB
    2c98:	4c                   	rex.WR
    2c99:	45 5f                	rex.RB pop r15
    2c9b:	64 65 66 69 6e 65 64 	fs imul bp,WORD PTR gs:[rsi+0x65],0x2064
    2ca2:	20 
    2ca3:	31 00                	xor    DWORD PTR [rax],eax
    2ca5:	5f                   	pop    rdi
    2ca6:	42                   	rex.X
    2ca7:	49 54                	rex.WB push r12
    2ca9:	53                   	push   rbx
    2caa:	5f                   	pop    rdi
    2cab:	53                   	push   rbx
    2cac:	54                   	push   rsp
    2cad:	44                   	rex.R
    2cae:	49                   	rex.WB
    2caf:	4f 5f                	rex.WRXB pop r15
    2cb1:	4c                   	rex.WR
    2cb2:	49                   	rex.WB
    2cb3:	4d 5f                	rex.WRB pop r15
    2cb5:	48 20 31             	rex.W and BYTE PTR [rcx],sil
    2cb8:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2cbb:	4c                   	rex.WR
    2cbc:	44                   	rex.R
    2cbd:	42                   	rex.X
    2cbe:	4c 5f                	rex.WR pop rdi
    2cc0:	48                   	rex.W
    2cc1:	41 53                	push   r11
    2cc3:	5f                   	pop    rdi
    2cc4:	49                   	rex.WB
    2cc5:	4e                   	rex.WRX
    2cc6:	46                   	rex.RX
    2cc7:	49                   	rex.WB
    2cc8:	4e                   	rex.WRX
    2cc9:	49 54                	rex.WB push r12
    2ccb:	59                   	pop    rcx
    2ccc:	5f                   	pop    rdi
    2ccd:	5f                   	pop    rdi
    2cce:	20 31                	and    BYTE PTR [rcx],dh
    2cd0:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2cd3:	55                   	push   rbp
    2cd4:	53                   	push   rbx
    2cd5:	45 5f                	rex.RB pop r15
    2cd7:	50                   	push   rax
    2cd8:	4f 53                	rex.WRXB push r11
    2cda:	49 58                	rex.WB pop r8
    2cdc:	20 31                	and    BYTE PTR [rcx],dh
    2cde:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2ce1:	49                   	rex.WB
    2ce2:	4e                   	rex.WRX
    2ce3:	4f 5f                	rex.WRXB pop r15
    2ce5:	54                   	push   rsp
    2ce6:	5f                   	pop    rdi
    2ce7:	4d                   	rex.WRB
    2ce8:	41 54                	push   r12
    2cea:	43                   	rex.XB
    2ceb:	48                   	rex.W
    2cec:	45 53                	rex.RB push r11
    2cee:	5f                   	pop    rdi
    2cef:	49                   	rex.WB
    2cf0:	4e                   	rex.WRX
    2cf1:	4f                   	rex.WRXB
    2cf2:	36 34 5f             	ss xor al,0x5f
    2cf5:	54                   	push   rsp
    2cf6:	20 31                	and    BYTE PTR [rcx],dh
    2cf8:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2cfb:	47                   	rex.RXB
    2cfc:	43                   	rex.XB
    2cfd:	43 5f                	rex.XB pop r15
    2cff:	49                   	rex.WB
    2d00:	45                   	rex.RB
    2d01:	43 5f                	rex.XB pop r15
    2d03:	35 35 39 5f 43       	xor    eax,0x435f3935
    2d08:	4f                   	rex.WRXB
    2d09:	4d 50                	rex.WRB push r8
    2d0b:	4c                   	rex.WR
    2d0c:	45 58                	rex.RB pop r8
    2d0e:	20 32                	and    BYTE PTR [rdx],dh
    2d10:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2d13:	53                   	push   rbx
    2d14:	49                   	rex.WB
    2d15:	47 5f                	rex.RXB pop r15
    2d17:	41 54                	push   r12
    2d19:	4f                   	rex.WRXB
    2d1a:	4d                   	rex.WRB
    2d1b:	49                   	rex.WB
    2d1c:	43 5f                	rex.XB pop r15
    2d1e:	4d                   	rex.WRB
    2d1f:	49                   	rex.WB
    2d20:	4e 5f                	rex.WRX pop rdi
    2d22:	5f                   	pop    rdi
    2d23:	20 28                	and    BYTE PTR [rax],ch
    2d25:	2d 5f 5f 53 49       	sub    eax,0x49535f5f
    2d2a:	47 5f                	rex.RXB pop r15
    2d2c:	41 54                	push   r12
    2d2e:	4f                   	rex.WRXB
    2d2f:	4d                   	rex.WRB
    2d30:	49                   	rex.WB
    2d31:	43 5f                	rex.XB pop r15
    2d33:	4d                   	rex.WRB
    2d34:	41 58                	pop    r8
    2d36:	5f                   	pop    rdi
    2d37:	5f                   	pop    rdi
    2d38:	20 2d 20 31 29 00    	and    BYTE PTR [rip+0x293120],ch        # 295e5e <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x295e5e>
    2d3e:	5f                   	pop    rdi
    2d3f:	49                   	rex.WB
    2d40:	4f 5f                	rex.WRXB pop r15
    2d42:	49                   	rex.WB
    2d43:	4e 5f                	rex.WRX pop rdi
    2d45:	42                   	rex.X
    2d46:	41                   	rex.B
    2d47:	43                   	rex.XB
    2d48:	4b 55                	rex.WXB push r13
    2d4a:	50                   	push   rax
    2d4b:	20 30                	and    BYTE PTR [rax],dh
    2d4d:	78 31                	js     2d80 <.debug_str+0x2d80>
    2d4f:	30 30                	xor    BYTE PTR [rax],dh
    2d51:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    2d54:	4f 5f                	rex.WRXB pop r15
    2d56:	66 6c                	data16 ins BYTE PTR es:[rdi],dx
    2d58:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2d59:	63 6b 66             	movsxd ebp,DWORD PTR [rbx+0x66]
    2d5c:	69 6c 65 28 5f 66 70 	imul   ebp,DWORD PTR [rbp+riz*2+0x28],0x2970665f
    2d63:	29 
    2d64:	20 00                	and    BYTE PTR [rax],al
    2d66:	5f                   	pop    rdi
    2d67:	5f                   	pop    rdi
    2d68:	53                   	push   rbx
    2d69:	49 5a                	rex.WB pop r10
    2d6b:	45                   	rex.RB
    2d6c:	4f                   	rex.WRXB
    2d6d:	46 5f                	rex.RX pop rdi
    2d6f:	57                   	push   rdi
    2d70:	43                   	rex.XB
    2d71:	48                   	rex.W
    2d72:	41 52                	push   r10
    2d74:	5f                   	pop    rdi
    2d75:	54                   	push   rsp
    2d76:	5f                   	pop    rdi
    2d77:	5f                   	pop    rdi
    2d78:	20 34 00             	and    BYTE PTR [rax+rax*1],dh
    2d7b:	5f                   	pop    rdi
    2d7c:	5f                   	pop    rdi
    2d7d:	61                   	(bad)  
    2d7e:	74 74                	je     2df4 <.debug_str+0x2df4>
    2d80:	72 69                	jb     2deb <.debug_str+0x2deb>
    2d82:	62                   	(bad)  
    2d83:	75 74                	jne    2df9 <.debug_str+0x2df9>
    2d85:	65 5f                	gs pop rdi
    2d87:	64 65 70 72          	fs gs jo 2dfd <.debug_str+0x2dfd>
    2d8b:	65 63 61 74          	movsxd esp,DWORD PTR gs:[rcx+0x74]
    2d8f:	65 64 5f             	gs fs pop rdi
    2d92:	5f                   	pop    rdi
    2d93:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    2d96:	61                   	(bad)  
    2d97:	74 74                	je     2e0d <.debug_str+0x2e0d>
    2d99:	72 69                	jb     2e04 <.debug_str+0x2e04>
    2d9b:	62                   	(bad)  
    2d9c:	75 74                	jne    2e12 <.debug_str+0x2e12>
    2d9e:	65 5f                	gs pop rdi
    2da0:	5f                   	pop    rdi
    2da1:	20 28                	and    BYTE PTR [rax],ch
    2da3:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
    2da6:	64 65 70 72          	fs gs jo 2e1c <.debug_str+0x2e1c>
    2daa:	65 63 61 74          	movsxd esp,DWORD PTR gs:[rcx+0x74]
    2dae:	65 64 5f             	gs fs pop rdi
    2db1:	5f                   	pop    rdi
    2db2:	29 29                	sub    DWORD PTR [rcx],ebp
    2db4:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2db7:	46                   	rex.RX
    2db8:	4c 54                	rex.WR push rsp
    2dba:	31 32                	xor    DWORD PTR [rdx],esi
    2dbc:	38 5f 4d             	cmp    BYTE PTR [rdi+0x4d],bl
    2dbf:	49                   	rex.WB
    2dc0:	4e 5f                	rex.WRX pop rdi
    2dc2:	31 30                	xor    DWORD PTR [rax],esi
    2dc4:	5f                   	pop    rdi
    2dc5:	45 58                	rex.RB pop r8
    2dc7:	50                   	push   rax
    2dc8:	5f                   	pop    rdi
    2dc9:	5f                   	pop    rdi
    2dca:	20 28                	and    BYTE PTR [rax],ch
    2dcc:	2d 34 39 33 31       	sub    eax,0x31333934
    2dd1:	29 00                	sub    DWORD PTR [rax],eax
    2dd3:	5f                   	pop    rdi
    2dd4:	5f                   	pop    rdi
    2dd5:	46                   	rex.RX
    2dd6:	4c                   	rex.WR
    2dd7:	4f                   	rex.WRXB
    2dd8:	41 54                	push   r12
    2dda:	5f                   	pop    rdi
    2ddb:	57                   	push   rdi
    2ddc:	4f 52                	rex.WRXB push r10
    2dde:	44 5f                	rex.R pop rdi
    2de0:	4f 52                	rex.WRXB push r10
    2de2:	44                   	rex.R
    2de3:	45 52                	rex.RB push r10
    2de5:	5f                   	pop    rdi
    2de6:	5f                   	pop    rdi
    2de7:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    2dea:	4f 52                	rex.WRXB push r10
    2dec:	44                   	rex.R
    2ded:	45 52                	rex.RB push r10
    2def:	5f                   	pop    rdi
    2df0:	4c                   	rex.WR
    2df1:	49 54                	rex.WB push r12
    2df3:	54                   	push   rsp
    2df4:	4c                   	rex.WR
    2df5:	45 5f                	rex.RB pop r15
    2df7:	45                   	rex.RB
    2df8:	4e                   	rex.WRX
    2df9:	44                   	rex.R
    2dfa:	49                   	rex.WB
    2dfb:	41                   	rex.B
    2dfc:	4e 5f                	rex.WRX pop rdi
    2dfe:	5f                   	pop    rdi
    2dff:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2e02:	47                   	rex.RXB
    2e03:	43                   	rex.XB
    2e04:	43 5f                	rex.XB pop r15
    2e06:	48                   	rex.W
    2e07:	41 56                	push   r14
    2e09:	45 5f                	rex.RB pop r15
    2e0b:	53                   	push   rbx
    2e0c:	59                   	pop    rcx
    2e0d:	4e                   	rex.WRX
    2e0e:	43 5f                	rex.XB pop r15
    2e10:	43                   	rex.XB
    2e11:	4f                   	rex.WRXB
    2e12:	4d 50                	rex.WRB push r8
    2e14:	41 52                	push   r10
    2e16:	45 5f                	rex.RB pop r15
    2e18:	41                   	rex.B
    2e19:	4e                   	rex.WRX
    2e1a:	44 5f                	rex.R pop rdi
    2e1c:	53                   	push   rbx
    2e1d:	57                   	push   rdi
    2e1e:	41 50                	push   r8
    2e20:	5f                   	pop    rdi
    2e21:	32 20                	xor    ah,BYTE PTR [rax]
    2e23:	31 00                	xor    DWORD PTR [rax],eax
    2e25:	5f                   	pop    rdi
    2e26:	47 5f                	rex.RXB pop r15
    2e28:	48                   	rex.W
    2e29:	41 56                	push   r14
    2e2b:	45 5f                	rex.RB pop r15
    2e2d:	4d 52                	rex.WRB push r10
    2e2f:	45                   	rex.RB
    2e30:	4d                   	rex.WRB
    2e31:	41 50                	push   r8
    2e33:	20 31                	and    BYTE PTR [rcx],dh
    2e35:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2e38:	44                   	rex.R
    2e39:	45                   	rex.RB
    2e3a:	43 33 32             	rex.XB xor esi,DWORD PTR [r10]
    2e3d:	5f                   	pop    rdi
    2e3e:	4d                   	rex.WRB
    2e3f:	41                   	rex.B
    2e40:	4e 54                	rex.WRX push rsp
    2e42:	5f                   	pop    rdi
    2e43:	44                   	rex.R
    2e44:	49                   	rex.WB
    2e45:	47 5f                	rex.RXB pop r15
    2e47:	5f                   	pop    rdi
    2e48:	20 37                	and    BYTE PTR [rdi],dh
    2e4a:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2e4d:	46                   	rex.RX
    2e4e:	4c 54                	rex.WR push rsp
    2e50:	33 32                	xor    esi,DWORD PTR [rdx]
    2e52:	5f                   	pop    rdi
    2e53:	44                   	rex.R
    2e54:	45                   	rex.RB
    2e55:	4e                   	rex.WRX
    2e56:	4f 52                	rex.WRXB push r10
    2e58:	4d 5f                	rex.WRB pop r15
    2e5a:	4d                   	rex.WRB
    2e5b:	49                   	rex.WB
    2e5c:	4e 5f                	rex.WRX pop rdi
    2e5e:	5f                   	pop    rdi
    2e5f:	20 31                	and    BYTE PTR [rcx],dh
    2e61:	2e 34 30             	cs xor al,0x30
    2e64:	31 32                	xor    DWORD PTR [rdx],esi
    2e66:	39 38                	cmp    DWORD PTR [rax],edi
    2e68:	34 36                	xor    al,0x36
    2e6a:	34 33                	xor    al,0x33
    2e6c:	32 34 38             	xor    dh,BYTE PTR [rax+rdi*1]
    2e6f:	31 37                	xor    DWORD PTR [rdi],esi
    2e71:	30 37                	xor    BYTE PTR [rdi],dh
    2e73:	30 39                	xor    BYTE PTR [rcx],bh
    2e75:	32 33                	xor    dh,BYTE PTR [rbx]
    2e77:	37                   	(bad)  
    2e78:	32 39                	xor    bh,BYTE PTR [rcx]
    2e7a:	35 38 33 32 38       	xor    eax,0x38323338
    2e7f:	39 39                	cmp    DWORD PTR [rcx],edi
    2e81:	31 36                	xor    DWORD PTR [rsi],esi
    2e83:	31 33                	xor    DWORD PTR [rbx],esi
    2e85:	65 2d 34 35 46 33    	gs sub eax,0x33463534
    2e8b:	32 00                	xor    al,BYTE PTR [rax]
    2e8d:	5f                   	pop    rdi
    2e8e:	5f                   	pop    rdi
    2e8f:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    2e90:	65 65 64 5f          	gs gs fs pop rdi
    2e94:	73 69                	jae    2eff <.debug_str+0x2eff>
    2e96:	7a 65                	jp     2efd <.debug_str+0x2efd>
    2e98:	5f                   	pop    rdi
    2e99:	74 00                	je     2e9b <.debug_str+0x2e9b>
    2e9b:	5f                   	pop    rdi
    2e9c:	5f                   	pop    rdi
    2e9d:	55                   	push   rbp
    2e9e:	49                   	rex.WB
    2e9f:	4e 54                	rex.WRX push rsp
    2ea1:	5f                   	pop    rdi
    2ea2:	46                   	rex.RX
    2ea3:	41 53                	push   r11
    2ea5:	54                   	push   rsp
    2ea6:	31 36                	xor    DWORD PTR [rsi],esi
    2ea8:	5f                   	pop    rdi
    2ea9:	4d                   	rex.WRB
    2eaa:	41 58                	pop    r8
    2eac:	5f                   	pop    rdi
    2ead:	5f                   	pop    rdi
    2eae:	20 30                	and    BYTE PTR [rax],dh
    2eb0:	78 66                	js     2f18 <.debug_str+0x2f18>
    2eb2:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16
    2eb9:	66 66 66 66 66 66 66 
    2ec0:	66 55                	push   bp
    2ec2:	4c 00 5f 5f          	rex.WR add BYTE PTR [rdi+0x5f],r11b
    2ec6:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    2ec7:	65 65 64 5f          	gs gs fs pop rdi
    2ecb:	5f                   	pop    rdi
    2ecc:	5f                   	pop    rdi
    2ecd:	76 61                	jbe    2f30 <.debug_str+0x2f30>
    2ecf:	5f                   	pop    rdi
    2ed0:	6c                   	ins    BYTE PTR es:[rdi],dx
    2ed1:	69 73 74 00 5f 5f 49 	imul   esi,DWORD PTR [rbx+0x74],0x495f5f00
    2ed8:	4e 54                	rex.WRX push rsp
    2eda:	33 32                	xor    esi,DWORD PTR [rdx]
    2edc:	5f                   	pop    rdi
    2edd:	4d                   	rex.WRB
    2ede:	41 58                	pop    r8
    2ee0:	5f                   	pop    rdi
    2ee1:	5f                   	pop    rdi
    2ee2:	20 30                	and    BYTE PTR [rax],dh
    2ee4:	78 37                	js     2f1d <.debug_str+0x2f1d>
    2ee6:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 add BYTE PTR [rdi+0x49],bl
    2eed:	00 5f 49 
    2ef0:	4f 5f                	rex.WRXB pop r15
    2ef2:	49                   	rex.WB
    2ef3:	4e 54                	rex.WRX push rsp
    2ef5:	45 52                	rex.RB push r10
    2ef7:	4e                   	rex.WRX
    2ef8:	41                   	rex.B
    2ef9:	4c 20 30             	rex.WR and BYTE PTR [rax],r14b
    2efc:	31 30                	xor    DWORD PTR [rax],esi
    2efe:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2f01:	5f                   	pop    rdi
    2f02:	69 6e 74 5f 73 69 7a 	imul   ebp,DWORD PTR [rsi+0x74],0x7a69735f
    2f09:	65 5f                	gs pop rdi
    2f0b:	74 5f                	je     2f6c <.debug_str+0x2f6c>
    2f0d:	68 20 00 5f 5f       	push   0x5f5f0020
    2f12:	67 6c                	ins    BYTE PTR es:[edi],dx
    2f14:	69 62 63 5f 6c 69 6b 	imul   esp,DWORD PTR [rdx+0x63],0x6b696c5f
    2f1b:	65 6c                	gs ins BYTE PTR es:[rdi],dx
    2f1d:	79 28                	jns    2f47 <.debug_str+0x2f47>
    2f1f:	63 6f 6e             	movsxd ebp,DWORD PTR [rdi+0x6e]
    2f22:	64 29 20             	sub    DWORD PTR fs:[rax],esp
    2f25:	5f                   	pop    rdi
    2f26:	5f                   	pop    rdi
    2f27:	62                   	(bad)  
    2f28:	75 69                	jne    2f93 <.debug_str+0x2f93>
    2f2a:	6c                   	ins    BYTE PTR es:[rdi],dx
    2f2b:	74 69                	je     2f96 <.debug_str+0x2f96>
    2f2d:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    2f2e:	5f                   	pop    rdi
    2f2f:	65 78 70             	gs js  2fa2 <.debug_str+0x2fa2>
    2f32:	65 63 74 20 28       	movsxd esi,DWORD PTR gs:[rax+riz*1+0x28]
    2f37:	28 63 6f             	sub    BYTE PTR [rbx+0x6f],ah
    2f3a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    2f3b:	64 29 2c 20          	sub    DWORD PTR fs:[rax+riz*1],ebp
    2f3f:	31 29                	xor    DWORD PTR [rcx],ebp
    2f41:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2f44:	41 54                	push   r12
    2f46:	4f                   	rex.WRXB
    2f47:	4d                   	rex.WRB
    2f48:	49                   	rex.WB
    2f49:	43 5f                	rex.XB pop r15
    2f4b:	41                   	rex.B
    2f4c:	43 51                	rex.XB push r9
    2f4e:	55                   	push   rbp
    2f4f:	49 52                	rex.WB push r10
    2f51:	45 20 32             	and    BYTE PTR [r10],r14b
    2f54:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2f57:	55                   	push   rbp
    2f58:	49                   	rex.WB
    2f59:	4e 54                	rex.WRX push rsp
    2f5b:	31 36                	xor    DWORD PTR [rsi],esi
    2f5d:	5f                   	pop    rdi
    2f5e:	43 28 63 29          	rex.XB sub BYTE PTR [r11+0x29],spl
    2f62:	20 63 00             	and    BYTE PTR [rbx+0x0],ah
    2f65:	5f                   	pop    rdi
    2f66:	49                   	rex.WB
    2f67:	4f 5f                	rex.WRXB pop r15
    2f69:	46                   	rex.RX
    2f6a:	4c                   	rex.WR
    2f6b:	41                   	rex.B
    2f6c:	47 53                	rex.RXB push r11
    2f6e:	32 5f 55             	xor    bl,BYTE PTR [rdi+0x55]
    2f71:	53                   	push   rbx
    2f72:	45 52                	rex.RB push r10
    2f74:	5f                   	pop    rdi
    2f75:	57                   	push   rdi
    2f76:	42 55                	rex.X push rbp
    2f78:	46 20 38             	rex.RX and BYTE PTR [rax],r15b
    2f7b:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2f7e:	49                   	rex.WB
    2f7f:	4e 54                	rex.WRX push rsp
    2f81:	36 34 5f             	ss xor al,0x5f
    2f84:	4d                   	rex.WRB
    2f85:	41 58                	pop    r8
    2f87:	5f                   	pop    rdi
    2f88:	5f                   	pop    rdi
    2f89:	20 30                	and    BYTE PTR [rax],dh
    2f8b:	78 37                	js     2fc4 <.debug_str+0x2fc4>
    2f8d:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16
    2f94:	66 66 66 66 66 66 66 
    2f9b:	66 4c 00 5f 5f       	data16 rex.WR add BYTE PTR [rdi+0x5f],r11b
    2fa0:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    2fa1:	65 65 64 5f          	gs gs fs pop rdi
    2fa5:	73 69                	jae    3010 <.debug_str+0x3010>
    2fa7:	7a 65                	jp     300e <.debug_str+0x300e>
    2fa9:	5f                   	pop    rdi
    2faa:	74 20                	je     2fcc <.debug_str+0x2fcc>
    2fac:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    2faf:	62                   	(bad)  
    2fb0:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2fb1:	73 28                	jae    2fdb <.debug_str+0x2fdb>
    2fb3:	70 74                	jo     3029 <.debug_str+0x3029>
    2fb5:	72 29                	jb     2fe0 <.debug_str+0x2fe0>
    2fb7:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    2fba:	62                   	(bad)  
    2fbb:	75 69                	jne    3026 <.debug_str+0x3026>
    2fbd:	6c                   	ins    BYTE PTR es:[rdi],dx
    2fbe:	74 69                	je     3029 <.debug_str+0x3029>
    2fc0:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    2fc1:	5f                   	pop    rdi
    2fc2:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2fc3:	62                   	(bad)  
    2fc4:	6a 65                	push   0x65
    2fc6:	63 74 5f 73          	movsxd esi,DWORD PTR [rdi+rbx*2+0x73]
    2fca:	69 7a 65 20 28 70 74 	imul   edi,DWORD PTR [rdx+0x65],0x74702820
    2fd1:	72 2c                	jb     2fff <.debug_str+0x2fff>
    2fd3:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    2fd6:	55                   	push   rbp
    2fd7:	53                   	push   rbx
    2fd8:	45 5f                	rex.RB pop r15
    2fda:	46                   	rex.RX
    2fdb:	4f 52                	rex.WRXB push r10
    2fdd:	54                   	push   rsp
    2fde:	49                   	rex.WB
    2fdf:	46 59                	rex.RX pop rcx
    2fe1:	5f                   	pop    rdi
    2fe2:	4c                   	rex.WR
    2fe3:	45 56                	rex.RB push r14
    2fe5:	45                   	rex.RB
    2fe6:	4c 20 3e             	rex.WR and BYTE PTR [rsi],r15b
    2fe9:	20 31                	and    BYTE PTR [rcx],dh
    2feb:	29 00                	sub    DWORD PTR [rax],eax
    2fed:	5f                   	pop    rdi
    2fee:	5f                   	pop    rdi
    2fef:	55                   	push   rbp
    2ff0:	57                   	push   rdi
    2ff1:	4f 52                	rex.WRXB push r10
    2ff3:	44 5f                	rex.R pop rdi
    2ff5:	54                   	push   rsp
    2ff6:	59                   	pop    rcx
    2ff7:	50                   	push   rax
    2ff8:	45 20 75 6e          	and    BYTE PTR [r13+0x6e],r14b
    2ffc:	73 69                	jae    3067 <.debug_str+0x3067>
    2ffe:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    3000:	65 64 20 6c 6f 6e    	gs and BYTE PTR fs:[rdi+rbp*2+0x6e],ch
    3006:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
    300a:	74 00                	je     300c <.debug_str+0x300c>
    300c:	5f                   	pop    rdi
    300d:	5f                   	pop    rdi
    300e:	47                   	rex.RXB
    300f:	4c                   	rex.WR
    3010:	49                   	rex.WB
    3011:	42                   	rex.X
    3012:	43 5f                	rex.XB pop r15
    3014:	4d                   	rex.WRB
    3015:	49                   	rex.WB
    3016:	4e                   	rex.WRX
    3017:	4f 52                	rex.WRXB push r10
    3019:	5f                   	pop    rdi
    301a:	5f                   	pop    rdi
    301b:	20 32                	and    BYTE PTR [rdx],dh
    301d:	37                   	(bad)  
    301e:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3021:	53                   	push   rbx
    3022:	45                   	rex.RB
    3023:	47 5f                	rex.RXB pop r15
    3025:	47 53                	rex.RXB push r11
    3027:	20 31                	and    BYTE PTR [rcx],dh
    3029:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    302c:	53                   	push   rbx
    302d:	53                   	push   rbx
    302e:	45 5f                	rex.RB pop r15
    3030:	4d                   	rex.WRB
    3031:	41 54                	push   r12
    3033:	48 5f                	rex.W pop rdi
    3035:	5f                   	pop    rdi
    3036:	20 31                	and    BYTE PTR [rcx],dh
    3038:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    303b:	4e                   	rex.WRX
    303c:	4c                   	rex.WR
    303d:	49                   	rex.WB
    303e:	4e                   	rex.WRX
    303f:	4b 5f                	rex.WXB pop r15
    3041:	54                   	push   rsp
    3042:	5f                   	pop    rdi
    3043:	54                   	push   rsp
    3044:	59                   	pop    rcx
    3045:	50                   	push   rax
    3046:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    304a:	53                   	push   rbx
    304b:	59                   	pop    rcx
    304c:	53                   	push   rbx
    304d:	43                   	rex.XB
    304e:	41                   	rex.B
    304f:	4c                   	rex.WR
    3050:	4c 5f                	rex.WR pop rdi
    3052:	55                   	push   rbp
    3053:	4c                   	rex.WR
    3054:	4f                   	rex.WRXB
    3055:	4e                   	rex.WRX
    3056:	47 5f                	rex.RXB pop r15
    3058:	54                   	push   rsp
    3059:	59                   	pop    rcx
    305a:	50                   	push   rax
    305b:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    305f:	55                   	push   rbp
    3060:	49                   	rex.WB
    3061:	4e 54                	rex.WRX push rsp
    3063:	4d                   	rex.WRB
    3064:	41 58                	pop    r8
    3066:	5f                   	pop    rdi
    3067:	54                   	push   rsp
    3068:	59                   	pop    rcx
    3069:	50                   	push   rax
    306a:	45 5f                	rex.RB pop r15
    306c:	5f                   	pop    rdi
    306d:	20 6c 6f 6e          	and    BYTE PTR [rdi+rbp*2+0x6e],ch
    3071:	67 20 75 6e          	and    BYTE PTR [ebp+0x6e],dh
    3075:	73 69                	jae    30e0 <.debug_str+0x30e0>
    3077:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    3079:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    307e:	74 00                	je     3080 <.debug_str+0x3080>
    3080:	5f                   	pop    rdi
    3081:	5f                   	pop    rdi
    3082:	55                   	push   rbp
    3083:	53                   	push   rbx
    3084:	45 5f                	rex.RB pop r15
    3086:	58                   	pop    rax
    3087:	4f 50                	rex.WRXB push r8
    3089:	45                   	rex.RB
    308a:	4e 32 4b 00          	rex.WRX xor r9b,BYTE PTR [rbx+0x0]
    308e:	5f                   	pop    rdi
    308f:	5f                   	pop    rdi
    3090:	4c                   	rex.WR
    3091:	45                   	rex.RB
    3092:	41                   	rex.B
    3093:	46 20 2c 20          	and    BYTE PTR [rax+r12*1],r13b
    3097:	5f                   	pop    rdi
    3098:	5f                   	pop    rdi
    3099:	6c                   	ins    BYTE PTR es:[rdi],dx
    309a:	65 61                	gs (bad) 
    309c:	66 5f                	pop    di
    309e:	5f                   	pop    rdi
    309f:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    30a2:	44                   	rex.R
    30a3:	45                   	rex.RB
    30a4:	43 31 32             	rex.XB xor DWORD PTR [r10],esi
    30a7:	38 5f 4d             	cmp    BYTE PTR [rdi+0x4d],bl
    30aa:	41 58                	pop    r8
    30ac:	5f                   	pop    rdi
    30ad:	45 58                	rex.RB pop r8
    30af:	50                   	push   rax
    30b0:	5f                   	pop    rdi
    30b1:	5f                   	pop    rdi
    30b2:	20 36                	and    BYTE PTR [rsi],dh
    30b4:	31 34 35 00 5f 49 4f 	xor    DWORD PTR [rsi*1+0x4f495f00],esi
    30bb:	5f                   	pop    rdi
    30bc:	4c                   	rex.WR
    30bd:	45                   	rex.RB
    30be:	46 54                	rex.RX push rsp
    30c0:	20 30                	and    BYTE PTR [rax],dh
    30c2:	32 00                	xor    al,BYTE PTR [rax]
    30c4:	5f                   	pop    rdi
    30c5:	5f                   	pop    rdi
    30c6:	66 6f                	outs   dx,WORD PTR ds:[rsi]
    30c8:	72 74                	jb     313e <.debug_str+0x313e>
    30ca:	69 66 79 5f 66 75 6e 	imul   esp,DWORD PTR [rsi+0x79],0x6e75665f
    30d1:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
    30d5:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    30d6:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    30d9:	65 78 74             	gs js  3150 <.debug_str+0x3150>
    30dc:	65 72 6e             	gs jb  314d <.debug_str+0x314d>
    30df:	5f                   	pop    rdi
    30e0:	61                   	(bad)  
    30e1:	6c                   	ins    BYTE PTR es:[rdi],dx
    30e2:	77 61                	ja     3145 <.debug_str+0x3145>
    30e4:	79 73                	jns    3159 <.debug_str+0x3159>
    30e6:	5f                   	pop    rdi
    30e7:	69 6e 6c 69 6e 65 20 	imul   ebp,DWORD PTR [rsi+0x6c],0x20656e69
    30ee:	5f                   	pop    rdi
    30ef:	5f                   	pop    rdi
    30f0:	61                   	(bad)  
    30f1:	74 74                	je     3167 <.debug_str+0x3167>
    30f3:	72 69                	jb     315e <.debug_str+0x315e>
    30f5:	62                   	(bad)  
    30f6:	75 74                	jne    316c <.debug_str+0x316c>
    30f8:	65 5f                	gs pop rdi
    30fa:	61                   	(bad)  
    30fb:	72 74                	jb     3171 <.debug_str+0x3171>
    30fd:	69 66 69 63 69 61 6c 	imul   esp,DWORD PTR [rsi+0x69],0x6c616963
    3104:	5f                   	pop    rdi
    3105:	5f                   	pop    rdi
    3106:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    3109:	4f 5f                	rex.WRXB pop r15
    310b:	42                   	rex.X
    310c:	4f                   	rex.WRXB
    310d:	4f                   	rex.WRXB
    310e:	4c                   	rex.WR
    310f:	41                   	rex.B
    3110:	4c 50                	rex.WR push rax
    3112:	48                   	rex.W
    3113:	41 20 30             	and    BYTE PTR [r8],sil
    3116:	32 30                	xor    dh,BYTE PTR [rax]
    3118:	30 30                	xor    BYTE PTR [rax],dh
    311a:	30 30                	xor    BYTE PTR [rax],dh
    311c:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    311f:	53                   	push   rbx
    3120:	49                   	rex.WB
    3121:	47 5f                	rex.RXB pop r15
    3123:	41 54                	push   r12
    3125:	4f                   	rex.WRXB
    3126:	4d                   	rex.WRB
    3127:	49                   	rex.WB
    3128:	43 5f                	rex.XB pop r15
    312a:	57                   	push   rdi
    312b:	49                   	rex.WB
    312c:	44 54                	rex.R push rsp
    312e:	48 5f                	rex.W pop rdi
    3130:	5f                   	pop    rdi
    3131:	20 33                	and    BYTE PTR [rbx],dh
    3133:	32 00                	xor    al,BYTE PTR [rax]
    3135:	5f                   	pop    rdi
    3136:	5f                   	pop    rdi
    3137:	43                   	rex.XB
    3138:	4f                   	rex.WRXB
    3139:	4e                   	rex.WRX
    313a:	43                   	rex.XB
    313b:	41 54                	push   r12
    313d:	28 78 2c             	sub    BYTE PTR [rax+0x2c],bh
    3140:	79 29                	jns    316b <.debug_str+0x316b>
    3142:	20 78 20             	and    BYTE PTR [rax+0x20],bh
    3145:	23 23                	and    esp,DWORD PTR [rbx]
    3147:	20 79 00             	and    BYTE PTR [rcx+0x0],bh
    314a:	5f                   	pop    rdi
    314b:	5f                   	pop    rdi
    314c:	61                   	(bad)  
    314d:	74 74                	je     31c3 <.debug_str+0x31c3>
    314f:	72 69                	jb     31ba <.debug_str+0x31ba>
    3151:	62                   	(bad)  
    3152:	75 74                	jne    31c8 <.debug_str+0x31c8>
    3154:	65 5f                	gs pop rdi
    3156:	64 65 70 72          	fs gs jo 31cc <.debug_str+0x31cc>
    315a:	65 63 61 74          	movsxd esp,DWORD PTR gs:[rcx+0x74]
    315e:	65 64 5f             	gs fs pop rdi
    3161:	6d                   	ins    DWORD PTR es:[rdi],dx
    3162:	73 67                	jae    31cb <.debug_str+0x31cb>
    3164:	5f                   	pop    rdi
    3165:	5f                   	pop    rdi
    3166:	28 6d 73             	sub    BYTE PTR [rbp+0x73],ch
    3169:	67 29 20             	sub    DWORD PTR [eax],esp
    316c:	5f                   	pop    rdi
    316d:	5f                   	pop    rdi
    316e:	61                   	(bad)  
    316f:	74 74                	je     31e5 <.debug_str+0x31e5>
    3171:	72 69                	jb     31dc <.debug_str+0x31dc>
    3173:	62                   	(bad)  
    3174:	75 74                	jne    31ea <.debug_str+0x31ea>
    3176:	65 5f                	gs pop rdi
    3178:	5f                   	pop    rdi
    3179:	20 28                	and    BYTE PTR [rax],ch
    317b:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
    317e:	64 65 70 72          	fs gs jo 31f4 <.debug_str+0x31f4>
    3182:	65 63 61 74          	movsxd esp,DWORD PTR gs:[rcx+0x74]
    3186:	65 64 5f             	gs fs pop rdi
    3189:	5f                   	pop    rdi
    318a:	20 28                	and    BYTE PTR [rax],ch
    318c:	6d                   	ins    DWORD PTR es:[rdi],dx
    318d:	73 67                	jae    31f6 <.debug_str+0x31f6>
    318f:	29 29                	sub    DWORD PTR [rcx],ebp
    3191:	29 00                	sub    DWORD PTR [rax],eax
    3193:	5f                   	pop    rdi
    3194:	5f                   	pop    rdi
    3195:	53                   	push   rbx
    3196:	48 52                	rex.W push rdx
    3198:	54                   	push   rsp
    3199:	5f                   	pop    rdi
    319a:	4d                   	rex.WRB
    319b:	41 58                	pop    r8
    319d:	5f                   	pop    rdi
    319e:	5f                   	pop    rdi
    319f:	20 30                	and    BYTE PTR [rax],dh
    31a1:	78 37                	js     31da <.debug_str+0x31da>
    31a3:	66 66 66 00 5f 5f    	data16 data16 data16 add BYTE PTR [rdi+0x5f],bl
    31a9:	47                   	rex.RXB
    31aa:	43                   	rex.XB
    31ab:	43 5f                	rex.XB pop r15
    31ad:	41 54                	push   r12
    31af:	4f                   	rex.WRXB
    31b0:	4d                   	rex.WRB
    31b1:	49                   	rex.WB
    31b2:	43 5f                	rex.XB pop r15
    31b4:	57                   	push   rdi
    31b5:	43                   	rex.XB
    31b6:	48                   	rex.W
    31b7:	41 52                	push   r10
    31b9:	5f                   	pop    rdi
    31ba:	54                   	push   rsp
    31bb:	5f                   	pop    rdi
    31bc:	4c                   	rex.WR
    31bd:	4f                   	rex.WRXB
    31be:	43                   	rex.XB
    31bf:	4b 5f                	rex.WXB pop r15
    31c1:	46 52                	rex.RX push rdx
    31c3:	45                   	rex.RB
    31c4:	45 20 32             	and    BYTE PTR [r10],r14b
    31c7:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    31ca:	4f 5f                	rex.WRXB pop r15
    31cc:	50                   	push   rax
    31cd:	45                   	rex.RB
    31ce:	4e                   	rex.WRX
    31cf:	44                   	rex.R
    31d0:	49                   	rex.WB
    31d1:	4e                   	rex.WRX
    31d2:	47 5f                	rex.RXB pop r15
    31d4:	4f 55                	rex.WRXB push r13
    31d6:	54                   	push   rsp
    31d7:	50                   	push   rax
    31d8:	55                   	push   rbp
    31d9:	54                   	push   rsp
    31da:	5f                   	pop    rdi
    31db:	43                   	rex.XB
    31dc:	4f 55                	rex.WRXB push r13
    31de:	4e 54                	rex.WRX push rsp
    31e0:	28 5f 66             	sub    BYTE PTR [rdi+0x66],bl
    31e3:	70 29                	jo     320e <.debug_str+0x320e>
    31e5:	20 28                	and    BYTE PTR [rax],ch
    31e7:	28 5f 66             	sub    BYTE PTR [rdi+0x66],bl
    31ea:	70 29                	jo     3215 <.debug_str+0x3215>
    31ec:	2d 3e 5f 49 4f       	sub    eax,0x4f495f3e
    31f1:	5f                   	pop    rdi
    31f2:	77 72                	ja     3266 <.debug_str+0x3266>
    31f4:	69 74 65 5f 70 74 72 	imul   esi,DWORD PTR [rbp+riz*2+0x5f],0x20727470
    31fb:	20 
    31fc:	2d 20 28 5f 66       	sub    eax,0x665f2820
    3201:	70 29                	jo     322c <.debug_str+0x322c>
    3203:	2d 3e 5f 49 4f       	sub    eax,0x4f495f3e
    3208:	5f                   	pop    rdi
    3209:	77 72                	ja     327d <.debug_str+0x327d>
    320b:	69 74 65 5f 62 61 73 	imul   esi,DWORD PTR [rbp+riz*2+0x5f],0x65736162
    3212:	65 
    3213:	29 00                	sub    DWORD PTR [rax],eax
    3215:	5f                   	pop    rdi
    3216:	49                   	rex.WB
    3217:	4f 5f                	rex.WRXB pop r15
    3219:	55                   	push   rbp
    321a:	53                   	push   rbx
    321b:	45 52                	rex.RB push r10
    321d:	5f                   	pop    rdi
    321e:	4c                   	rex.WR
    321f:	4f                   	rex.WRXB
    3220:	43                   	rex.XB
    3221:	4b 20 30             	rex.WXB and BYTE PTR [r8],sil
    3224:	78 38                	js     325e <.debug_str+0x325e>
    3226:	30 30                	xor    BYTE PTR [rax],dh
    3228:	30 00                	xor    BYTE PTR [rax],al
    322a:	5f                   	pop    rdi
    322b:	5f                   	pop    rdi
    322c:	4f 52                	rex.WRXB push r10
    322e:	44                   	rex.R
    322f:	45 52                	rex.RB push r10
    3231:	5f                   	pop    rdi
    3232:	50                   	push   rax
    3233:	44 50                	rex.R push rax
    3235:	5f                   	pop    rdi
    3236:	45                   	rex.RB
    3237:	4e                   	rex.WRX
    3238:	44                   	rex.R
    3239:	49                   	rex.WB
    323a:	41                   	rex.B
    323b:	4e 5f                	rex.WRX pop rdi
    323d:	5f                   	pop    rdi
    323e:	20 33                	and    BYTE PTR [rbx],dh
    3240:	34 31                	xor    al,0x31
    3242:	32 00                	xor    al,BYTE PTR [rax]
    3244:	5f                   	pop    rdi
    3245:	49                   	rex.WB
    3246:	4f 5f                	rex.WRXB pop r15
    3248:	55                   	push   rbp
    3249:	4e                   	rex.WRX
    324a:	49                   	rex.WB
    324b:	46                   	rex.RX
    324c:	49                   	rex.WB
    324d:	45                   	rex.RB
    324e:	44 5f                	rex.R pop rdi
    3250:	4a 55                	rex.WX push rbp
    3252:	4d 50                	rex.WRB push r8
    3254:	54                   	push   rsp
    3255:	41                   	rex.B
    3256:	42                   	rex.X
    3257:	4c                   	rex.WR
    3258:	45 53                	rex.RB push r11
    325a:	20 31                	and    BYTE PTR [rcx],dh
    325c:	00 54 4d 50          	add    BYTE PTR [rbp+rcx*2+0x50],dl
    3260:	5f                   	pop    rdi
    3261:	4d                   	rex.WRB
    3262:	41 58                	pop    r8
    3264:	20 32                	and    BYTE PTR [rdx],dh
    3266:	33 38                	xor    edi,DWORD PTR [rax]
    3268:	33 32                	xor    esi,DWORD PTR [rdx]
    326a:	38 00                	cmp    BYTE PTR [rax],al
    326c:	5f                   	pop    rdi
    326d:	49                   	rex.WB
    326e:	4f 5f                	rex.WRXB pop r15
    3270:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    3271:	65 65 64 5f          	gs gs fs pop rdi
    3275:	6c                   	ins    BYTE PTR es:[rdi],dx
    3276:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    3277:	63 6b 28             	movsxd ebp,DWORD PTR [rbx+0x28]
    327a:	5f                   	pop    rdi
    327b:	66 70 29             	data16 jo 32a7 <.debug_str+0x32a7>
    327e:	20 28                	and    BYTE PTR [rax],ch
    3280:	28 28                	sub    BYTE PTR [rax],ch
    3282:	5f                   	pop    rdi
    3283:	66 70 29             	data16 jo 32af <.debug_str+0x32af>
    3286:	2d 3e 5f 66 6c       	sub    eax,0x6c665f3e
    328b:	61                   	(bad)  
    328c:	67 73 32             	addr32 jae 32c1 <.debug_str+0x32c1>
    328f:	20 26                	and    BYTE PTR [rsi],ah
    3291:	20 5f 49             	and    BYTE PTR [rdi+0x49],bl
    3294:	4f 5f                	rex.WRXB pop r15
    3296:	46                   	rex.RX
    3297:	4c                   	rex.WR
    3298:	41                   	rex.B
    3299:	47 53                	rex.RXB push r11
    329b:	32 5f 4e             	xor    bl,BYTE PTR [rdi+0x4e]
    329e:	45                   	rex.RB
    329f:	45                   	rex.RB
    32a0:	44 5f                	rex.R pop rdi
    32a2:	4c                   	rex.WR
    32a3:	4f                   	rex.WRXB
    32a4:	43                   	rex.XB
    32a5:	4b 29 20             	rex.WXB sub QWORD PTR [r8],rsp
    32a8:	21 3d 20 30 29 00    	and    DWORD PTR [rip+0x293020],edi        # 2962ce <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x2962ce>
    32ae:	5f                   	pop    rdi
    32af:	5f                   	pop    rdi
    32b0:	46                   	rex.RX
    32b1:	4c 54                	rex.WR push rsp
    32b3:	5f                   	pop    rdi
    32b4:	44                   	rex.R
    32b5:	45                   	rex.RB
    32b6:	43                   	rex.XB
    32b7:	49                   	rex.WB
    32b8:	4d                   	rex.WRB
    32b9:	41                   	rex.B
    32ba:	4c 5f                	rex.WR pop rdi
    32bc:	44                   	rex.R
    32bd:	49                   	rex.WB
    32be:	47 5f                	rex.RXB pop r15
    32c0:	5f                   	pop    rdi
    32c1:	20 39                	and    BYTE PTR [rcx],bh
    32c3:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    32c6:	77 61                	ja     3329 <.debug_str+0x3329>
    32c8:	72 6e                	jb     3338 <.debug_str+0x3338>
    32ca:	64 65 63 6c 28 6e    	fs movsxd ebp,DWORD PTR gs:[rax+rbp*1+0x6e]
    32d0:	61                   	(bad)  
    32d1:	6d                   	ins    DWORD PTR es:[rdi],dx
    32d2:	65 2c 6d             	gs sub al,0x6d
    32d5:	73 67                	jae    333e <.debug_str+0x333e>
    32d7:	29 20                	sub    DWORD PTR [rax],esp
    32d9:	65 78 74             	gs js  3350 <.debug_str+0x3350>
    32dc:	65 72 6e             	gs jb  334d <.debug_str+0x334d>
    32df:	20 76 6f             	and    BYTE PTR [rsi+0x6f],dh
    32e2:	69 64 20 6e 61 6d 65 	imul   esp,DWORD PTR [rax+riz*1+0x6e],0x20656d61
    32e9:	20 
    32ea:	28 76 6f             	sub    BYTE PTR [rsi+0x6f],dh
    32ed:	69 64 29 20 5f 5f 61 	imul   esp,DWORD PTR [rcx+rbp*1+0x20],0x74615f5f
    32f4:	74 
    32f5:	74 72                	je     3369 <.debug_str+0x3369>
    32f7:	69 62 75 74 65 5f 5f 	imul   esp,DWORD PTR [rdx+0x75],0x5f5f6574
    32fe:	28 28                	sub    BYTE PTR [rax],ch
    3300:	5f                   	pop    rdi
    3301:	5f                   	pop    rdi
    3302:	77 61                	ja     3365 <.debug_str+0x3365>
    3304:	72 6e                	jb     3374 <.debug_str+0x3374>
    3306:	69 6e 67 5f 5f 20 28 	imul   ebp,DWORD PTR [rsi+0x67],0x28205f5f
    330d:	6d                   	ins    DWORD PTR es:[rdi],dx
    330e:	73 67                	jae    3377 <.debug_str+0x3377>
    3310:	29 29                	sub    DWORD PTR [rcx],ebp
    3312:	29 00                	sub    DWORD PTR [rax],eax
    3314:	5f                   	pop    rdi
    3315:	5f                   	pop    rdi
    3316:	46                   	rex.RX
    3317:	4c 54                	rex.WR push rsp
    3319:	36 34 5f             	ss xor al,0x5f
    331c:	4d                   	rex.WRB
    331d:	41 58                	pop    r8
    331f:	5f                   	pop    rdi
    3320:	31 30                	xor    DWORD PTR [rax],esi
    3322:	5f                   	pop    rdi
    3323:	45 58                	rex.RB pop r8
    3325:	50                   	push   rax
    3326:	5f                   	pop    rdi
    3327:	5f                   	pop    rdi
    3328:	20 33                	and    BYTE PTR [rbx],dh
    332a:	30 38                	xor    BYTE PTR [rax],bh
    332c:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    332f:	53                   	push   rbx
    3330:	54                   	push   rsp
    3331:	52                   	push   rdx
    3332:	49                   	rex.WB
    3333:	4e                   	rex.WRX
    3334:	47 28 78 29          	rex.RXB sub BYTE PTR [r8+0x29],r15b
    3338:	20 23                	and    BYTE PTR [rbx],ah
    333a:	78 00                	js     333c <.debug_str+0x333c>
    333c:	5f                   	pop    rdi
    333d:	5f                   	pop    rdi
    333e:	46                   	rex.RX
    333f:	49                   	rex.WB
    3340:	4c                   	rex.WR
    3341:	45 5f                	rex.RB pop r15
    3343:	64 65 66 69 6e 65 64 	fs imul bp,WORD PTR gs:[rsi+0x65],0x2064
    334a:	20 
    334b:	31 00                	xor    DWORD PTR [rax],eax
    334d:	5f                   	pop    rdi
    334e:	5f                   	pop    rdi
    334f:	4c                   	rex.WR
    3350:	44                   	rex.R
    3351:	42                   	rex.X
    3352:	4c 5f                	rex.WR pop rdi
    3354:	4d                   	rex.WRB
    3355:	49                   	rex.WB
    3356:	4e 5f                	rex.WRX pop rdi
    3358:	45 58                	rex.RB pop r8
    335a:	50                   	push   rax
    335b:	5f                   	pop    rdi
    335c:	5f                   	pop    rdi
    335d:	20 28                	and    BYTE PTR [rax],ch
    335f:	2d 31 36 33 38       	sub    eax,0x38333631
    3364:	31 29                	xor    DWORD PTR [rcx],ebp
    3366:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3369:	57                   	push   rdi
    336a:	49                   	rex.WB
    336b:	4e 54                	rex.WRX push rsp
    336d:	5f                   	pop    rdi
    336e:	57                   	push   rdi
    336f:	49                   	rex.WB
    3370:	44 54                	rex.R push rsp
    3372:	48 5f                	rex.W pop rdi
    3374:	5f                   	pop    rdi
    3375:	20 33                	and    BYTE PTR [rbx],dh
    3377:	32 00                	xor    al,BYTE PTR [rax]
    3379:	5f                   	pop    rdi
    337a:	49                   	rex.WB
    337b:	4f 5f                	rex.WRXB pop r15
    337d:	53                   	push   rbx
    337e:	48                   	rex.W
    337f:	4f 57                	rex.WRXB push r15
    3381:	50                   	push   rax
    3382:	4f 53                	rex.WRXB push r11
    3384:	20 30                	and    BYTE PTR [rax],dh
    3386:	32 30                	xor    dh,BYTE PTR [rax]
    3388:	30 30                	xor    BYTE PTR [rax],dh
    338a:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    338d:	4f 5f                	rex.WRXB pop r15
    338f:	72 65                	jb     33f6 <.debug_str+0x33f6>
    3391:	61                   	(bad)  
    3392:	64 5f                	fs pop rdi
    3394:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    3396:	64 00 5f 5f          	add    BYTE PTR fs:[rdi+0x5f],bl
    339a:	46                   	rex.RX
    339b:	4c 54                	rex.WR push rsp
    339d:	36 34 58             	ss xor al,0x58
    33a0:	5f                   	pop    rdi
    33a1:	4d                   	rex.WRB
    33a2:	49                   	rex.WB
    33a3:	4e 5f                	rex.WRX pop rdi
    33a5:	5f                   	pop    rdi
    33a6:	20 33                	and    BYTE PTR [rbx],dh
    33a8:	2e 33 36             	xor    esi,DWORD PTR cs:[rsi]
    33ab:	32 31                	xor    dh,BYTE PTR [rcx]
    33ad:	30 33                	xor    BYTE PTR [rbx],dh
    33af:	31 34 33             	xor    DWORD PTR [rbx+rsi*1],esi
    33b2:	31 31                	xor    DWORD PTR [rcx],esi
    33b4:	32 30                	xor    dh,BYTE PTR [rax]
    33b6:	39 33                	cmp    DWORD PTR [rbx],esi
    33b8:	35 30 36 32 36       	xor    eax,0x36323630
    33bd:	32 36                	xor    dh,BYTE PTR [rsi]
    33bf:	37                   	(bad)  
    33c0:	37                   	(bad)  
    33c1:	38 31                	cmp    BYTE PTR [rcx],dh
    33c3:	37                   	(bad)  
    33c4:	33 32                	xor    esi,DWORD PTR [rdx]
    33c6:	31 37                	xor    DWORD PTR [rdi],esi
    33c8:	35 32 36 30 65       	xor    eax,0x65303632
    33cd:	2d 34 39 33 32       	sub    eax,0x32333934
    33d2:	46                   	rex.RX
    33d3:	36 34 78             	ss xor al,0x78
    33d6:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    33d9:	4f 53                	rex.WRXB push r11
    33db:	5f                   	pop    rdi
    33dc:	4f 55                	rex.WRXB push r13
    33de:	54                   	push   rsp
    33df:	50                   	push   rax
    33e0:	55                   	push   rbp
    33e1:	54                   	push   rsp
    33e2:	20 32                	and    BYTE PTR [rdx],dh
    33e4:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    33e7:	49                   	rex.WB
    33e8:	4e 54                	rex.WRX push rsp
    33ea:	5f                   	pop    rdi
    33eb:	46                   	rex.RX
    33ec:	41 53                	push   r11
    33ee:	54                   	push   rsp
    33ef:	38 5f 4d             	cmp    BYTE PTR [rdi+0x4d],bl
    33f2:	41 58                	pop    r8
    33f4:	5f                   	pop    rdi
    33f5:	5f                   	pop    rdi
    33f6:	20 30                	and    BYTE PTR [rax],dh
    33f8:	78 37                	js     3431 <.debug_str+0x3431>
    33fa:	66 00 5f 5f          	data16 add BYTE PTR [rdi+0x5f],bl
    33fe:	52                   	push   rdx
    33ff:	45                   	rex.RB
    3400:	47                   	rex.RXB
    3401:	49 53                	rex.WB push r11
    3403:	54                   	push   rsp
    3404:	45 52                	rex.RB push r10
    3406:	5f                   	pop    rdi
    3407:	50                   	push   rax
    3408:	52                   	push   rdx
    3409:	45                   	rex.RB
    340a:	46                   	rex.RX
    340b:	49 58                	rex.WB pop r8
    340d:	5f                   	pop    rdi
    340e:	5f                   	pop    rdi
    340f:	20 00                	and    BYTE PTR [rax],al
    3411:	5f                   	pop    rdi
    3412:	5f                   	pop    rdi
    3413:	46                   	rex.RX
    3414:	4c 54                	rex.WR push rsp
    3416:	33 32                	xor    esi,DWORD PTR [rdx]
    3418:	5f                   	pop    rdi
    3419:	45 50                	rex.RB push r8
    341b:	53                   	push   rbx
    341c:	49                   	rex.WB
    341d:	4c                   	rex.WR
    341e:	4f                   	rex.WRXB
    341f:	4e 5f                	rex.WRX pop rdi
    3421:	5f                   	pop    rdi
    3422:	20 31                	and    BYTE PTR [rcx],dh
    3424:	2e 31 39             	xor    DWORD PTR cs:[rcx],edi
    3427:	32 30                	xor    dh,BYTE PTR [rax]
    3429:	39 32                	cmp    DWORD PTR [rdx],esi
    342b:	38 39                	cmp    BYTE PTR [rcx],bh
    342d:	35 35 30 37 38       	xor    eax,0x38373035
    3432:	31 32                	xor    DWORD PTR [rdx],esi
    3434:	35 30 30 30 30       	xor    eax,0x30303030
    3439:	30 30                	xor    BYTE PTR [rax],dh
    343b:	30 30                	xor    BYTE PTR [rax],dh
    343d:	30 30                	xor    BYTE PTR [rax],dh
    343f:	30 30                	xor    BYTE PTR [rax],dh
    3441:	30 30                	xor    BYTE PTR [rax],dh
    3443:	30 30                	xor    BYTE PTR [rax],dh
    3445:	30 30                	xor    BYTE PTR [rax],dh
    3447:	30 65 2d             	xor    BYTE PTR [rbp+0x2d],ah
    344a:	37                   	(bad)  
    344b:	46 33 32             	rex.RX xor r14d,DWORD PTR [rdx]
    344e:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3451:	47                   	rex.RXB
    3452:	4c                   	rex.WR
    3453:	49                   	rex.WB
    3454:	42                   	rex.X
    3455:	43 5f                	rex.XB pop r15
    3457:	49                   	rex.WB
    3458:	4e 54                	rex.WRX push rsp
    345a:	45 52                	rex.RB push r10
    345c:	4e                   	rex.WRX
    345d:	41                   	rex.B
    345e:	4c 5f                	rex.WR pop rdi
    3460:	53                   	push   rbx
    3461:	54                   	push   rsp
    3462:	41 52                	push   r10
    3464:	54                   	push   rsp
    3465:	49                   	rex.WB
    3466:	4e                   	rex.WRX
    3467:	47 5f                	rex.RXB pop r15
    3469:	48                   	rex.W
    346a:	45                   	rex.RB
    346b:	41                   	rex.B
    346c:	44                   	rex.R
    346d:	45 52                	rex.RB push r10
    346f:	5f                   	pop    rdi
    3470:	49                   	rex.WB
    3471:	4d 50                	rex.WRB push r8
    3473:	4c                   	rex.WR
    3474:	45                   	rex.RB
    3475:	4d                   	rex.WRB
    3476:	45                   	rex.RB
    3477:	4e 54                	rex.WRX push rsp
    3479:	41 54                	push   r12
    347b:	49                   	rex.WB
    347c:	4f                   	rex.WRXB
    347d:	4e 20 00             	rex.WRX and BYTE PTR [rax],r8b
    3480:	5f                   	pop    rdi
    3481:	5f                   	pop    rdi
    3482:	53                   	push   rbx
    3483:	57                   	push   rdi
    3484:	4f 52                	rex.WRXB push r10
    3486:	44 5f                	rex.R pop rdi
    3488:	54                   	push   rsp
    3489:	59                   	pop    rcx
    348a:	50                   	push   rax
    348b:	45 20 6c 6f 6e       	and    BYTE PTR [r15+rbp*2+0x6e],r13b
    3490:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
    3494:	74 00                	je     3496 <.debug_str+0x3496>
    3496:	73 68                	jae    3500 <.debug_str+0x3500>
    3498:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    3499:	72 74                	jb     350f <.debug_str+0x350f>
    349b:	20 69 6e             	and    BYTE PTR [rcx+0x6e],ch
    349e:	74 00                	je     34a0 <.debug_str+0x34a0>
    34a0:	5f                   	pop    rdi
    34a1:	5f                   	pop    rdi
    34a2:	4c                   	rex.WR
    34a3:	4f                   	rex.WRXB
    34a4:	4e                   	rex.WRX
    34a5:	47 5f                	rex.RXB pop r15
    34a7:	4d                   	rex.WRB
    34a8:	41 58                	pop    r8
    34aa:	5f                   	pop    rdi
    34ab:	5f                   	pop    rdi
    34ac:	20 30                	and    BYTE PTR [rax],dh
    34ae:	78 37                	js     34e7 <.debug_str+0x34e7>
    34b0:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16
    34b7:	66 66 66 66 66 66 66 
    34be:	66 4c 00 5f 5f       	data16 rex.WR add BYTE PTR [rdi+0x5f],r11b
    34c3:	73 74                	jae    3539 <.debug_str+0x3539>
    34c5:	75 62                	jne    3529 <.debug_str+0x3529>
    34c7:	5f                   	pop    rdi
    34c8:	67 65 74 6d          	addr32 gs je 3539 <.debug_str+0x3539>
    34cc:	73 67                	jae    3535 <.debug_str+0x3535>
    34ce:	20 00                	and    BYTE PTR [rax],al
    34d0:	5f                   	pop    rdi
    34d1:	5f                   	pop    rdi
    34d2:	44                   	rex.R
    34d3:	45                   	rex.RB
    34d4:	43                   	rex.XB
    34d5:	36 34 5f             	ss xor al,0x5f
    34d8:	4d                   	rex.WRB
    34d9:	41 58                	pop    r8
    34db:	5f                   	pop    rdi
    34dc:	45 58                	rex.RB pop r8
    34de:	50                   	push   rax
    34df:	5f                   	pop    rdi
    34e0:	5f                   	pop    rdi
    34e1:	20 33                	and    BYTE PTR [rbx],dh
    34e3:	38 35 00 5f 5f 46    	cmp    BYTE PTR [rip+0x465f5f00],dh        # 465f93e9 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x465f93e9>
    34e9:	4c 54                	rex.WR push rsp
    34eb:	33 32                	xor    esi,DWORD PTR [rdx]
    34ed:	58                   	pop    rax
    34ee:	5f                   	pop    rdi
    34ef:	4d                   	rex.WRB
    34f0:	49                   	rex.WB
    34f1:	4e 5f                	rex.WRX pop rdi
    34f3:	31 30                	xor    DWORD PTR [rax],esi
    34f5:	5f                   	pop    rdi
    34f6:	45 58                	rex.RB pop r8
    34f8:	50                   	push   rax
    34f9:	5f                   	pop    rdi
    34fa:	5f                   	pop    rdi
    34fb:	20 28                	and    BYTE PTR [rax],ch
    34fd:	2d 33 30 37 29       	sub    eax,0x29373033
    3502:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3505:	55                   	push   rbp
    3506:	53                   	push   rbx
    3507:	45 5f                	rex.RB pop r15
    3509:	50                   	push   rax
    350a:	4f 53                	rex.WRXB push r11
    350c:	49 58                	rex.WB pop r8
    350e:	32 00                	xor    al,BYTE PTR [rax]
    3510:	6c                   	ins    BYTE PTR es:[rdi],dx
    3511:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    3512:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    3513:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
    3517:	74 00                	je     3519 <.debug_str+0x3519>
    3519:	5f                   	pop    rdi
    351a:	49                   	rex.WB
    351b:	4f 5f                	rex.WRXB pop r15
    351d:	55                   	push   rbp
    351e:	4e                   	rex.WRX
    351f:	49 54                	rex.WB push r12
    3521:	42 55                	rex.X push rbp
    3523:	46 20 30             	rex.RX and BYTE PTR [rax],r14b
    3526:	32 30                	xor    dh,BYTE PTR [rax]
    3528:	30 30                	xor    BYTE PTR [rax],dh
    352a:	30 00                	xor    BYTE PTR [rax],al
    352c:	5f                   	pop    rdi
    352d:	5f                   	pop    rdi
    352e:	4f                   	rex.WRXB
    352f:	46                   	rex.RX
    3530:	46 5f                	rex.RX pop rdi
    3532:	54                   	push   rsp
    3533:	5f                   	pop    rdi
    3534:	54                   	push   rsp
    3535:	59                   	pop    rcx
    3536:	50                   	push   rax
    3537:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    353b:	53                   	push   rbx
    353c:	59                   	pop    rcx
    353d:	53                   	push   rbx
    353e:	43                   	rex.XB
    353f:	41                   	rex.B
    3540:	4c                   	rex.WR
    3541:	4c 5f                	rex.WR pop rdi
    3543:	53                   	push   rbx
    3544:	4c                   	rex.WR
    3545:	4f                   	rex.WRXB
    3546:	4e                   	rex.WRX
    3547:	47 5f                	rex.RXB pop r15
    3549:	54                   	push   rsp
    354a:	59                   	pop    rcx
    354b:	50                   	push   rax
    354c:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    3550:	55                   	push   rbp
    3551:	49                   	rex.WB
    3552:	4e 54                	rex.WRX push rsp
    3554:	4d                   	rex.WRB
    3555:	41 58                	pop    r8
    3557:	5f                   	pop    rdi
    3558:	43 28 63 29          	rex.XB sub BYTE PTR [r11+0x29],spl
    355c:	20 63 20             	and    BYTE PTR [rbx+0x20],ah
    355f:	23 23                	and    esp,DWORD PTR [rbx]
    3561:	20 55 4c             	and    BYTE PTR [rbp+0x4c],dl
    3564:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3567:	43                   	rex.XB
    3568:	48                   	rex.W
    3569:	41 52                	push   r10
    356b:	33 32                	xor    esi,DWORD PTR [rdx]
    356d:	5f                   	pop    rdi
    356e:	54                   	push   rsp
    356f:	59                   	pop    rcx
    3570:	50                   	push   rax
    3571:	45 5f                	rex.RB pop r15
    3573:	5f                   	pop    rdi
    3574:	20 75 6e             	and    BYTE PTR [rbp+0x6e],dh
    3577:	73 69                	jae    35e2 <.debug_str+0x35e2>
    3579:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    357b:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    3580:	74 00                	je     3582 <.debug_str+0x3582>
    3582:	5f                   	pop    rdi
    3583:	5f                   	pop    rdi
    3584:	46                   	rex.RX
    3585:	4c 54                	rex.WR push rsp
    3587:	36 34 58             	ss xor al,0x58
    358a:	5f                   	pop    rdi
    358b:	48                   	rex.W
    358c:	41 53                	push   r11
    358e:	5f                   	pop    rdi
    358f:	49                   	rex.WB
    3590:	4e                   	rex.WRX
    3591:	46                   	rex.RX
    3592:	49                   	rex.WB
    3593:	4e                   	rex.WRX
    3594:	49 54                	rex.WB push r12
    3596:	59                   	pop    rcx
    3597:	5f                   	pop    rdi
    3598:	5f                   	pop    rdi
    3599:	20 31                	and    BYTE PTR [rcx],dh
    359b:	00 5f 42             	add    BYTE PTR [rdi+0x42],bl
    359e:	49 54                	rex.WB push r12
    35a0:	53                   	push   rbx
    35a1:	5f                   	pop    rdi
    35a2:	47 5f                	rex.RXB pop r15
    35a4:	43                   	rex.XB
    35a5:	4f                   	rex.WRXB
    35a6:	4e                   	rex.WRX
    35a7:	46                   	rex.RX
    35a8:	49                   	rex.WB
    35a9:	47 5f                	rex.RXB pop r15
    35ab:	48 20 31             	rex.W and BYTE PTR [rcx],sil
    35ae:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    35b1:	44                   	rex.R
    35b2:	45                   	rex.RB
    35b3:	43 31 32             	rex.XB xor DWORD PTR [r10],esi
    35b6:	38 5f 4d             	cmp    BYTE PTR [rdi+0x4d],bl
    35b9:	49                   	rex.WB
    35ba:	4e 5f                	rex.WRX pop rdi
    35bc:	5f                   	pop    rdi
    35bd:	20 31                	and    BYTE PTR [rcx],dh
    35bf:	45 2d 36 31 34 33    	rex.RB sub eax,0x33343136
    35c5:	44                   	rex.R
    35c6:	4c 00 5f 5f          	rex.WR add BYTE PTR [rdi+0x5f],r11b
    35ca:	46                   	rex.RX
    35cb:	4c 54                	rex.WR push rsp
    35cd:	33 32                	xor    esi,DWORD PTR [rdx]
    35cf:	58                   	pop    rax
    35d0:	5f                   	pop    rdi
    35d1:	4d                   	rex.WRB
    35d2:	49                   	rex.WB
    35d3:	4e 5f                	rex.WRX pop rdi
    35d5:	45 58                	rex.RB pop r8
    35d7:	50                   	push   rax
    35d8:	5f                   	pop    rdi
    35d9:	5f                   	pop    rdi
    35da:	20 28                	and    BYTE PTR [rax],ch
    35dc:	2d 31 30 32 31       	sub    eax,0x31323031
    35e1:	29 00                	sub    DWORD PTR [rax],eax
    35e3:	5f                   	pop    rdi
    35e4:	49                   	rex.WB
    35e5:	4f 5f                	rex.WRXB pop r15
    35e7:	67 65 74 63          	addr32 gs je 364e <.debug_str+0x364e>
    35eb:	5f                   	pop    rdi
    35ec:	75 6e                	jne    365c <.debug_str+0x365c>
    35ee:	6c                   	ins    BYTE PTR es:[rdi],dx
    35ef:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    35f0:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
    35f3:	64 28 5f 66          	sub    BYTE PTR fs:[rdi+0x66],bl
    35f7:	70 29                	jo     3622 <.debug_str+0x3622>
    35f9:	20 28                	and    BYTE PTR [rax],ch
    35fb:	5f                   	pop    rdi
    35fc:	49                   	rex.WB
    35fd:	4f 5f                	rex.WRXB pop r15
    35ff:	42                   	rex.X
    3600:	45 20 28             	and    BYTE PTR [r8],r13b
    3603:	28 5f 66             	sub    BYTE PTR [rdi+0x66],bl
    3606:	70 29                	jo     3631 <.debug_str+0x3631>
    3608:	2d 3e 5f 49 4f       	sub    eax,0x4f495f3e
    360d:	5f                   	pop    rdi
    360e:	72 65                	jb     3675 <.debug_str+0x3675>
    3610:	61                   	(bad)  
    3611:	64 5f                	fs pop rdi
    3613:	70 74                	jo     3689 <.debug_str+0x3689>
    3615:	72 20                	jb     3637 <.debug_str+0x3637>
    3617:	3e 3d 20 28 5f 66    	ds cmp eax,0x665f2820
    361d:	70 29                	jo     3648 <.debug_str+0x3648>
    361f:	2d 3e 5f 49 4f       	sub    eax,0x4f495f3e
    3624:	5f                   	pop    rdi
    3625:	72 65                	jb     368c <.debug_str+0x368c>
    3627:	61                   	(bad)  
    3628:	64 5f                	fs pop rdi
    362a:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    362c:	64 2c 20             	fs sub al,0x20
    362f:	30 29                	xor    BYTE PTR [rcx],ch
    3631:	20 3f                	and    BYTE PTR [rdi],bh
    3633:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    3636:	75 66                	jne    369e <.debug_str+0x369e>
    3638:	6c                   	ins    BYTE PTR es:[rdi],dx
    3639:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    363a:	77 20                	ja     365c <.debug_str+0x365c>
    363c:	28 5f 66             	sub    BYTE PTR [rdi+0x66],bl
    363f:	70 29                	jo     366a <.debug_str+0x366a>
    3641:	20 3a                	and    BYTE PTR [rdx],bh
    3643:	20 2a                	and    BYTE PTR [rdx],ch
    3645:	28 75 6e             	sub    BYTE PTR [rbp+0x6e],dh
    3648:	73 69                	jae    36b3 <.debug_str+0x36b3>
    364a:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    364c:	65 64 20 63 68       	gs and BYTE PTR fs:[rbx+0x68],ah
    3651:	61                   	(bad)  
    3652:	72 20                	jb     3674 <.debug_str+0x3674>
    3654:	2a 29                	sub    ch,BYTE PTR [rcx]
    3656:	20 28                	and    BYTE PTR [rax],ch
    3658:	5f                   	pop    rdi
    3659:	66 70 29             	data16 jo 3685 <.debug_str+0x3685>
    365c:	2d 3e 5f 49 4f       	sub    eax,0x4f495f3e
    3661:	5f                   	pop    rdi
    3662:	72 65                	jb     36c9 <.debug_str+0x36c9>
    3664:	61                   	(bad)  
    3665:	64 5f                	fs pop rdi
    3667:	70 74                	jo     36dd <.debug_str+0x36dd>
    3669:	72 2b                	jb     3696 <.debug_str+0x3696>
    366b:	2b 29                	sub    ebp,DWORD PTR [rcx]
    366d:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3670:	49                   	rex.WB
    3671:	4e 54                	rex.WRX push rsp
    3673:	50                   	push   rax
    3674:	54                   	push   rsp
    3675:	52                   	push   rdx
    3676:	5f                   	pop    rdi
    3677:	57                   	push   rdi
    3678:	49                   	rex.WB
    3679:	44 54                	rex.R push rsp
    367b:	48 5f                	rex.W pop rdi
    367d:	5f                   	pop    rdi
    367e:	20 36                	and    BYTE PTR [rsi],dh
    3680:	34 00                	xor    al,0x0
    3682:	5f                   	pop    rdi
    3683:	5f                   	pop    rdi
    3684:	49                   	rex.WB
    3685:	4e                   	rex.WRX
    3686:	4f 5f                	rex.WRXB pop r15
    3688:	54                   	push   rsp
    3689:	5f                   	pop    rdi
    368a:	54                   	push   rsp
    368b:	59                   	pop    rcx
    368c:	50                   	push   rax
    368d:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    3691:	53                   	push   rbx
    3692:	59                   	pop    rcx
    3693:	53                   	push   rbx
    3694:	43                   	rex.XB
    3695:	41                   	rex.B
    3696:	4c                   	rex.WR
    3697:	4c 5f                	rex.WR pop rdi
    3699:	55                   	push   rbp
    369a:	4c                   	rex.WR
    369b:	4f                   	rex.WRXB
    369c:	4e                   	rex.WRX
    369d:	47 5f                	rex.RXB pop r15
    369f:	54                   	push   rsp
    36a0:	59                   	pop    rcx
    36a1:	50                   	push   rax
    36a2:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    36a6:	55                   	push   rbp
    36a7:	49                   	rex.WB
    36a8:	4e 54                	rex.WRX push rsp
    36aa:	5f                   	pop    rdi
    36ab:	46                   	rex.RX
    36ac:	41 53                	push   r11
    36ae:	54                   	push   rsp
    36af:	38 5f 54             	cmp    BYTE PTR [rdi+0x54],bl
    36b2:	59                   	pop    rcx
    36b3:	50                   	push   rax
    36b4:	45 5f                	rex.RB pop r15
    36b6:	5f                   	pop    rdi
    36b7:	20 75 6e             	and    BYTE PTR [rbp+0x6e],dh
    36ba:	73 69                	jae    3725 <.debug_str+0x3725>
    36bc:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    36be:	65 64 20 63 68       	gs and BYTE PTR fs:[rbx+0x68],ah
    36c3:	61                   	(bad)  
    36c4:	72 00                	jb     36c6 <.debug_str+0x36c6>
    36c6:	5f                   	pop    rdi
    36c7:	5f                   	pop    rdi
    36c8:	49                   	rex.WB
    36c9:	4e 54                	rex.WRX push rsp
    36cb:	33 32                	xor    esi,DWORD PTR [rdx]
    36cd:	5f                   	pop    rdi
    36ce:	43 28 63 29          	rex.XB sub BYTE PTR [r11+0x29],spl
    36d2:	20 63 00             	and    BYTE PTR [rbx+0x0],ah
    36d5:	5f                   	pop    rdi
    36d6:	5f                   	pop    rdi
    36d7:	46 53                	rex.RX push rbx
    36d9:	46                   	rex.RX
    36da:	49                   	rex.WB
    36db:	4c                   	rex.WR
    36dc:	43                   	rex.XB
    36dd:	4e 54                	rex.WRX push rsp
    36df:	36 34 5f             	ss xor al,0x5f
    36e2:	54                   	push   rsp
    36e3:	5f                   	pop    rdi
    36e4:	54                   	push   rsp
    36e5:	59                   	pop    rcx
    36e6:	50                   	push   rax
    36e7:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    36eb:	55                   	push   rbp
    36ec:	51                   	push   rcx
    36ed:	55                   	push   rbp
    36ee:	41                   	rex.B
    36ef:	44 5f                	rex.R pop rdi
    36f1:	54                   	push   rsp
    36f2:	59                   	pop    rcx
    36f3:	50                   	push   rax
    36f4:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    36f8:	4c                   	rex.WR
    36f9:	44                   	rex.R
    36fa:	42                   	rex.X
    36fb:	4c 5f                	rex.WR pop rdi
    36fd:	48                   	rex.W
    36fe:	41 53                	push   r11
    3700:	5f                   	pop    rdi
    3701:	51                   	push   rcx
    3702:	55                   	push   rbp
    3703:	49                   	rex.WB
    3704:	45 54                	rex.RB push r12
    3706:	5f                   	pop    rdi
    3707:	4e                   	rex.WRX
    3708:	41                   	rex.B
    3709:	4e 5f                	rex.WRX pop rdi
    370b:	5f                   	pop    rdi
    370c:	20 31                	and    BYTE PTR [rcx],dh
    370e:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3711:	47                   	rex.RXB
    3712:	4e 55                	rex.WRX push rbp
    3714:	43 5f                	rex.XB pop r15
    3716:	50                   	push   rax
    3717:	41 54                	push   r12
    3719:	43                   	rex.XB
    371a:	48                   	rex.W
    371b:	4c                   	rex.WR
    371c:	45 56                	rex.RB push r14
    371e:	45                   	rex.RB
    371f:	4c 5f                	rex.WR pop rdi
    3721:	5f                   	pop    rdi
    3722:	20 30                	and    BYTE PTR [rax],dh
    3724:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3727:	57                   	push   rdi
    3728:	49                   	rex.WB
    3729:	4e 54                	rex.WRX push rsp
    372b:	5f                   	pop    rdi
    372c:	4d                   	rex.WRB
    372d:	41 58                	pop    r8
    372f:	5f                   	pop    rdi
    3730:	5f                   	pop    rdi
    3731:	20 30                	and    BYTE PTR [rax],dh
    3733:	78 66                	js     379b <.debug_str+0x379b>
    3735:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 push bp
    373c:	55 
    373d:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3740:	61                   	(bad)  
    3741:	74 74                	je     37b7 <.debug_str+0x37b7>
    3743:	72 69                	jb     37ae <.debug_str+0x37ae>
    3745:	62                   	(bad)  
    3746:	75 74                	jne    37bc <.debug_str+0x37bc>
    3748:	65 5f                	gs pop rdi
    374a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    374b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    374c:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    374d:	73 74                	jae    37c3 <.debug_str+0x37c3>
    374f:	72 69                	jb     37ba <.debug_str+0x37ba>
    3751:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    3752:	67 5f                	addr32 pop rdi
    3754:	5f                   	pop    rdi
    3755:	20 00                	and    BYTE PTR [rax],al
    3757:	5f                   	pop    rdi
    3758:	49                   	rex.WB
    3759:	4f 5f                	rex.WRXB pop r15
    375b:	4d                   	rex.WRB
    375c:	41                   	rex.B
    375d:	47                   	rex.RXB
    375e:	49                   	rex.WB
    375f:	43 5f                	rex.XB pop r15
    3761:	4d                   	rex.WRB
    3762:	41 53                	push   r11
    3764:	4b 20 30             	rex.WXB and BYTE PTR [r8],sil
    3767:	78 46                	js     37af <.debug_str+0x37af>
    3769:	46                   	rex.RX
    376a:	46                   	rex.RX
    376b:	46 30 30             	rex.RX xor BYTE PTR [rax],r14b
    376e:	30 30                	xor    BYTE PTR [rax],dh
    3770:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3773:	6c                   	ins    BYTE PTR es:[rdi],dx
    3774:	69 6e 75 78 20 31 00 	imul   ebp,DWORD PTR [rsi+0x75],0x312078
    377b:	5f                   	pop    rdi
    377c:	5f                   	pop    rdi
    377d:	47                   	rex.RXB
    377e:	4c                   	rex.WR
    377f:	49                   	rex.WB
    3780:	42                   	rex.X
    3781:	43 5f                	rex.XB pop r15
    3783:	55                   	push   rbp
    3784:	53                   	push   rbx
    3785:	45 5f                	rex.RB pop r15
    3787:	49                   	rex.WB
    3788:	45                   	rex.RB
    3789:	43 5f                	rex.XB pop r15
    378b:	36 30 35 35 39 5f 46 	xor    BYTE PTR ss:[rip+0x465f3935],dh        # 465f70c7 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x465f70c7>
    3792:	55                   	push   rbp
    3793:	4e                   	rex.WRX
    3794:	43 53                	rex.XB push r11
    3796:	5f                   	pop    rdi
    3797:	45 58                	rex.RB pop r8
    3799:	54                   	push   rsp
    379a:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    379d:	4f 5f                	rex.WRXB pop r15
    379f:	76 61                	jbe    3802 <.debug_str+0x3802>
    37a1:	5f                   	pop    rdi
    37a2:	6c                   	ins    BYTE PTR es:[rdi],dx
    37a3:	69 73 74 20 5f 5f 67 	imul   esi,DWORD PTR [rbx+0x74],0x675f5f20
    37aa:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    37ab:	75 63                	jne    3810 <.debug_str+0x3810>
    37ad:	5f                   	pop    rdi
    37ae:	76 61                	jbe    3811 <.debug_str+0x3811>
    37b0:	5f                   	pop    rdi
    37b1:	6c                   	ins    BYTE PTR es:[rdi],dx
    37b2:	69 73 74 00 5f 47 5f 	imul   esi,DWORD PTR [rbx+0x74],0x5f475f00
    37b9:	42 55                	rex.X push rbp
    37bb:	46 53                	rex.RX push rbx
    37bd:	49 5a                	rex.WB pop r10
    37bf:	20 38                	and    BYTE PTR [rax],bh
    37c1:	31 39                	xor    DWORD PTR [rcx],edi
    37c3:	32 00                	xor    al,BYTE PTR [rax]
    37c5:	5f                   	pop    rdi
    37c6:	5f                   	pop    rdi
    37c7:	4c                   	rex.WR
    37c8:	44                   	rex.R
    37c9:	42                   	rex.X
    37ca:	4c 5f                	rex.WR pop rdi
    37cc:	52                   	push   rdx
    37cd:	45                   	rex.RB
    37ce:	44                   	rex.R
    37cf:	49 52                	rex.WB push r10
    37d1:	31 28                	xor    DWORD PTR [rax],ebp
    37d3:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    37d4:	61                   	(bad)  
    37d5:	6d                   	ins    DWORD PTR es:[rdi],dx
    37d6:	65 2c 70             	gs sub al,0x70
    37d9:	72 6f                	jb     384a <.debug_str+0x384a>
    37db:	74 6f                	je     384c <.debug_str+0x384c>
    37dd:	2c 61                	sub    al,0x61
    37df:	6c                   	ins    BYTE PTR es:[rdi],dx
    37e0:	69 61 73 29 20 6e 61 	imul   esp,DWORD PTR [rcx+0x73],0x616e2029
    37e7:	6d                   	ins    DWORD PTR es:[rdi],dx
    37e8:	65 20 70 72          	and    BYTE PTR gs:[rax+0x72],dh
    37ec:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    37ed:	74 6f                	je     385e <.debug_str+0x385e>
    37ef:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    37f2:	61                   	(bad)  
    37f3:	74 74                	je     3869 <.debug_str+0x3869>
    37f5:	72 69                	jb     3860 <.debug_str+0x3860>
    37f7:	62                   	(bad)  
    37f8:	75 74                	jne    386e <.debug_str+0x386e>
    37fa:	65 5f                	gs pop rdi
    37fc:	6d                   	ins    DWORD PTR es:[rdi],dx
    37fd:	61                   	(bad)  
    37fe:	6c                   	ins    BYTE PTR es:[rdi],dx
    37ff:	6c                   	ins    BYTE PTR es:[rdi],dx
    3800:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    3801:	63 5f 5f             	movsxd ebx,DWORD PTR [rdi+0x5f]
    3804:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    3807:	61                   	(bad)  
    3808:	74 74                	je     387e <.debug_str+0x387e>
    380a:	72 69                	jb     3875 <.debug_str+0x3875>
    380c:	62                   	(bad)  
    380d:	75 74                	jne    3883 <.debug_str+0x3883>
    380f:	65 5f                	gs pop rdi
    3811:	5f                   	pop    rdi
    3812:	20 28                	and    BYTE PTR [rax],ch
    3814:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
    3817:	6d                   	ins    DWORD PTR es:[rdi],dx
    3818:	61                   	(bad)  
    3819:	6c                   	ins    BYTE PTR es:[rdi],dx
    381a:	6c                   	ins    BYTE PTR es:[rdi],dx
    381b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    381c:	63 5f 5f             	movsxd ebx,DWORD PTR [rdi+0x5f]
    381f:	29 29                	sub    DWORD PTR [rcx],ebp
    3821:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3824:	55                   	push   rbp
    3825:	49                   	rex.WB
    3826:	4e 54                	rex.WRX push rsp
    3828:	33 32                	xor    esi,DWORD PTR [rdx]
    382a:	5f                   	pop    rdi
    382b:	54                   	push   rsp
    382c:	59                   	pop    rcx
    382d:	50                   	push   rax
    382e:	45 5f                	rex.RB pop r15
    3830:	5f                   	pop    rdi
    3831:	20 75 6e             	and    BYTE PTR [rbp+0x6e],dh
    3834:	73 69                	jae    389f <.debug_str+0x389f>
    3836:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    3838:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    383d:	74 00                	je     383f <.debug_str+0x383f>
    383f:	5f                   	pop    rdi
    3840:	5f                   	pop    rdi
    3841:	4c                   	rex.WR
    3842:	44                   	rex.R
    3843:	42                   	rex.X
    3844:	4c 5f                	rex.WR pop rdi
    3846:	52                   	push   rdx
    3847:	45                   	rex.RB
    3848:	44                   	rex.R
    3849:	49 52                	rex.WB push r10
    384b:	5f                   	pop    rdi
    384c:	4e 54                	rex.WRX push rsp
    384e:	48 28 6e 61          	rex.W sub BYTE PTR [rsi+0x61],bpl
    3852:	6d                   	ins    DWORD PTR es:[rdi],dx
    3853:	65 2c 70             	gs sub al,0x70
    3856:	72 6f                	jb     38c7 <.debug_str+0x38c7>
    3858:	74 6f                	je     38c9 <.debug_str+0x38c9>
    385a:	29 20                	sub    DWORD PTR [rax],esp
    385c:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    385d:	61                   	(bad)  
    385e:	6d                   	ins    DWORD PTR es:[rdi],dx
    385f:	65 20 70 72          	and    BYTE PTR gs:[rax+0x72],dh
    3863:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    3864:	74 6f                	je     38d5 <.debug_str+0x38d5>
    3866:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    3869:	54                   	push   rsp
    386a:	48 52                	rex.W push rdx
    386c:	4f 57                	rex.WRXB push r15
    386e:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3871:	55                   	push   rbp
    3872:	53                   	push   rbx
    3873:	45 5f                	rex.RB pop r15
    3875:	58                   	pop    rax
    3876:	4f 50                	rex.WRXB push r8
    3878:	45                   	rex.RB
    3879:	4e 32 4b 38          	rex.WRX xor r9b,BYTE PTR [rbx+0x38]
    387d:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    3880:	4f 5f                	rex.WRXB pop r15
    3882:	55                   	push   rbp
    3883:	50                   	push   rax
    3884:	50                   	push   rax
    3885:	45 52                	rex.RB push r10
    3887:	43                   	rex.XB
    3888:	41 53                	push   r11
    388a:	45 20 30             	and    BYTE PTR [r8],r14b
    388d:	31 30                	xor    DWORD PTR [rax],esi
    388f:	30 30                	xor    BYTE PTR [rax],dh
    3891:	00 50 5f             	add    BYTE PTR [rax+0x5f],dl
    3894:	74 6d                	je     3903 <.debug_str+0x3903>
    3896:	70 64                	jo     38fc <.debug_str+0x38fc>
    3898:	69 72 20 22 2f 74 6d 	imul   esi,DWORD PTR [rdx+0x20],0x6d742f22
    389f:	70 22                	jo     38c3 <.debug_str+0x38c3>
    38a1:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    38a4:	52                   	push   rdx
    38a5:	45                   	rex.RB
    38a6:	44                   	rex.R
    38a7:	49 52                	rex.WB push r10
    38a9:	45                   	rex.RB
    38aa:	43 54                	rex.XB push r12
    38ac:	5f                   	pop    rdi
    38ad:	4e 54                	rex.WRX push rsp
    38af:	48 28 6e 61          	rex.W sub BYTE PTR [rsi+0x61],bpl
    38b3:	6d                   	ins    DWORD PTR es:[rdi],dx
    38b4:	65 2c 70             	gs sub al,0x70
    38b7:	72 6f                	jb     3928 <.debug_str+0x3928>
    38b9:	74 6f                	je     392a <.debug_str+0x392a>
    38bb:	2c 61                	sub    al,0x61
    38bd:	6c                   	ins    BYTE PTR es:[rdi],dx
    38be:	69 61 73 29 20 6e 61 	imul   esp,DWORD PTR [rcx+0x73],0x616e2029
    38c5:	6d                   	ins    DWORD PTR es:[rdi],dx
    38c6:	65 20 70 72          	and    BYTE PTR gs:[rax+0x72],dh
    38ca:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    38cb:	74 6f                	je     393c <.debug_str+0x393c>
    38cd:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    38d0:	61                   	(bad)  
    38d1:	73 6d                	jae    3940 <.debug_str+0x3940>
    38d3:	5f                   	pop    rdi
    38d4:	5f                   	pop    rdi
    38d5:	20 28                	and    BYTE PTR [rax],ch
    38d7:	5f                   	pop    rdi
    38d8:	5f                   	pop    rdi
    38d9:	41 53                	push   r11
    38db:	4d                   	rex.WRB
    38dc:	4e                   	rex.WRX
    38dd:	41                   	rex.B
    38de:	4d                   	rex.WRB
    38df:	45 20 28             	and    BYTE PTR [r8],r13b
    38e2:	23 61 6c             	and    esp,DWORD PTR [rcx+0x6c]
    38e5:	69 61 73 29 29 20 5f 	imul   esp,DWORD PTR [rcx+0x73],0x5f202929
    38ec:	5f                   	pop    rdi
    38ed:	54                   	push   rsp
    38ee:	48 52                	rex.W push rdx
    38f0:	4f 57                	rex.WRXB push r15
    38f2:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    38f5:	55                   	push   rbp
    38f6:	53                   	push   rbx
    38f7:	45 5f                	rex.RB pop r15
    38f9:	58                   	pop    rax
    38fa:	4f 50                	rex.WRXB push r8
    38fc:	45                   	rex.RB
    38fd:	4e 00 5f 5f          	rex.WRX add BYTE PTR [rdi+0x5f],r11b
    3901:	46                   	rex.RX
    3902:	4c 54                	rex.WR push rsp
    3904:	31 32                	xor    DWORD PTR [rdx],esi
    3906:	38 5f 45             	cmp    BYTE PTR [rdi+0x45],bl
    3909:	50                   	push   rax
    390a:	53                   	push   rbx
    390b:	49                   	rex.WB
    390c:	4c                   	rex.WR
    390d:	4f                   	rex.WRXB
    390e:	4e 5f                	rex.WRX pop rdi
    3910:	5f                   	pop    rdi
    3911:	20 31                	and    BYTE PTR [rcx],dh
    3913:	2e 39 32             	cmp    DWORD PTR cs:[rdx],esi
    3916:	35 39 32 39 39       	xor    eax,0x39393239
    391b:	34 34                	xor    al,0x34
    391d:	33 38                	xor    edi,DWORD PTR [rax]
    391f:	37                   	(bad)  
    3920:	32 33                	xor    dh,BYTE PTR [rbx]
    3922:	35 38 35 33 30       	xor    eax,0x30333538
    3927:	35 35 39 37 37       	xor    eax,0x37373935
    392c:	39 34 32             	cmp    DWORD PTR [rdx+rsi*1],esi
    392f:	35 38 34 39 32       	xor    eax,0x32393438
    3934:	37                   	(bad)  
    3935:	33 32                	xor    esi,DWORD PTR [rdx]
    3937:	65 2d 33 34 46 31    	gs sub eax,0x31463433
    393d:	32 38                	xor    bh,BYTE PTR [rax]
    393f:	00 46 4f             	add    BYTE PTR [rsi+0x4f],al
    3942:	50                   	push   rax
    3943:	45                   	rex.RB
    3944:	4e 5f                	rex.WRX pop rdi
    3946:	4d                   	rex.WRB
    3947:	41 58                	pop    r8
    3949:	20 31                	and    BYTE PTR [rcx],dh
    394b:	36 00 5f 49          	add    BYTE PTR ss:[rdi+0x49],bl
    394f:	4f 5f                	rex.WRXB pop r15
    3951:	46                   	rex.RX
    3952:	49                   	rex.WB
    3953:	4c                   	rex.WR
    3954:	45 5f                	rex.RB pop r15
    3956:	70 6c                	jo     39c4 <.debug_str+0x39c4>
    3958:	75 73                	jne    39cd <.debug_str+0x39cd>
    395a:	00 5f 50             	add    BYTE PTR [rdi+0x50],bl
    395d:	4f 53                	rex.WRXB push r11
    395f:	49 58                	rex.WB pop r8
    3961:	5f                   	pop    rdi
    3962:	43 5f                	rex.XB pop r15
    3964:	53                   	push   rbx
    3965:	4f 55                	rex.WRXB push r13
    3967:	52                   	push   rdx
    3968:	43                   	rex.XB
    3969:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    396d:	54                   	push   rsp
    396e:	48 52                	rex.W push rdx
    3970:	4f 57                	rex.WRXB push r15
    3972:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    3975:	61                   	(bad)  
    3976:	74 74                	je     39ec <.debug_str+0x39ec>
    3978:	72 69                	jb     39e3 <.debug_str+0x39e3>
    397a:	62                   	(bad)  
    397b:	75 74                	jne    39f1 <.debug_str+0x39f1>
    397d:	65 5f                	gs pop rdi
    397f:	5f                   	pop    rdi
    3980:	20 28                	and    BYTE PTR [rax],ch
    3982:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
    3985:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    3986:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    3987:	74 68                	je     39f1 <.debug_str+0x39f1>
    3989:	72 6f                	jb     39fa <.debug_str+0x39fa>
    398b:	77 5f                	ja     39ec <.debug_str+0x39ec>
    398d:	5f                   	pop    rdi
    398e:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    3991:	4c                   	rex.WR
    3992:	45                   	rex.RB
    3993:	41                   	rex.B
    3994:	46 29 29             	rex.RX sub DWORD PTR [rcx],r13d
    3997:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    399a:	53                   	push   rbx
    399b:	49 5a                	rex.WB pop r10
    399d:	45                   	rex.RB
    399e:	4f                   	rex.WRXB
    399f:	46 5f                	rex.RX pop rdi
    39a1:	4c                   	rex.WR
    39a2:	4f                   	rex.WRXB
    39a3:	4e                   	rex.WRX
    39a4:	47 5f                	rex.RXB pop r15
    39a6:	4c                   	rex.WR
    39a7:	4f                   	rex.WRXB
    39a8:	4e                   	rex.WRX
    39a9:	47 5f                	rex.RXB pop r15
    39ab:	5f                   	pop    rdi
    39ac:	20 38                	and    BYTE PTR [rax],bh
    39ae:	00 5f 56             	add    BYTE PTR [rdi+0x56],bl
    39b1:	41 5f                	pop    r15
    39b3:	4c                   	rex.WR
    39b4:	49 53                	rex.WB push r11
    39b6:	54                   	push   rsp
    39b7:	5f                   	pop    rdi
    39b8:	44                   	rex.R
    39b9:	45                   	rex.RB
    39ba:	46                   	rex.RX
    39bb:	49                   	rex.WB
    39bc:	4e                   	rex.WRX
    39bd:	45                   	rex.RB
    39be:	44 20 00             	and    BYTE PTR [rax],r8b
    39c1:	5f                   	pop    rdi
    39c2:	5f                   	pop    rdi
    39c3:	55                   	push   rbp
    39c4:	49                   	rex.WB
    39c5:	4e 54                	rex.WRX push rsp
    39c7:	5f                   	pop    rdi
    39c8:	46                   	rex.RX
    39c9:	41 53                	push   r11
    39cb:	54                   	push   rsp
    39cc:	33 32                	xor    esi,DWORD PTR [rdx]
    39ce:	5f                   	pop    rdi
    39cf:	54                   	push   rsp
    39d0:	59                   	pop    rcx
    39d1:	50                   	push   rax
    39d2:	45 5f                	rex.RB pop r15
    39d4:	5f                   	pop    rdi
    39d5:	20 6c 6f 6e          	and    BYTE PTR [rdi+rbp*2+0x6e],ch
    39d9:	67 20 75 6e          	and    BYTE PTR [ebp+0x6e],dh
    39dd:	73 69                	jae    3a48 <.debug_str+0x3a48>
    39df:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    39e1:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    39e6:	74 00                	je     39e8 <.debug_str+0x39e8>
    39e8:	5f                   	pop    rdi
    39e9:	5f                   	pop    rdi
    39ea:	53                   	push   rbx
    39eb:	48 52                	rex.W push rdx
    39ed:	54                   	push   rsp
    39ee:	5f                   	pop    rdi
    39ef:	57                   	push   rdi
    39f0:	49                   	rex.WB
    39f1:	44 54                	rex.R push rsp
    39f3:	48 5f                	rex.W pop rdi
    39f5:	5f                   	pop    rdi
    39f6:	20 31                	and    BYTE PTR [rcx],dh
    39f8:	36 00 5f 5f          	add    BYTE PTR ss:[rdi+0x5f],bl
    39fc:	53                   	push   rbx
    39fd:	53                   	push   rbx
    39fe:	45 32 5f 4d          	xor    r11b,BYTE PTR [r15+0x4d]
    3a02:	41 54                	push   r12
    3a04:	48 5f                	rex.W pop rdi
    3a06:	5f                   	pop    rdi
    3a07:	20 31                	and    BYTE PTR [rcx],dh
    3a09:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3a0c:	53                   	push   rbx
    3a0d:	53                   	push   rbx
    3a0e:	49 5a                	rex.WB pop r10
    3a10:	45 5f                	rex.RB pop r15
    3a12:	54                   	push   rsp
    3a13:	5f                   	pop    rdi
    3a14:	54                   	push   rsp
    3a15:	59                   	pop    rcx
    3a16:	50                   	push   rax
    3a17:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    3a1b:	53                   	push   rbx
    3a1c:	57                   	push   rdi
    3a1d:	4f 52                	rex.WRXB push r10
    3a1f:	44 5f                	rex.R pop rdi
    3a21:	54                   	push   rsp
    3a22:	59                   	pop    rcx
    3a23:	50                   	push   rax
    3a24:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    3a28:	53                   	push   rbx
    3a29:	36 34 5f             	ss xor al,0x5f
    3a2c:	54                   	push   rsp
    3a2d:	59                   	pop    rcx
    3a2e:	50                   	push   rax
    3a2f:	45 20 6c 6f 6e       	and    BYTE PTR [r15+rbp*2+0x6e],r13b
    3a34:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
    3a38:	74 00                	je     3a3a <.debug_str+0x3a3a>
    3a3a:	5f                   	pop    rdi
    3a3b:	5f                   	pop    rdi
    3a3c:	61                   	(bad)  
    3a3d:	74 74                	je     3ab3 <.debug_str+0x3ab3>
    3a3f:	72 69                	jb     3aaa <.debug_str+0x3aaa>
    3a41:	62                   	(bad)  
    3a42:	75 74                	jne    3ab8 <.debug_str+0x3ab8>
    3a44:	65 5f                	gs pop rdi
    3a46:	70 75                	jo     3abd <.debug_str+0x3abd>
    3a48:	72 65                	jb     3aaf <.debug_str+0x3aaf>
    3a4a:	5f                   	pop    rdi
    3a4b:	5f                   	pop    rdi
    3a4c:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    3a4f:	61                   	(bad)  
    3a50:	74 74                	je     3ac6 <.debug_str+0x3ac6>
    3a52:	72 69                	jb     3abd <.debug_str+0x3abd>
    3a54:	62                   	(bad)  
    3a55:	75 74                	jne    3acb <.debug_str+0x3acb>
    3a57:	65 5f                	gs pop rdi
    3a59:	5f                   	pop    rdi
    3a5a:	20 28                	and    BYTE PTR [rax],ch
    3a5c:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
    3a5f:	70 75                	jo     3ad6 <.debug_str+0x3ad6>
    3a61:	72 65                	jb     3ac8 <.debug_str+0x3ac8>
    3a63:	5f                   	pop    rdi
    3a64:	5f                   	pop    rdi
    3a65:	29 29                	sub    DWORD PTR [rcx],ebp
    3a67:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3a6a:	49                   	rex.WB
    3a6b:	4e 54                	rex.WRX push rsp
    3a6d:	4d                   	rex.WRB
    3a6e:	41 58                	pop    r8
    3a70:	5f                   	pop    rdi
    3a71:	43 28 63 29          	rex.XB sub BYTE PTR [r11+0x29],spl
    3a75:	20 63 20             	and    BYTE PTR [rbx+0x20],ah
    3a78:	23 23                	and    esp,DWORD PTR [rbx]
    3a7a:	20 4c 00 5f          	and    BYTE PTR [rax+rax*1+0x5f],cl
    3a7e:	49                   	rex.WB
    3a7f:	4f 5f                	rex.WRXB pop r15
    3a81:	69 63 6f 6e 76 5f 74 	imul   esp,DWORD PTR [rbx+0x6f],0x745f766e
    3a88:	20 5f 47             	and    BYTE PTR [rdi+0x47],bl
    3a8b:	5f                   	pop    rdi
    3a8c:	69 63 6f 6e 76 5f 74 	imul   esp,DWORD PTR [rbx+0x6f],0x745f766e
    3a93:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3a96:	49                   	rex.WB
    3a97:	4e 54                	rex.WRX push rsp
    3a99:	5f                   	pop    rdi
    3a9a:	46                   	rex.RX
    3a9b:	41 53                	push   r11
    3a9d:	54                   	push   rsp
    3a9e:	33 32                	xor    esi,DWORD PTR [rdx]
    3aa0:	5f                   	pop    rdi
    3aa1:	57                   	push   rdi
    3aa2:	49                   	rex.WB
    3aa3:	44 54                	rex.R push rsp
    3aa5:	48 5f                	rex.W pop rdi
    3aa7:	5f                   	pop    rdi
    3aa8:	20 36                	and    BYTE PTR [rsi],dh
    3aaa:	34 00                	xor    al,0x0
    3aac:	5f                   	pop    rdi
    3aad:	5f                   	pop    rdi
    3aae:	55                   	push   rbp
    3aaf:	53                   	push   rbx
    3ab0:	45 5f                	rex.RB pop r15
    3ab2:	58                   	pop    rax
    3ab3:	4f 50                	rex.WRXB push r8
    3ab5:	45                   	rex.RB
    3ab6:	4e 32 4b 38          	rex.WRX xor r9b,BYTE PTR [rbx+0x38]
    3aba:	20 31                	and    BYTE PTR [rcx],dh
    3abc:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3abf:	49                   	rex.WB
    3ac0:	4e 54                	rex.WRX push rsp
    3ac2:	5f                   	pop    rdi
    3ac3:	4c                   	rex.WR
    3ac4:	45                   	rex.RB
    3ac5:	41 53                	push   r11
    3ac7:	54                   	push   rsp
    3ac8:	36 34 5f             	ss xor al,0x5f
    3acb:	57                   	push   rdi
    3acc:	49                   	rex.WB
    3acd:	44 54                	rex.R push rsp
    3acf:	48 5f                	rex.W pop rdi
    3ad1:	5f                   	pop    rdi
    3ad2:	20 36                	and    BYTE PTR [rsi],dh
    3ad4:	34 00                	xor    al,0x0
    3ad6:	5f                   	pop    rdi
    3ad7:	5f                   	pop    rdi
    3ad8:	47                   	rex.RXB
    3ad9:	4c                   	rex.WR
    3ada:	49                   	rex.WB
    3adb:	42                   	rex.X
    3adc:	43 5f                	rex.XB pop r15
    3ade:	55                   	push   rbp
    3adf:	53                   	push   rbx
    3ae0:	45 5f                	rex.RB pop r15
    3ae2:	49                   	rex.WB
    3ae3:	45                   	rex.RB
    3ae4:	43 5f                	rex.XB pop r15
    3ae6:	36 30 35 35 39 5f 54 	xor    BYTE PTR ss:[rip+0x545f3935],dh        # 545f7422 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x545f7422>
    3aed:	59                   	pop    rcx
    3aee:	50                   	push   rax
    3aef:	45 53                	rex.RB push r11
    3af1:	5f                   	pop    rdi
    3af2:	45 58                	rex.RB pop r8
    3af4:	54                   	push   rsp
    3af5:	20 30                	and    BYTE PTR [rax],dh
    3af7:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3afa:	49                   	rex.WB
    3afb:	4e 54                	rex.WRX push rsp
    3afd:	38 5f 43             	cmp    BYTE PTR [rdi+0x43],bl
    3b00:	28 63 29             	sub    BYTE PTR [rbx+0x29],ah
    3b03:	20 63 00             	and    BYTE PTR [rbx+0x0],ah
    3b06:	5f                   	pop    rdi
    3b07:	5f                   	pop    rdi
    3b08:	53                   	push   rbx
    3b09:	49 5a                	rex.WB pop r10
    3b0b:	45                   	rex.RB
    3b0c:	4f                   	rex.WRXB
    3b0d:	46 5f                	rex.RX pop rdi
    3b0f:	50                   	push   rax
    3b10:	4f                   	rex.WRXB
    3b11:	49                   	rex.WB
    3b12:	4e 54                	rex.WRX push rsp
    3b14:	45 52                	rex.RB push r10
    3b16:	5f                   	pop    rdi
    3b17:	5f                   	pop    rdi
    3b18:	20 38                	and    BYTE PTR [rax],bh
    3b1a:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3b1d:	46                   	rex.RX
    3b1e:	4c 54                	rex.WR push rsp
    3b20:	36 34 5f             	ss xor al,0x5f
    3b23:	45 50                	rex.RB push r8
    3b25:	53                   	push   rbx
    3b26:	49                   	rex.WB
    3b27:	4c                   	rex.WR
    3b28:	4f                   	rex.WRXB
    3b29:	4e 5f                	rex.WRX pop rdi
    3b2b:	5f                   	pop    rdi
    3b2c:	20 32                	and    BYTE PTR [rdx],dh
    3b2e:	2e 32 32             	xor    dh,BYTE PTR cs:[rdx]
    3b31:	30 34 34             	xor    BYTE PTR [rsp+rsi*1],dh
    3b34:	36 30 34 39          	xor    BYTE PTR ss:[rcx+rdi*1],dh
    3b38:	32 35 30 33 31 33    	xor    dh,BYTE PTR [rip+0x33313330]        # 33316e6e <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x33316e6e>
    3b3e:	30 38                	xor    BYTE PTR [rax],bh
    3b40:	30 38                	xor    BYTE PTR [rax],bh
    3b42:	34 37                	xor    al,0x37
    3b44:	32 36                	xor    dh,BYTE PTR [rsi]
    3b46:	33 33                	xor    esi,DWORD PTR [rbx]
    3b48:	33 36                	xor    esi,DWORD PTR [rsi]
    3b4a:	31 38                	xor    DWORD PTR [rax],edi
    3b4c:	31 36                	xor    DWORD PTR [rsi],esi
    3b4e:	34 30                	xor    al,0x30
    3b50:	36 32 65 2d          	xor    ah,BYTE PTR ss:[rbp+0x2d]
    3b54:	31 36                	xor    DWORD PTR [rsi],esi
    3b56:	46                   	rex.RX
    3b57:	36 34 00             	ss xor al,0x0
    3b5a:	5f                   	pop    rdi
    3b5b:	49                   	rex.WB
    3b5c:	4f 5f                	rex.WRXB pop r15
    3b5e:	76 61                	jbe    3bc1 <.debug_str+0x3bc1>
    3b60:	5f                   	pop    rdi
    3b61:	6c                   	ins    BYTE PTR es:[rdi],dx
    3b62:	69 73 74 20 5f 47 5f 	imul   esi,DWORD PTR [rbx+0x74],0x5f475f20
    3b69:	76 61                	jbe    3bcc <.debug_str+0x3bcc>
    3b6b:	5f                   	pop    rdi
    3b6c:	6c                   	ins    BYTE PTR es:[rdi],dx
    3b6d:	69 73 74 00 5f 5f 46 	imul   esi,DWORD PTR [rbx+0x74],0x465f5f00
    3b74:	4c 54                	rex.WR push rsp
    3b76:	36 34 58             	ss xor al,0x58
    3b79:	5f                   	pop    rdi
    3b7a:	4d                   	rex.WRB
    3b7b:	41                   	rex.B
    3b7c:	4e 54                	rex.WRX push rsp
    3b7e:	5f                   	pop    rdi
    3b7f:	44                   	rex.R
    3b80:	49                   	rex.WB
    3b81:	47 5f                	rex.RXB pop r15
    3b83:	5f                   	pop    rdi
    3b84:	20 36                	and    BYTE PTR [rsi],dh
    3b86:	34 00                	xor    al,0x0
    3b88:	5f                   	pop    rdi
    3b89:	44                   	rex.R
    3b8a:	45                   	rex.RB
    3b8b:	46                   	rex.RX
    3b8c:	41 55                	push   r13
    3b8e:	4c 54                	rex.WR push rsp
    3b90:	5f                   	pop    rdi
    3b91:	53                   	push   rbx
    3b92:	4f 55                	rex.WRXB push r13
    3b94:	52                   	push   rdx
    3b95:	43                   	rex.XB
    3b96:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    3b9a:	57                   	push   rdi
    3b9b:	43                   	rex.XB
    3b9c:	48                   	rex.W
    3b9d:	41 52                	push   r10
    3b9f:	5f                   	pop    rdi
    3ba0:	4d                   	rex.WRB
    3ba1:	41 58                	pop    r8
    3ba3:	5f                   	pop    rdi
    3ba4:	5f                   	pop    rdi
    3ba5:	20 30                	and    BYTE PTR [rax],dh
    3ba7:	78 37                	js     3be0 <.debug_str+0x3be0>
    3ba9:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 add BYTE PTR [rdi+0x49],bl
    3bb0:	00 5f 49 
    3bb3:	4f 5f                	rex.WRXB pop r15
    3bb5:	42 55                	rex.X push rbp
    3bb7:	46 53                	rex.RX push rbx
    3bb9:	49 5a                	rex.WB pop r10
    3bbb:	20 5f 47             	and    BYTE PTR [rdi+0x47],bl
    3bbe:	5f                   	pop    rdi
    3bbf:	42 55                	rex.X push rbp
    3bc1:	46 53                	rex.RX push rbx
    3bc3:	49 5a                	rex.WB pop r10
    3bc5:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3bc8:	46 53                	rex.RX push rbx
    3bca:	46                   	rex.RX
    3bcb:	49                   	rex.WB
    3bcc:	4c                   	rex.WR
    3bcd:	43                   	rex.XB
    3bce:	4e 54                	rex.WRX push rsp
    3bd0:	5f                   	pop    rdi
    3bd1:	54                   	push   rsp
    3bd2:	5f                   	pop    rdi
    3bd3:	54                   	push   rsp
    3bd4:	59                   	pop    rcx
    3bd5:	50                   	push   rax
    3bd6:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    3bda:	53                   	push   rbx
    3bdb:	59                   	pop    rcx
    3bdc:	53                   	push   rbx
    3bdd:	43                   	rex.XB
    3bde:	41                   	rex.B
    3bdf:	4c                   	rex.WR
    3be0:	4c 5f                	rex.WR pop rdi
    3be2:	55                   	push   rbp
    3be3:	4c                   	rex.WR
    3be4:	4f                   	rex.WRXB
    3be5:	4e                   	rex.WRX
    3be6:	47 5f                	rex.RXB pop r15
    3be8:	54                   	push   rsp
    3be9:	59                   	pop    rcx
    3bea:	50                   	push   rax
    3beb:	45 00 5f 49          	add    BYTE PTR [r15+0x49],r11b
    3bef:	4f 5f                	rex.WRXB pop r15
    3bf1:	42                   	rex.X
    3bf2:	41                   	rex.B
    3bf3:	44 5f                	rex.R pop rdi
    3bf5:	53                   	push   rbx
    3bf6:	45                   	rex.RB
    3bf7:	45                   	rex.RB
    3bf8:	4e 20 30             	rex.WRX and BYTE PTR [rax],r14b
    3bfb:	78 34                	js     3c31 <.debug_str+0x3c31>
    3bfd:	30 30                	xor    BYTE PTR [rax],dh
    3bff:	30 00                	xor    BYTE PTR [rax],al
    3c01:	5f                   	pop    rdi
    3c02:	5f                   	pop    rdi
    3c03:	77 61                	ja     3c66 <.debug_str+0x3c66>
    3c05:	72 6e                	jb     3c75 <.debug_str+0x3c75>
    3c07:	61                   	(bad)  
    3c08:	74 74                	je     3c7e <.debug_str+0x3c7e>
    3c0a:	72 28                	jb     3c34 <.debug_str+0x3c34>
    3c0c:	6d                   	ins    DWORD PTR es:[rdi],dx
    3c0d:	73 67                	jae    3c76 <.debug_str+0x3c76>
    3c0f:	29 20                	sub    DWORD PTR [rax],esp
    3c11:	5f                   	pop    rdi
    3c12:	5f                   	pop    rdi
    3c13:	61                   	(bad)  
    3c14:	74 74                	je     3c8a <.debug_str+0x3c8a>
    3c16:	72 69                	jb     3c81 <.debug_str+0x3c81>
    3c18:	62                   	(bad)  
    3c19:	75 74                	jne    3c8f <.debug_str+0x3c8f>
    3c1b:	65 5f                	gs pop rdi
    3c1d:	5f                   	pop    rdi
    3c1e:	28 28                	sub    BYTE PTR [rax],ch
    3c20:	5f                   	pop    rdi
    3c21:	5f                   	pop    rdi
    3c22:	77 61                	ja     3c85 <.debug_str+0x3c85>
    3c24:	72 6e                	jb     3c94 <.debug_str+0x3c94>
    3c26:	69 6e 67 5f 5f 20 28 	imul   ebp,DWORD PTR [rsi+0x67],0x28205f5f
    3c2d:	6d                   	ins    DWORD PTR es:[rdi],dx
    3c2e:	73 67                	jae    3c97 <.debug_str+0x3c97>
    3c30:	29 29                	sub    DWORD PTR [rcx],ebp
    3c32:	29 00                	sub    DWORD PTR [rax],eax
    3c34:	5f                   	pop    rdi
    3c35:	5f                   	pop    rdi
    3c36:	49                   	rex.WB
    3c37:	4e 54                	rex.WRX push rsp
    3c39:	5f                   	pop    rdi
    3c3a:	57                   	push   rdi
    3c3b:	49                   	rex.WB
    3c3c:	44 54                	rex.R push rsp
    3c3e:	48 5f                	rex.W pop rdi
    3c40:	5f                   	pop    rdi
    3c41:	20 33                	and    BYTE PTR [rbx],dh
    3c43:	32 00                	xor    al,BYTE PTR [rax]
    3c45:	5f                   	pop    rdi
    3c46:	5f                   	pop    rdi
    3c47:	4c                   	rex.WR
    3c48:	44                   	rex.R
    3c49:	42                   	rex.X
    3c4a:	4c 5f                	rex.WR pop rdi
    3c4c:	44                   	rex.R
    3c4d:	45                   	rex.RB
    3c4e:	43                   	rex.XB
    3c4f:	49                   	rex.WB
    3c50:	4d                   	rex.WRB
    3c51:	41                   	rex.B
    3c52:	4c 5f                	rex.WR pop rdi
    3c54:	44                   	rex.R
    3c55:	49                   	rex.WB
    3c56:	47 5f                	rex.RXB pop r15
    3c58:	5f                   	pop    rdi
    3c59:	20 32                	and    BYTE PTR [rdx],dh
    3c5b:	31 00                	xor    DWORD PTR [rax],eax
    3c5d:	5f                   	pop    rdi
    3c5e:	5f                   	pop    rdi
    3c5f:	47                   	rex.RXB
    3c60:	43                   	rex.XB
    3c61:	43 5f                	rex.XB pop r15
    3c63:	41 54                	push   r12
    3c65:	4f                   	rex.WRXB
    3c66:	4d                   	rex.WRB
    3c67:	49                   	rex.WB
    3c68:	43 5f                	rex.XB pop r15
    3c6a:	50                   	push   rax
    3c6b:	4f                   	rex.WRXB
    3c6c:	49                   	rex.WB
    3c6d:	4e 54                	rex.WRX push rsp
    3c6f:	45 52                	rex.RB push r10
    3c71:	5f                   	pop    rdi
    3c72:	4c                   	rex.WR
    3c73:	4f                   	rex.WRXB
    3c74:	43                   	rex.XB
    3c75:	4b 5f                	rex.WXB pop r15
    3c77:	46 52                	rex.RX push rdx
    3c79:	45                   	rex.RB
    3c7a:	45 20 32             	and    BYTE PTR [r10],r14b
    3c7d:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3c80:	73 74                	jae    3cf6 <.debug_str+0x3cf6>
    3c82:	75 62                	jne    3ce6 <.debug_str+0x3ce6>
    3c84:	5f                   	pop    rdi
    3c85:	5f                   	pop    rdi
    3c86:	5f                   	pop    rdi
    3c87:	63 6f 6d             	movsxd ebp,DWORD PTR [rdi+0x6d]
    3c8a:	70 61                	jo     3ced <.debug_str+0x3ced>
    3c8c:	74 5f                	je     3ced <.debug_str+0x3ced>
    3c8e:	62                   	(bad)  
    3c8f:	64 66 6c             	fs data16 ins BYTE PTR es:[rdi],dx
    3c92:	75 73                	jne    3d07 <.debug_str+0x3d07>
    3c94:	68 20 00 46 4f       	push   0x4f460020
    3c99:	50                   	push   rax
    3c9a:	45                   	rex.RB
    3c9b:	4e 5f                	rex.WRX pop rdi
    3c9d:	4d                   	rex.WRB
    3c9e:	41 58                	pop    r8
    3ca0:	00 5f 6c             	add    BYTE PTR [rdi+0x6c],bl
    3ca3:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    3ca4:	63 6b 00             	movsxd ebp,DWORD PTR [rbx+0x0]
    3ca7:	5f                   	pop    rdi
    3ca8:	5f                   	pop    rdi
    3ca9:	53                   	push   rbx
    3caa:	45                   	rex.RB
    3cab:	47 5f                	rex.RXB pop r15
    3cad:	46 53                	rex.RX push rbx
    3caf:	20 31                	and    BYTE PTR [rcx],dh
    3cb1:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3cb4:	50                   	push   rax
    3cb5:	28 61 72             	sub    BYTE PTR [rcx+0x72],ah
    3cb8:	67 73 29             	addr32 jae 3ce4 <.debug_str+0x3ce4>
    3cbb:	20 61 72             	and    BYTE PTR [rcx+0x72],ah
    3cbe:	67 73 00             	addr32 jae 3cc1 <.debug_str+0x3cc1>
    3cc1:	5f                   	pop    rdi
    3cc2:	5f                   	pop    rdi
    3cc3:	54                   	push   rsp
    3cc4:	49                   	rex.WB
    3cc5:	4d                   	rex.WRB
    3cc6:	45 5f                	rex.RB pop r15
    3cc8:	54                   	push   rsp
    3cc9:	5f                   	pop    rdi
    3cca:	54                   	push   rsp
    3ccb:	59                   	pop    rcx
    3ccc:	50                   	push   rax
    3ccd:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    3cd1:	53                   	push   rbx
    3cd2:	59                   	pop    rcx
    3cd3:	53                   	push   rbx
    3cd4:	43                   	rex.XB
    3cd5:	41                   	rex.B
    3cd6:	4c                   	rex.WR
    3cd7:	4c 5f                	rex.WR pop rdi
    3cd9:	53                   	push   rbx
    3cda:	4c                   	rex.WR
    3cdb:	4f                   	rex.WRXB
    3cdc:	4e                   	rex.WRX
    3cdd:	47 5f                	rex.RXB pop r15
    3cdf:	54                   	push   rsp
    3ce0:	59                   	pop    rcx
    3ce1:	50                   	push   rax
    3ce2:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    3ce6:	55                   	push   rbp
    3ce7:	49                   	rex.WB
    3ce8:	4e 54                	rex.WRX push rsp
    3cea:	5f                   	pop    rdi
    3ceb:	46                   	rex.RX
    3cec:	41 53                	push   r11
    3cee:	54                   	push   rsp
    3cef:	31 36                	xor    DWORD PTR [rsi],esi
    3cf1:	5f                   	pop    rdi
    3cf2:	54                   	push   rsp
    3cf3:	59                   	pop    rcx
    3cf4:	50                   	push   rax
    3cf5:	45 5f                	rex.RB pop r15
    3cf7:	5f                   	pop    rdi
    3cf8:	20 6c 6f 6e          	and    BYTE PTR [rdi+rbp*2+0x6e],ch
    3cfc:	67 20 75 6e          	and    BYTE PTR [ebp+0x6e],dh
    3d00:	73 69                	jae    3d6b <.debug_str+0x3d6b>
    3d02:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    3d04:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    3d09:	74 00                	je     3d0b <.debug_str+0x3d0b>
    3d0b:	5f                   	pop    rdi
    3d0c:	5f                   	pop    rdi
    3d0d:	47                   	rex.RXB
    3d0e:	4c                   	rex.WR
    3d0f:	49                   	rex.WB
    3d10:	42                   	rex.X
    3d11:	43 5f                	rex.XB pop r15
    3d13:	5f                   	pop    rdi
    3d14:	20 32                	and    BYTE PTR [rdx],dh
    3d16:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    3d19:	4f 5f                	rex.WRXB pop r15
    3d1b:	73 74                	jae    3d91 <.debug_str+0x3d91>
    3d1d:	64 6f                	outs   dx,DWORD PTR fs:[rsi]
    3d1f:	75 74                	jne    3d95 <.debug_str+0x3d95>
    3d21:	20 28                	and    BYTE PTR [rax],ch
    3d23:	28 5f 49             	sub    BYTE PTR [rdi+0x49],bl
    3d26:	4f 5f                	rex.WRXB pop r15
    3d28:	46                   	rex.RX
    3d29:	49                   	rex.WB
    3d2a:	4c                   	rex.WR
    3d2b:	45 2a 29             	sub    r13b,BYTE PTR [r9]
    3d2e:	28 26                	sub    BYTE PTR [rsi],ah
    3d30:	5f                   	pop    rdi
    3d31:	49                   	rex.WB
    3d32:	4f 5f                	rex.WRXB pop r15
    3d34:	32 5f 31             	xor    bl,BYTE PTR [rdi+0x31]
    3d37:	5f                   	pop    rdi
    3d38:	73 74                	jae    3dae <.debug_str+0x3dae>
    3d3a:	64 6f                	outs   dx,DWORD PTR fs:[rsi]
    3d3c:	75 74                	jne    3db2 <.debug_str+0x3db2>
    3d3e:	5f                   	pop    rdi
    3d3f:	29 29                	sub    DWORD PTR [rcx],ebp
    3d41:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3d44:	55                   	push   rbp
    3d45:	53                   	push   rbx
    3d46:	45 52                	rex.RB push r10
    3d48:	5f                   	pop    rdi
    3d49:	4c                   	rex.WR
    3d4a:	41                   	rex.B
    3d4b:	42                   	rex.X
    3d4c:	45                   	rex.RB
    3d4d:	4c 5f                	rex.WR pop rdi
    3d4f:	50                   	push   rax
    3d50:	52                   	push   rdx
    3d51:	45                   	rex.RB
    3d52:	46                   	rex.RX
    3d53:	49 58                	rex.WB pop r8
    3d55:	5f                   	pop    rdi
    3d56:	5f                   	pop    rdi
    3d57:	20 00                	and    BYTE PTR [rax],al
    3d59:	6c                   	ins    BYTE PTR es:[rdi],dx
    3d5a:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    3d5b:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    3d5c:	67 20 75 6e          	and    BYTE PTR [ebp+0x6e],dh
    3d60:	73 69                	jae    3dcb <.debug_str+0x3dcb>
    3d62:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    3d64:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    3d69:	74 00                	je     3d6b <.debug_str+0x3d6b>
    3d6b:	5f                   	pop    rdi
    3d6c:	49                   	rex.WB
    3d6d:	4f 5f                	rex.WRXB pop r15
    3d6f:	70 69                	jo     3dda <.debug_str+0x3dda>
    3d71:	64 5f                	fs pop rdi
    3d73:	74 20                	je     3d95 <.debug_str+0x3d95>
    3d75:	5f                   	pop    rdi
    3d76:	5f                   	pop    rdi
    3d77:	70 69                	jo     3de2 <.debug_str+0x3de2>
    3d79:	64 5f                	fs pop rdi
    3d7b:	74 00                	je     3d7d <.debug_str+0x3d7d>
    3d7d:	5f                   	pop    rdi
    3d7e:	5f                   	pop    rdi
    3d7f:	67 6c                	ins    BYTE PTR es:[edi],dx
    3d81:	69 62 63 5f 6d 61 63 	imul   esp,DWORD PTR [rdx+0x63],0x63616d5f
    3d88:	72 6f                	jb     3df9 <.debug_str+0x3df9>
    3d8a:	5f                   	pop    rdi
    3d8b:	77 61                	ja     3dee <.debug_str+0x3dee>
    3d8d:	72 6e                	jb     3dfd <.debug_str+0x3dfd>
    3d8f:	69 6e 67 31 28 6d 65 	imul   ebp,DWORD PTR [rsi+0x67],0x656d2831
    3d96:	73 73                	jae    3e0b <.debug_str+0x3e0b>
    3d98:	61                   	(bad)  
    3d99:	67 65 29 20          	sub    DWORD PTR gs:[eax],esp
    3d9d:	5f                   	pop    rdi
    3d9e:	50                   	push   rax
    3d9f:	72 61                	jb     3e02 <.debug_str+0x3e02>
    3da1:	67 6d                	ins    DWORD PTR es:[edi],dx
    3da3:	61                   	(bad)  
    3da4:	20 28                	and    BYTE PTR [rax],ch
    3da6:	23 6d 65             	and    ebp,DWORD PTR [rbp+0x65]
    3da9:	73 73                	jae    3e1e <.debug_str+0x3e1e>
    3dab:	61                   	(bad)  
    3dac:	67 65 29 00          	sub    DWORD PTR gs:[eax],eax
    3db0:	5f                   	pop    rdi
    3db1:	5f                   	pop    rdi
    3db2:	47                   	rex.RXB
    3db3:	43                   	rex.XB
    3db4:	43 5f                	rex.XB pop r15
    3db6:	41 54                	push   r12
    3db8:	4f                   	rex.WRXB
    3db9:	4d                   	rex.WRB
    3dba:	49                   	rex.WB
    3dbb:	43 5f                	rex.XB pop r15
    3dbd:	43                   	rex.XB
    3dbe:	48                   	rex.W
    3dbf:	41 52                	push   r10
    3dc1:	33 32                	xor    esi,DWORD PTR [rdx]
    3dc3:	5f                   	pop    rdi
    3dc4:	54                   	push   rsp
    3dc5:	5f                   	pop    rdi
    3dc6:	4c                   	rex.WR
    3dc7:	4f                   	rex.WRXB
    3dc8:	43                   	rex.XB
    3dc9:	4b 5f                	rex.WXB pop r15
    3dcb:	46 52                	rex.RX push rdx
    3dcd:	45                   	rex.RB
    3dce:	45 20 32             	and    BYTE PTR [r10],r14b
    3dd1:	00 5f 6f             	add    BYTE PTR [rdi+0x6f],bl
    3dd4:	6c                   	ins    BYTE PTR es:[rdi],dx
    3dd5:	64 5f                	fs pop rdi
    3dd7:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    3dd8:	66 66 73 65          	data16 data16 jae 3e41 <.debug_str+0x3e41>
    3ddc:	74 00                	je     3dde <.debug_str+0x3dde>
    3dde:	73 74                	jae    3e54 <.debug_str+0x3e54>
    3de0:	64 69 6e 00 5f 49 4f 	imul   ebp,DWORD PTR fs:[rsi+0x0],0x5f4f495f
    3de7:	5f 
    3de8:	46                   	rex.RX
    3de9:	49                   	rex.WB
    3dea:	4c                   	rex.WR
    3deb:	45 00 5f 49          	add    BYTE PTR [r15+0x49],r11b
    3def:	4f 5f                	rex.WRXB pop r15
    3df1:	55                   	push   rbp
    3df2:	4e                   	rex.WRX
    3df3:	42 55                	rex.X push rbp
    3df5:	46                   	rex.RX
    3df6:	46                   	rex.RX
    3df7:	45 52                	rex.RB push r10
    3df9:	45                   	rex.RB
    3dfa:	44 20 32             	and    BYTE PTR [rdx],r14b
    3dfd:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3e00:	43                   	rex.XB
    3e01:	48                   	rex.W
    3e02:	41 52                	push   r10
    3e04:	5f                   	pop    rdi
    3e05:	42                   	rex.X
    3e06:	49 54                	rex.WB push r12
    3e08:	5f                   	pop    rdi
    3e09:	5f                   	pop    rdi
    3e0a:	20 38                	and    BYTE PTR [rax],bh
    3e0c:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3e0f:	43                   	rex.XB
    3e10:	4c                   	rex.WR
    3e11:	4f                   	rex.WRXB
    3e12:	43                   	rex.XB
    3e13:	4b 5f                	rex.WXB pop r15
    3e15:	54                   	push   rsp
    3e16:	5f                   	pop    rdi
    3e17:	54                   	push   rsp
    3e18:	59                   	pop    rcx
    3e19:	50                   	push   rax
    3e1a:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    3e1e:	53                   	push   rbx
    3e1f:	59                   	pop    rcx
    3e20:	53                   	push   rbx
    3e21:	43                   	rex.XB
    3e22:	41                   	rex.B
    3e23:	4c                   	rex.WR
    3e24:	4c 5f                	rex.WR pop rdi
    3e26:	53                   	push   rbx
    3e27:	4c                   	rex.WR
    3e28:	4f                   	rex.WRXB
    3e29:	4e                   	rex.WRX
    3e2a:	47 5f                	rex.RXB pop r15
    3e2c:	54                   	push   rsp
    3e2d:	59                   	pop    rcx
    3e2e:	50                   	push   rax
    3e2f:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    3e33:	41 54                	push   r12
    3e35:	4f                   	rex.WRXB
    3e36:	4d                   	rex.WRB
    3e37:	49                   	rex.WB
    3e38:	43 5f                	rex.XB pop r15
    3e3a:	52                   	push   rdx
    3e3b:	45                   	rex.RB
    3e3c:	4c                   	rex.WR
    3e3d:	41 58                	pop    r8
    3e3f:	45                   	rex.RB
    3e40:	44 20 30             	and    BYTE PTR [rax],r14b
    3e43:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    3e46:	4f 5f                	rex.WRXB pop r15
    3e48:	73 73                	jae    3ebd <.debug_str+0x3ebd>
    3e4a:	69 7a 65 5f 74 20 5f 	imul   edi,DWORD PTR [rdx+0x65],0x5f20745f
    3e51:	5f                   	pop    rdi
    3e52:	73 73                	jae    3ec7 <.debug_str+0x3ec7>
    3e54:	69 7a 65 5f 74 00 5f 	imul   edi,DWORD PTR [rdx+0x65],0x5f00745f
    3e5b:	5f                   	pop    rdi
    3e5c:	53                   	push   rbx
    3e5d:	54                   	push   rsp
    3e5e:	44                   	rex.R
    3e5f:	43 5f                	rex.XB pop r15
    3e61:	48                   	rex.W
    3e62:	4f 53                	rex.WRXB push r11
    3e64:	54                   	push   rsp
    3e65:	45                   	rex.RB
    3e66:	44 5f                	rex.R pop rdi
    3e68:	5f                   	pop    rdi
    3e69:	20 31                	and    BYTE PTR [rcx],dh
    3e6b:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3e6e:	53                   	push   rbx
    3e6f:	49 5a                	rex.WB pop r10
    3e71:	45 5f                	rex.RB pop r15
    3e73:	57                   	push   rdi
    3e74:	49                   	rex.WB
    3e75:	44 54                	rex.R push rsp
    3e77:	48 5f                	rex.W pop rdi
    3e79:	5f                   	pop    rdi
    3e7a:	20 36                	and    BYTE PTR [rsi],dh
    3e7c:	34 00                	xor    al,0x0
    3e7e:	5f                   	pop    rdi
    3e7f:	5f                   	pop    rdi
    3e80:	52                   	push   rdx
    3e81:	45                   	rex.RB
    3e82:	44                   	rex.R
    3e83:	49 52                	rex.WB push r10
    3e85:	45                   	rex.RB
    3e86:	43 54                	rex.XB push r12
    3e88:	5f                   	pop    rdi
    3e89:	4c                   	rex.WR
    3e8a:	44                   	rex.R
    3e8b:	42                   	rex.X
    3e8c:	4c 28 6e 61          	rex.WR sub BYTE PTR [rsi+0x61],r13b
    3e90:	6d                   	ins    DWORD PTR es:[rdi],dx
    3e91:	65 2c 70             	gs sub al,0x70
    3e94:	72 6f                	jb     3f05 <.debug_str+0x3f05>
    3e96:	74 6f                	je     3f07 <.debug_str+0x3f07>
    3e98:	2c 61                	sub    al,0x61
    3e9a:	6c                   	ins    BYTE PTR es:[rdi],dx
    3e9b:	69 61 73 29 20 5f 5f 	imul   esp,DWORD PTR [rcx+0x73],0x5f5f2029
    3ea2:	52                   	push   rdx
    3ea3:	45                   	rex.RB
    3ea4:	44                   	rex.R
    3ea5:	49 52                	rex.WB push r10
    3ea7:	45                   	rex.RB
    3ea8:	43 54                	rex.XB push r12
    3eaa:	20 28                	and    BYTE PTR [rax],ch
    3eac:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    3ead:	61                   	(bad)  
    3eae:	6d                   	ins    DWORD PTR es:[rdi],dx
    3eaf:	65 2c 20             	gs sub al,0x20
    3eb2:	70 72                	jo     3f26 <.debug_str+0x3f26>
    3eb4:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    3eb5:	74 6f                	je     3f26 <.debug_str+0x3f26>
    3eb7:	2c 20                	sub    al,0x20
    3eb9:	61                   	(bad)  
    3eba:	6c                   	ins    BYTE PTR es:[rdi],dx
    3ebb:	69 61 73 29 00 5f 5f 	imul   esp,DWORD PTR [rcx+0x73],0x5f5f0029
    3ec2:	61                   	(bad)  
    3ec3:	6c                   	ins    BYTE PTR es:[rdi],dx
    3ec4:	77 61                	ja     3f27 <.debug_str+0x3f27>
    3ec6:	79 73                	jns    3f3b <.debug_str+0x3f3b>
    3ec8:	5f                   	pop    rdi
    3ec9:	69 6e 6c 69 6e 65 00 	imul   ebp,DWORD PTR [rsi+0x6c],0x656e69
    3ed0:	5f                   	pop    rdi
    3ed1:	5f                   	pop    rdi
    3ed2:	68 61 73 5f 69       	push   0x695f7361
    3ed7:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    3ed8:	63 6c 75 64          	movsxd ebp,DWORD PTR [rbp+rsi*2+0x64]
    3edc:	65 28 53 54          	sub    BYTE PTR gs:[rbx+0x54],dl
    3ee0:	52                   	push   rdx
    3ee1:	29 20                	sub    DWORD PTR [rax],esp
    3ee3:	5f                   	pop    rdi
    3ee4:	5f                   	pop    rdi
    3ee5:	68 61 73 5f 69       	push   0x695f7361
    3eea:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    3eeb:	63 6c 75 64          	movsxd ebp,DWORD PTR [rbp+rsi*2+0x64]
    3eef:	65 5f                	gs pop rdi
    3ef1:	5f                   	pop    rdi
    3ef2:	28 53 54             	sub    BYTE PTR [rbx+0x54],dl
    3ef5:	52                   	push   rdx
    3ef6:	29 00                	sub    DWORD PTR [rax],eax
    3ef8:	5f                   	pop    rdi
    3ef9:	5f                   	pop    rdi
    3efa:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    3efb:	65 65 64 5f          	gs gs fs pop rdi
    3eff:	5f                   	pop    rdi
    3f00:	5f                   	pop    rdi
    3f01:	76 61                	jbe    3f64 <.debug_str+0x3f64>
    3f03:	5f                   	pop    rdi
    3f04:	6c                   	ins    BYTE PTR es:[rdi],dx
    3f05:	69 73 74 20 00 5f 5f 	imul   esi,DWORD PTR [rbx+0x74],0x5f5f0020
    3f0c:	41 53                	push   r11
    3f0e:	4d                   	rex.WRB
    3f0f:	4e                   	rex.WRX
    3f10:	41                   	rex.B
    3f11:	4d                   	rex.WRB
    3f12:	45 32 28             	xor    r13b,BYTE PTR [r8]
    3f15:	70 72                	jo     3f89 <.debug_str+0x3f89>
    3f17:	65 66 69 78 2c 63 6e 	imul   di,WORD PTR gs:[rax+0x2c],0x6e63
    3f1e:	61                   	(bad)  
    3f1f:	6d                   	ins    DWORD PTR es:[rdi],dx
    3f20:	65 29 20             	sub    DWORD PTR gs:[rax],esp
    3f23:	5f                   	pop    rdi
    3f24:	5f                   	pop    rdi
    3f25:	53                   	push   rbx
    3f26:	54                   	push   rsp
    3f27:	52                   	push   rdx
    3f28:	49                   	rex.WB
    3f29:	4e                   	rex.WRX
    3f2a:	47 20 28             	rex.RXB and BYTE PTR [r8],r13b
    3f2d:	70 72                	jo     3fa1 <.debug_str+0x3fa1>
    3f2f:	65 66 69 78 29 20 63 	imul   di,WORD PTR gs:[rax+0x29],0x6320
    3f36:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    3f37:	61                   	(bad)  
    3f38:	6d                   	ins    DWORD PTR es:[rdi],dx
    3f39:	65 00 5f 49          	add    BYTE PTR gs:[rdi+0x49],bl
    3f3d:	4f 5f                	rex.WRXB pop r15
    3f3f:	53                   	push   rbx
    3f40:	43                   	rex.XB
    3f41:	49                   	rex.WB
    3f42:	45                   	rex.RB
    3f43:	4e 54                	rex.WRX push rsp
    3f45:	49                   	rex.WB
    3f46:	46                   	rex.RX
    3f47:	49                   	rex.WB
    3f48:	43 20 30             	rex.XB and BYTE PTR [r8],sil
    3f4b:	34 30                	xor    al,0x30
    3f4d:	30 30                	xor    BYTE PTR [rax],dh
    3f4f:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    3f52:	4f 5f                	rex.WRXB pop r15
    3f54:	70 65                	jo     3fbb <.debug_str+0x3fbb>
    3f56:	65 6b 63 5f 75       	imul   esp,DWORD PTR gs:[rbx+0x5f],0x75
    3f5b:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    3f5c:	6c                   	ins    BYTE PTR es:[rdi],dx
    3f5d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    3f5e:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
    3f61:	64 28 5f 66          	sub    BYTE PTR fs:[rdi+0x66],bl
    3f65:	70 29                	jo     3f90 <.debug_str+0x3f90>
    3f67:	20 28                	and    BYTE PTR [rax],ch
    3f69:	5f                   	pop    rdi
    3f6a:	49                   	rex.WB
    3f6b:	4f 5f                	rex.WRXB pop r15
    3f6d:	42                   	rex.X
    3f6e:	45 20 28             	and    BYTE PTR [r8],r13b
    3f71:	28 5f 66             	sub    BYTE PTR [rdi+0x66],bl
    3f74:	70 29                	jo     3f9f <.debug_str+0x3f9f>
    3f76:	2d 3e 5f 49 4f       	sub    eax,0x4f495f3e
    3f7b:	5f                   	pop    rdi
    3f7c:	72 65                	jb     3fe3 <.debug_str+0x3fe3>
    3f7e:	61                   	(bad)  
    3f7f:	64 5f                	fs pop rdi
    3f81:	70 74                	jo     3ff7 <.debug_str+0x3ff7>
    3f83:	72 20                	jb     3fa5 <.debug_str+0x3fa5>
    3f85:	3e 3d 20 28 5f 66    	ds cmp eax,0x665f2820
    3f8b:	70 29                	jo     3fb6 <.debug_str+0x3fb6>
    3f8d:	2d 3e 5f 49 4f       	sub    eax,0x4f495f3e
    3f92:	5f                   	pop    rdi
    3f93:	72 65                	jb     3ffa <.debug_str+0x3ffa>
    3f95:	61                   	(bad)  
    3f96:	64 5f                	fs pop rdi
    3f98:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    3f9a:	64 2c 20             	fs sub al,0x20
    3f9d:	30 29                	xor    BYTE PTR [rcx],ch
    3f9f:	20 26                	and    BYTE PTR [rsi],ah
    3fa1:	26 20 5f 5f          	and    BYTE PTR es:[rdi+0x5f],bl
    3fa5:	75 6e                	jne    4015 <.debug_str+0x4015>
    3fa7:	64 65 72 66          	fs gs jb 4011 <.debug_str+0x4011>
    3fab:	6c                   	ins    BYTE PTR es:[rdi],dx
    3fac:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    3fad:	77 20                	ja     3fcf <.debug_str+0x3fcf>
    3faf:	28 5f 66             	sub    BYTE PTR [rdi+0x66],bl
    3fb2:	70 29                	jo     3fdd <.debug_str+0x3fdd>
    3fb4:	20 3d 3d 20 45 4f    	and    BYTE PTR [rip+0x4f45203d],bh        # 4f455ff7 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x4f455ff7>
    3fba:	46 20 3f             	rex.RX and BYTE PTR [rdi],r15b
    3fbd:	20 45 4f             	and    BYTE PTR [rbp+0x4f],al
    3fc0:	46 20 3a             	rex.RX and BYTE PTR [rdx],r15b
    3fc3:	20 2a                	and    BYTE PTR [rdx],ch
    3fc5:	28 75 6e             	sub    BYTE PTR [rbp+0x6e],dh
    3fc8:	73 69                	jae    4033 <.debug_str+0x4033>
    3fca:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    3fcc:	65 64 20 63 68       	gs and BYTE PTR fs:[rbx+0x68],ah
    3fd1:	61                   	(bad)  
    3fd2:	72 20                	jb     3ff4 <.debug_str+0x3ff4>
    3fd4:	2a 29                	sub    ch,BYTE PTR [rcx]
    3fd6:	20 28                	and    BYTE PTR [rax],ch
    3fd8:	5f                   	pop    rdi
    3fd9:	66 70 29             	data16 jo 4005 <.debug_str+0x4005>
    3fdc:	2d 3e 5f 49 4f       	sub    eax,0x4f495f3e
    3fe1:	5f                   	pop    rdi
    3fe2:	72 65                	jb     4049 <.debug_str+0x4049>
    3fe4:	61                   	(bad)  
    3fe5:	64 5f                	fs pop rdi
    3fe7:	70 74                	jo     405d <.debug_str+0x405d>
    3fe9:	72 29                	jb     4014 <.debug_str+0x4014>
    3feb:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    3fee:	4c                   	rex.WR
    3fef:	4f                   	rex.WRXB
    3ff0:	4e                   	rex.WRX
    3ff1:	47 5f                	rex.RXB pop r15
    3ff3:	57                   	push   rdi
    3ff4:	49                   	rex.WB
    3ff5:	44 54                	rex.R push rsp
    3ff7:	48 5f                	rex.W pop rdi
    3ff9:	5f                   	pop    rdi
    3ffa:	20 36                	and    BYTE PTR [rsi],dh
    3ffc:	34 00                	xor    al,0x0
    3ffe:	5f                   	pop    rdi
    3fff:	5f                   	pop    rdi
    4000:	55                   	push   rbp
    4001:	49                   	rex.WB
    4002:	4e 54                	rex.WRX push rsp
    4004:	36 34 5f             	ss xor al,0x5f
    4007:	4d                   	rex.WRB
    4008:	41 58                	pop    r8
    400a:	5f                   	pop    rdi
    400b:	5f                   	pop    rdi
    400c:	20 30                	and    BYTE PTR [rax],dh
    400e:	78 66                	js     4076 <.debug_str+0x4076>
    4010:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16
    4017:	66 66 66 66 66 66 66 
    401e:	66 55                	push   bp
    4020:	4c 00 5f 5f          	rex.WR add BYTE PTR [rdi+0x5f],r11b
    4024:	53                   	push   rbx
    4025:	51                   	push   rcx
    4026:	55                   	push   rbp
    4027:	41                   	rex.B
    4028:	44 5f                	rex.R pop rdi
    402a:	54                   	push   rsp
    402b:	59                   	pop    rcx
    402c:	50                   	push   rax
    402d:	45 20 6c 6f 6e       	and    BYTE PTR [r15+rbp*2+0x6e],r13b
    4032:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
    4036:	74 00                	je     4038 <.debug_str+0x4038>
    4038:	5f                   	pop    rdi
    4039:	5f                   	pop    rdi
    403a:	55                   	push   rbp
    403b:	53                   	push   rbx
    403c:	45 5f                	rex.RB pop r15
    403e:	58                   	pop    rax
    403f:	4f 50                	rex.WRXB push r8
    4041:	45                   	rex.RB
    4042:	4e 32 4b 58          	rex.WRX xor r9b,BYTE PTR [rbx+0x58]
    4046:	53                   	push   rbx
    4047:	49 00 5f 5f          	rex.WB add BYTE PTR [r15+0x5f],bl
    404b:	61                   	(bad)  
    404c:	74 74                	je     40c2 <.debug_str+0x40c2>
    404e:	72 69                	jb     40b9 <.debug_str+0x40b9>
    4050:	62                   	(bad)  
    4051:	75 74                	jne    40c7 <.debug_str+0x40c7>
    4053:	65 5f                	gs pop rdi
    4055:	61                   	(bad)  
    4056:	6c                   	ins    BYTE PTR es:[rdi],dx
    4057:	6c                   	ins    BYTE PTR es:[rdi],dx
    4058:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    4059:	63 5f 73             	movsxd ebx,DWORD PTR [rdi+0x73]
    405c:	69 7a 65 5f 5f 28 70 	imul   edi,DWORD PTR [rdx+0x65],0x70285f5f
    4063:	61                   	(bad)  
    4064:	72 61                	jb     40c7 <.debug_str+0x40c7>
    4066:	6d                   	ins    DWORD PTR es:[rdi],dx
    4067:	73 29                	jae    4092 <.debug_str+0x4092>
    4069:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    406c:	61                   	(bad)  
    406d:	74 74                	je     40e3 <.debug_str+0x40e3>
    406f:	72 69                	jb     40da <.debug_str+0x40da>
    4071:	62                   	(bad)  
    4072:	75 74                	jne    40e8 <.debug_str+0x40e8>
    4074:	65 5f                	gs pop rdi
    4076:	5f                   	pop    rdi
    4077:	20 28                	and    BYTE PTR [rax],ch
    4079:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
    407c:	61                   	(bad)  
    407d:	6c                   	ins    BYTE PTR es:[rdi],dx
    407e:	6c                   	ins    BYTE PTR es:[rdi],dx
    407f:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    4080:	63 5f 73             	movsxd ebx,DWORD PTR [rdi+0x73]
    4083:	69 7a 65 5f 5f 20 70 	imul   edi,DWORD PTR [rdx+0x65],0x70205f5f
    408a:	61                   	(bad)  
    408b:	72 61                	jb     40ee <.debug_str+0x40ee>
    408d:	6d                   	ins    DWORD PTR es:[rdi],dx
    408e:	73 29                	jae    40b9 <.debug_str+0x40b9>
    4090:	29 00                	sub    DWORD PTR [rax],eax
    4092:	5f                   	pop    rdi
    4093:	49                   	rex.WB
    4094:	4f 5f                	rex.WRXB pop r15
    4096:	77 69                	ja     4101 <.debug_str+0x4101>
    4098:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    4099:	74 5f                	je     40fa <.debug_str+0x40fa>
    409b:	74 20                	je     40bd <.debug_str+0x40bd>
    409d:	77 69                	ja     4108 <.debug_str+0x4108>
    409f:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    40a0:	74 5f                	je     4101 <.debug_str+0x4101>
    40a2:	74 00                	je     40a4 <.debug_str+0x40a4>
    40a4:	5f                   	pop    rdi
    40a5:	5f                   	pop    rdi
    40a6:	6b 38 20             	imul   edi,DWORD PTR [rax],0x20
    40a9:	31 00                	xor    DWORD PTR [rax],eax
    40ab:	5f                   	pop    rdi
    40ac:	5f                   	pop    rdi
    40ad:	43                   	rex.XB
    40ae:	48                   	rex.W
    40af:	41 52                	push   r10
    40b1:	31 36                	xor    DWORD PTR [rsi],esi
    40b3:	5f                   	pop    rdi
    40b4:	54                   	push   rsp
    40b5:	59                   	pop    rcx
    40b6:	50                   	push   rax
    40b7:	45 5f                	rex.RB pop r15
    40b9:	5f                   	pop    rdi
    40ba:	20 73 68             	and    BYTE PTR [rbx+0x68],dh
    40bd:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    40be:	72 74                	jb     4134 <.debug_str+0x4134>
    40c0:	20 75 6e             	and    BYTE PTR [rbp+0x6e],dh
    40c3:	73 69                	jae    412e <.debug_str+0x412e>
    40c5:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    40c7:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    40cc:	74 00                	je     40ce <.debug_str+0x40ce>
    40ce:	5f                   	pop    rdi
    40cf:	5f                   	pop    rdi
    40d0:	47                   	rex.RXB
    40d1:	43                   	rex.XB
    40d2:	43 5f                	rex.XB pop r15
    40d4:	41 54                	push   r12
    40d6:	4f                   	rex.WRXB
    40d7:	4d                   	rex.WRB
    40d8:	49                   	rex.WB
    40d9:	43 5f                	rex.XB pop r15
    40db:	4c                   	rex.WR
    40dc:	4c                   	rex.WR
    40dd:	4f                   	rex.WRXB
    40de:	4e                   	rex.WRX
    40df:	47 5f                	rex.RXB pop r15
    40e1:	4c                   	rex.WR
    40e2:	4f                   	rex.WRXB
    40e3:	43                   	rex.XB
    40e4:	4b 5f                	rex.WXB pop r15
    40e6:	46 52                	rex.RX push rdx
    40e8:	45                   	rex.RB
    40e9:	45 20 32             	and    BYTE PTR [r10],r14b
    40ec:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    40ef:	44                   	rex.R
    40f0:	45                   	rex.RB
    40f1:	43                   	rex.XB
    40f2:	36 34 5f             	ss xor al,0x5f
    40f5:	4d                   	rex.WRB
    40f6:	49                   	rex.WB
    40f7:	4e 5f                	rex.WRX pop rdi
    40f9:	45 58                	rex.RB pop r8
    40fb:	50                   	push   rax
    40fc:	5f                   	pop    rdi
    40fd:	5f                   	pop    rdi
    40fe:	20 28                	and    BYTE PTR [rax],ch
    4100:	2d 33 38 32 29       	sub    eax,0x29323833
    4105:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4108:	72 65                	jb     416f <.debug_str+0x416f>
    410a:	73 74                	jae    4180 <.debug_str+0x4180>
    410c:	72 69                	jb     4177 <.debug_str+0x4177>
    410e:	63 74 5f 61          	movsxd esi,DWORD PTR [rdi+rbx*2+0x61]
    4112:	72 72                	jb     4186 <.debug_str+0x4186>
    4114:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    4117:	72 65                	jb     417e <.debug_str+0x417e>
    4119:	73 74                	jae    418f <.debug_str+0x418f>
    411b:	72 69                	jb     4186 <.debug_str+0x4186>
    411d:	63 74 00 5f          	movsxd esi,DWORD PTR [rax+rax*1+0x5f]
    4121:	5f                   	pop    rdi
    4122:	41 54                	push   r12
    4124:	4f                   	rex.WRXB
    4125:	4d                   	rex.WRB
    4126:	49                   	rex.WB
    4127:	43 5f                	rex.XB pop r15
    4129:	41                   	rex.B
    412a:	43 51                	rex.XB push r9
    412c:	5f                   	pop    rdi
    412d:	52                   	push   rdx
    412e:	45                   	rex.RB
    412f:	4c 20 34 00          	rex.WR and BYTE PTR [rax+rax*1],r14b
    4133:	5f                   	pop    rdi
    4134:	49                   	rex.WB
    4135:	4f 5f                	rex.WRXB pop r15
    4137:	66 70 6f             	data16 jo 41a9 <.debug_str+0x41a9>
    413a:	73 5f                	jae    419b <.debug_str+0x419b>
    413c:	74 20                	je     415e <.debug_str+0x415e>
    413e:	5f                   	pop    rdi
    413f:	47 5f                	rex.RXB pop r15
    4141:	66 70 6f             	data16 jo 41b3 <.debug_str+0x41b3>
    4144:	73 5f                	jae    41a5 <.debug_str+0x41a5>
    4146:	74 00                	je     4148 <.debug_str+0x4148>
    4148:	5f                   	pop    rdi
    4149:	5f                   	pop    rdi
    414a:	61                   	(bad)  
    414b:	74 74                	je     41c1 <.debug_str+0x41c1>
    414d:	72 69                	jb     41b8 <.debug_str+0x41b8>
    414f:	62                   	(bad)  
    4150:	75 74                	jne    41c6 <.debug_str+0x41c6>
    4152:	65 5f                	gs pop rdi
    4154:	66 6f                	outs   dx,WORD PTR ds:[rsi]
    4156:	72 6d                	jb     41c5 <.debug_str+0x41c5>
    4158:	61                   	(bad)  
    4159:	74 5f                	je     41ba <.debug_str+0x41ba>
    415b:	73 74                	jae    41d1 <.debug_str+0x41d1>
    415d:	72 66                	jb     41c5 <.debug_str+0x41c5>
    415f:	6d                   	ins    DWORD PTR es:[rdi],dx
    4160:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    4161:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    4162:	5f                   	pop    rdi
    4163:	5f                   	pop    rdi
    4164:	28 61 2c             	sub    BYTE PTR [rcx+0x2c],ah
    4167:	62                   	(bad)  
    4168:	29 20                	sub    DWORD PTR [rax],esp
    416a:	5f                   	pop    rdi
    416b:	5f                   	pop    rdi
    416c:	61                   	(bad)  
    416d:	74 74                	je     41e3 <.debug_str+0x41e3>
    416f:	72 69                	jb     41da <.debug_str+0x41da>
    4171:	62                   	(bad)  
    4172:	75 74                	jne    41e8 <.debug_str+0x41e8>
    4174:	65 5f                	gs pop rdi
    4176:	5f                   	pop    rdi
    4177:	20 28                	and    BYTE PTR [rax],ch
    4179:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
    417c:	66 6f                	outs   dx,WORD PTR ds:[rsi]
    417e:	72 6d                	jb     41ed <.debug_str+0x41ed>
    4180:	61                   	(bad)  
    4181:	74 5f                	je     41e2 <.debug_str+0x41e2>
    4183:	5f                   	pop    rdi
    4184:	20 28                	and    BYTE PTR [rax],ch
    4186:	5f                   	pop    rdi
    4187:	5f                   	pop    rdi
    4188:	73 74                	jae    41fe <.debug_str+0x41fe>
    418a:	72 66                	jb     41f2 <.debug_str+0x41f2>
    418c:	6d                   	ins    DWORD PTR es:[rdi],dx
    418d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    418e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    418f:	5f                   	pop    rdi
    4190:	5f                   	pop    rdi
    4191:	2c 20                	sub    al,0x20
    4193:	61                   	(bad)  
    4194:	2c 20                	sub    al,0x20
    4196:	62                   	(bad)  
    4197:	29 29                	sub    DWORD PTR [rcx],ebp
    4199:	29 00                	sub    DWORD PTR [rax],eax
    419b:	75 6e                	jne    420b <.debug_str+0x420b>
    419d:	73 69                	jae    4208 <.debug_str+0x4208>
    419f:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    41a1:	65 64 20 63 68       	gs and BYTE PTR fs:[rbx+0x68],ah
    41a6:	61                   	(bad)  
    41a7:	72 00                	jb     41a9 <.debug_str+0x41a9>
    41a9:	5f                   	pop    rdi
    41aa:	5f                   	pop    rdi
    41ab:	44                   	rex.R
    41ac:	45                   	rex.RB
    41ad:	43 33 32             	rex.XB xor esi,DWORD PTR [r10]
    41b0:	5f                   	pop    rdi
    41b1:	4d                   	rex.WRB
    41b2:	49                   	rex.WB
    41b3:	4e 5f                	rex.WRX pop rdi
    41b5:	45 58                	rex.RB pop r8
    41b7:	50                   	push   rax
    41b8:	5f                   	pop    rdi
    41b9:	5f                   	pop    rdi
    41ba:	20 28                	and    BYTE PTR [rax],ch
    41bc:	2d 39 34 29 00       	sub    eax,0x293439
    41c1:	5f                   	pop    rdi
    41c2:	49                   	rex.WB
    41c3:	4f 5f                	rex.WRXB pop r15
    41c5:	46                   	rex.RX
    41c6:	49 58                	rex.WB pop r8
    41c8:	45                   	rex.RB
    41c9:	44 20 30             	and    BYTE PTR [rax],r14b
    41cc:	31 30                	xor    DWORD PTR [rax],esi
    41ce:	30 30                	xor    BYTE PTR [rax],dh
    41d0:	30 00                	xor    BYTE PTR [rax],al
    41d2:	5f                   	pop    rdi
    41d3:	5f                   	pop    rdi
    41d4:	49                   	rex.WB
    41d5:	4e 54                	rex.WRX push rsp
    41d7:	36 34 5f             	ss xor al,0x5f
    41da:	54                   	push   rsp
    41db:	59                   	pop    rcx
    41dc:	50                   	push   rax
    41dd:	45 5f                	rex.RB pop r15
    41df:	5f                   	pop    rdi
    41e0:	20 6c 6f 6e          	and    BYTE PTR [rdi+rbp*2+0x6e],ch
    41e4:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
    41e8:	74 00                	je     41ea <.debug_str+0x41ea>
    41ea:	5f                   	pop    rdi
    41eb:	5f                   	pop    rdi
    41ec:	46                   	rex.RX
    41ed:	4c 54                	rex.WR push rsp
    41ef:	5f                   	pop    rdi
    41f0:	4d                   	rex.WRB
    41f1:	49                   	rex.WB
    41f2:	4e 5f                	rex.WRX pop rdi
    41f4:	5f                   	pop    rdi
    41f5:	20 31                	and    BYTE PTR [rcx],dh
    41f7:	2e 31 37             	xor    DWORD PTR cs:[rdi],esi
    41fa:	35 34 39 34 33       	xor    eax,0x33343934
    41ff:	35 30 38 32 32       	xor    eax,0x32323830
    4204:	32 38                	xor    bh,BYTE PTR [rax]
    4206:	37                   	(bad)  
    4207:	35 30 37 39 36       	xor    eax,0x36393730
    420c:	38 37                	cmp    BYTE PTR [rdi],dh
    420e:	33 36                	xor    esi,DWORD PTR [rsi]
    4210:	35 33 37 32 32       	xor    eax,0x32323733
    4215:	32 32                	xor    dh,BYTE PTR [rdx]
    4217:	34 35                	xor    al,0x35
    4219:	36 38 65 2d          	cmp    BYTE PTR ss:[rbp+0x2d],ah
    421d:	33 38                	xor    edi,DWORD PTR [rax]
    421f:	46 00 5f 5f          	rex.RX add BYTE PTR [rdi+0x5f],r11b
    4223:	55                   	push   rbp
    4224:	36 34 5f             	ss xor al,0x5f
    4227:	54                   	push   rsp
    4228:	59                   	pop    rcx
    4229:	50                   	push   rax
    422a:	45 20 75 6e          	and    BYTE PTR [r13+0x6e],r14b
    422e:	73 69                	jae    4299 <.debug_str+0x4299>
    4230:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    4232:	65 64 20 6c 6f 6e    	gs and BYTE PTR fs:[rdi+rbp*2+0x6e],ch
    4238:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
    423c:	74 00                	je     423e <.debug_str+0x423e>
    423e:	5f                   	pop    rdi
    423f:	73 62                	jae    42a3 <.debug_str+0x42a3>
    4241:	75 66                	jne    42a9 <.debug_str+0x42a9>
    4243:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    4246:	4f 5f                	rex.WRXB pop r15
    4248:	76 61                	jbe    42ab <.debug_str+0x42ab>
    424a:	5f                   	pop    rdi
    424b:	6c                   	ins    BYTE PTR es:[rdi],dx
    424c:	69 73 74 00 73 74 64 	imul   esi,DWORD PTR [rbx+0x74],0x64747300
    4253:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    4254:	75 74                	jne    42ca <.debug_str+0x42ca>
    4256:	20 73 74             	and    BYTE PTR [rbx+0x74],dh
    4259:	64 6f                	outs   dx,DWORD PTR fs:[rsi]
    425b:	75 74                	jne    42d1 <.debug_str+0x42d1>
    425d:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4260:	55                   	push   rbp
    4261:	53                   	push   rbx
    4262:	45 5f                	rex.RB pop r15
    4264:	47                   	rex.RXB
    4265:	4e 55                	rex.WRX push rbp
    4267:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    426a:	54                   	push   rsp
    426b:	49                   	rex.WB
    426c:	4d                   	rex.WRB
    426d:	45 52                	rex.RB push r10
    426f:	5f                   	pop    rdi
    4270:	54                   	push   rsp
    4271:	5f                   	pop    rdi
    4272:	54                   	push   rsp
    4273:	59                   	pop    rcx
    4274:	50                   	push   rax
    4275:	45 20 76 6f          	and    BYTE PTR [r14+0x6f],r14b
    4279:	69 64 20 2a 00 5f 49 	imul   esp,DWORD PTR [rax+riz*1+0x2a],0x4f495f00
    4280:	4f 
    4281:	5f                   	pop    rdi
    4282:	77 72                	ja     42f6 <.debug_str+0x42f6>
    4284:	69 74 65 5f 70 74 72 	imul   esi,DWORD PTR [rbp+riz*2+0x5f],0x727470
    428b:	00 
    428c:	5f                   	pop    rdi
    428d:	5f                   	pop    rdi
    428e:	46 58                	rex.RX pop rax
    4290:	53                   	push   rbx
    4291:	52                   	push   rdx
    4292:	5f                   	pop    rdi
    4293:	5f                   	pop    rdi
    4294:	20 31                	and    BYTE PTR [rcx],dh
    4296:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4299:	4c                   	rex.WR
    429a:	45                   	rex.RB
    429b:	41                   	rex.B
    429c:	46 5f                	rex.RX pop rdi
    429e:	41 54                	push   r12
    42a0:	54                   	push   rsp
    42a1:	52                   	push   rdx
    42a2:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    42a5:	61                   	(bad)  
    42a6:	74 74                	je     431c <.debug_str+0x431c>
    42a8:	72 69                	jb     4313 <.debug_str+0x4313>
    42aa:	62                   	(bad)  
    42ab:	75 74                	jne    4321 <.debug_str+0x4321>
    42ad:	65 5f                	gs pop rdi
    42af:	5f                   	pop    rdi
    42b0:	20 28                	and    BYTE PTR [rax],ch
    42b2:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
    42b5:	6c                   	ins    BYTE PTR es:[rdi],dx
    42b6:	65 61                	gs (bad) 
    42b8:	66 5f                	pop    di
    42ba:	5f                   	pop    rdi
    42bb:	29 29                	sub    DWORD PTR [rcx],ebp
    42bd:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    42c0:	49                   	rex.WB
    42c1:	4e 54                	rex.WRX push rsp
    42c3:	38 5f 54             	cmp    BYTE PTR [rdi+0x54],bl
    42c6:	59                   	pop    rcx
    42c7:	50                   	push   rax
    42c8:	45 5f                	rex.RB pop r15
    42ca:	5f                   	pop    rdi
    42cb:	20 73 69             	and    BYTE PTR [rbx+0x69],dh
    42ce:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    42d0:	65 64 20 63 68       	gs and BYTE PTR fs:[rbx+0x68],ah
    42d5:	61                   	(bad)  
    42d6:	72 00                	jb     42d8 <.debug_str+0x42d8>
    42d8:	5f                   	pop    rdi
    42d9:	5f                   	pop    rdi
    42da:	49                   	rex.WB
    42db:	4e 54                	rex.WRX push rsp
    42dd:	5f                   	pop    rdi
    42de:	4c                   	rex.WR
    42df:	45                   	rex.RB
    42e0:	41 53                	push   r11
    42e2:	54                   	push   rsp
    42e3:	33 32                	xor    esi,DWORD PTR [rdx]
    42e5:	5f                   	pop    rdi
    42e6:	57                   	push   rdi
    42e7:	49                   	rex.WB
    42e8:	44 54                	rex.R push rsp
    42ea:	48 5f                	rex.W pop rdi
    42ec:	5f                   	pop    rdi
    42ed:	20 33                	and    BYTE PTR [rbx],dh
    42ef:	32 00                	xor    al,BYTE PTR [rax]
    42f1:	5f                   	pop    rdi
    42f2:	5f                   	pop    rdi
    42f3:	53                   	push   rbx
    42f4:	59                   	pop    rcx
    42f5:	53                   	push   rbx
    42f6:	43                   	rex.XB
    42f7:	41                   	rex.B
    42f8:	4c                   	rex.WR
    42f9:	4c 5f                	rex.WR pop rdi
    42fb:	53                   	push   rbx
    42fc:	4c                   	rex.WR
    42fd:	4f                   	rex.WRXB
    42fe:	4e                   	rex.WRX
    42ff:	47 5f                	rex.RXB pop r15
    4301:	54                   	push   rsp
    4302:	59                   	pop    rcx
    4303:	50                   	push   rax
    4304:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    4308:	53                   	push   rbx
    4309:	4c                   	rex.WR
    430a:	4f                   	rex.WRXB
    430b:	4e                   	rex.WRX
    430c:	47 57                	rex.RXB push r15
    430e:	4f 52                	rex.WRXB push r10
    4310:	44 5f                	rex.R pop rdi
    4312:	54                   	push   rsp
    4313:	59                   	pop    rcx
    4314:	50                   	push   rax
    4315:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    4319:	55                   	push   rbp
    431a:	49                   	rex.WB
    431b:	4e 54                	rex.WRX push rsp
    431d:	4d                   	rex.WRB
    431e:	41 58                	pop    r8
    4320:	5f                   	pop    rdi
    4321:	4d                   	rex.WRB
    4322:	41 58                	pop    r8
    4324:	5f                   	pop    rdi
    4325:	5f                   	pop    rdi
    4326:	20 30                	and    BYTE PTR [rax],dh
    4328:	78 66                	js     4390 <.debug_str+0x4390>
    432a:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16
    4331:	66 66 66 66 66 66 66 
    4338:	66 55                	push   bp
    433a:	4c 00 5f 5f          	rex.WR add BYTE PTR [rdi+0x5f],r11b
    433e:	67 6c                	ins    BYTE PTR es:[edi],dx
    4340:	69 62 63 5f 63 6c 61 	imul   esp,DWORD PTR [rdx+0x63],0x616c635f
    4347:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    4348:	67 5f                	addr32 pop rdi
    434a:	70 72                	jo     43be <.debug_str+0x43be>
    434c:	65 72 65             	gs jb  43b4 <.debug_str+0x43b4>
    434f:	71 28                	jno    4379 <.debug_str+0x4379>
    4351:	6d                   	ins    DWORD PTR es:[rdi],dx
    4352:	61                   	(bad)  
    4353:	6a 2c                	push   0x2c
    4355:	6d                   	ins    DWORD PTR es:[rdi],dx
    4356:	69 6e 29 20 30 00 5f 	imul   ebp,DWORD PTR [rsi+0x29],0x5f003020
    435d:	49                   	rex.WB
    435e:	4f 5f                	rex.WRXB pop r15
    4360:	62 61                	(bad)  
    4362:	63 6b 75             	movsxd ebp,DWORD PTR [rbx+0x75]
    4365:	70 5f                	jo     43c6 <.debug_str+0x43c6>
    4367:	62 61                	(bad)  
    4369:	73 65                	jae    43d0 <.debug_str+0x43d0>
    436b:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    436e:	6c                   	ins    BYTE PTR es:[rdi],dx
    436f:	69 6e 75 78 5f 5f 20 	imul   ebp,DWORD PTR [rsi+0x75],0x205f5f78
    4376:	31 00                	xor    DWORD PTR [rax],eax
    4378:	5f                   	pop    rdi
    4379:	5f                   	pop    rdi
    437a:	50                   	push   rax
    437b:	49                   	rex.WB
    437c:	43 5f                	rex.XB pop r15
    437e:	5f                   	pop    rdi
    437f:	20 32                	and    BYTE PTR [rdx],dh
    4381:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4384:	49                   	rex.WB
    4385:	4e 54                	rex.WRX push rsp
    4387:	5f                   	pop    rdi
    4388:	4c                   	rex.WR
    4389:	45                   	rex.RB
    438a:	41 53                	push   r11
    438c:	54                   	push   rsp
    438d:	33 32                	xor    esi,DWORD PTR [rdx]
    438f:	5f                   	pop    rdi
    4390:	54                   	push   rsp
    4391:	59                   	pop    rcx
    4392:	50                   	push   rax
    4393:	45 5f                	rex.RB pop r15
    4395:	5f                   	pop    rdi
    4396:	20 69 6e             	and    BYTE PTR [rcx+0x6e],ch
    4399:	74 00                	je     439b <.debug_str+0x439b>
    439b:	5f                   	pop    rdi
    439c:	5f                   	pop    rdi
    439d:	55                   	push   rbp
    439e:	49                   	rex.WB
    439f:	4e 54                	rex.WRX push rsp
    43a1:	5f                   	pop    rdi
    43a2:	4c                   	rex.WR
    43a3:	45                   	rex.RB
    43a4:	41 53                	push   r11
    43a6:	54                   	push   rsp
    43a7:	36 34 5f             	ss xor al,0x5f
    43aa:	54                   	push   rsp
    43ab:	59                   	pop    rcx
    43ac:	50                   	push   rax
    43ad:	45 5f                	rex.RB pop r15
    43af:	5f                   	pop    rdi
    43b0:	20 6c 6f 6e          	and    BYTE PTR [rdi+rbp*2+0x6e],ch
    43b4:	67 20 75 6e          	and    BYTE PTR [ebp+0x6e],dh
    43b8:	73 69                	jae    4423 <.debug_str+0x4423>
    43ba:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    43bc:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    43c1:	74 00                	je     43c3 <.debug_str+0x43c3>
    43c3:	5f                   	pop    rdi
    43c4:	49                   	rex.WB
    43c5:	4f 5f                	rex.WRXB pop r15
    43c7:	70 75                	jo     443e <.debug_str+0x443e>
    43c9:	74 63                	je     442e <.debug_str+0x442e>
    43cb:	5f                   	pop    rdi
    43cc:	75 6e                	jne    443c <.debug_str+0x443c>
    43ce:	6c                   	ins    BYTE PTR es:[rdi],dx
    43cf:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    43d0:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
    43d3:	64 28 5f 63          	sub    BYTE PTR fs:[rdi+0x63],bl
    43d7:	68 2c 5f 66 70       	push   0x70665f2c
    43dc:	29 20                	sub    DWORD PTR [rax],esp
    43de:	28 5f 49             	sub    BYTE PTR [rdi+0x49],bl
    43e1:	4f 5f                	rex.WRXB pop r15
    43e3:	42                   	rex.X
    43e4:	45 20 28             	and    BYTE PTR [r8],r13b
    43e7:	28 5f 66             	sub    BYTE PTR [rdi+0x66],bl
    43ea:	70 29                	jo     4415 <.debug_str+0x4415>
    43ec:	2d 3e 5f 49 4f       	sub    eax,0x4f495f3e
    43f1:	5f                   	pop    rdi
    43f2:	77 72                	ja     4466 <.debug_str+0x4466>
    43f4:	69 74 65 5f 70 74 72 	imul   esi,DWORD PTR [rbp+riz*2+0x5f],0x20727470
    43fb:	20 
    43fc:	3e 3d 20 28 5f 66    	ds cmp eax,0x665f2820
    4402:	70 29                	jo     442d <.debug_str+0x442d>
    4404:	2d 3e 5f 49 4f       	sub    eax,0x4f495f3e
    4409:	5f                   	pop    rdi
    440a:	77 72                	ja     447e <.debug_str+0x447e>
    440c:	69 74 65 5f 65 6e 64 	imul   esi,DWORD PTR [rbp+riz*2+0x5f],0x2c646e65
    4413:	2c 
    4414:	20 30                	and    BYTE PTR [rax],dh
    4416:	29 20                	sub    DWORD PTR [rax],esp
    4418:	3f                   	(bad)  
    4419:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    441c:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    441d:	76 65                	jbe    4484 <.debug_str+0x4484>
    441f:	72 66                	jb     4487 <.debug_str+0x4487>
    4421:	6c                   	ins    BYTE PTR es:[rdi],dx
    4422:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    4423:	77 20                	ja     4445 <.debug_str+0x4445>
    4425:	28 5f 66             	sub    BYTE PTR [rdi+0x66],bl
    4428:	70 2c                	jo     4456 <.debug_str+0x4456>
    442a:	20 28                	and    BYTE PTR [rax],ch
    442c:	75 6e                	jne    449c <.debug_str+0x449c>
    442e:	73 69                	jae    4499 <.debug_str+0x4499>
    4430:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    4432:	65 64 20 63 68       	gs and BYTE PTR fs:[rbx+0x68],ah
    4437:	61                   	(bad)  
    4438:	72 29                	jb     4463 <.debug_str+0x4463>
    443a:	20 28                	and    BYTE PTR [rax],ch
    443c:	5f                   	pop    rdi
    443d:	63 68 29             	movsxd ebp,DWORD PTR [rax+0x29]
    4440:	29 20                	sub    DWORD PTR [rax],esp
    4442:	3a 20                	cmp    ah,BYTE PTR [rax]
    4444:	28 75 6e             	sub    BYTE PTR [rbp+0x6e],dh
    4447:	73 69                	jae    44b2 <.debug_str+0x44b2>
    4449:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    444b:	65 64 20 63 68       	gs and BYTE PTR fs:[rbx+0x68],ah
    4450:	61                   	(bad)  
    4451:	72 29                	jb     447c <.debug_str+0x447c>
    4453:	20 28                	and    BYTE PTR [rax],ch
    4455:	2a 28                	sub    ch,BYTE PTR [rax]
    4457:	5f                   	pop    rdi
    4458:	66 70 29             	data16 jo 4484 <.debug_str+0x4484>
    445b:	2d 3e 5f 49 4f       	sub    eax,0x4f495f3e
    4460:	5f                   	pop    rdi
    4461:	77 72                	ja     44d5 <.debug_str+0x44d5>
    4463:	69 74 65 5f 70 74 72 	imul   esi,DWORD PTR [rbp+riz*2+0x5f],0x2b727470
    446a:	2b 
    446b:	2b 20                	sub    esp,DWORD PTR [rax]
    446d:	3d 20 28 5f 63       	cmp    eax,0x635f2820
    4472:	68 29 29 29 00       	push   0x292929
    4477:	5f                   	pop    rdi
    4478:	50                   	push   rax
    4479:	4f 53                	rex.WRXB push r11
    447b:	49 58                	rex.WB pop r8
    447d:	5f                   	pop    rdi
    447e:	53                   	push   rbx
    447f:	4f 55                	rex.WRXB push r13
    4481:	52                   	push   rdx
    4482:	43                   	rex.XB
    4483:	45 20 31             	and    BYTE PTR [r9],r14b
    4486:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    4489:	4f 5f                	rex.WRXB pop r15
    448b:	44                   	rex.R
    448c:	4f                   	rex.WRXB
    448d:	4e 54                	rex.WRX push rsp
    448f:	5f                   	pop    rdi
    4490:	43                   	rex.XB
    4491:	4c                   	rex.WR
    4492:	4f 53                	rex.WRXB push r11
    4494:	45 20 30             	and    BYTE PTR [r8],r14b
    4497:	31 30                	xor    DWORD PTR [rax],esi
    4499:	30 30                	xor    BYTE PTR [rax],dh
    449b:	30 30                	xor    BYTE PTR [rax],dh
    449d:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    44a0:	47                   	rex.RXB
    44a1:	4c                   	rex.WR
    44a2:	49                   	rex.WB
    44a3:	42                   	rex.X
    44a4:	43 5f                	rex.XB pop r15
    44a6:	55                   	push   rbp
    44a7:	53                   	push   rbx
    44a8:	45 5f                	rex.RB pop r15
    44aa:	49                   	rex.WB
    44ab:	45                   	rex.RB
    44ac:	43 5f                	rex.XB pop r15
    44ae:	36 30 35 35 39 5f 42 	xor    BYTE PTR ss:[rip+0x425f3935],dh        # 425f7dea <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x425f7dea>
    44b5:	46 50                	rex.RX push rax
    44b7:	5f                   	pop    rdi
    44b8:	45 58                	rex.RB pop r8
    44ba:	54                   	push   rsp
    44bb:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    44be:	53                   	push   rbx
    44bf:	49 5a                	rex.WB pop r10
    44c1:	45 5f                	rex.RB pop r15
    44c3:	4d                   	rex.WRB
    44c4:	41 58                	pop    r8
    44c6:	5f                   	pop    rdi
    44c7:	5f                   	pop    rdi
    44c8:	20 30                	and    BYTE PTR [rax],dh
    44ca:	78 66                	js     4532 <.debug_str+0x4532>
    44cc:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16
    44d3:	66 66 66 66 66 66 66 
    44da:	66 55                	push   bp
    44dc:	4c 00 5f 5f          	rex.WR add BYTE PTR [rdi+0x5f],r11b
    44e0:	55                   	push   rbp
    44e1:	49                   	rex.WB
    44e2:	44 5f                	rex.R pop rdi
    44e4:	54                   	push   rsp
    44e5:	5f                   	pop    rdi
    44e6:	54                   	push   rsp
    44e7:	59                   	pop    rcx
    44e8:	50                   	push   rax
    44e9:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    44ed:	55                   	push   rbp
    44ee:	33 32                	xor    esi,DWORD PTR [rdx]
    44f0:	5f                   	pop    rdi
    44f1:	54                   	push   rsp
    44f2:	59                   	pop    rcx
    44f3:	50                   	push   rax
    44f4:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    44f8:	55                   	push   rbp
    44f9:	4c                   	rex.WR
    44fa:	4f                   	rex.WRXB
    44fb:	4e                   	rex.WRX
    44fc:	47 57                	rex.RXB push r15
    44fe:	4f 52                	rex.WRXB push r10
    4500:	44 5f                	rex.R pop rdi
    4502:	54                   	push   rsp
    4503:	59                   	pop    rcx
    4504:	50                   	push   rax
    4505:	45 20 75 6e          	and    BYTE PTR [r13+0x6e],r14b
    4509:	73 69                	jae    4574 <.debug_str+0x4574>
    450b:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    450d:	65 64 20 6c 6f 6e    	gs and BYTE PTR fs:[rdi+rbp*2+0x6e],ch
    4513:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
    4517:	74 00                	je     4519 <.debug_str+0x4519>
    4519:	5f                   	pop    rdi
    451a:	5f                   	pop    rdi
    451b:	47                   	rex.RXB
    451c:	43                   	rex.XB
    451d:	43 5f                	rex.XB pop r15
    451f:	41 54                	push   r12
    4521:	4f                   	rex.WRXB
    4522:	4d                   	rex.WRB
    4523:	49                   	rex.WB
    4524:	43 5f                	rex.XB pop r15
    4526:	53                   	push   rbx
    4527:	48                   	rex.W
    4528:	4f 52                	rex.WRXB push r10
    452a:	54                   	push   rsp
    452b:	5f                   	pop    rdi
    452c:	4c                   	rex.WR
    452d:	4f                   	rex.WRXB
    452e:	43                   	rex.XB
    452f:	4b 5f                	rex.WXB pop r15
    4531:	46 52                	rex.RX push rdx
    4533:	45                   	rex.RB
    4534:	45 20 32             	and    BYTE PTR [r10],r14b
    4537:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    453a:	46                   	rex.RX
    453b:	4c 54                	rex.WR push rsp
    453d:	36 34 58             	ss xor al,0x58
    4540:	5f                   	pop    rdi
    4541:	44                   	rex.R
    4542:	45                   	rex.RB
    4543:	43                   	rex.XB
    4544:	49                   	rex.WB
    4545:	4d                   	rex.WRB
    4546:	41                   	rex.B
    4547:	4c 5f                	rex.WR pop rdi
    4549:	44                   	rex.R
    454a:	49                   	rex.WB
    454b:	47 5f                	rex.RXB pop r15
    454d:	5f                   	pop    rdi
    454e:	20 32                	and    BYTE PTR [rdx],dh
    4550:	31 00                	xor    DWORD PTR [rax],eax
    4552:	53                   	push   rbx
    4553:	45                   	rex.RB
    4554:	45                   	rex.RB
    4555:	4b 5f                	rex.WXB pop r15
    4557:	53                   	push   rbx
    4558:	45 54                	rex.RB push r12
    455a:	20 30                	and    BYTE PTR [rax],dh
    455c:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    455f:	55                   	push   rbp
    4560:	53                   	push   rbx
    4561:	45 5f                	rex.RB pop r15
    4563:	58                   	pop    rax
    4564:	4f 50                	rex.WRXB push r8
    4566:	45                   	rex.RB
    4567:	4e 5f                	rex.WRX pop rdi
    4569:	45 58                	rex.RB pop r8
    456b:	54                   	push   rsp
    456c:	45                   	rex.RB
    456d:	4e                   	rex.WRX
    456e:	44                   	rex.R
    456f:	45                   	rex.RB
    4570:	44 00 5f 5f          	add    BYTE PTR [rdi+0x5f],r11b
    4574:	49                   	rex.WB
    4575:	4e 54                	rex.WRX push rsp
    4577:	5f                   	pop    rdi
    4578:	46                   	rex.RX
    4579:	41 53                	push   r11
    457b:	54                   	push   rsp
    457c:	31 36                	xor    DWORD PTR [rsi],esi
    457e:	5f                   	pop    rdi
    457f:	4d                   	rex.WRB
    4580:	41 58                	pop    r8
    4582:	5f                   	pop    rdi
    4583:	5f                   	pop    rdi
    4584:	20 30                	and    BYTE PTR [rax],dh
    4586:	78 37                	js     45bf <.debug_str+0x45bf>
    4588:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16 data16
    458f:	66 66 66 66 66 66 66 
    4596:	66 4c 00 5f 5f       	data16 rex.WR add BYTE PTR [rdi+0x5f],r11b
    459b:	46                   	rex.RX
    459c:	4c 54                	rex.WR push rsp
    459e:	5f                   	pop    rdi
    459f:	45 50                	rex.RB push r8
    45a1:	53                   	push   rbx
    45a2:	49                   	rex.WB
    45a3:	4c                   	rex.WR
    45a4:	4f                   	rex.WRXB
    45a5:	4e 5f                	rex.WRX pop rdi
    45a7:	5f                   	pop    rdi
    45a8:	20 31                	and    BYTE PTR [rcx],dh
    45aa:	2e 31 39             	xor    DWORD PTR cs:[rcx],edi
    45ad:	32 30                	xor    dh,BYTE PTR [rax]
    45af:	39 32                	cmp    DWORD PTR [rdx],esi
    45b1:	38 39                	cmp    BYTE PTR [rcx],bh
    45b3:	35 35 30 37 38       	xor    eax,0x38373035
    45b8:	31 32                	xor    DWORD PTR [rdx],esi
    45ba:	35 30 30 30 30       	xor    eax,0x30303030
    45bf:	30 30                	xor    BYTE PTR [rax],dh
    45c1:	30 30                	xor    BYTE PTR [rax],dh
    45c3:	30 30                	xor    BYTE PTR [rax],dh
    45c5:	30 30                	xor    BYTE PTR [rax],dh
    45c7:	30 30                	xor    BYTE PTR [rax],dh
    45c9:	30 30                	xor    BYTE PTR [rax],dh
    45cb:	30 30                	xor    BYTE PTR [rax],dh
    45cd:	30 65 2d             	xor    BYTE PTR [rbp+0x2d],ah
    45d0:	37                   	(bad)  
    45d1:	46 00 5f 5f          	rex.RX add BYTE PTR [rdi+0x5f],r11b
    45d5:	46                   	rex.RX
    45d6:	4c 54                	rex.WR push rsp
    45d8:	36 34 5f             	ss xor al,0x5f
    45db:	4d                   	rex.WRB
    45dc:	49                   	rex.WB
    45dd:	4e 5f                	rex.WRX pop rdi
    45df:	45 58                	rex.RB pop r8
    45e1:	50                   	push   rax
    45e2:	5f                   	pop    rdi
    45e3:	5f                   	pop    rdi
    45e4:	20 28                	and    BYTE PTR [rax],ch
    45e6:	2d 31 30 32 31       	sub    eax,0x31323031
    45eb:	29 00                	sub    DWORD PTR [rax],eax
    45ed:	5f                   	pop    rdi
    45ee:	49                   	rex.WB
    45ef:	4f 53                	rex.WRXB push r11
    45f1:	5f                   	pop    rdi
    45f2:	41 50                	push   r8
    45f4:	50                   	push   rax
    45f5:	45                   	rex.RB
    45f6:	4e                   	rex.WRX
    45f7:	44 20 38             	and    BYTE PTR [rax],r15b
    45fa:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    45fd:	47                   	rex.RXB
    45fe:	4c                   	rex.WR
    45ff:	49                   	rex.WB
    4600:	42                   	rex.X
    4601:	43 5f                	rex.XB pop r15
    4603:	49                   	rex.WB
    4604:	4e 54                	rex.WRX push rsp
    4606:	45 52                	rex.RB push r10
    4608:	4e                   	rex.WRX
    4609:	41                   	rex.B
    460a:	4c 5f                	rex.WR pop rdi
    460c:	53                   	push   rbx
    460d:	54                   	push   rsp
    460e:	41 52                	push   r10
    4610:	54                   	push   rsp
    4611:	49                   	rex.WB
    4612:	4e                   	rex.WRX
    4613:	47 5f                	rex.RXB pop r15
    4615:	48                   	rex.W
    4616:	45                   	rex.RB
    4617:	41                   	rex.B
    4618:	44                   	rex.R
    4619:	45 52                	rex.RB push r10
    461b:	5f                   	pop    rdi
    461c:	49                   	rex.WB
    461d:	4d 50                	rex.WRB push r8
    461f:	4c                   	rex.WR
    4620:	45                   	rex.RB
    4621:	4d                   	rex.WRB
    4622:	45                   	rex.RB
    4623:	4e 54                	rex.WRX push rsp
    4625:	41 54                	push   r12
    4627:	49                   	rex.WB
    4628:	4f                   	rex.WRXB
    4629:	4e 00 5f 5f          	rex.WRX add BYTE PTR [rdi+0x5f],r11b
    462d:	46                   	rex.RX
    462e:	4c 54                	rex.WR push rsp
    4630:	5f                   	pop    rdi
    4631:	45 56                	rex.RB push r14
    4633:	41                   	rex.B
    4634:	4c 5f                	rex.WR pop rdi
    4636:	4d                   	rex.WRB
    4637:	45 54                	rex.RB push r12
    4639:	48                   	rex.W
    463a:	4f                   	rex.WRXB
    463b:	44 5f                	rex.R pop rdi
    463d:	54                   	push   rsp
    463e:	53                   	push   rbx
    463f:	5f                   	pop    rdi
    4640:	31 38                	xor    DWORD PTR [rax],edi
    4642:	36 36 31 5f 33       	ss xor DWORD PTR ss:[rdi+0x33],ebx
    4647:	5f                   	pop    rdi
    4648:	5f                   	pop    rdi
    4649:	20 30                	and    BYTE PTR [rax],dh
    464b:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    464e:	44                   	rex.R
    464f:	42                   	rex.X
    4650:	4c 5f                	rex.WR pop rdi
    4652:	48                   	rex.W
    4653:	41 53                	push   r11
    4655:	5f                   	pop    rdi
    4656:	49                   	rex.WB
    4657:	4e                   	rex.WRX
    4658:	46                   	rex.RX
    4659:	49                   	rex.WB
    465a:	4e                   	rex.WRX
    465b:	49 54                	rex.WB push r12
    465d:	59                   	pop    rcx
    465e:	5f                   	pop    rdi
    465f:	5f                   	pop    rdi
    4660:	20 31                	and    BYTE PTR [rcx],dh
    4662:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4665:	61                   	(bad)  
    4666:	74 74                	je     46dc <.debug_str+0x46dc>
    4668:	72 69                	jb     46d3 <.debug_str+0x46d3>
    466a:	62                   	(bad)  
    466b:	75 74                	jne    46e1 <.debug_str+0x46e1>
    466d:	65 5f                	gs pop rdi
    466f:	77 61                	ja     46d2 <.debug_str+0x46d2>
    4671:	72 6e                	jb     46e1 <.debug_str+0x46e1>
    4673:	5f                   	pop    rdi
    4674:	75 6e                	jne    46e4 <.debug_str+0x46e4>
    4676:	75 73                	jne    46eb <.debug_str+0x46eb>
    4678:	65 64 5f             	gs fs pop rdi
    467b:	72 65                	jb     46e2 <.debug_str+0x46e2>
    467d:	73 75                	jae    46f4 <.debug_str+0x46f4>
    467f:	6c                   	ins    BYTE PTR es:[rdi],dx
    4680:	74 5f                	je     46e1 <.debug_str+0x46e1>
    4682:	5f                   	pop    rdi
    4683:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    4686:	61                   	(bad)  
    4687:	74 74                	je     46fd <.debug_str+0x46fd>
    4689:	72 69                	jb     46f4 <.debug_str+0x46f4>
    468b:	62                   	(bad)  
    468c:	75 74                	jne    4702 <.debug_str+0x4702>
    468e:	65 5f                	gs pop rdi
    4690:	5f                   	pop    rdi
    4691:	20 28                	and    BYTE PTR [rax],ch
    4693:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
    4696:	77 61                	ja     46f9 <.debug_str+0x46f9>
    4698:	72 6e                	jb     4708 <.debug_str+0x4708>
    469a:	5f                   	pop    rdi
    469b:	75 6e                	jne    470b <.debug_str+0x470b>
    469d:	75 73                	jne    4712 <.debug_str+0x4712>
    469f:	65 64 5f             	gs fs pop rdi
    46a2:	72 65                	jb     4709 <.debug_str+0x4709>
    46a4:	73 75                	jae    471b <.debug_str+0x471b>
    46a6:	6c                   	ins    BYTE PTR es:[rdi],dx
    46a7:	74 5f                	je     4708 <.debug_str+0x4708>
    46a9:	5f                   	pop    rdi
    46aa:	29 29                	sub    DWORD PTR [rcx],ebp
    46ac:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    46af:	49                   	rex.WB
    46b0:	4e 54                	rex.WRX push rsp
    46b2:	36 34 5f             	ss xor al,0x5f
    46b5:	43 28 63 29          	rex.XB sub BYTE PTR [r11+0x29],spl
    46b9:	20 63 20             	and    BYTE PTR [rbx+0x20],ah
    46bc:	23 23                	and    esp,DWORD PTR [rbx]
    46be:	20 4c 00 5f          	and    BYTE PTR [rax+rax*1+0x5f],cl
    46c2:	5f                   	pop    rdi
    46c3:	45                   	rex.RB
    46c4:	4e                   	rex.WRX
    46c5:	44 5f                	rex.R pop rdi
    46c7:	44                   	rex.R
    46c8:	45                   	rex.RB
    46c9:	43                   	rex.XB
    46ca:	4c 53                	rex.WR push rbx
    46cc:	20 00                	and    BYTE PTR [rax],al
    46ce:	5f                   	pop    rdi
    46cf:	5f                   	pop    rdi
    46d0:	46                   	rex.RX
    46d1:	4c 54                	rex.WR push rsp
    46d3:	5f                   	pop    rdi
    46d4:	48                   	rex.W
    46d5:	41 53                	push   r11
    46d7:	5f                   	pop    rdi
    46d8:	51                   	push   rcx
    46d9:	55                   	push   rbp
    46da:	49                   	rex.WB
    46db:	45 54                	rex.RB push r12
    46dd:	5f                   	pop    rdi
    46de:	4e                   	rex.WRX
    46df:	41                   	rex.B
    46e0:	4e 5f                	rex.WRX pop rdi
    46e2:	5f                   	pop    rdi
    46e3:	20 31                	and    BYTE PTR [rcx],dh
    46e5:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    46e8:	53                   	push   rbx
    46e9:	49 5a                	rex.WB pop r10
    46eb:	45                   	rex.RB
    46ec:	4f                   	rex.WRXB
    46ed:	46 5f                	rex.RX pop rdi
    46ef:	49                   	rex.WB
    46f0:	4e 54                	rex.WRX push rsp
    46f2:	5f                   	pop    rdi
    46f3:	5f                   	pop    rdi
    46f4:	20 34 00             	and    BYTE PTR [rax+rax*1],dh
    46f7:	5f                   	pop    rdi
    46f8:	5f                   	pop    rdi
    46f9:	43                   	rex.XB
    46fa:	4c                   	rex.WR
    46fb:	4f                   	rex.WRXB
    46fc:	43                   	rex.XB
    46fd:	4b                   	rex.WXB
    46fe:	49                   	rex.WB
    46ff:	44 5f                	rex.R pop rdi
    4701:	54                   	push   rsp
    4702:	5f                   	pop    rdi
    4703:	54                   	push   rsp
    4704:	59                   	pop    rcx
    4705:	50                   	push   rax
    4706:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    470a:	53                   	push   rbx
    470b:	33 32                	xor    esi,DWORD PTR [rdx]
    470d:	5f                   	pop    rdi
    470e:	54                   	push   rsp
    470f:	59                   	pop    rcx
    4710:	50                   	push   rax
    4711:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    4715:	49                   	rex.WB
    4716:	4e 54                	rex.WRX push rsp
    4718:	5f                   	pop    rdi
    4719:	46                   	rex.RX
    471a:	41 53                	push   r11
    471c:	54                   	push   rsp
    471d:	31 36                	xor    DWORD PTR [rsi],esi
    471f:	5f                   	pop    rdi
    4720:	54                   	push   rsp
    4721:	59                   	pop    rcx
    4722:	50                   	push   rax
    4723:	45 5f                	rex.RB pop r15
    4725:	5f                   	pop    rdi
    4726:	20 6c 6f 6e          	and    BYTE PTR [rdi+rbp*2+0x6e],ch
    472a:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
    472e:	74 00                	je     4730 <.debug_str+0x4730>
    4730:	5f                   	pop    rdi
    4731:	5f                   	pop    rdi
    4732:	53                   	push   rbx
    4733:	54                   	push   rsp
    4734:	44                   	rex.R
    4735:	43 5f                	rex.XB pop r15
    4737:	49                   	rex.WB
    4738:	45                   	rex.RB
    4739:	43 5f                	rex.XB pop r15
    473b:	35 35 39 5f 5f       	xor    eax,0x5f5f3935
    4740:	20 31                	and    BYTE PTR [rcx],dh
    4742:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4745:	44                   	rex.R
    4746:	45                   	rex.RB
    4747:	43 31 32             	rex.XB xor DWORD PTR [r10],esi
    474a:	38 5f 53             	cmp    BYTE PTR [rdi+0x53],bl
    474d:	55                   	push   rbp
    474e:	42                   	rex.X
    474f:	4e                   	rex.WRX
    4750:	4f 52                	rex.WRXB push r10
    4752:	4d                   	rex.WRB
    4753:	41                   	rex.B
    4754:	4c 5f                	rex.WR pop rdi
    4756:	4d                   	rex.WRB
    4757:	49                   	rex.WB
    4758:	4e 5f                	rex.WRX pop rdi
    475a:	5f                   	pop    rdi
    475b:	20 30                	and    BYTE PTR [rax],dh
    475d:	2e 30 30             	xor    BYTE PTR cs:[rax],dh
    4760:	30 30                	xor    BYTE PTR [rax],dh
    4762:	30 30                	xor    BYTE PTR [rax],dh
    4764:	30 30                	xor    BYTE PTR [rax],dh
    4766:	30 30                	xor    BYTE PTR [rax],dh
    4768:	30 30                	xor    BYTE PTR [rax],dh
    476a:	30 30                	xor    BYTE PTR [rax],dh
    476c:	30 30                	xor    BYTE PTR [rax],dh
    476e:	30 30                	xor    BYTE PTR [rax],dh
    4770:	30 30                	xor    BYTE PTR [rax],dh
    4772:	30 30                	xor    BYTE PTR [rax],dh
    4774:	30 30                	xor    BYTE PTR [rax],dh
    4776:	30 30                	xor    BYTE PTR [rax],dh
    4778:	30 30                	xor    BYTE PTR [rax],dh
    477a:	30 30                	xor    BYTE PTR [rax],dh
    477c:	30 30                	xor    BYTE PTR [rax],dh
    477e:	31 45 2d             	xor    DWORD PTR [rbp+0x2d],eax
    4781:	36 31 34 33          	xor    DWORD PTR ss:[rbx+rsi*1],esi
    4785:	44                   	rex.R
    4786:	4c 00 5f 5f          	rex.WR add BYTE PTR [rdi+0x5f],r11b
    478a:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    478b:	66 66 5f             	data16 pop di
    478e:	74 00                	je     4790 <.debug_str+0x4790>
    4790:	5f                   	pop    rdi
    4791:	5f                   	pop    rdi
    4792:	55                   	push   rbp
    4793:	53                   	push   rbx
    4794:	45 5f                	rex.RB pop r15
    4796:	4c                   	rex.WR
    4797:	41 52                	push   r10
    4799:	47                   	rex.RXB
    479a:	45                   	rex.RB
    479b:	46                   	rex.RX
    479c:	49                   	rex.WB
    479d:	4c                   	rex.WR
    479e:	45 00 73 69          	add    BYTE PTR [r11+0x69],r14b
    47a2:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    47a4:	65 64 20 63 68       	gs and BYTE PTR fs:[rbx+0x68],ah
    47a9:	61                   	(bad)  
    47aa:	72 00                	jb     47ac <.debug_str+0x47ac>
    47ac:	5f                   	pop    rdi
    47ad:	5f                   	pop    rdi
    47ae:	53                   	push   rbx
    47af:	49 5a                	rex.WB pop r10
    47b1:	45                   	rex.RB
    47b2:	4f                   	rex.WRXB
    47b3:	46 5f                	rex.RX pop rdi
    47b5:	46                   	rex.RX
    47b6:	4c                   	rex.WR
    47b7:	4f                   	rex.WRXB
    47b8:	41 54                	push   r12
    47ba:	38 30                	cmp    BYTE PTR [rax],dh
    47bc:	5f                   	pop    rdi
    47bd:	5f                   	pop    rdi
    47be:	20 31                	and    BYTE PTR [rcx],dh
    47c0:	36 00 5f 5f          	add    BYTE PTR ss:[rdi+0x5f],bl
    47c4:	46                   	rex.RX
    47c5:	4c 54                	rex.WR push rsp
    47c7:	33 32                	xor    esi,DWORD PTR [rdx]
    47c9:	58                   	pop    rax
    47ca:	5f                   	pop    rdi
    47cb:	48                   	rex.W
    47cc:	41 53                	push   r11
    47ce:	5f                   	pop    rdi
    47cf:	51                   	push   rcx
    47d0:	55                   	push   rbp
    47d1:	49                   	rex.WB
    47d2:	45 54                	rex.RB push r12
    47d4:	5f                   	pop    rdi
    47d5:	4e                   	rex.WRX
    47d6:	41                   	rex.B
    47d7:	4e 5f                	rex.WRX pop rdi
    47d9:	5f                   	pop    rdi
    47da:	20 31                	and    BYTE PTR [rcx],dh
    47dc:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    47df:	44                   	rex.R
    47e0:	42                   	rex.X
    47e1:	4c 5f                	rex.WR pop rdi
    47e3:	4d                   	rex.WRB
    47e4:	41 58                	pop    r8
    47e6:	5f                   	pop    rdi
    47e7:	31 30                	xor    DWORD PTR [rax],esi
    47e9:	5f                   	pop    rdi
    47ea:	45 58                	rex.RB pop r8
    47ec:	50                   	push   rax
    47ed:	5f                   	pop    rdi
    47ee:	5f                   	pop    rdi
    47ef:	20 33                	and    BYTE PTR [rbx],dh
    47f1:	30 38                	xor    BYTE PTR [rax],bh
    47f3:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    47f6:	55                   	push   rbp
    47f7:	53                   	push   rbx
    47f8:	45 5f                	rex.RB pop r15
    47fa:	4d                   	rex.WRB
    47fb:	49 53                	rex.WB push r11
    47fd:	43 20 31             	rex.XB and BYTE PTR [r9],sil
    4800:	00 73 68             	add    BYTE PTR [rbx+0x68],dh
    4803:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    4804:	72 74                	jb     487a <.debug_str+0x487a>
    4806:	20 75 6e             	and    BYTE PTR [rbp+0x6e],dh
    4809:	73 69                	jae    4874 <.debug_str+0x4874>
    480b:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    480d:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    4812:	74 00                	je     4814 <.debug_str+0x4814>
    4814:	5f                   	pop    rdi
    4815:	5f                   	pop    rdi
    4816:	47 58                	rex.RXB pop r8
    4818:	58                   	pop    rax
    4819:	5f                   	pop    rdi
    481a:	41                   	rex.B
    481b:	42                   	rex.X
    481c:	49 5f                	rex.WB pop r15
    481e:	56                   	push   rsi
    481f:	45 52                	rex.RB push r10
    4821:	53                   	push   rbx
    4822:	49                   	rex.WB
    4823:	4f                   	rex.WRXB
    4824:	4e 20 31             	rex.WRX and BYTE PTR [rcx],r14b
    4827:	30 31                	xor    BYTE PTR [rcx],dh
    4829:	31 00                	xor    DWORD PTR [rax],eax
    482b:	5f                   	pop    rdi
    482c:	5f                   	pop    rdi
    482d:	70 69                	jo     4898 <.debug_str+0x4898>
    482f:	63 5f 5f             	movsxd ebx,DWORD PTR [rdi+0x5f]
    4832:	20 32                	and    BYTE PTR [rdx],dh
    4834:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4837:	41 54                	push   r12
    4839:	4f                   	rex.WRXB
    483a:	4d                   	rex.WRB
    483b:	49                   	rex.WB
    483c:	43 5f                	rex.XB pop r15
    483e:	52                   	push   rdx
    483f:	45                   	rex.RB
    4840:	4c                   	rex.WR
    4841:	45                   	rex.RB
    4842:	41 53                	push   r11
    4844:	45 20 33             	and    BYTE PTR [r11],r14b
    4847:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    484a:	53                   	push   rbx
    484b:	53                   	push   rbx
    484c:	45 5f                	rex.RB pop r15
    484e:	5f                   	pop    rdi
    484f:	20 31                	and    BYTE PTR [rcx],dh
    4851:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    4854:	4f 5f                	rex.WRXB pop r15
    4856:	4e                   	rex.WRX
    4857:	4f 5f                	rex.WRXB pop r15
    4859:	52                   	push   rdx
    485a:	45                   	rex.RB
    485b:	41                   	rex.B
    485c:	44 53                	rex.R push rbx
    485e:	20 34 00             	and    BYTE PTR [rax+rax*1],dh
    4861:	5f                   	pop    rdi
    4862:	5f                   	pop    rdi
    4863:	47                   	rex.RXB
    4864:	4c                   	rex.WR
    4865:	49                   	rex.WB
    4866:	42                   	rex.X
    4867:	43 5f                	rex.XB pop r15
    4869:	55                   	push   rbp
    486a:	53                   	push   rbx
    486b:	45 5f                	rex.RB pop r15
    486d:	49                   	rex.WB
    486e:	45                   	rex.RB
    486f:	43 5f                	rex.XB pop r15
    4871:	36 30 35 35 39 5f 46 	xor    BYTE PTR ss:[rip+0x465f3935],dh        # 465f81ad <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x465f81ad>
    4878:	55                   	push   rbp
    4879:	4e                   	rex.WRX
    487a:	43 53                	rex.XB push r11
    487c:	5f                   	pop    rdi
    487d:	45 58                	rex.RB pop r8
    487f:	54                   	push   rsp
    4880:	20 30                	and    BYTE PTR [rax],dh
    4882:	00 6d 61             	add    BYTE PTR [rbp+0x61],ch
    4885:	69 6e 00 5f 53 49 5a 	imul   ebp,DWORD PTR [rsi+0x0],0x5a49535f
    488c:	45 54                	rex.RB push r12
    488e:	5f                   	pop    rdi
    488f:	20 00                	and    BYTE PTR [rax],al
    4891:	5f                   	pop    rdi
    4892:	5f                   	pop    rdi
    4893:	46                   	rex.RX
    4894:	4c 54                	rex.WR push rsp
    4896:	31 32                	xor    DWORD PTR [rdx],esi
    4898:	38 5f 44             	cmp    BYTE PTR [rdi+0x44],bl
    489b:	45                   	rex.RB
    489c:	4e                   	rex.WRX
    489d:	4f 52                	rex.WRXB push r10
    489f:	4d 5f                	rex.WRB pop r15
    48a1:	4d                   	rex.WRB
    48a2:	49                   	rex.WB
    48a3:	4e 5f                	rex.WRX pop rdi
    48a5:	5f                   	pop    rdi
    48a6:	20 36                	and    BYTE PTR [rsi],dh
    48a8:	2e 34 37             	cs xor al,0x37
    48ab:	35 31 37 35 31       	xor    eax,0x31353731
    48b0:	31 39                	xor    DWORD PTR [rcx],edi
    48b2:	34 33                	xor    al,0x33
    48b4:	38 30                	cmp    BYTE PTR [rax],dh
    48b6:	32 35 31 31 30 39    	xor    dh,BYTE PTR [rip+0x39303131]        # 393079ed <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x393079ed>
    48bc:	32 34 34             	xor    dh,BYTE PTR [rsp+rsi*1]
    48bf:	33 38                	xor    edi,DWORD PTR [rax]
    48c1:	39 35 38 32 32 37    	cmp    DWORD PTR [rip+0x37323238],esi        # 37327aff <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x37327aff>
    48c7:	36 34 36             	ss xor al,0x36
    48ca:	35 35 65 2d 34       	xor    eax,0x342d6535
    48cf:	39 36                	cmp    DWORD PTR [rsi],esi
    48d1:	36 46 31 32          	rex.RX xor DWORD PTR ss:[rdx],r14d
    48d5:	38 00                	cmp    BYTE PTR [rax],al
    48d7:	5f                   	pop    rdi
    48d8:	5f                   	pop    rdi
    48d9:	47                   	rex.RXB
    48da:	4c                   	rex.WR
    48db:	49                   	rex.WB
    48dc:	42                   	rex.X
    48dd:	43 5f                	rex.XB pop r15
    48df:	55                   	push   rbp
    48e0:	53                   	push   rbx
    48e1:	45 5f                	rex.RB pop r15
    48e3:	49                   	rex.WB
    48e4:	45                   	rex.RB
    48e5:	43 5f                	rex.XB pop r15
    48e7:	36 30 35 35 39 5f 42 	xor    BYTE PTR ss:[rip+0x425f3935],dh        # 425f8223 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x425f8223>
    48ee:	46 50                	rex.RX push rax
    48f0:	5f                   	pop    rdi
    48f1:	45 58                	rex.RB pop r8
    48f3:	54                   	push   rsp
    48f4:	20 30                	and    BYTE PTR [rax],dh
    48f6:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    48f9:	73 74                	jae    496f <.debug_str+0x496f>
    48fb:	75 62                	jne    495f <.debug_str+0x495f>
    48fd:	5f                   	pop    rdi
    48fe:	72 65                	jb     4965 <.debug_str+0x4965>
    4900:	76 6f                	jbe    4971 <.debug_str+0x4971>
    4902:	6b 65 20 00          	imul   esp,DWORD PTR [rbp+0x20],0x0
    4906:	5f                   	pop    rdi
    4907:	5f                   	pop    rdi
    4908:	49                   	rex.WB
    4909:	4e 54                	rex.WRX push rsp
    490b:	4d                   	rex.WRB
    490c:	41 58                	pop    r8
    490e:	5f                   	pop    rdi
    490f:	54                   	push   rsp
    4910:	59                   	pop    rcx
    4911:	50                   	push   rax
    4912:	45 5f                	rex.RB pop r15
    4914:	5f                   	pop    rdi
    4915:	20 6c 6f 6e          	and    BYTE PTR [rdi+rbp*2+0x6e],ch
    4919:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
    491d:	74 00                	je     491f <.debug_str+0x491f>
    491f:	5f                   	pop    rdi
    4920:	5f                   	pop    rdi
    4921:	46                   	rex.RX
    4922:	4c 54                	rex.WR push rsp
    4924:	5f                   	pop    rdi
    4925:	4d                   	rex.WRB
    4926:	49                   	rex.WB
    4927:	4e 5f                	rex.WRX pop rdi
    4929:	45 58                	rex.RB pop r8
    492b:	50                   	push   rax
    492c:	5f                   	pop    rdi
    492d:	5f                   	pop    rdi
    492e:	20 28                	and    BYTE PTR [rax],ch
    4930:	2d 31 32 35 29       	sub    eax,0x29353231
    4935:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4938:	53                   	push   rbx
    4939:	53                   	push   rbx
    493a:	50                   	push   rax
    493b:	5f                   	pop    rdi
    493c:	53                   	push   rbx
    493d:	54                   	push   rsp
    493e:	52                   	push   rdx
    493f:	4f                   	rex.WRXB
    4940:	4e                   	rex.WRX
    4941:	47 5f                	rex.RXB pop r15
    4943:	5f                   	pop    rdi
    4944:	20 33                	and    BYTE PTR [rbx],dh
    4946:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4949:	65 72 72             	gs jb  49be <.debug_str+0x49be>
    494c:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    494d:	72 64                	jb     49b3 <.debug_str+0x49b3>
    494f:	65 63 6c 28 6e       	movsxd ebp,DWORD PTR gs:[rax+rbp*1+0x6e]
    4954:	61                   	(bad)  
    4955:	6d                   	ins    DWORD PTR es:[rdi],dx
    4956:	65 2c 6d             	gs sub al,0x6d
    4959:	73 67                	jae    49c2 <.debug_str+0x49c2>
    495b:	29 20                	sub    DWORD PTR [rax],esp
    495d:	65 78 74             	gs js  49d4 <.debug_str+0x49d4>
    4960:	65 72 6e             	gs jb  49d1 <.debug_str+0x49d1>
    4963:	20 76 6f             	and    BYTE PTR [rsi+0x6f],dh
    4966:	69 64 20 6e 61 6d 65 	imul   esp,DWORD PTR [rax+riz*1+0x6e],0x20656d61
    496d:	20 
    496e:	28 76 6f             	sub    BYTE PTR [rsi+0x6f],dh
    4971:	69 64 29 20 5f 5f 61 	imul   esp,DWORD PTR [rcx+rbp*1+0x20],0x74615f5f
    4978:	74 
    4979:	74 72                	je     49ed <.debug_str+0x49ed>
    497b:	69 62 75 74 65 5f 5f 	imul   esp,DWORD PTR [rdx+0x75],0x5f5f6574
    4982:	28 28                	sub    BYTE PTR [rax],ch
    4984:	5f                   	pop    rdi
    4985:	5f                   	pop    rdi
    4986:	65 72 72             	gs jb  49fb <.debug_str+0x49fb>
    4989:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    498a:	72 5f                	jb     49eb <.debug_str+0x49eb>
    498c:	5f                   	pop    rdi
    498d:	20 28                	and    BYTE PTR [rax],ch
    498f:	6d                   	ins    DWORD PTR es:[rdi],dx
    4990:	73 67                	jae    49f9 <.debug_str+0x49f9>
    4992:	29 29                	sub    DWORD PTR [rcx],ebp
    4994:	29 00                	sub    DWORD PTR [rax],eax
    4996:	5f                   	pop    rdi
    4997:	5f                   	pop    rdi
    4998:	44                   	rex.R
    4999:	45                   	rex.RB
    499a:	43 31 32             	rex.XB xor DWORD PTR [r10],esi
    499d:	38 5f 4d             	cmp    BYTE PTR [rdi+0x4d],bl
    49a0:	41 58                	pop    r8
    49a2:	5f                   	pop    rdi
    49a3:	5f                   	pop    rdi
    49a4:	20 39                	and    BYTE PTR [rcx],bh
    49a6:	2e 39 39             	cmp    DWORD PTR cs:[rcx],edi
    49a9:	39 39                	cmp    DWORD PTR [rcx],edi
    49ab:	39 39                	cmp    DWORD PTR [rcx],edi
    49ad:	39 39                	cmp    DWORD PTR [rcx],edi
    49af:	39 39                	cmp    DWORD PTR [rcx],edi
    49b1:	39 39                	cmp    DWORD PTR [rcx],edi
    49b3:	39 39                	cmp    DWORD PTR [rcx],edi
    49b5:	39 39                	cmp    DWORD PTR [rcx],edi
    49b7:	39 39                	cmp    DWORD PTR [rcx],edi
    49b9:	39 39                	cmp    DWORD PTR [rcx],edi
    49bb:	39 39                	cmp    DWORD PTR [rcx],edi
    49bd:	39 39                	cmp    DWORD PTR [rcx],edi
    49bf:	39 39                	cmp    DWORD PTR [rcx],edi
    49c1:	39 39                	cmp    DWORD PTR [rcx],edi
    49c3:	39 39                	cmp    DWORD PTR [rcx],edi
    49c5:	39 39                	cmp    DWORD PTR [rcx],edi
    49c7:	39 45 36             	cmp    DWORD PTR [rbp+0x36],eax
    49ca:	31 34 34             	xor    DWORD PTR [rsp+rsi*1],esi
    49cd:	44                   	rex.R
    49ce:	4c 00 5f 5f          	rex.WR add BYTE PTR [rdi+0x5f],r11b
    49d2:	46                   	rex.RX
    49d3:	4c 54                	rex.WR push rsp
    49d5:	5f                   	pop    rdi
    49d6:	4d                   	rex.WRB
    49d7:	41 58                	pop    r8
    49d9:	5f                   	pop    rdi
    49da:	45 58                	rex.RB pop r8
    49dc:	50                   	push   rax
    49dd:	5f                   	pop    rdi
    49de:	5f                   	pop    rdi
    49df:	20 31                	and    BYTE PTR [rcx],dh
    49e1:	32 38                	xor    bh,BYTE PTR [rax]
    49e3:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    49e6:	41 54                	push   r12
    49e8:	4f                   	rex.WRXB
    49e9:	4d                   	rex.WRB
    49ea:	49                   	rex.WB
    49eb:	43 5f                	rex.XB pop r15
    49ed:	48                   	rex.W
    49ee:	4c                   	rex.WR
    49ef:	45 5f                	rex.RB pop r15
    49f1:	41                   	rex.B
    49f2:	43 51                	rex.XB push r9
    49f4:	55                   	push   rbp
    49f5:	49 52                	rex.WB push r10
    49f7:	45 20 36             	and    BYTE PTR [r14],r14b
    49fa:	35 35 33 36 00       	xor    eax,0x363335
    49ff:	5f                   	pop    rdi
    4a00:	5f                   	pop    rdi
    4a01:	4f                   	rex.WRXB
    4a02:	46                   	rex.RX
    4a03:	46                   	rex.RX
    4a04:	36 34 5f             	ss xor al,0x5f
    4a07:	54                   	push   rsp
    4a08:	5f                   	pop    rdi
    4a09:	54                   	push   rsp
    4a0a:	59                   	pop    rcx
    4a0b:	50                   	push   rax
    4a0c:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    4a10:	53                   	push   rbx
    4a11:	51                   	push   rcx
    4a12:	55                   	push   rbp
    4a13:	41                   	rex.B
    4a14:	44 5f                	rex.R pop rdi
    4a16:	54                   	push   rsp
    4a17:	59                   	pop    rcx
    4a18:	50                   	push   rax
    4a19:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    4a1d:	55                   	push   rbp
    4a1e:	53                   	push   rbx
    4a1f:	45 5f                	rex.RB pop r15
    4a21:	49 53                	rex.WB push r11
    4a23:	4f                   	rex.WRXB
    4a24:	43 31 31             	rex.XB xor DWORD PTR [r9],esi
    4a27:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4a2a:	44                   	rex.R
    4a2b:	45 56                	rex.RB push r14
    4a2d:	5f                   	pop    rdi
    4a2e:	54                   	push   rsp
    4a2f:	5f                   	pop    rdi
    4a30:	54                   	push   rsp
    4a31:	59                   	pop    rcx
    4a32:	50                   	push   rax
    4a33:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    4a37:	55                   	push   rbp
    4a38:	51                   	push   rcx
    4a39:	55                   	push   rbp
    4a3a:	41                   	rex.B
    4a3b:	44 5f                	rex.R pop rdi
    4a3d:	54                   	push   rsp
    4a3e:	59                   	pop    rcx
    4a3f:	50                   	push   rax
    4a40:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    4a44:	43 50                	rex.XB push r8
    4a46:	55                   	push   rbp
    4a47:	5f                   	pop    rdi
    4a48:	4d                   	rex.WRB
    4a49:	41 53                	push   r11
    4a4b:	4b 5f                	rex.WXB pop r15
    4a4d:	54                   	push   rsp
    4a4e:	59                   	pop    rcx
    4a4f:	50                   	push   rax
    4a50:	45 20 5f 5f          	and    BYTE PTR [r15+0x5f],r11b
    4a54:	53                   	push   rbx
    4a55:	59                   	pop    rcx
    4a56:	53                   	push   rbx
    4a57:	43                   	rex.XB
    4a58:	41                   	rex.B
    4a59:	4c                   	rex.WR
    4a5a:	4c 5f                	rex.WR pop rdi
    4a5c:	55                   	push   rbp
    4a5d:	4c                   	rex.WR
    4a5e:	4f                   	rex.WRXB
    4a5f:	4e                   	rex.WRX
    4a60:	47 5f                	rex.RXB pop r15
    4a62:	54                   	push   rsp
    4a63:	59                   	pop    rcx
    4a64:	50                   	push   rax
    4a65:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    4a69:	55                   	push   rbp
    4a6a:	49                   	rex.WB
    4a6b:	4e 54                	rex.WRX push rsp
    4a6d:	5f                   	pop    rdi
    4a6e:	4c                   	rex.WR
    4a6f:	45                   	rex.RB
    4a70:	41 53                	push   r11
    4a72:	54                   	push   rsp
    4a73:	33 32                	xor    esi,DWORD PTR [rdx]
    4a75:	5f                   	pop    rdi
    4a76:	4d                   	rex.WRB
    4a77:	41 58                	pop    r8
    4a79:	5f                   	pop    rdi
    4a7a:	5f                   	pop    rdi
    4a7b:	20 30                	and    BYTE PTR [rax],dh
    4a7d:	78 66                	js     4ae5 <.debug_str+0x4ae5>
    4a7f:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 push bp
    4a86:	55 
    4a87:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    4a8a:	4f 5f                	rex.WRXB pop r15
    4a8c:	42                   	rex.X
    4a8d:	45 28 65 78          	sub    BYTE PTR [r13+0x78],r12b
    4a91:	70 72                	jo     4b05 <.debug_str+0x4b05>
    4a93:	2c 72                	sub    al,0x72
    4a95:	65 73 29             	gs jae 4ac1 <.debug_str+0x4ac1>
    4a98:	20 5f 5f             	and    BYTE PTR [rdi+0x5f],bl
    4a9b:	62                   	(bad)  
    4a9c:	75 69                	jne    4b07 <.debug_str+0x4b07>
    4a9e:	6c                   	ins    BYTE PTR es:[rdi],dx
    4a9f:	74 69                	je     4b0a <.debug_str+0x4b0a>
    4aa1:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    4aa2:	5f                   	pop    rdi
    4aa3:	65 78 70             	gs js  4b16 <.debug_str+0x4b16>
    4aa6:	65 63 74 20 28       	movsxd esi,DWORD PTR gs:[rax+riz*1+0x28]
    4aab:	28 65 78             	sub    BYTE PTR [rbp+0x78],ah
    4aae:	70 72                	jo     4b22 <.debug_str+0x4b22>
    4ab0:	29 2c 20             	sub    DWORD PTR [rax+riz*1],ebp
    4ab3:	72 65                	jb     4b1a <.debug_str+0x4b1a>
    4ab5:	73 29                	jae    4ae0 <.debug_str+0x4ae0>
    4ab7:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4aba:	41 53                	push   r11
    4abc:	4d                   	rex.WRB
    4abd:	4e                   	rex.WRX
    4abe:	41                   	rex.B
    4abf:	4d                   	rex.WRB
    4ac0:	45 28 63 6e          	sub    BYTE PTR [r11+0x6e],r12b
    4ac4:	61                   	(bad)  
    4ac5:	6d                   	ins    DWORD PTR es:[rdi],dx
    4ac6:	65 29 20             	sub    DWORD PTR gs:[rax],esp
    4ac9:	5f                   	pop    rdi
    4aca:	5f                   	pop    rdi
    4acb:	41 53                	push   r11
    4acd:	4d                   	rex.WRB
    4ace:	4e                   	rex.WRX
    4acf:	41                   	rex.B
    4ad0:	4d                   	rex.WRB
    4ad1:	45 32 20             	xor    r12b,BYTE PTR [r8]
    4ad4:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
    4ad7:	55                   	push   rbp
    4ad8:	53                   	push   rbx
    4ad9:	45 52                	rex.RB push r10
    4adb:	5f                   	pop    rdi
    4adc:	4c                   	rex.WR
    4add:	41                   	rex.B
    4ade:	42                   	rex.X
    4adf:	45                   	rex.RB
    4ae0:	4c 5f                	rex.WR pop rdi
    4ae2:	50                   	push   rax
    4ae3:	52                   	push   rdx
    4ae4:	45                   	rex.RB
    4ae5:	46                   	rex.RX
    4ae6:	49 58                	rex.WB pop r8
    4ae8:	5f                   	pop    rdi
    4ae9:	5f                   	pop    rdi
    4aea:	2c 20                	sub    al,0x20
    4aec:	63 6e 61             	movsxd ebp,DWORD PTR [rsi+0x61]
    4aef:	6d                   	ins    DWORD PTR es:[rdi],dx
    4af0:	65 29 00             	sub    DWORD PTR gs:[rax],eax
    4af3:	5f                   	pop    rdi
    4af4:	5f                   	pop    rdi
    4af5:	46                   	rex.RX
    4af6:	4c 54                	rex.WR push rsp
    4af8:	33 32                	xor    esi,DWORD PTR [rdx]
    4afa:	58                   	pop    rax
    4afb:	5f                   	pop    rdi
    4afc:	4d                   	rex.WRB
    4afd:	41 58                	pop    r8
    4aff:	5f                   	pop    rdi
    4b00:	31 30                	xor    DWORD PTR [rax],esi
    4b02:	5f                   	pop    rdi
    4b03:	45 58                	rex.RB pop r8
    4b05:	50                   	push   rax
    4b06:	5f                   	pop    rdi
    4b07:	5f                   	pop    rdi
    4b08:	20 33                	and    BYTE PTR [rbx],dh
    4b0a:	30 38                	xor    BYTE PTR [rax],bh
    4b0c:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4b0f:	61                   	(bad)  
    4b10:	6d                   	ins    DWORD PTR es:[rdi],dx
    4b11:	64 36 34 20          	fs ss xor al,0x20
    4b15:	31 00                	xor    DWORD PTR [rax],eax
    4b17:	5f                   	pop    rdi
    4b18:	5f                   	pop    rdi
    4b19:	57                   	push   rdi
    4b1a:	4f 52                	rex.WRXB push r10
    4b1c:	44 53                	rex.R push rbx
    4b1e:	49 5a                	rex.WB pop r10
    4b20:	45 20 36             	and    BYTE PTR [r14],r14b
    4b23:	34 00                	xor    al,0x0
    4b25:	5f                   	pop    rdi
    4b26:	5f                   	pop    rdi
    4b27:	75 6e                	jne    4b97 <.debug_str+0x4b97>
    4b29:	69 78 20 31 00 5f 63 	imul   edi,DWORD PTR [rax+0x20],0x635f0031
    4b30:	68 61 69 6e 00       	push   0x6e6961
    4b35:	5f                   	pop    rdi
    4b36:	5f                   	pop    rdi
    4b37:	46                   	rex.RX
    4b38:	4c 54                	rex.WR push rsp
    4b3a:	36 34 5f             	ss xor al,0x5f
    4b3d:	44                   	rex.R
    4b3e:	45                   	rex.RB
    4b3f:	4e                   	rex.WRX
    4b40:	4f 52                	rex.WRXB push r10
    4b42:	4d 5f                	rex.WRB pop r15
    4b44:	4d                   	rex.WRB
    4b45:	49                   	rex.WB
    4b46:	4e 5f                	rex.WRX pop rdi
    4b48:	5f                   	pop    rdi
    4b49:	20 34 2e             	and    BYTE PTR [rsi+rbp*1],dh
    4b4c:	39 34 30             	cmp    DWORD PTR [rax+rsi*1],esi
    4b4f:	36 35 36 34 35 38    	ss xor eax,0x38353436
    4b55:	34 31                	xor    al,0x31
    4b57:	32 34 36             	xor    dh,BYTE PTR [rsi+rsi*1]
    4b5a:	35 34 34 31 37       	xor    eax,0x37313434
    4b5f:	36 35 36 38 37 39    	ss xor eax,0x39373836
    4b65:	32 38                	xor    bh,BYTE PTR [rax]
    4b67:	36 38 32             	cmp    BYTE PTR ss:[rdx],dh
    4b6a:	32 31                	xor    dh,BYTE PTR [rcx]
    4b6c:	33 37                	xor    esi,DWORD PTR [rdi]
    4b6e:	32 65 2d             	xor    ah,BYTE PTR [rbp+0x2d]
    4b71:	33 32                	xor    esi,DWORD PTR [rdx]
    4b73:	34 46                	xor    al,0x46
    4b75:	36 34 00             	ss xor al,0x0
    4b78:	4c 5f                	rex.WR pop rdi
    4b7a:	63 74 65 72          	movsxd esi,DWORD PTR [rbp+riz*2+0x72]
    4b7e:	6d                   	ins    DWORD PTR es:[rdi],dx
    4b7f:	69 64 20 39 00 5f 5f 	imul   esp,DWORD PTR [rax+riz*1+0x39],0x505f5f00
    4b86:	50 
    4b87:	54                   	push   rsp
    4b88:	52                   	push   rdx
    4b89:	44                   	rex.R
    4b8a:	49                   	rex.WB
    4b8b:	46                   	rex.RX
    4b8c:	46 5f                	rex.RX pop rdi
    4b8e:	54                   	push   rsp
    4b8f:	59                   	pop    rcx
    4b90:	50                   	push   rax
    4b91:	45 5f                	rex.RB pop r15
    4b93:	5f                   	pop    rdi
    4b94:	20 6c 6f 6e          	and    BYTE PTR [rdi+rbp*2+0x6e],ch
    4b98:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
    4b9c:	74 00                	je     4b9e <.debug_str+0x4b9e>
    4b9e:	5f                   	pop    rdi
    4b9f:	5f                   	pop    rdi
    4ba0:	46                   	rex.RX
    4ba1:	4c 54                	rex.WR push rsp
    4ba3:	33 32                	xor    esi,DWORD PTR [rdx]
    4ba5:	5f                   	pop    rdi
    4ba6:	4d                   	rex.WRB
    4ba7:	41 58                	pop    r8
    4ba9:	5f                   	pop    rdi
    4baa:	31 30                	xor    DWORD PTR [rax],esi
    4bac:	5f                   	pop    rdi
    4bad:	45 58                	rex.RB pop r8
    4baf:	50                   	push   rax
    4bb0:	5f                   	pop    rdi
    4bb1:	5f                   	pop    rdi
    4bb2:	20 33                	and    BYTE PTR [rbx],dh
    4bb4:	38 00                	cmp    BYTE PTR [rax],al
    4bb6:	5f                   	pop    rdi
    4bb7:	5f                   	pop    rdi
    4bb8:	57                   	push   rdi
    4bb9:	4f 52                	rex.WRXB push r10
    4bbb:	44 53                	rex.R push rbx
    4bbd:	49 5a                	rex.WB pop r10
    4bbf:	45 5f                	rex.RB pop r15
    4bc1:	54                   	push   rsp
    4bc2:	49                   	rex.WB
    4bc3:	4d                   	rex.WRB
    4bc4:	45                   	rex.RB
    4bc5:	36 34 5f             	ss xor al,0x5f
    4bc8:	43                   	rex.XB
    4bc9:	4f                   	rex.WRXB
    4bca:	4d 50                	rex.WRB push r8
    4bcc:	41 54                	push   r12
    4bce:	33 32                	xor    esi,DWORD PTR [rdx]
    4bd0:	20 31                	and    BYTE PTR [rcx],dh
    4bd2:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4bd5:	46                   	rex.RX
    4bd6:	4c 54                	rex.WR push rsp
    4bd8:	31 32                	xor    DWORD PTR [rdx],esi
    4bda:	38 5f 44             	cmp    BYTE PTR [rdi+0x44],bl
    4bdd:	45                   	rex.RB
    4bde:	43                   	rex.XB
    4bdf:	49                   	rex.WB
    4be0:	4d                   	rex.WRB
    4be1:	41                   	rex.B
    4be2:	4c 5f                	rex.WR pop rdi
    4be4:	44                   	rex.R
    4be5:	49                   	rex.WB
    4be6:	47 5f                	rex.RXB pop r15
    4be8:	5f                   	pop    rdi
    4be9:	20 33                	and    BYTE PTR [rbx],dh
    4beb:	36 00 5f 5f          	add    BYTE PTR ss:[rdi+0x5f],bl
    4bef:	50                   	push   rax
    4bf0:	54                   	push   rsp
    4bf1:	52                   	push   rdx
    4bf2:	44                   	rex.R
    4bf3:	49                   	rex.WB
    4bf4:	46                   	rex.RX
    4bf5:	46 5f                	rex.RX pop rdi
    4bf7:	57                   	push   rdi
    4bf8:	49                   	rex.WB
    4bf9:	44 54                	rex.R push rsp
    4bfb:	48 5f                	rex.W pop rdi
    4bfd:	5f                   	pop    rdi
    4bfe:	20 36                	and    BYTE PTR [rsi],dh
    4c00:	34 00                	xor    al,0x0
    4c02:	5f                   	pop    rdi
    4c03:	5f                   	pop    rdi
    4c04:	49                   	rex.WB
    4c05:	4e 54                	rex.WRX push rsp
    4c07:	5f                   	pop    rdi
    4c08:	4c                   	rex.WR
    4c09:	45                   	rex.RB
    4c0a:	41 53                	push   r11
    4c0c:	54                   	push   rsp
    4c0d:	33 32                	xor    esi,DWORD PTR [rdx]
    4c0f:	5f                   	pop    rdi
    4c10:	4d                   	rex.WRB
    4c11:	41 58                	pop    r8
    4c13:	5f                   	pop    rdi
    4c14:	5f                   	pop    rdi
    4c15:	20 30                	and    BYTE PTR [rax],dh
    4c17:	78 37                	js     4c50 <.debug_str+0x4c50>
    4c19:	66 66 66 66 66 66 66 	data16 data16 data16 data16 data16 data16 data16 add BYTE PTR [rdi+0x5f],bl
    4c20:	00 5f 5f 
    4c23:	55                   	push   rbp
    4c24:	49                   	rex.WB
    4c25:	4e 54                	rex.WRX push rsp
    4c27:	5f                   	pop    rdi
    4c28:	46                   	rex.RX
    4c29:	41 53                	push   r11
    4c2b:	54                   	push   rsp
    4c2c:	36 34 5f             	ss xor al,0x5f
    4c2f:	54                   	push   rsp
    4c30:	59                   	pop    rcx
    4c31:	50                   	push   rax
    4c32:	45 5f                	rex.RB pop r15
    4c34:	5f                   	pop    rdi
    4c35:	20 6c 6f 6e          	and    BYTE PTR [rdi+rbp*2+0x6e],ch
    4c39:	67 20 75 6e          	and    BYTE PTR [ebp+0x6e],dh
    4c3d:	73 69                	jae    4ca8 <.debug_str+0x4ca8>
    4c3f:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    4c41:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    4c46:	74 00                	je     4c48 <.debug_str+0x4c48>
    4c48:	5f                   	pop    rdi
    4c49:	5f                   	pop    rdi
    4c4a:	73 74                	jae    4cc0 <.debug_str+0x4cc0>
    4c4c:	75 62                	jne    4cb0 <.debug_str+0x4cb0>
    4c4e:	5f                   	pop    rdi
    4c4f:	73 73                	jae    4cc4 <.debug_str+0x4cc4>
    4c51:	74 6b                	je     4cbe <.debug_str+0x4cbe>
    4c53:	20 00                	and    BYTE PTR [rax],al
    4c55:	5f                   	pop    rdi
    4c56:	49                   	rex.WB
    4c57:	4f 5f                	rex.WRXB pop r15
    4c59:	66 70 6f             	data16 jo 4ccb <.debug_str+0x4ccb>
    4c5c:	73 36                	jae    4c94 <.debug_str+0x4c94>
    4c5e:	34 5f                	xor    al,0x5f
    4c60:	74 20                	je     4c82 <.debug_str+0x4c82>
    4c62:	5f                   	pop    rdi
    4c63:	47 5f                	rex.RXB pop r15
    4c65:	66 70 6f             	data16 jo 4cd7 <.debug_str+0x4cd7>
    4c68:	73 36                	jae    4ca0 <.debug_str+0x4ca0>
    4c6a:	34 5f                	xor    al,0x5f
    4c6c:	74 00                	je     4c6e <.debug_str+0x4c6e>
    4c6e:	5f                   	pop    rdi
    4c6f:	5f                   	pop    rdi
    4c70:	54                   	push   rsp
    4c71:	48 52                	rex.W push rdx
    4c73:	4f 57                	rex.WRXB push r15
    4c75:	4e                   	rex.WRX
    4c76:	4c 20 5f 5f          	rex.WR and BYTE PTR [rdi+0x5f],r11b
    4c7a:	61                   	(bad)  
    4c7b:	74 74                	je     4cf1 <.debug_str+0x4cf1>
    4c7d:	72 69                	jb     4ce8 <.debug_str+0x4ce8>
    4c7f:	62                   	(bad)  
    4c80:	75 74                	jne    4cf6 <.debug_str+0x4cf6>
    4c82:	65 5f                	gs pop rdi
    4c84:	5f                   	pop    rdi
    4c85:	20 28                	and    BYTE PTR [rax],ch
    4c87:	28 5f 5f             	sub    BYTE PTR [rdi+0x5f],bl
    4c8a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    4c8b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    4c8c:	74 68                	je     4cf6 <.debug_str+0x4cf6>
    4c8e:	72 6f                	jb     4cff <.debug_str+0x4cff>
    4c90:	77 5f                	ja     4cf1 <.debug_str+0x4cf1>
    4c92:	5f                   	pop    rdi
    4c93:	29 29                	sub    DWORD PTR [rcx],ebp
    4c95:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4c98:	4c                   	rex.WR
    4c99:	44                   	rex.R
    4c9a:	42                   	rex.X
    4c9b:	4c 5f                	rex.WR pop rdi
    4c9d:	4d                   	rex.WRB
    4c9e:	41 58                	pop    r8
    4ca0:	5f                   	pop    rdi
    4ca1:	31 30                	xor    DWORD PTR [rax],esi
    4ca3:	5f                   	pop    rdi
    4ca4:	45 58                	rex.RB pop r8
    4ca6:	50                   	push   rax
    4ca7:	5f                   	pop    rdi
    4ca8:	5f                   	pop    rdi
    4ca9:	20 34 39             	and    BYTE PTR [rcx+rdi*1],dh
    4cac:	33 32                	xor    esi,DWORD PTR [rdx]
    4cae:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4cb1:	44                   	rex.R
    4cb2:	45                   	rex.RB
    4cb3:	43                   	rex.XB
    4cb4:	36 34 5f             	ss xor al,0x5f
    4cb7:	4d                   	rex.WRB
    4cb8:	49                   	rex.WB
    4cb9:	4e 5f                	rex.WRX pop rdi
    4cbb:	5f                   	pop    rdi
    4cbc:	20 31                	and    BYTE PTR [rcx],dh
    4cbe:	45 2d 33 38 33 44    	rex.RB sub eax,0x44333833
    4cc4:	44 00 5f 5f          	add    BYTE PTR [rdi+0x5f],r11b
    4cc8:	46                   	rex.RX
    4cc9:	4c 54                	rex.WR push rsp
    4ccb:	33 32                	xor    esi,DWORD PTR [rdx]
    4ccd:	5f                   	pop    rdi
    4cce:	4d                   	rex.WRB
    4ccf:	41 58                	pop    r8
    4cd1:	5f                   	pop    rdi
    4cd2:	5f                   	pop    rdi
    4cd3:	20 33                	and    BYTE PTR [rbx],dh
    4cd5:	2e 34 30             	cs xor al,0x30
    4cd8:	32 38                	xor    bh,BYTE PTR [rax]
    4cda:	32 33                	xor    dh,BYTE PTR [rbx]
    4cdc:	34 36                	xor    al,0x36
    4cde:	36 33 38             	xor    edi,DWORD PTR ss:[rax]
    4ce1:	35 32 38 38 35       	xor    eax,0x35383832
    4ce6:	39 38                	cmp    DWORD PTR [rax],edi
    4ce8:	31 31                	xor    DWORD PTR [rcx],esi
    4cea:	37                   	(bad)  
    4ceb:	30 34 31             	xor    BYTE PTR [rcx+rsi*1],dh
    4cee:	38 33                	cmp    BYTE PTR [rbx],dh
    4cf0:	34 38                	xor    al,0x38
    4cf2:	34 35                	xor    al,0x35
    4cf4:	31 36                	xor    DWORD PTR [rsi],esi
    4cf6:	39 32                	cmp    DWORD PTR [rdx],esi
    4cf8:	35 65 2b 33 38       	xor    eax,0x38332b65
    4cfd:	46 33 32             	rex.RX xor r14d,DWORD PTR [rdx]
    4d00:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4d03:	44                   	rex.R
    4d04:	42                   	rex.X
    4d05:	4c 5f                	rex.WR pop rdi
    4d07:	45 50                	rex.RB push r8
    4d09:	53                   	push   rbx
    4d0a:	49                   	rex.WB
    4d0b:	4c                   	rex.WR
    4d0c:	4f                   	rex.WRXB
    4d0d:	4e 5f                	rex.WRX pop rdi
    4d0f:	5f                   	pop    rdi
    4d10:	20 28                	and    BYTE PTR [rax],ch
    4d12:	28 64 6f 75          	sub    BYTE PTR [rdi+rbp*2+0x75],ah
    4d16:	62                   	(bad)  
    4d17:	6c                   	ins    BYTE PTR es:[rdi],dx
    4d18:	65 29 32             	sub    DWORD PTR gs:[rdx],esi
    4d1b:	2e 32 32             	xor    dh,BYTE PTR cs:[rdx]
    4d1e:	30 34 34             	xor    BYTE PTR [rsp+rsi*1],dh
    4d21:	36 30 34 39          	xor    BYTE PTR ss:[rcx+rdi*1],dh
    4d25:	32 35 30 33 31 33    	xor    dh,BYTE PTR [rip+0x33313330]        # 3331805b <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x3331805b>
    4d2b:	30 38                	xor    BYTE PTR [rax],bh
    4d2d:	30 38                	xor    BYTE PTR [rax],bh
    4d2f:	34 37                	xor    al,0x37
    4d31:	32 36                	xor    dh,BYTE PTR [rsi]
    4d33:	33 33                	xor    esi,DWORD PTR [rbx]
    4d35:	33 36                	xor    esi,DWORD PTR [rsi]
    4d37:	31 38                	xor    DWORD PTR [rax],edi
    4d39:	31 36                	xor    DWORD PTR [rsi],esi
    4d3b:	34 30                	xor    al,0x30
    4d3d:	36 32 65 2d          	xor    ah,BYTE PTR ss:[rbp+0x2d]
    4d41:	31 36                	xor    DWORD PTR [rsi],esi
    4d43:	4c 29 00             	sub    QWORD PTR [rax],r8
    4d46:	5f                   	pop    rdi
    4d47:	63 75 72             	movsxd esi,DWORD PTR [rbp+0x72]
    4d4a:	5f                   	pop    rdi
    4d4b:	63 6f 6c             	movsxd ebp,DWORD PTR [rdi+0x6c]
    4d4e:	75 6d                	jne    4dbd <.debug_str+0x4dbd>
    4d50:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    4d51:	00 75 6e             	add    BYTE PTR [rbp+0x6e],dh
    4d54:	69 78 20 31 00 5f 5f 	imul   edi,DWORD PTR [rax+0x20],0x5f5f0031
    4d5b:	50                   	push   rax
    4d5c:	52                   	push   rdx
    4d5d:	41                   	rex.B
    4d5e:	47                   	rex.RXB
    4d5f:	4d                   	rex.WRB
    4d60:	41 5f                	pop    r15
    4d62:	52                   	push   rdx
    4d63:	45                   	rex.RB
    4d64:	44                   	rex.R
    4d65:	45                   	rex.RB
    4d66:	46                   	rex.RX
    4d67:	49                   	rex.WB
    4d68:	4e                   	rex.WRX
    4d69:	45 5f                	rex.RB pop r15
    4d6b:	45 58                	rex.RB pop r8
    4d6d:	54                   	push   rsp
    4d6e:	4e                   	rex.WRX
    4d6f:	41                   	rex.B
    4d70:	4d                   	rex.WRB
    4d71:	45 20 31             	and    BYTE PTR [r9],r14b
    4d74:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4d77:	53                   	push   rbx
    4d78:	49                   	rex.WB
    4d79:	47 5f                	rex.RXB pop r15
    4d7b:	41 54                	push   r12
    4d7d:	4f                   	rex.WRXB
    4d7e:	4d                   	rex.WRB
    4d7f:	49                   	rex.WB
    4d80:	43 5f                	rex.XB pop r15
    4d82:	54                   	push   rsp
    4d83:	59                   	pop    rcx
    4d84:	50                   	push   rax
    4d85:	45 5f                	rex.RB pop r15
    4d87:	5f                   	pop    rdi
    4d88:	20 69 6e             	and    BYTE PTR [rcx+0x6e],ch
    4d8b:	74 00                	je     4d8d <.debug_str+0x4d8d>
    4d8d:	5f                   	pop    rdi
    4d8e:	5f                   	pop    rdi
    4d8f:	46                   	rex.RX
    4d90:	4c 54                	rex.WR push rsp
    4d92:	36 34 58             	ss xor al,0x58
    4d95:	5f                   	pop    rdi
    4d96:	44                   	rex.R
    4d97:	45                   	rex.RB
    4d98:	4e                   	rex.WRX
    4d99:	4f 52                	rex.WRXB push r10
    4d9b:	4d 5f                	rex.WRB pop r15
    4d9d:	4d                   	rex.WRB
    4d9e:	49                   	rex.WB
    4d9f:	4e 5f                	rex.WRX pop rdi
    4da1:	5f                   	pop    rdi
    4da2:	20 33                	and    BYTE PTR [rbx],dh
    4da4:	2e 36 34 35          	cs ss xor al,0x35
    4da8:	31 39                	xor    DWORD PTR [rcx],edi
    4daa:	39 35 33 31 38 38    	cmp    DWORD PTR [rip+0x38383133],esi        # 38387ee3 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x38387ee3>
    4db0:	32 34 37             	xor    dh,BYTE PTR [rdi+rsi*1]
    4db3:	34 36                	xor    al,0x36
    4db5:	30 32                	xor    BYTE PTR [rdx],dh
    4db7:	35 32 38 34 30       	xor    eax,0x30343832
    4dbc:	35 39 33 33 36       	xor    eax,0x36333339
    4dc1:	31 39                	xor    DWORD PTR [rcx],edi
    4dc3:	34 31                	xor    al,0x31
    4dc5:	39 38                	cmp    DWORD PTR [rax],edi
    4dc7:	32 65 2d             	xor    ah,BYTE PTR [rbp+0x2d]
    4dca:	34 39                	xor    al,0x39
    4dcc:	35 31 46 36 34       	xor    eax,0x34364631
    4dd1:	78 00                	js     4dd3 <.debug_str+0x4dd3>
    4dd3:	5f                   	pop    rdi
    4dd4:	5f                   	pop    rdi
    4dd5:	55                   	push   rbp
    4dd6:	53                   	push   rbx
    4dd7:	45 5f                	rex.RB pop r15
    4dd9:	50                   	push   rax
    4dda:	4f 53                	rex.WRXB push r11
    4ddc:	49 58                	rex.WB pop r8
    4dde:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4de1:	46                   	rex.RX
    4de2:	4c 54                	rex.WR push rsp
    4de4:	31 32                	xor    DWORD PTR [rdx],esi
    4de6:	38 5f 48             	cmp    BYTE PTR [rdi+0x48],bl
    4de9:	41 53                	push   r11
    4deb:	5f                   	pop    rdi
    4dec:	44                   	rex.R
    4ded:	45                   	rex.RB
    4dee:	4e                   	rex.WRX
    4def:	4f 52                	rex.WRXB push r10
    4df1:	4d 5f                	rex.WRB pop r15
    4df3:	5f                   	pop    rdi
    4df4:	20 31                	and    BYTE PTR [rcx],dh
    4df6:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    4df9:	4f 5f                	rex.WRXB pop r15
    4dfb:	43 55                	rex.XB push r13
    4dfd:	52                   	push   rdx
    4dfe:	52                   	push   rdx
    4dff:	45                   	rex.RB
    4e00:	4e 54                	rex.WRX push rsp
    4e02:	4c 59                	rex.WR pop rcx
    4e04:	5f                   	pop    rdi
    4e05:	50                   	push   rax
    4e06:	55                   	push   rbp
    4e07:	54                   	push   rsp
    4e08:	54                   	push   rsp
    4e09:	49                   	rex.WB
    4e0a:	4e                   	rex.WRX
    4e0b:	47 20 30             	rex.RXB and BYTE PTR [r8],r14b
    4e0e:	78 38                	js     4e48 <.debug_str+0x4e48>
    4e10:	30 30                	xor    BYTE PTR [rax],dh
    4e12:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4e15:	44                   	rex.R
    4e16:	42                   	rex.X
    4e17:	4c 5f                	rex.WR pop rdi
    4e19:	44                   	rex.R
    4e1a:	45                   	rex.RB
    4e1b:	43                   	rex.XB
    4e1c:	49                   	rex.WB
    4e1d:	4d                   	rex.WRB
    4e1e:	41                   	rex.B
    4e1f:	4c 5f                	rex.WR pop rdi
    4e21:	44                   	rex.R
    4e22:	49                   	rex.WB
    4e23:	47 5f                	rex.RXB pop r15
    4e25:	5f                   	pop    rdi
    4e26:	20 31                	and    BYTE PTR [rcx],dh
    4e28:	37                   	(bad)  
    4e29:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4e2c:	4c                   	rex.WR
    4e2d:	44                   	rex.R
    4e2e:	42                   	rex.X
    4e2f:	4c 5f                	rex.WR pop rdi
    4e31:	48                   	rex.W
    4e32:	41 53                	push   r11
    4e34:	5f                   	pop    rdi
    4e35:	44                   	rex.R
    4e36:	45                   	rex.RB
    4e37:	4e                   	rex.WRX
    4e38:	4f 52                	rex.WRXB push r10
    4e3a:	4d 5f                	rex.WRB pop r15
    4e3c:	5f                   	pop    rdi
    4e3d:	20 31                	and    BYTE PTR [rcx],dh
    4e3f:	00 5f 75             	add    BYTE PTR [rdi+0x75],bl
    4e42:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    4e43:	75 73                	jne    4eb8 <.debug_str+0x4eb8>
    4e45:	65 64 32 00          	gs xor al,BYTE PTR fs:[rax]
    4e49:	5f                   	pop    rdi
    4e4a:	49                   	rex.WB
    4e4b:	4f 5f                	rex.WRXB pop r15
    4e4d:	62                   	(bad)  
    4e4e:	75 66                	jne    4eb6 <.debug_str+0x4eb6>
    4e50:	5f                   	pop    rdi
    4e51:	62 61                	(bad)  
    4e53:	73 65                	jae    4eba <.debug_str+0x4eba>
    4e55:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4e58:	73 74                	jae    4ece <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x4ece>
    4e5a:	75 62                	jne    4ebe <.debug_str+0x4ebe>
    4e5c:	5f                   	pop    rdi
    4e5d:	6c                   	ins    BYTE PTR es:[rdi],dx
    4e5e:	63 68 6d             	movsxd ebp,DWORD PTR [rax+0x6d]
    4e61:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    4e62:	64 20 00             	and    BYTE PTR fs:[rax],al
    4e65:	5f                   	pop    rdi
    4e66:	5f                   	pop    rdi
    4e67:	46                   	rex.RX
    4e68:	4c 54                	rex.WR push rsp
    4e6a:	36 34 5f             	ss xor al,0x5f
    4e6d:	4d                   	rex.WRB
    4e6e:	41                   	rex.B
    4e6f:	4e 54                	rex.WRX push rsp
    4e71:	5f                   	pop    rdi
    4e72:	44                   	rex.R
    4e73:	49                   	rex.WB
    4e74:	47 5f                	rex.RXB pop r15
    4e76:	5f                   	pop    rdi
    4e77:	20 35 33 00 5f 5f    	and    BYTE PTR [rip+0x5f5f0033],dh        # 5f5f4eb0 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x5f5f4eb0>
    4e7d:	44                   	rex.R
    4e7e:	45                   	rex.RB
    4e7f:	43                   	rex.XB
    4e80:	36 34 5f             	ss xor al,0x5f
    4e83:	4d                   	rex.WRB
    4e84:	41                   	rex.B
    4e85:	4e 54                	rex.WRX push rsp
    4e87:	5f                   	pop    rdi
    4e88:	44                   	rex.R
    4e89:	49                   	rex.WB
    4e8a:	47 5f                	rex.RXB pop r15
    4e8c:	5f                   	pop    rdi
    4e8d:	20 31                	and    BYTE PTR [rcx],dh
    4e8f:	36 00 5f 5f          	add    BYTE PTR ss:[rdi+0x5f],bl
    4e93:	46                   	rex.RX
    4e94:	4c 54                	rex.WR push rsp
    4e96:	5f                   	pop    rdi
    4e97:	48                   	rex.W
    4e98:	41 53                	push   r11
    4e9a:	5f                   	pop    rdi
    4e9b:	44                   	rex.R
    4e9c:	45                   	rex.RB
    4e9d:	4e                   	rex.WRX
    4e9e:	4f 52                	rex.WRXB push r10
    4ea0:	4d 5f                	rex.WRB pop r15
    4ea2:	5f                   	pop    rdi
    4ea3:	20 31                	and    BYTE PTR [rcx],dh
    4ea5:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    4ea8:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    4ea9:	66 66 36 34 5f       	data16 data16 ss xor al,0x5f
    4eae:	74 00                	je     4eb0 <.debug_str+0x4eb0>
    4eb0:	5f                   	pop    rdi
    4eb1:	5f                   	pop    rdi
    4eb2:	44                   	rex.R
    4eb3:	45                   	rex.RB
    4eb4:	43                   	rex.XB
    4eb5:	49                   	rex.WB
    4eb6:	4d                   	rex.WRB
    4eb7:	41                   	rex.B
    4eb8:	4c 5f                	rex.WR pop rdi
    4eba:	44                   	rex.R
    4ebb:	49                   	rex.WB
    4ebc:	47 5f                	rex.RXB pop r15
    4ebe:	5f                   	pop    rdi
    4ebf:	20 32                	and    BYTE PTR [rdx],dh
    4ec1:	31 00                	xor    DWORD PTR [rax],eax

Disassembly of section .comment:

0000000000000000 <.comment>:
int main(int argc, char * argv[]) {
   0:	00 47 43             	add    BYTE PTR [rdi+0x43],al
   3:	43 3a 20             	rex.XB cmp spl,BYTE PTR [r8]
   6:	28 55 62             	sub    BYTE PTR [rbp+0x62],dl
   9:	75 6e                	jne    79 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x79>
   b:	74 75                	je     82 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x82>
   d:	20 37                	and    BYTE PTR [rdi],dh
   f:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  12:	30 2d 32 37 75 62    	xor    BYTE PTR [rip+0x62753732],ch        # 6275374a <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x6275374a>
  18:	75 6e                	jne    88 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x88>
  1a:	74 75                	je     91 <wm4.0.52c9fc51a3c7999e669b5384b1132782+0x91>
  1c:	31 7e 31             	xor    DWORD PTR [rsi+0x31],edi
	b = 5;
  1f:	38 2e                	cmp    BYTE PTR [rsi],ch
  21:	30 34 29             	xor    BYTE PTR [rcx+rbp*1],dh
  24:	20 37                	and    BYTE PTR [rdi],dh
	printf ("Enter a number between 1 and 10 -> ");
  26:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  29:	30 00                	xor    BYTE PTR [rax],al

Disassembly of section .eh_frame:

0000000000000000 <.eh_frame>:
   0:	14 00                	adc    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   4:	00 00                	add    BYTE PTR [rax],al
   6:	00 00                	add    BYTE PTR [rax],al
   8:	01 7a 52             	add    DWORD PTR [rdx+0x52],edi
   b:	00 01                	add    BYTE PTR [rcx],al
   d:	78 10                	js     1f <.eh_frame+0x1f>
   f:	01 1b                	add    DWORD PTR [rbx],ebx
  11:	0c 07                	or     al,0x7
  13:	08 90 01 00 00 1c    	or     BYTE PTR [rax+0x1c000001],dl
  19:	00 00                	add    BYTE PTR [rax],al
  1b:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  1e:	00 00                	add    BYTE PTR [rax],al
  20:	00 00                	add    BYTE PTR [rax],al
			20: R_X86_64_PC32	.text
  22:	00 00                	add    BYTE PTR [rax],al
  24:	7d 00                	jge    26 <.eh_frame+0x26>
  26:	00 00                	add    BYTE PTR [rax],al
  28:	00 41 0e             	add    BYTE PTR [rcx+0xe],al
  2b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  31:	02 78 0c             	add    bh,BYTE PTR [rax+0xc]
  34:	07                   	(bad)  
  35:	08 00                	or     BYTE PTR [rax],al
	...
Contents of the .debug_info section:

  Compilation Unit @ offset 0x0:
   Length:        0x35c (32-bit)
   Version:       4
   Abbrev Offset: 0x0
   Pointer Size:  8
 <0><b>: Abbrev Number: 1 (DW_TAG_compile_unit)
    <c>   DW_AT_producer    : (indirect string, offset: 0xc4a): GNU C11 7.3.0 -mtune=generic -march=x86-64 -ggdb3 -fstack-protector-strong
    <10>   DW_AT_language    : 12	(ANSI C99)
    <11>   DW_AT_name        : (indirect string, offset: 0xd47): if_then.c
    <15>   DW_AT_comp_dir    : (indirect string, offset: 0x740): /home/ubuntu/Engineering/Programming/Disassembling-Binaries/C/Intel_architecture/AMD64/Conditionals/With_Debug_Info
    <19>   DW_AT_low_pc      : 0x0
    <21>   DW_AT_high_pc     : 0x7d
    <29>   DW_AT_stmt_list   : 0x0
    <2d>   DW_AT_GNU_macros  : 0x0
 <1><31>: Abbrev Number: 2 (DW_TAG_typedef)
    <32>   DW_AT_name        : (indirect string, offset: 0x1890): size_t
    <36>   DW_AT_decl_file   : 2
    <37>   DW_AT_decl_line   : 216
    <38>   DW_AT_type        : <0x3c>
 <1><3c>: Abbrev Number: 3 (DW_TAG_base_type)
    <3d>   DW_AT_byte_size   : 8
    <3e>   DW_AT_encoding    : 7	(unsigned)
    <3f>   DW_AT_name        : (indirect string, offset: 0x3d59): long unsigned int
 <1><43>: Abbrev Number: 3 (DW_TAG_base_type)
    <44>   DW_AT_byte_size   : 1
    <45>   DW_AT_encoding    : 8	(unsigned char)
    <46>   DW_AT_name        : (indirect string, offset: 0x419b): unsigned char
 <1><4a>: Abbrev Number: 3 (DW_TAG_base_type)
    <4b>   DW_AT_byte_size   : 2
    <4c>   DW_AT_encoding    : 7	(unsigned)
    <4d>   DW_AT_name        : (indirect string, offset: 0x4801): short unsigned int
 <1><51>: Abbrev Number: 3 (DW_TAG_base_type)
    <52>   DW_AT_byte_size   : 4
    <53>   DW_AT_encoding    : 7	(unsigned)
    <54>   DW_AT_name        : (indirect string, offset: 0x630): unsigned int
 <1><58>: Abbrev Number: 3 (DW_TAG_base_type)
    <59>   DW_AT_byte_size   : 1
    <5a>   DW_AT_encoding    : 6	(signed char)
    <5b>   DW_AT_name        : (indirect string, offset: 0x47a0): signed char
 <1><5f>: Abbrev Number: 3 (DW_TAG_base_type)
    <60>   DW_AT_byte_size   : 2
    <61>   DW_AT_encoding    : 5	(signed)
    <62>   DW_AT_name        : (indirect string, offset: 0x3496): short int
 <1><66>: Abbrev Number: 4 (DW_TAG_base_type)
    <67>   DW_AT_byte_size   : 4
    <68>   DW_AT_encoding    : 5	(signed)
    <69>   DW_AT_name        : int
 <1><6d>: Abbrev Number: 3 (DW_TAG_base_type)
    <6e>   DW_AT_byte_size   : 8
    <6f>   DW_AT_encoding    : 5	(signed)
    <70>   DW_AT_name        : (indirect string, offset: 0x3510): long int
 <1><74>: Abbrev Number: 2 (DW_TAG_typedef)
    <75>   DW_AT_name        : (indirect string, offset: 0x4788): __off_t
    <79>   DW_AT_decl_file   : 3
    <7a>   DW_AT_decl_line   : 140
    <7b>   DW_AT_type        : <0x6d>
 <1><7f>: Abbrev Number: 2 (DW_TAG_typedef)
    <80>   DW_AT_name        : (indirect string, offset: 0x4ea6): __off64_t
    <84>   DW_AT_decl_file   : 3
    <85>   DW_AT_decl_line   : 141
    <86>   DW_AT_type        : <0x6d>
 <1><8a>: Abbrev Number: 5 (DW_TAG_pointer_type)
    <8b>   DW_AT_byte_size   : 8
 <1><8c>: Abbrev Number: 6 (DW_TAG_pointer_type)
    <8d>   DW_AT_byte_size   : 8
    <8e>   DW_AT_type        : <0x92>
 <1><92>: Abbrev Number: 3 (DW_TAG_base_type)
    <93>   DW_AT_byte_size   : 1
    <94>   DW_AT_encoding    : 6	(signed char)
    <95>   DW_AT_name        : (indirect string, offset: 0x29b): char
 <1><99>: Abbrev Number: 7 (DW_TAG_const_type)
    <9a>   DW_AT_type        : <0x92>
 <1><9e>: Abbrev Number: 8 (DW_TAG_structure_type)
    <9f>   DW_AT_name        : (indirect string, offset: 0x3de4): _IO_FILE
    <a3>   DW_AT_byte_size   : 216
    <a4>   DW_AT_decl_file   : 4
    <a5>   DW_AT_decl_line   : 245
    <a6>   DW_AT_sibling     : <0x21e>
 <2><aa>: Abbrev Number: 9 (DW_TAG_member)
    <ab>   DW_AT_name        : (indirect string, offset: 0x7cd): _flags
    <af>   DW_AT_decl_file   : 4
    <b0>   DW_AT_decl_line   : 246
    <b1>   DW_AT_type        : <0x66>
    <b5>   DW_AT_data_member_location: 0
 <2><b6>: Abbrev Number: 9 (DW_TAG_member)
    <b7>   DW_AT_name        : (indirect string, offset: 0x213a): _IO_read_ptr
    <bb>   DW_AT_decl_file   : 4
    <bc>   DW_AT_decl_line   : 251
    <bd>   DW_AT_type        : <0x8c>
    <c1>   DW_AT_data_member_location: 8
 <2><c2>: Abbrev Number: 9 (DW_TAG_member)
    <c3>   DW_AT_name        : (indirect string, offset: 0x338b): _IO_read_end
    <c7>   DW_AT_decl_file   : 4
    <c8>   DW_AT_decl_line   : 252
    <c9>   DW_AT_type        : <0x8c>
    <cd>   DW_AT_data_member_location: 16
 <2><ce>: Abbrev Number: 9 (DW_TAG_member)
    <cf>   DW_AT_name        : (indirect string, offset: 0x198c): _IO_read_base
    <d3>   DW_AT_decl_file   : 4
    <d4>   DW_AT_decl_line   : 253
    <d5>   DW_AT_type        : <0x8c>
    <d9>   DW_AT_data_member_location: 24
 <2><da>: Abbrev Number: 9 (DW_TAG_member)
    <db>   DW_AT_name        : (indirect string, offset: 0x251e): _IO_write_base
    <df>   DW_AT_decl_file   : 4
    <e0>   DW_AT_decl_line   : 254
    <e1>   DW_AT_type        : <0x8c>
    <e5>   DW_AT_data_member_location: 32
 <2><e6>: Abbrev Number: 9 (DW_TAG_member)
    <e7>   DW_AT_name        : (indirect string, offset: 0x427e): _IO_write_ptr
    <eb>   DW_AT_decl_file   : 4
    <ec>   DW_AT_decl_line   : 255
    <ed>   DW_AT_type        : <0x8c>
    <f1>   DW_AT_data_member_location: 40
 <2><f2>: Abbrev Number: 10 (DW_TAG_member)
    <f3>   DW_AT_name        : (indirect string, offset: 0x622): _IO_write_end
    <f7>   DW_AT_decl_file   : 4
    <f8>   DW_AT_decl_line   : 256
    <fa>   DW_AT_type        : <0x8c>
    <fe>   DW_AT_data_member_location: 48
 <2><ff>: Abbrev Number: 10 (DW_TAG_member)
    <100>   DW_AT_name        : (indirect string, offset: 0x4e49): _IO_buf_base
    <104>   DW_AT_decl_file   : 4
    <105>   DW_AT_decl_line   : 257
    <107>   DW_AT_type        : <0x8c>
    <10b>   DW_AT_data_member_location: 56
 <2><10c>: Abbrev Number: 10 (DW_TAG_member)
    <10d>   DW_AT_name        : (indirect string, offset: 0x314): _IO_buf_end
    <111>   DW_AT_decl_file   : 4
    <112>   DW_AT_decl_line   : 258
    <114>   DW_AT_type        : <0x8c>
    <118>   DW_AT_data_member_location: 64
 <2><119>: Abbrev Number: 10 (DW_TAG_member)
    <11a>   DW_AT_name        : (indirect string, offset: 0x2659): _IO_save_base
    <11e>   DW_AT_decl_file   : 4
    <11f>   DW_AT_decl_line   : 260
    <121>   DW_AT_type        : <0x8c>
    <125>   DW_AT_data_member_location: 72
 <2><126>: Abbrev Number: 10 (DW_TAG_member)
    <127>   DW_AT_name        : (indirect string, offset: 0x435c): _IO_backup_base
    <12b>   DW_AT_decl_file   : 4
    <12c>   DW_AT_decl_line   : 261
    <12e>   DW_AT_type        : <0x8c>
    <132>   DW_AT_data_member_location: 80
 <2><133>: Abbrev Number: 10 (DW_TAG_member)
    <134>   DW_AT_name        : (indirect string, offset: 0x1066): _IO_save_end
    <138>   DW_AT_decl_file   : 4
    <139>   DW_AT_decl_line   : 262
    <13b>   DW_AT_type        : <0x8c>
    <13f>   DW_AT_data_member_location: 88
 <2><140>: Abbrev Number: 10 (DW_TAG_member)
    <141>   DW_AT_name        : (indirect string, offset: 0x99d): _markers
    <145>   DW_AT_decl_file   : 4
    <146>   DW_AT_decl_line   : 264
    <148>   DW_AT_type        : <0x256>
    <14c>   DW_AT_data_member_location: 96
 <2><14d>: Abbrev Number: 10 (DW_TAG_member)
    <14e>   DW_AT_name        : (indirect string, offset: 0x4b2e): _chain
    <152>   DW_AT_decl_file   : 4
    <153>   DW_AT_decl_line   : 266
    <155>   DW_AT_type        : <0x25c>
    <159>   DW_AT_data_member_location: 104
 <2><15a>: Abbrev Number: 10 (DW_TAG_member)
    <15b>   DW_AT_name        : (indirect string, offset: 0x1718): _fileno
    <15f>   DW_AT_decl_file   : 4
    <160>   DW_AT_decl_line   : 268
    <162>   DW_AT_type        : <0x66>
    <166>   DW_AT_data_member_location: 112
 <2><167>: Abbrev Number: 10 (DW_TAG_member)
    <168>   DW_AT_name        : (indirect string, offset: 0x8d6): _flags2
    <16c>   DW_AT_decl_file   : 4
    <16d>   DW_AT_decl_line   : 272
    <16f>   DW_AT_type        : <0x66>
    <173>   DW_AT_data_member_location: 116
 <2><174>: Abbrev Number: 10 (DW_TAG_member)
    <175>   DW_AT_name        : (indirect string, offset: 0x3dd2): _old_offset
    <179>   DW_AT_decl_file   : 4
    <17a>   DW_AT_decl_line   : 274
    <17c>   DW_AT_type        : <0x74>
    <180>   DW_AT_data_member_location: 120
 <2><181>: Abbrev Number: 10 (DW_TAG_member)
    <182>   DW_AT_name        : (indirect string, offset: 0x4d46): _cur_column
    <186>   DW_AT_decl_file   : 4
    <187>   DW_AT_decl_line   : 278
    <189>   DW_AT_type        : <0x4a>
    <18d>   DW_AT_data_member_location: 128
 <2><18e>: Abbrev Number: 10 (DW_TAG_member)
    <18f>   DW_AT_name        : (indirect string, offset: 0x18a5): _vtable_offset
    <193>   DW_AT_decl_file   : 4
    <194>   DW_AT_decl_line   : 279
    <196>   DW_AT_type        : <0x58>
    <19a>   DW_AT_data_member_location: 130
 <2><19b>: Abbrev Number: 10 (DW_TAG_member)
    <19c>   DW_AT_name        : (indirect string, offset: 0x16e): _shortbuf
    <1a0>   DW_AT_decl_file   : 4
    <1a1>   DW_AT_decl_line   : 280
    <1a3>   DW_AT_type        : <0x262>
    <1a7>   DW_AT_data_member_location: 131
 <2><1a8>: Abbrev Number: 10 (DW_TAG_member)
    <1a9>   DW_AT_name        : (indirect string, offset: 0x3ca1): _lock
    <1ad>   DW_AT_decl_file   : 4
    <1ae>   DW_AT_decl_line   : 284
    <1b0>   DW_AT_type        : <0x272>
    <1b4>   DW_AT_data_member_location: 136
 <2><1b5>: Abbrev Number: 10 (DW_TAG_member)
    <1b6>   DW_AT_name        : (indirect string, offset: 0x15e8): _offset
    <1ba>   DW_AT_decl_file   : 4
    <1bb>   DW_AT_decl_line   : 293
    <1bd>   DW_AT_type        : <0x7f>
    <1c1>   DW_AT_data_member_location: 144
 <2><1c2>: Abbrev Number: 10 (DW_TAG_member)
    <1c3>   DW_AT_name        : (indirect string, offset: 0x2bac): __pad1
    <1c7>   DW_AT_decl_file   : 4
    <1c8>   DW_AT_decl_line   : 301
    <1ca>   DW_AT_type        : <0x8a>
    <1ce>   DW_AT_data_member_location: 152
 <2><1cf>: Abbrev Number: 10 (DW_TAG_member)
    <1d0>   DW_AT_name        : (indirect string, offset: 0x2bb3): __pad2
    <1d4>   DW_AT_decl_file   : 4
    <1d5>   DW_AT_decl_line   : 302
    <1d7>   DW_AT_type        : <0x8a>
    <1db>   DW_AT_data_member_location: 160
 <2><1dc>: Abbrev Number: 10 (DW_TAG_member)
    <1dd>   DW_AT_name        : (indirect string, offset: 0x2bba): __pad3
    <1e1>   DW_AT_decl_file   : 4
    <1e2>   DW_AT_decl_line   : 303
    <1e4>   DW_AT_type        : <0x8a>
    <1e8>   DW_AT_data_member_location: 168
 <2><1e9>: Abbrev Number: 10 (DW_TAG_member)
    <1ea>   DW_AT_name        : (indirect string, offset: 0x2bc1): __pad4
    <1ee>   DW_AT_decl_file   : 4
    <1ef>   DW_AT_decl_line   : 304
    <1f1>   DW_AT_type        : <0x8a>
    <1f5>   DW_AT_data_member_location: 176
 <2><1f6>: Abbrev Number: 10 (DW_TAG_member)
    <1f7>   DW_AT_name        : (indirect string, offset: 0x2bc8): __pad5
    <1fb>   DW_AT_decl_file   : 4
    <1fc>   DW_AT_decl_line   : 306
    <1fe>   DW_AT_type        : <0x31>
    <202>   DW_AT_data_member_location: 184
 <2><203>: Abbrev Number: 10 (DW_TAG_member)
    <204>   DW_AT_name        : (indirect string, offset: 0x1fb2): _mode
    <208>   DW_AT_decl_file   : 4
    <209>   DW_AT_decl_line   : 307
    <20b>   DW_AT_type        : <0x66>
    <20f>   DW_AT_data_member_location: 192
 <2><210>: Abbrev Number: 10 (DW_TAG_member)
    <211>   DW_AT_name        : (indirect string, offset: 0x4e40): _unused2
    <215>   DW_AT_decl_file   : 4
    <216>   DW_AT_decl_line   : 309
    <218>   DW_AT_type        : <0x278>
    <21c>   DW_AT_data_member_location: 196
 <2><21d>: Abbrev Number: 0
 <1><21e>: Abbrev Number: 11 (DW_TAG_typedef)
    <21f>   DW_AT_name        : (indirect string, offset: 0x219): _IO_lock_t
    <223>   DW_AT_decl_file   : 4
    <224>   DW_AT_decl_line   : 154
 <1><225>: Abbrev Number: 8 (DW_TAG_structure_type)
    <226>   DW_AT_name        : (indirect string, offset: 0x1c42): _IO_marker
    <22a>   DW_AT_byte_size   : 24
    <22b>   DW_AT_decl_file   : 4
    <22c>   DW_AT_decl_line   : 160
    <22d>   DW_AT_sibling     : <0x256>
 <2><231>: Abbrev Number: 9 (DW_TAG_member)
    <232>   DW_AT_name        : (indirect string, offset: 0x1ad3): _next
    <236>   DW_AT_decl_file   : 4
    <237>   DW_AT_decl_line   : 161
    <238>   DW_AT_type        : <0x256>
    <23c>   DW_AT_data_member_location: 0
 <2><23d>: Abbrev Number: 9 (DW_TAG_member)
    <23e>   DW_AT_name        : (indirect string, offset: 0x423e): _sbuf
    <242>   DW_AT_decl_file   : 4
    <243>   DW_AT_decl_line   : 162
    <244>   DW_AT_type        : <0x25c>
    <248>   DW_AT_data_member_location: 8
 <2><249>: Abbrev Number: 9 (DW_TAG_member)
    <24a>   DW_AT_name        : (indirect string, offset: 0xf84): _pos
    <24e>   DW_AT_decl_file   : 4
    <24f>   DW_AT_decl_line   : 166
    <250>   DW_AT_type        : <0x66>
    <254>   DW_AT_data_member_location: 16
 <2><255>: Abbrev Number: 0
 <1><256>: Abbrev Number: 6 (DW_TAG_pointer_type)
    <257>   DW_AT_byte_size   : 8
    <258>   DW_AT_type        : <0x225>
 <1><25c>: Abbrev Number: 6 (DW_TAG_pointer_type)
    <25d>   DW_AT_byte_size   : 8
    <25e>   DW_AT_type        : <0x9e>
 <1><262>: Abbrev Number: 12 (DW_TAG_array_type)
    <263>   DW_AT_type        : <0x92>
    <267>   DW_AT_sibling     : <0x272>
 <2><26b>: Abbrev Number: 13 (DW_TAG_subrange_type)
    <26c>   DW_AT_type        : <0x3c>
    <270>   DW_AT_upper_bound : 0
 <2><271>: Abbrev Number: 0
 <1><272>: Abbrev Number: 6 (DW_TAG_pointer_type)
    <273>   DW_AT_byte_size   : 8
    <274>   DW_AT_type        : <0x21e>
 <1><278>: Abbrev Number: 12 (DW_TAG_array_type)
    <279>   DW_AT_type        : <0x92>
    <27d>   DW_AT_sibling     : <0x288>
 <2><281>: Abbrev Number: 13 (DW_TAG_subrange_type)
    <282>   DW_AT_type        : <0x3c>
    <286>   DW_AT_upper_bound : 19
 <2><287>: Abbrev Number: 0
 <1><288>: Abbrev Number: 14 (DW_TAG_structure_type)
    <289>   DW_AT_name        : (indirect string, offset: 0x394d): _IO_FILE_plus
    <28d>   DW_AT_declaration : 1
 <1><28d>: Abbrev Number: 15 (DW_TAG_variable)
    <28e>   DW_AT_name        : (indirect string, offset: 0x2592): _IO_2_1_stdin_
    <292>   DW_AT_decl_file   : 4
    <293>   DW_AT_decl_line   : 319
    <295>   DW_AT_type        : <0x288>
    <299>   DW_AT_external    : 1
    <299>   DW_AT_declaration : 1
 <1><299>: Abbrev Number: 15 (DW_TAG_variable)
    <29a>   DW_AT_name        : (indirect string, offset: 0x2609): _IO_2_1_stdout_
    <29e>   DW_AT_decl_file   : 4
    <29f>   DW_AT_decl_line   : 320
    <2a1>   DW_AT_type        : <0x288>
    <2a5>   DW_AT_external    : 1
    <2a5>   DW_AT_declaration : 1
 <1><2a5>: Abbrev Number: 15 (DW_TAG_variable)
    <2a6>   DW_AT_name        : (indirect string, offset: 0x1f61): _IO_2_1_stderr_
    <2aa>   DW_AT_decl_file   : 4
    <2ab>   DW_AT_decl_line   : 321
    <2ad>   DW_AT_type        : <0x288>
    <2b1>   DW_AT_external    : 1
    <2b1>   DW_AT_declaration : 1
 <1><2b1>: Abbrev Number: 6 (DW_TAG_pointer_type)
    <2b2>   DW_AT_byte_size   : 8
    <2b3>   DW_AT_type        : <0x99>
 <1><2b7>: Abbrev Number: 7 (DW_TAG_const_type)
    <2b8>   DW_AT_type        : <0x2b1>
 <1><2bc>: Abbrev Number: 16 (DW_TAG_variable)
    <2bd>   DW_AT_name        : (indirect string, offset: 0x3dde): stdin
    <2c1>   DW_AT_decl_file   : 5
    <2c2>   DW_AT_decl_line   : 135
    <2c3>   DW_AT_type        : <0x25c>
    <2c7>   DW_AT_external    : 1
    <2c7>   DW_AT_declaration : 1
 <1><2c7>: Abbrev Number: 16 (DW_TAG_variable)
    <2c8>   DW_AT_name        : (indirect string, offset: 0x1018): stdout
    <2cc>   DW_AT_decl_file   : 5
    <2cd>   DW_AT_decl_line   : 136
    <2ce>   DW_AT_type        : <0x25c>
    <2d2>   DW_AT_external    : 1
    <2d2>   DW_AT_declaration : 1
 <1><2d2>: Abbrev Number: 16 (DW_TAG_variable)
    <2d3>   DW_AT_name        : (indirect string, offset: 0x2f5): stderr
    <2d7>   DW_AT_decl_file   : 5
    <2d8>   DW_AT_decl_line   : 137
    <2d9>   DW_AT_type        : <0x25c>
    <2dd>   DW_AT_external    : 1
    <2dd>   DW_AT_declaration : 1
 <1><2dd>: Abbrev Number: 16 (DW_TAG_variable)
    <2de>   DW_AT_name        : (indirect string, offset: 0x1695): sys_nerr
    <2e2>   DW_AT_decl_file   : 6
    <2e3>   DW_AT_decl_line   : 26
    <2e4>   DW_AT_type        : <0x66>
    <2e8>   DW_AT_external    : 1
    <2e8>   DW_AT_declaration : 1
 <1><2e8>: Abbrev Number: 12 (DW_TAG_array_type)
    <2e9>   DW_AT_type        : <0x2b7>
    <2ed>   DW_AT_sibling     : <0x2f3>
 <2><2f1>: Abbrev Number: 17 (DW_TAG_subrange_type)
 <2><2f2>: Abbrev Number: 0
 <1><2f3>: Abbrev Number: 7 (DW_TAG_const_type)
    <2f4>   DW_AT_type        : <0x2e8>
 <1><2f8>: Abbrev Number: 16 (DW_TAG_variable)
    <2f9>   DW_AT_name        : (indirect string, offset: 0x1578): sys_errlist
    <2fd>   DW_AT_decl_file   : 6
    <2fe>   DW_AT_decl_line   : 27
    <2ff>   DW_AT_type        : <0x2f3>
    <303>   DW_AT_external    : 1
    <303>   DW_AT_declaration : 1
 <1><303>: Abbrev Number: 18 (DW_TAG_subprogram)
    <304>   DW_AT_external    : 1
    <304>   DW_AT_name        : (indirect string, offset: 0x4883): main
    <308>   DW_AT_decl_file   : 1
    <309>   DW_AT_decl_line   : 3
    <30a>   DW_AT_prototyped  : 1
    <30a>   DW_AT_type        : <0x66>
    <30e>   DW_AT_low_pc      : 0x0
    <316>   DW_AT_high_pc     : 0x7d
    <31e>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <320>   DW_AT_GNU_all_tail_call_sites: 1
    <320>   DW_AT_sibling     : <0x359>
 <2><324>: Abbrev Number: 19 (DW_TAG_formal_parameter)
    <325>   DW_AT_name        : (indirect string, offset: 0x7c8): argc
    <329>   DW_AT_decl_file   : 1
    <32a>   DW_AT_decl_line   : 3
    <32b>   DW_AT_type        : <0x66>
    <32f>   DW_AT_location    : 2 byte block: 91 5c 	(DW_OP_fbreg: -36)
 <2><332>: Abbrev Number: 19 (DW_TAG_formal_parameter)
    <333>   DW_AT_name        : (indirect string, offset: 0x1d48): argv
    <337>   DW_AT_decl_file   : 1
    <338>   DW_AT_decl_line   : 3
    <339>   DW_AT_type        : <0x359>
    <33d>   DW_AT_location    : 2 byte block: 91 50 	(DW_OP_fbreg: -48)
 <2><340>: Abbrev Number: 20 (DW_TAG_variable)
    <341>   DW_AT_name        : a
    <343>   DW_AT_decl_file   : 1
    <344>   DW_AT_decl_line   : 5
    <345>   DW_AT_type        : <0x66>
    <349>   DW_AT_location    : 2 byte block: 91 60 	(DW_OP_fbreg: -32)
 <2><34c>: Abbrev Number: 20 (DW_TAG_variable)
    <34d>   DW_AT_name        : b
    <34f>   DW_AT_decl_file   : 1
    <350>   DW_AT_decl_line   : 5
    <351>   DW_AT_type        : <0x66>
    <355>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><358>: Abbrev Number: 0
 <1><359>: Abbrev Number: 6 (DW_TAG_pointer_type)
    <35a>   DW_AT_byte_size   : 8
    <35b>   DW_AT_type        : <0x8c>
 <1><35f>: Abbrev Number: 0

Contents of the .debug_abbrev section:

  Number TAG (0x0)
   1      DW_TAG_compile_unit    [has children]
    DW_AT_producer     DW_FORM_strp
    DW_AT_language     DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT_comp_dir     DW_FORM_strp
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_stmt_list    DW_FORM_sec_offset
    DW_AT_GNU_macros   DW_FORM_sec_offset
    DW_AT value: 0     DW_FORM value: 0
   2      DW_TAG_typedef    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   3      DW_TAG_base_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_encoding     DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT value: 0     DW_FORM value: 0
   4      DW_TAG_base_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_encoding     DW_FORM_data1
    DW_AT_name         DW_FORM_string
    DW_AT value: 0     DW_FORM value: 0
   5      DW_TAG_pointer_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT value: 0     DW_FORM value: 0
   6      DW_TAG_pointer_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   7      DW_TAG_const_type    [no children]
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   8      DW_TAG_structure_type    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   9      DW_TAG_member    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_data_member_location DW_FORM_data1
    DW_AT value: 0     DW_FORM value: 0
   10      DW_TAG_member    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_type         DW_FORM_ref4
    DW_AT_data_member_location DW_FORM_data1
    DW_AT value: 0     DW_FORM value: 0
   11      DW_TAG_typedef    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT value: 0     DW_FORM value: 0
   12      DW_TAG_array_type    [has children]
    DW_AT_type         DW_FORM_ref4
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   13      DW_TAG_subrange_type    [no children]
    DW_AT_type         DW_FORM_ref4
    DW_AT_upper_bound  DW_FORM_data1
    DW_AT value: 0     DW_FORM value: 0
   14      DW_TAG_structure_type    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_declaration  DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   15      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_type         DW_FORM_ref4
    DW_AT_external     DW_FORM_flag_present
    DW_AT_declaration  DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   16      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_external     DW_FORM_flag_present
    DW_AT_declaration  DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   17      DW_TAG_subrange_type    [no children]
    DW_AT value: 0     DW_FORM value: 0
   18      DW_TAG_subprogram    [has children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_prototyped   DW_FORM_flag_present
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   19      DW_TAG_formal_parameter    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   20      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0

Contents of the .debug_aranges section:

  Length:                   44
  Version:                  2
  Offset into .debug_info:  0x0
  Pointer Size:             8
  Segment Size:             0

    Address            Length
    0000000000000000 000000000000007d 
    0000000000000000 0000000000000000 

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4
  Offset into .debug_line:     0x0

 DW_MACRO_import - offset : 0x0
 DW_MACRO_start_file - lineno: 0 filenum: 1 filename: if_then.c
 DW_MACRO_start_file - lineno: 31 filenum: 7 filename: /usr/x86_64-linux-gnu/include/stdc-predef.h
 DW_MACRO_import - offset : 0x0
 DW_MACRO_end_file
 DW_MACRO_start_file - lineno: 1 filenum: 5 filename: /usr/x86_64-linux-gnu/include/stdio.h
 DW_MACRO_import - offset : 0x0
 DW_MACRO_start_file - lineno: 27 filenum: 8 filename: /usr/x86_64-linux-gnu/include/bits/libc-header-start.h
 DW_MACRO_undef_strp - lineno : 31 macro : __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION
 DW_MACRO_start_file - lineno: 33 filenum: 9 filename: /usr/x86_64-linux-gnu/include/features.h
 DW_MACRO_import - offset : 0x0
 DW_MACRO_start_file - lineno: 424 filenum: 10 filename: /usr/x86_64-linux-gnu/include/sys/cdefs.h
 DW_MACRO_import - offset : 0x0
 DW_MACRO_start_file - lineno: 427 filenum: 11 filename: /usr/x86_64-linux-gnu/include/bits/wordsize.h
 DW_MACRO_import - offset : 0x0
 DW_MACRO_end_file
 DW_MACRO_start_file - lineno: 428 filenum: 12 filename: /usr/x86_64-linux-gnu/include/bits/long-double.h
 DW_MACRO_end_file
 DW_MACRO_import - offset : 0x0
 DW_MACRO_end_file
 DW_MACRO_start_file - lineno: 448 filenum: 13 filename: /usr/x86_64-linux-gnu/include/gnu/stubs.h
 DW_MACRO_start_file - lineno: 10 filenum: 14 filename: /usr/x86_64-linux-gnu/include/gnu/stubs-64.h
 DW_MACRO_import - offset : 0x0
 DW_MACRO_end_file
 DW_MACRO_end_file
 DW_MACRO_end_file
 DW_MACRO_import - offset : 0x0
 DW_MACRO_end_file
 DW_MACRO_import - offset : 0x0
 DW_MACRO_start_file - lineno: 33 filenum: 2 filename: /usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h
 DW_MACRO_import - offset : 0x0
 DW_MACRO_end_file
 DW_MACRO_start_file - lineno: 35 filenum: 3 filename: /usr/x86_64-linux-gnu/include/bits/types.h
 DW_MACRO_define_strp - lineno : 24 macro : _BITS_TYPES_H 1
 DW_MACRO_start_file - lineno: 27 filenum: 11 filename: /usr/x86_64-linux-gnu/include/bits/wordsize.h
 DW_MACRO_import - offset : 0x0
 DW_MACRO_end_file
 DW_MACRO_import - offset : 0x0
 DW_MACRO_start_file - lineno: 130 filenum: 15 filename: /usr/x86_64-linux-gnu/include/bits/typesizes.h
 DW_MACRO_import - offset : 0x0
 DW_MACRO_end_file
 DW_MACRO_undef_strp - lineno : 204 macro : __STD_TYPE
 DW_MACRO_end_file
 DW_MACRO_start_file - lineno: 36 filenum: 16 filename: /usr/x86_64-linux-gnu/include/bits/types/__FILE.h
 DW_MACRO_define_strp - lineno : 2 macro : ____FILE_defined 1
 DW_MACRO_end_file
 DW_MACRO_start_file - lineno: 37 filenum: 17 filename: /usr/x86_64-linux-gnu/include/bits/types/FILE.h
 DW_MACRO_define_strp - lineno : 2 macro : __FILE_defined 1
 DW_MACRO_end_file
 DW_MACRO_define_strp - lineno : 39 macro : _STDIO_USES_IOSTREAM 
 DW_MACRO_start_file - lineno: 41 filenum: 4 filename: /usr/x86_64-linux-gnu/include/bits/libio.h
 DW_MACRO_define_strp - lineno : 29 macro : _BITS_LIBIO_H 1
 DW_MACRO_start_file - lineno: 35 filenum: 18 filename: /usr/x86_64-linux-gnu/include/bits/_G_config.h
 DW_MACRO_import - offset : 0x0
 DW_MACRO_start_file - lineno: 19 filenum: 2 filename: /usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h
 DW_MACRO_import - offset : 0x0
 DW_MACRO_end_file
 DW_MACRO_start_file - lineno: 21 filenum: 19 filename: /usr/x86_64-linux-gnu/include/bits/types/__mbstate_t.h
 DW_MACRO_define_strp - lineno : 2 macro : ____mbstate_t_defined 1
 DW_MACRO_end_file
 DW_MACRO_import - offset : 0x0
 DW_MACRO_end_file
 DW_MACRO_import - offset : 0x0
 DW_MACRO_start_file - lineno: 53 filenum: 20 filename: /usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h
 DW_MACRO_import - offset : 0x0
 DW_MACRO_end_file
 DW_MACRO_import - offset : 0x0
 DW_MACRO_end_file
 DW_MACRO_import - offset : 0x0
 DW_MACRO_start_file - lineno: 131 filenum: 21 filename: /usr/x86_64-linux-gnu/include/bits/stdio_lim.h
 DW_MACRO_import - offset : 0x0
 DW_MACRO_end_file
 DW_MACRO_import - offset : 0x0
 DW_MACRO_start_file - lineno: 781 filenum: 6 filename: /usr/x86_64-linux-gnu/include/bits/sys_errlist.h
 DW_MACRO_end_file
 DW_MACRO_end_file
 DW_MACRO_end_file

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_define_strp - lineno : 0 macro : __STDC__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __STDC_VERSION__ 201112L
 DW_MACRO_define_strp - lineno : 0 macro : __STDC_UTF_16__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __STDC_UTF_32__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __STDC_HOSTED__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __GNUC__ 7
 DW_MACRO_define_strp - lineno : 0 macro : __GNUC_MINOR__ 3
 DW_MACRO_define_strp - lineno : 0 macro : __GNUC_PATCHLEVEL__ 0
 DW_MACRO_define_strp - lineno : 0 macro : __VERSION__ "7.3.0"
 DW_MACRO_define_strp - lineno : 0 macro : __ATOMIC_RELAXED 0
 DW_MACRO_define_strp - lineno : 0 macro : __ATOMIC_SEQ_CST 5
 DW_MACRO_define_strp - lineno : 0 macro : __ATOMIC_ACQUIRE 2
 DW_MACRO_define_strp - lineno : 0 macro : __ATOMIC_RELEASE 3
 DW_MACRO_define_strp - lineno : 0 macro : __ATOMIC_ACQ_REL 4
 DW_MACRO_define_strp - lineno : 0 macro : __ATOMIC_CONSUME 1
 DW_MACRO_define_strp - lineno : 0 macro : __pic__ 2
 DW_MACRO_define_strp - lineno : 0 macro : __PIC__ 2
 DW_MACRO_define_strp - lineno : 0 macro : __pie__ 2
 DW_MACRO_define_strp - lineno : 0 macro : __PIE__ 2
 DW_MACRO_define_strp - lineno : 0 macro : __FINITE_MATH_ONLY__ 0
 DW_MACRO_define_strp - lineno : 0 macro : _LP64 1
 DW_MACRO_define_strp - lineno : 0 macro : __LP64__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __SIZEOF_INT__ 4
 DW_MACRO_define_strp - lineno : 0 macro : __SIZEOF_LONG__ 8
 DW_MACRO_define_strp - lineno : 0 macro : __SIZEOF_LONG_LONG__ 8
 DW_MACRO_define_strp - lineno : 0 macro : __SIZEOF_SHORT__ 2
 DW_MACRO_define_strp - lineno : 0 macro : __SIZEOF_FLOAT__ 4
 DW_MACRO_define_strp - lineno : 0 macro : __SIZEOF_DOUBLE__ 8
 DW_MACRO_define_strp - lineno : 0 macro : __SIZEOF_LONG_DOUBLE__ 16
 DW_MACRO_define_strp - lineno : 0 macro : __SIZEOF_SIZE_T__ 8
 DW_MACRO_define_strp - lineno : 0 macro : __CHAR_BIT__ 8
 DW_MACRO_define_strp - lineno : 0 macro : __BIGGEST_ALIGNMENT__ 16
 DW_MACRO_define_strp - lineno : 0 macro : __ORDER_LITTLE_ENDIAN__ 1234
 DW_MACRO_define_strp - lineno : 0 macro : __ORDER_BIG_ENDIAN__ 4321
 DW_MACRO_define_strp - lineno : 0 macro : __ORDER_PDP_ENDIAN__ 3412
 DW_MACRO_define_strp - lineno : 0 macro : __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
 DW_MACRO_define_strp - lineno : 0 macro : __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
 DW_MACRO_define_strp - lineno : 0 macro : __SIZEOF_POINTER__ 8
 DW_MACRO_define_strp - lineno : 0 macro : __SIZE_TYPE__ long unsigned int
 DW_MACRO_define_strp - lineno : 0 macro : __PTRDIFF_TYPE__ long int
 DW_MACRO_define_strp - lineno : 0 macro : __WCHAR_TYPE__ int
 DW_MACRO_define_strp - lineno : 0 macro : __WINT_TYPE__ unsigned int
 DW_MACRO_define_strp - lineno : 0 macro : __INTMAX_TYPE__ long int
 DW_MACRO_define_strp - lineno : 0 macro : __UINTMAX_TYPE__ long unsigned int
 DW_MACRO_define_strp - lineno : 0 macro : __CHAR16_TYPE__ short unsigned int
 DW_MACRO_define_strp - lineno : 0 macro : __CHAR32_TYPE__ unsigned int
 DW_MACRO_define_strp - lineno : 0 macro : __SIG_ATOMIC_TYPE__ int
 DW_MACRO_define_strp - lineno : 0 macro : __INT8_TYPE__ signed char
 DW_MACRO_define_strp - lineno : 0 macro : __INT16_TYPE__ short int
 DW_MACRO_define_strp - lineno : 0 macro : __INT32_TYPE__ int
 DW_MACRO_define_strp - lineno : 0 macro : __INT64_TYPE__ long int
 DW_MACRO_define_strp - lineno : 0 macro : __UINT8_TYPE__ unsigned char
 DW_MACRO_define_strp - lineno : 0 macro : __UINT16_TYPE__ short unsigned int
 DW_MACRO_define_strp - lineno : 0 macro : __UINT32_TYPE__ unsigned int
 DW_MACRO_define_strp - lineno : 0 macro : __UINT64_TYPE__ long unsigned int
 DW_MACRO_define_strp - lineno : 0 macro : __INT_LEAST8_TYPE__ signed char
 DW_MACRO_define_strp - lineno : 0 macro : __INT_LEAST16_TYPE__ short int
 DW_MACRO_define_strp - lineno : 0 macro : __INT_LEAST32_TYPE__ int
 DW_MACRO_define_strp - lineno : 0 macro : __INT_LEAST64_TYPE__ long int
 DW_MACRO_define_strp - lineno : 0 macro : __UINT_LEAST8_TYPE__ unsigned char
 DW_MACRO_define_strp - lineno : 0 macro : __UINT_LEAST16_TYPE__ short unsigned int
 DW_MACRO_define_strp - lineno : 0 macro : __UINT_LEAST32_TYPE__ unsigned int
 DW_MACRO_define_strp - lineno : 0 macro : __UINT_LEAST64_TYPE__ long unsigned int
 DW_MACRO_define_strp - lineno : 0 macro : __INT_FAST8_TYPE__ signed char
 DW_MACRO_define_strp - lineno : 0 macro : __INT_FAST16_TYPE__ long int
 DW_MACRO_define_strp - lineno : 0 macro : __INT_FAST32_TYPE__ long int
 DW_MACRO_define_strp - lineno : 0 macro : __INT_FAST64_TYPE__ long int
 DW_MACRO_define_strp - lineno : 0 macro : __UINT_FAST8_TYPE__ unsigned char
 DW_MACRO_define_strp - lineno : 0 macro : __UINT_FAST16_TYPE__ long unsigned int
 DW_MACRO_define_strp - lineno : 0 macro : __UINT_FAST32_TYPE__ long unsigned int
 DW_MACRO_define_strp - lineno : 0 macro : __UINT_FAST64_TYPE__ long unsigned int
 DW_MACRO_define_strp - lineno : 0 macro : __INTPTR_TYPE__ long int
 DW_MACRO_define_strp - lineno : 0 macro : __UINTPTR_TYPE__ long unsigned int
 DW_MACRO_define_strp - lineno : 0 macro : __has_include(STR) __has_include__(STR)
 DW_MACRO_define_strp - lineno : 0 macro : __has_include_next(STR) __has_include_next__(STR)
 DW_MACRO_define_strp - lineno : 0 macro : __GXX_ABI_VERSION 1011
 DW_MACRO_define_strp - lineno : 0 macro : __SCHAR_MAX__ 0x7f
 DW_MACRO_define_strp - lineno : 0 macro : __SHRT_MAX__ 0x7fff
 DW_MACRO_define_strp - lineno : 0 macro : __INT_MAX__ 0x7fffffff
 DW_MACRO_define_strp - lineno : 0 macro : __LONG_MAX__ 0x7fffffffffffffffL
 DW_MACRO_define_strp - lineno : 0 macro : __LONG_LONG_MAX__ 0x7fffffffffffffffLL
 DW_MACRO_define_strp - lineno : 0 macro : __WCHAR_MAX__ 0x7fffffff
 DW_MACRO_define_strp - lineno : 0 macro : __WCHAR_MIN__ (-__WCHAR_MAX__ - 1)
 DW_MACRO_define_strp - lineno : 0 macro : __WINT_MAX__ 0xffffffffU
 DW_MACRO_define_strp - lineno : 0 macro : __WINT_MIN__ 0U
 DW_MACRO_define_strp - lineno : 0 macro : __PTRDIFF_MAX__ 0x7fffffffffffffffL
 DW_MACRO_define_strp - lineno : 0 macro : __SIZE_MAX__ 0xffffffffffffffffUL
 DW_MACRO_define_strp - lineno : 0 macro : __SCHAR_WIDTH__ 8
 DW_MACRO_define_strp - lineno : 0 macro : __SHRT_WIDTH__ 16
 DW_MACRO_define_strp - lineno : 0 macro : __INT_WIDTH__ 32
 DW_MACRO_define_strp - lineno : 0 macro : __LONG_WIDTH__ 64
 DW_MACRO_define_strp - lineno : 0 macro : __LONG_LONG_WIDTH__ 64
 DW_MACRO_define_strp - lineno : 0 macro : __WCHAR_WIDTH__ 32
 DW_MACRO_define_strp - lineno : 0 macro : __WINT_WIDTH__ 32
 DW_MACRO_define_strp - lineno : 0 macro : __PTRDIFF_WIDTH__ 64
 DW_MACRO_define_strp - lineno : 0 macro : __SIZE_WIDTH__ 64
 DW_MACRO_define_strp - lineno : 0 macro : __INTMAX_MAX__ 0x7fffffffffffffffL
 DW_MACRO_define_strp - lineno : 0 macro : __INTMAX_C(c) c ## L
 DW_MACRO_define_strp - lineno : 0 macro : __UINTMAX_MAX__ 0xffffffffffffffffUL
 DW_MACRO_define_strp - lineno : 0 macro : __UINTMAX_C(c) c ## UL
 DW_MACRO_define_strp - lineno : 0 macro : __INTMAX_WIDTH__ 64
 DW_MACRO_define_strp - lineno : 0 macro : __SIG_ATOMIC_MAX__ 0x7fffffff
 DW_MACRO_define_strp - lineno : 0 macro : __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
 DW_MACRO_define_strp - lineno : 0 macro : __SIG_ATOMIC_WIDTH__ 32
 DW_MACRO_define_strp - lineno : 0 macro : __INT8_MAX__ 0x7f
 DW_MACRO_define_strp - lineno : 0 macro : __INT16_MAX__ 0x7fff
 DW_MACRO_define_strp - lineno : 0 macro : __INT32_MAX__ 0x7fffffff
 DW_MACRO_define_strp - lineno : 0 macro : __INT64_MAX__ 0x7fffffffffffffffL
 DW_MACRO_define_strp - lineno : 0 macro : __UINT8_MAX__ 0xff
 DW_MACRO_define_strp - lineno : 0 macro : __UINT16_MAX__ 0xffff
 DW_MACRO_define_strp - lineno : 0 macro : __UINT32_MAX__ 0xffffffffU
 DW_MACRO_define_strp - lineno : 0 macro : __UINT64_MAX__ 0xffffffffffffffffUL
 DW_MACRO_define_strp - lineno : 0 macro : __INT_LEAST8_MAX__ 0x7f
 DW_MACRO_define_strp - lineno : 0 macro : __INT8_C(c) c
 DW_MACRO_define_strp - lineno : 0 macro : __INT_LEAST8_WIDTH__ 8
 DW_MACRO_define_strp - lineno : 0 macro : __INT_LEAST16_MAX__ 0x7fff
 DW_MACRO_define_strp - lineno : 0 macro : __INT16_C(c) c
 DW_MACRO_define_strp - lineno : 0 macro : __INT_LEAST16_WIDTH__ 16
 DW_MACRO_define_strp - lineno : 0 macro : __INT_LEAST32_MAX__ 0x7fffffff
 DW_MACRO_define_strp - lineno : 0 macro : __INT32_C(c) c
 DW_MACRO_define_strp - lineno : 0 macro : __INT_LEAST32_WIDTH__ 32
 DW_MACRO_define_strp - lineno : 0 macro : __INT_LEAST64_MAX__ 0x7fffffffffffffffL
 DW_MACRO_define_strp - lineno : 0 macro : __INT64_C(c) c ## L
 DW_MACRO_define_strp - lineno : 0 macro : __INT_LEAST64_WIDTH__ 64
 DW_MACRO_define_strp - lineno : 0 macro : __UINT_LEAST8_MAX__ 0xff
 DW_MACRO_define_strp - lineno : 0 macro : __UINT8_C(c) c
 DW_MACRO_define_strp - lineno : 0 macro : __UINT_LEAST16_MAX__ 0xffff
 DW_MACRO_define_strp - lineno : 0 macro : __UINT16_C(c) c
 DW_MACRO_define_strp - lineno : 0 macro : __UINT_LEAST32_MAX__ 0xffffffffU
 DW_MACRO_define_strp - lineno : 0 macro : __UINT32_C(c) c ## U
 DW_MACRO_define_strp - lineno : 0 macro : __UINT_LEAST64_MAX__ 0xffffffffffffffffUL
 DW_MACRO_define_strp - lineno : 0 macro : __UINT64_C(c) c ## UL
 DW_MACRO_define_strp - lineno : 0 macro : __INT_FAST8_MAX__ 0x7f
 DW_MACRO_define_strp - lineno : 0 macro : __INT_FAST8_WIDTH__ 8
 DW_MACRO_define_strp - lineno : 0 macro : __INT_FAST16_MAX__ 0x7fffffffffffffffL
 DW_MACRO_define_strp - lineno : 0 macro : __INT_FAST16_WIDTH__ 64
 DW_MACRO_define_strp - lineno : 0 macro : __INT_FAST32_MAX__ 0x7fffffffffffffffL
 DW_MACRO_define_strp - lineno : 0 macro : __INT_FAST32_WIDTH__ 64
 DW_MACRO_define_strp - lineno : 0 macro : __INT_FAST64_MAX__ 0x7fffffffffffffffL
 DW_MACRO_define_strp - lineno : 0 macro : __INT_FAST64_WIDTH__ 64
 DW_MACRO_define_strp - lineno : 0 macro : __UINT_FAST8_MAX__ 0xff
 DW_MACRO_define_strp - lineno : 0 macro : __UINT_FAST16_MAX__ 0xffffffffffffffffUL
 DW_MACRO_define_strp - lineno : 0 macro : __UINT_FAST32_MAX__ 0xffffffffffffffffUL
 DW_MACRO_define_strp - lineno : 0 macro : __UINT_FAST64_MAX__ 0xffffffffffffffffUL
 DW_MACRO_define_strp - lineno : 0 macro : __INTPTR_MAX__ 0x7fffffffffffffffL
 DW_MACRO_define_strp - lineno : 0 macro : __INTPTR_WIDTH__ 64
 DW_MACRO_define_strp - lineno : 0 macro : __UINTPTR_MAX__ 0xffffffffffffffffUL
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_IEC_559 2
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_IEC_559_COMPLEX 2
 DW_MACRO_define_strp - lineno : 0 macro : __FLT_EVAL_METHOD__ 0
 DW_MACRO_define_strp - lineno : 0 macro : __FLT_EVAL_METHOD_TS_18661_3__ 0
 DW_MACRO_define_strp - lineno : 0 macro : __DEC_EVAL_METHOD__ 2
 DW_MACRO_define_strp - lineno : 0 macro : __FLT_RADIX__ 2
 DW_MACRO_define_strp - lineno : 0 macro : __FLT_MANT_DIG__ 24
 DW_MACRO_define_strp - lineno : 0 macro : __FLT_DIG__ 6
 DW_MACRO_define_strp - lineno : 0 macro : __FLT_MIN_EXP__ (-125)
 DW_MACRO_define_strp - lineno : 0 macro : __FLT_MIN_10_EXP__ (-37)
 DW_MACRO_define_strp - lineno : 0 macro : __FLT_MAX_EXP__ 128
 DW_MACRO_define_strp - lineno : 0 macro : __FLT_MAX_10_EXP__ 38
 DW_MACRO_define_strp - lineno : 0 macro : __FLT_DECIMAL_DIG__ 9
 DW_MACRO_define_strp - lineno : 0 macro : __FLT_MAX__ 3.40282346638528859811704183484516925e+38F
 DW_MACRO_define_strp - lineno : 0 macro : __FLT_MIN__ 1.17549435082228750796873653722224568e-38F
 DW_MACRO_define_strp - lineno : 0 macro : __FLT_EPSILON__ 1.19209289550781250000000000000000000e-7F
 DW_MACRO_define_strp - lineno : 0 macro : __FLT_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F
 DW_MACRO_define_strp - lineno : 0 macro : __FLT_HAS_DENORM__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __FLT_HAS_INFINITY__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __FLT_HAS_QUIET_NAN__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __DBL_MANT_DIG__ 53
 DW_MACRO_define_strp - lineno : 0 macro : __DBL_DIG__ 15
 DW_MACRO_define_strp - lineno : 0 macro : __DBL_MIN_EXP__ (-1021)
 DW_MACRO_define_strp - lineno : 0 macro : __DBL_MIN_10_EXP__ (-307)
 DW_MACRO_define_strp - lineno : 0 macro : __DBL_MAX_EXP__ 1024
 DW_MACRO_define_strp - lineno : 0 macro : __DBL_MAX_10_EXP__ 308
 DW_MACRO_define_strp - lineno : 0 macro : __DBL_DECIMAL_DIG__ 17
 DW_MACRO_define_strp - lineno : 0 macro : __DBL_MAX__ ((double)1.79769313486231570814527423731704357e+308L)
 DW_MACRO_define_strp - lineno : 0 macro : __DBL_MIN__ ((double)2.22507385850720138309023271733240406e-308L)
 DW_MACRO_define_strp - lineno : 0 macro : __DBL_EPSILON__ ((double)2.22044604925031308084726333618164062e-16L)
 DW_MACRO_define_strp - lineno : 0 macro : __DBL_DENORM_MIN__ ((double)4.94065645841246544176568792868221372e-324L)
 DW_MACRO_define_strp - lineno : 0 macro : __DBL_HAS_DENORM__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __DBL_HAS_INFINITY__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __DBL_HAS_QUIET_NAN__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __LDBL_MANT_DIG__ 64
 DW_MACRO_define_strp - lineno : 0 macro : __LDBL_DIG__ 18
 DW_MACRO_define_strp - lineno : 0 macro : __LDBL_MIN_EXP__ (-16381)
 DW_MACRO_define_strp - lineno : 0 macro : __LDBL_MIN_10_EXP__ (-4931)
 DW_MACRO_define_strp - lineno : 0 macro : __LDBL_MAX_EXP__ 16384
 DW_MACRO_define_strp - lineno : 0 macro : __LDBL_MAX_10_EXP__ 4932
 DW_MACRO_define_strp - lineno : 0 macro : __DECIMAL_DIG__ 21
 DW_MACRO_define_strp - lineno : 0 macro : __LDBL_DECIMAL_DIG__ 21
 DW_MACRO_define_strp - lineno : 0 macro : __LDBL_MAX__ 1.18973149535723176502126385303097021e+4932L
 DW_MACRO_define_strp - lineno : 0 macro : __LDBL_MIN__ 3.36210314311209350626267781732175260e-4932L
 DW_MACRO_define_strp - lineno : 0 macro : __LDBL_EPSILON__ 1.08420217248550443400745280086994171e-19L
 DW_MACRO_define_strp - lineno : 0 macro : __LDBL_DENORM_MIN__ 3.64519953188247460252840593361941982e-4951L
 DW_MACRO_define_strp - lineno : 0 macro : __LDBL_HAS_DENORM__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __LDBL_HAS_INFINITY__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __LDBL_HAS_QUIET_NAN__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32_MANT_DIG__ 24
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32_DIG__ 6
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32_MIN_EXP__ (-125)
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32_MIN_10_EXP__ (-37)
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32_MAX_EXP__ 128
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32_MAX_10_EXP__ 38
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32_DECIMAL_DIG__ 9
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32_MAX__ 3.40282346638528859811704183484516925e+38F32
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32_MIN__ 1.17549435082228750796873653722224568e-38F32
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32_EPSILON__ 1.19209289550781250000000000000000000e-7F32
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F32
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32_HAS_DENORM__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32_HAS_INFINITY__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32_HAS_QUIET_NAN__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64_MANT_DIG__ 53
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64_DIG__ 15
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64_MIN_EXP__ (-1021)
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64_MIN_10_EXP__ (-307)
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64_MAX_EXP__ 1024
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64_MAX_10_EXP__ 308
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64_DECIMAL_DIG__ 17
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64_MAX__ 1.79769313486231570814527423731704357e+308F64
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64_MIN__ 2.22507385850720138309023271733240406e-308F64
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64_EPSILON__ 2.22044604925031308084726333618164062e-16F64
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F64
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64_HAS_DENORM__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64_HAS_INFINITY__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64_HAS_QUIET_NAN__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __FLT128_MANT_DIG__ 113
 DW_MACRO_define_strp - lineno : 0 macro : __FLT128_DIG__ 33
 DW_MACRO_define_strp - lineno : 0 macro : __FLT128_MIN_EXP__ (-16381)
 DW_MACRO_define_strp - lineno : 0 macro : __FLT128_MIN_10_EXP__ (-4931)
 DW_MACRO_define_strp - lineno : 0 macro : __FLT128_MAX_EXP__ 16384
 DW_MACRO_define_strp - lineno : 0 macro : __FLT128_MAX_10_EXP__ 4932
 DW_MACRO_define_strp - lineno : 0 macro : __FLT128_DECIMAL_DIG__ 36
 DW_MACRO_define_strp - lineno : 0 macro : __FLT128_MAX__ 1.18973149535723176508575932662800702e+4932F128
 DW_MACRO_define_strp - lineno : 0 macro : __FLT128_MIN__ 3.36210314311209350626267781732175260e-4932F128
 DW_MACRO_define_strp - lineno : 0 macro : __FLT128_EPSILON__ 1.92592994438723585305597794258492732e-34F128
 DW_MACRO_define_strp - lineno : 0 macro : __FLT128_DENORM_MIN__ 6.47517511943802511092443895822764655e-4966F128
 DW_MACRO_define_strp - lineno : 0 macro : __FLT128_HAS_DENORM__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __FLT128_HAS_INFINITY__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __FLT128_HAS_QUIET_NAN__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32X_MANT_DIG__ 53
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32X_DIG__ 15
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32X_MIN_EXP__ (-1021)
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32X_MIN_10_EXP__ (-307)
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32X_MAX_EXP__ 1024
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32X_MAX_10_EXP__ 308
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32X_DECIMAL_DIG__ 17
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32X_MAX__ 1.79769313486231570814527423731704357e+308F32x
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32X_MIN__ 2.22507385850720138309023271733240406e-308F32x
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32X_EPSILON__ 2.22044604925031308084726333618164062e-16F32x
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32X_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F32x
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32X_HAS_DENORM__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32X_HAS_INFINITY__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __FLT32X_HAS_QUIET_NAN__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64X_MANT_DIG__ 64
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64X_DIG__ 18
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64X_MIN_EXP__ (-16381)
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64X_MIN_10_EXP__ (-4931)
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64X_MAX_EXP__ 16384
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64X_MAX_10_EXP__ 4932
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64X_DECIMAL_DIG__ 21
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64X_MAX__ 1.18973149535723176502126385303097021e+4932F64x
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64X_MIN__ 3.36210314311209350626267781732175260e-4932F64x
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64X_EPSILON__ 1.08420217248550443400745280086994171e-19F64x
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64X_DENORM_MIN__ 3.64519953188247460252840593361941982e-4951F64x
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64X_HAS_DENORM__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64X_HAS_INFINITY__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __FLT64X_HAS_QUIET_NAN__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __DEC32_MANT_DIG__ 7
 DW_MACRO_define_strp - lineno : 0 macro : __DEC32_MIN_EXP__ (-94)
 DW_MACRO_define_strp - lineno : 0 macro : __DEC32_MAX_EXP__ 97
 DW_MACRO_define_strp - lineno : 0 macro : __DEC32_MIN__ 1E-95DF
 DW_MACRO_define_strp - lineno : 0 macro : __DEC32_MAX__ 9.999999E96DF
 DW_MACRO_define_strp - lineno : 0 macro : __DEC32_EPSILON__ 1E-6DF
 DW_MACRO_define_strp - lineno : 0 macro : __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
 DW_MACRO_define_strp - lineno : 0 macro : __DEC64_MANT_DIG__ 16
 DW_MACRO_define_strp - lineno : 0 macro : __DEC64_MIN_EXP__ (-382)
 DW_MACRO_define_strp - lineno : 0 macro : __DEC64_MAX_EXP__ 385
 DW_MACRO_define_strp - lineno : 0 macro : __DEC64_MIN__ 1E-383DD
 DW_MACRO_define_strp - lineno : 0 macro : __DEC64_MAX__ 9.999999999999999E384DD
 DW_MACRO_define_strp - lineno : 0 macro : __DEC64_EPSILON__ 1E-15DD
 DW_MACRO_define_strp - lineno : 0 macro : __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
 DW_MACRO_define_strp - lineno : 0 macro : __DEC128_MANT_DIG__ 34
 DW_MACRO_define_strp - lineno : 0 macro : __DEC128_MIN_EXP__ (-6142)
 DW_MACRO_define_strp - lineno : 0 macro : __DEC128_MAX_EXP__ 6145
 DW_MACRO_define_strp - lineno : 0 macro : __DEC128_MIN__ 1E-6143DL
 DW_MACRO_define_strp - lineno : 0 macro : __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
 DW_MACRO_define_strp - lineno : 0 macro : __DEC128_EPSILON__ 1E-33DL
 DW_MACRO_define_strp - lineno : 0 macro : __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
 DW_MACRO_define_strp - lineno : 0 macro : __REGISTER_PREFIX__ 
 DW_MACRO_define_strp - lineno : 0 macro : __USER_LABEL_PREFIX__ 
 DW_MACRO_define_strp - lineno : 0 macro : __GNUC_STDC_INLINE__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __NO_INLINE__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 1
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_ATOMIC_BOOL_LOCK_FREE 2
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_ATOMIC_CHAR_LOCK_FREE 2
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_ATOMIC_SHORT_LOCK_FREE 2
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_ATOMIC_INT_LOCK_FREE 2
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_ATOMIC_LONG_LOCK_FREE 2
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_ATOMIC_LLONG_LOCK_FREE 2
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_ATOMIC_POINTER_LOCK_FREE 2
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_HAVE_DWARF2_CFI_ASM 1
 DW_MACRO_define_strp - lineno : 0 macro : __PRAGMA_REDEFINE_EXTNAME 1
 DW_MACRO_define_strp - lineno : 0 macro : __SSP_STRONG__ 3
 DW_MACRO_define_strp - lineno : 0 macro : __SIZEOF_INT128__ 16
 DW_MACRO_define_strp - lineno : 0 macro : __SIZEOF_WCHAR_T__ 4
 DW_MACRO_define_strp - lineno : 0 macro : __SIZEOF_WINT_T__ 4
 DW_MACRO_define_strp - lineno : 0 macro : __SIZEOF_PTRDIFF_T__ 8
 DW_MACRO_define_strp - lineno : 0 macro : __amd64 1
 DW_MACRO_define_strp - lineno : 0 macro : __amd64__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __x86_64 1
 DW_MACRO_define_strp - lineno : 0 macro : __x86_64__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __SIZEOF_FLOAT80__ 16
 DW_MACRO_define_strp - lineno : 0 macro : __SIZEOF_FLOAT128__ 16
 DW_MACRO_define_strp - lineno : 0 macro : __ATOMIC_HLE_ACQUIRE 65536
 DW_MACRO_define_strp - lineno : 0 macro : __ATOMIC_HLE_RELEASE 131072
 DW_MACRO_define_strp - lineno : 0 macro : __GCC_ASM_FLAG_OUTPUTS__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __k8 1
 DW_MACRO_define_strp - lineno : 0 macro : __k8__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __code_model_small__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __MMX__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __SSE__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __SSE2__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __FXSR__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __SSE_MATH__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __SSE2_MATH__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __SEG_FS 1
 DW_MACRO_define_strp - lineno : 0 macro : __SEG_GS 1
 DW_MACRO_define_strp - lineno : 0 macro : __gnu_linux__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __linux 1
 DW_MACRO_define_strp - lineno : 0 macro : __linux__ 1
 DW_MACRO_define_strp - lineno : 0 macro : linux 1
 DW_MACRO_define_strp - lineno : 0 macro : __unix 1
 DW_MACRO_define_strp - lineno : 0 macro : __unix__ 1
 DW_MACRO_define_strp - lineno : 0 macro : unix 1
 DW_MACRO_define_strp - lineno : 0 macro : __ELF__ 1
 DW_MACRO_define_strp - lineno : 0 macro : __DECIMAL_BID_FORMAT__ 1

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_define_strp - lineno : 19 macro : _STDC_PREDEF_H 1
 DW_MACRO_define_strp - lineno : 38 macro : __STDC_IEC_559__ 1
 DW_MACRO_define_strp - lineno : 46 macro : __STDC_IEC_559_COMPLEX__ 1
 DW_MACRO_define_strp - lineno : 58 macro : __STDC_ISO_10646__ 201706L
 DW_MACRO_define_strp - lineno : 61 macro : __STDC_NO_THREADS__ 1

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_define_strp - lineno : 24 macro : _STDIO_H 1
 DW_MACRO_define_strp - lineno : 26 macro : __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION 

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_define_strp - lineno : 19 macro : _FEATURES_H 1
 DW_MACRO_undef_strp - lineno : 119 macro : __USE_ISOC11
 DW_MACRO_undef_strp - lineno : 120 macro : __USE_ISOC99
 DW_MACRO_undef_strp - lineno : 121 macro : __USE_ISOC95
 DW_MACRO_undef_strp - lineno : 122 macro : __USE_ISOCXX11
 DW_MACRO_undef_strp - lineno : 123 macro : __USE_POSIX
 DW_MACRO_undef_strp - lineno : 124 macro : __USE_POSIX2
 DW_MACRO_undef_strp - lineno : 125 macro : __USE_POSIX199309
 DW_MACRO_undef_strp - lineno : 126 macro : __USE_POSIX199506
 DW_MACRO_undef_strp - lineno : 127 macro : __USE_XOPEN
 DW_MACRO_undef_strp - lineno : 128 macro : __USE_XOPEN_EXTENDED
 DW_MACRO_undef_strp - lineno : 129 macro : __USE_UNIX98
 DW_MACRO_undef_strp - lineno : 130 macro : __USE_XOPEN2K
 DW_MACRO_undef_strp - lineno : 131 macro : __USE_XOPEN2KXSI
 DW_MACRO_undef_strp - lineno : 132 macro : __USE_XOPEN2K8
 DW_MACRO_undef_strp - lineno : 133 macro : __USE_XOPEN2K8XSI
 DW_MACRO_undef_strp - lineno : 134 macro : __USE_LARGEFILE
 DW_MACRO_undef_strp - lineno : 135 macro : __USE_LARGEFILE64
 DW_MACRO_undef_strp - lineno : 136 macro : __USE_FILE_OFFSET64
 DW_MACRO_undef_strp - lineno : 137 macro : __USE_MISC
 DW_MACRO_undef_strp - lineno : 138 macro : __USE_ATFILE
 DW_MACRO_undef_strp - lineno : 139 macro : __USE_GNU
 DW_MACRO_undef_strp - lineno : 140 macro : __USE_FORTIFY_LEVEL
 DW_MACRO_undef_strp - lineno : 141 macro : __KERNEL_STRICT_NAMES
 DW_MACRO_undef_strp - lineno : 142 macro : __GLIBC_USE_DEPRECATED_GETS
 DW_MACRO_define_strp - lineno : 147 macro : __KERNEL_STRICT_NAMES 
 DW_MACRO_define_strp - lineno : 158 macro : __GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
 DW_MACRO_define_strp - lineno : 172 macro : __glibc_clang_prereq(maj,min) 0
 DW_MACRO_define_strp - lineno : 176 macro : __GLIBC_USE(F) __GLIBC_USE_ ## F
 DW_MACRO_undef_strp - lineno : 220 macro : _DEFAULT_SOURCE
 DW_MACRO_define_strp - lineno : 221 macro : _DEFAULT_SOURCE 1
 DW_MACRO_define_strp - lineno : 227 macro : __USE_ISOC11 1
 DW_MACRO_define_strp - lineno : 233 macro : __USE_ISOC99 1
 DW_MACRO_define_strp - lineno : 239 macro : __USE_ISOC95 1
 DW_MACRO_define_strp - lineno : 260 macro : __USE_POSIX_IMPLICITLY 1
 DW_MACRO_undef_strp - lineno : 262 macro : _POSIX_SOURCE
 DW_MACRO_define_strp - lineno : 263 macro : _POSIX_SOURCE 1
 DW_MACRO_undef_strp - lineno : 264 macro : _POSIX_C_SOURCE
 DW_MACRO_define_strp - lineno : 265 macro : _POSIX_C_SOURCE 200809L
 DW_MACRO_define_strp - lineno : 300 macro : __USE_POSIX 1
 DW_MACRO_define_strp - lineno : 304 macro : __USE_POSIX2 1
 DW_MACRO_define_strp - lineno : 308 macro : __USE_POSIX199309 1
 DW_MACRO_define_strp - lineno : 312 macro : __USE_POSIX199506 1
 DW_MACRO_define_strp - lineno : 316 macro : __USE_XOPEN2K 1
 DW_MACRO_undef_strp - lineno : 317 macro : __USE_ISOC95
 DW_MACRO_define_strp - lineno : 318 macro : __USE_ISOC95 1
 DW_MACRO_undef_strp - lineno : 319 macro : __USE_ISOC99
 DW_MACRO_define_strp - lineno : 320 macro : __USE_ISOC99 1
 DW_MACRO_define_strp - lineno : 324 macro : __USE_XOPEN2K8 1
 DW_MACRO_undef_strp - lineno : 325 macro : _ATFILE_SOURCE
 DW_MACRO_define_strp - lineno : 326 macro : _ATFILE_SOURCE 1
 DW_MACRO_define_strp - lineno : 368 macro : __USE_MISC 1
 DW_MACRO_define_strp - lineno : 372 macro : __USE_ATFILE 1
 DW_MACRO_define_strp - lineno : 387 macro : __USE_FORTIFY_LEVEL 0
 DW_MACRO_define_strp - lineno : 395 macro : __GLIBC_USE_DEPRECATED_GETS 0
 DW_MACRO_undef_strp - lineno : 410 macro : __GNU_LIBRARY__
 DW_MACRO_define_strp - lineno : 411 macro : __GNU_LIBRARY__ 6
 DW_MACRO_define_strp - lineno : 415 macro : __GLIBC__ 2
 DW_MACRO_define_strp - lineno : 416 macro : __GLIBC_MINOR__ 27
 DW_MACRO_define_strp - lineno : 418 macro : __GLIBC_PREREQ(maj,min) ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_define_strp - lineno : 19 macro : _SYS_CDEFS_H 1
 DW_MACRO_undef - lineno : 34 macro : __P
 DW_MACRO_undef_strp - lineno : 35 macro : __PMT
 DW_MACRO_define_strp - lineno : 42 macro : __LEAF , __leaf__
 DW_MACRO_define_strp - lineno : 43 macro : __LEAF_ATTR __attribute__ ((__leaf__))
 DW_MACRO_define_strp - lineno : 55 macro : __THROW __attribute__ ((__nothrow__ __LEAF))
 DW_MACRO_define_strp - lineno : 56 macro : __THROWNL __attribute__ ((__nothrow__))
 DW_MACRO_define_strp - lineno : 57 macro : __NTH(fct) __attribute__ ((__nothrow__ __LEAF)) fct
 DW_MACRO_define_strp - lineno : 58 macro : __NTHNL(fct) __attribute__ ((__nothrow__)) fct
 DW_MACRO_define_strp - lineno : 89 macro : __glibc_clang_has_extension(ext) 0
 DW_MACRO_define_strp - lineno : 94 macro : __P(args) args
 DW_MACRO_define_strp - lineno : 95 macro : __PMT(args) args
 DW_MACRO_define_strp - lineno : 100 macro : __CONCAT(x,y) x ## y
 DW_MACRO_define_strp - lineno : 101 macro : __STRING(x) #x
 DW_MACRO_define_strp - lineno : 104 macro : __ptr_t void *
 DW_MACRO_define_strp - lineno : 112 macro : __BEGIN_DECLS 
 DW_MACRO_define_strp - lineno : 113 macro : __END_DECLS 
 DW_MACRO_define_strp - lineno : 118 macro : __bos(ptr) __builtin_object_size (ptr, __USE_FORTIFY_LEVEL > 1)
 DW_MACRO_define_strp - lineno : 119 macro : __bos0(ptr) __builtin_object_size (ptr, 0)
 DW_MACRO_define_strp - lineno : 122 macro : __warndecl(name,msg) extern void name (void) __attribute__((__warning__ (msg)))
 DW_MACRO_define_strp - lineno : 124 macro : __warnattr(msg) __attribute__((__warning__ (msg)))
 DW_MACRO_define_strp - lineno : 125 macro : __errordecl(name,msg) extern void name (void) __attribute__((__error__ (msg)))
 DW_MACRO_define_strp - lineno : 138 macro : __flexarr []
 DW_MACRO_define_strp - lineno : 139 macro : __glibc_c99_flexarr_available 1
 DW_MACRO_define_strp - lineno : 169 macro : __REDIRECT(name,proto,alias) name proto __asm__ (__ASMNAME (#alias))
 DW_MACRO_define_strp - lineno : 176 macro : __REDIRECT_NTH(name,proto,alias) name proto __asm__ (__ASMNAME (#alias)) __THROW
 DW_MACRO_define_strp - lineno : 178 macro : __REDIRECT_NTHNL(name,proto,alias) name proto __asm__ (__ASMNAME (#alias)) __THROWNL
 DW_MACRO_define_strp - lineno : 181 macro : __ASMNAME(cname) __ASMNAME2 (__USER_LABEL_PREFIX__, cname)
 DW_MACRO_define_strp - lineno : 182 macro : __ASMNAME2(prefix,cname) __STRING (prefix) cname
 DW_MACRO_define_strp - lineno : 203 macro : __attribute_malloc__ __attribute__ ((__malloc__))
 DW_MACRO_define_strp - lineno : 211 macro : __attribute_alloc_size__(params) __attribute__ ((__alloc_size__ params))
 DW_MACRO_define_strp - lineno : 221 macro : __attribute_pure__ __attribute__ ((__pure__))
 DW_MACRO_define_strp - lineno : 228 macro : __attribute_const__ __attribute__ ((__const__))
 DW_MACRO_define_strp - lineno : 237 macro : __attribute_used__ __attribute__ ((__used__))
 DW_MACRO_define_strp - lineno : 238 macro : __attribute_noinline__ __attribute__ ((__noinline__))
 DW_MACRO_define_strp - lineno : 246 macro : __attribute_deprecated__ __attribute__ ((__deprecated__))
 DW_MACRO_define_strp - lineno : 256 macro : __attribute_deprecated_msg__(msg) __attribute__ ((__deprecated__ (msg)))
 DW_MACRO_define_strp - lineno : 269 macro : __attribute_format_arg__(x) __attribute__ ((__format_arg__ (x)))
 DW_MACRO_define_strp - lineno : 279 macro : __attribute_format_strfmon__(a,b) __attribute__ ((__format__ (__strfmon__, a, b)))
 DW_MACRO_define_strp - lineno : 288 macro : __nonnull(params) __attribute__ ((__nonnull__ params))
 DW_MACRO_define_strp - lineno : 296 macro : __attribute_warn_unused_result__ __attribute__ ((__warn_unused_result__))
 DW_MACRO_define_strp - lineno : 305 macro : __wur 
 DW_MACRO_undef_strp - lineno : 313 macro : __always_inline
 DW_MACRO_define_strp - lineno : 314 macro : __always_inline __inline __attribute__ ((__always_inline__))
 DW_MACRO_define_strp - lineno : 323 macro : __attribute_artificial__ __attribute__ ((__artificial__))
 DW_MACRO_define_strp - lineno : 341 macro : __extern_inline extern __inline __attribute__ ((__gnu_inline__))
 DW_MACRO_define_strp - lineno : 342 macro : __extern_always_inline extern __always_inline __attribute__ ((__gnu_inline__))
 DW_MACRO_define_strp - lineno : 351 macro : __fortify_function __extern_always_inline __attribute_artificial__
 DW_MACRO_define_strp - lineno : 357 macro : __va_arg_pack() __builtin_va_arg_pack ()
 DW_MACRO_define_strp - lineno : 358 macro : __va_arg_pack_len() __builtin_va_arg_pack_len ()
 DW_MACRO_define_strp - lineno : 378 macro : __restrict_arr __restrict
 DW_MACRO_define_strp - lineno : 393 macro : __glibc_unlikely(cond) __builtin_expect ((cond), 0)
 DW_MACRO_define_strp - lineno : 394 macro : __glibc_likely(cond) __builtin_expect ((cond), 1)
 DW_MACRO_define_strp - lineno : 416 macro : __attribute_nonstring__ 

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_define_strp - lineno : 4 macro : __WORDSIZE 64
 DW_MACRO_define_strp - lineno : 12 macro : __WORDSIZE_TIME64_COMPAT32 1
 DW_MACRO_define_strp - lineno : 14 macro : __SYSCALL_WORDSIZE 64

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_define_strp - lineno : 450 macro : __LDBL_REDIR1(name,proto,alias) name proto
 DW_MACRO_define_strp - lineno : 451 macro : __LDBL_REDIR(name,proto) name proto
 DW_MACRO_define_strp - lineno : 452 macro : __LDBL_REDIR1_NTH(name,proto,alias) name proto __THROW
 DW_MACRO_define_strp - lineno : 453 macro : __LDBL_REDIR_NTH(name,proto) name proto __THROW
 DW_MACRO_define_strp - lineno : 454 macro : __LDBL_REDIR_DECL(name) 
 DW_MACRO_define_strp - lineno : 456 macro : __REDIRECT_LDBL(name,proto,alias) __REDIRECT (name, proto, alias)
 DW_MACRO_define_strp - lineno : 457 macro : __REDIRECT_NTH_LDBL(name,proto,alias) __REDIRECT_NTH (name, proto, alias)
 DW_MACRO_define_strp - lineno : 468 macro : __glibc_macro_warning1(message) _Pragma (#message)
 DW_MACRO_define_strp - lineno : 469 macro : __glibc_macro_warning(message) __glibc_macro_warning1 (GCC warning message)
 DW_MACRO_define_strp - lineno : 487 macro : __HAVE_GENERIC_SELECTION 1

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_define_strp - lineno : 10 macro : __stub___compat_bdflush 
 DW_MACRO_define_strp - lineno : 11 macro : __stub_chflags 
 DW_MACRO_define_strp - lineno : 12 macro : __stub_fattach 
 DW_MACRO_define_strp - lineno : 13 macro : __stub_fchflags 
 DW_MACRO_define_strp - lineno : 14 macro : __stub_fdetach 
 DW_MACRO_define_strp - lineno : 15 macro : __stub_getmsg 
 DW_MACRO_define_strp - lineno : 16 macro : __stub_gtty 
 DW_MACRO_define_strp - lineno : 17 macro : __stub_lchmod 
 DW_MACRO_define_strp - lineno : 18 macro : __stub_putmsg 
 DW_MACRO_define_strp - lineno : 19 macro : __stub_revoke 
 DW_MACRO_define_strp - lineno : 20 macro : __stub_setlogin 
 DW_MACRO_define_strp - lineno : 21 macro : __stub_sigreturn 
 DW_MACRO_define_strp - lineno : 22 macro : __stub_sstk 
 DW_MACRO_define_strp - lineno : 23 macro : __stub_stty 

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_undef_strp - lineno : 37 macro : __GLIBC_USE_LIB_EXT2
 DW_MACRO_define_strp - lineno : 42 macro : __GLIBC_USE_LIB_EXT2 0
 DW_MACRO_undef_strp - lineno : 47 macro : __GLIBC_USE_IEC_60559_BFP_EXT
 DW_MACRO_define_strp - lineno : 51 macro : __GLIBC_USE_IEC_60559_BFP_EXT 0
 DW_MACRO_undef_strp - lineno : 56 macro : __GLIBC_USE_IEC_60559_FUNCS_EXT
 DW_MACRO_define_strp - lineno : 60 macro : __GLIBC_USE_IEC_60559_FUNCS_EXT 0
 DW_MACRO_undef_strp - lineno : 65 macro : __GLIBC_USE_IEC_60559_TYPES_EXT
 DW_MACRO_define_strp - lineno : 69 macro : __GLIBC_USE_IEC_60559_TYPES_EXT 0

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_define_strp - lineno : 31 macro : __need_size_t 
 DW_MACRO_define_strp - lineno : 32 macro : __need_NULL 

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_define_strp - lineno : 187 macro : __size_t__ 
 DW_MACRO_define_strp - lineno : 188 macro : __SIZE_T__ 
 DW_MACRO_define_strp - lineno : 189 macro : _SIZE_T 
 DW_MACRO_define_strp - lineno : 190 macro : _SYS_SIZE_T_H 
 DW_MACRO_define_strp - lineno : 191 macro : _T_SIZE_ 
 DW_MACRO_define_strp - lineno : 192 macro : _T_SIZE 
 DW_MACRO_define_strp - lineno : 193 macro : __SIZE_T 
 DW_MACRO_define_strp - lineno : 194 macro : _SIZE_T_ 
 DW_MACRO_define_strp - lineno : 195 macro : _BSD_SIZE_T_ 
 DW_MACRO_define_strp - lineno : 196 macro : _SIZE_T_DEFINED_ 
 DW_MACRO_define_strp - lineno : 197 macro : _SIZE_T_DEFINED 
 DW_MACRO_define_strp - lineno : 198 macro : _BSD_SIZE_T_DEFINED_ 
 DW_MACRO_define_strp - lineno : 199 macro : _SIZE_T_DECLARED 
 DW_MACRO_define_strp - lineno : 200 macro : ___int_size_t_h 
 DW_MACRO_define_strp - lineno : 201 macro : _GCC_SIZE_T 
 DW_MACRO_define_strp - lineno : 202 macro : _SIZET_ 
 DW_MACRO_define_strp - lineno : 210 macro : __size_t 
 DW_MACRO_undef_strp - lineno : 238 macro : __need_size_t
 DW_MACRO_undef_strp - lineno : 401 macro : NULL
 DW_MACRO_define_strp - lineno : 406 macro : NULL ((void *)0)
 DW_MACRO_undef_strp - lineno : 412 macro : __need_NULL

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_define_strp - lineno : 98 macro : __S16_TYPE short int
 DW_MACRO_define_strp - lineno : 99 macro : __U16_TYPE unsigned short int
 DW_MACRO_define_strp - lineno : 100 macro : __S32_TYPE int
 DW_MACRO_define_strp - lineno : 101 macro : __U32_TYPE unsigned int
 DW_MACRO_define_strp - lineno : 102 macro : __SLONGWORD_TYPE long int
 DW_MACRO_define_strp - lineno : 103 macro : __ULONGWORD_TYPE unsigned long int
 DW_MACRO_define_strp - lineno : 117 macro : __SQUAD_TYPE long int
 DW_MACRO_define_strp - lineno : 118 macro : __UQUAD_TYPE unsigned long int
 DW_MACRO_define_strp - lineno : 119 macro : __SWORD_TYPE long int
 DW_MACRO_define_strp - lineno : 120 macro : __UWORD_TYPE unsigned long int
 DW_MACRO_define_strp - lineno : 121 macro : __SLONG32_TYPE int
 DW_MACRO_define_strp - lineno : 122 macro : __ULONG32_TYPE unsigned int
 DW_MACRO_define_strp - lineno : 123 macro : __S64_TYPE long int
 DW_MACRO_define_strp - lineno : 124 macro : __U64_TYPE unsigned long int
 DW_MACRO_define_strp - lineno : 126 macro : __STD_TYPE typedef

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_define_strp - lineno : 24 macro : _BITS_TYPESIZES_H 1
 DW_MACRO_define_strp - lineno : 34 macro : __SYSCALL_SLONG_TYPE __SLONGWORD_TYPE
 DW_MACRO_define_strp - lineno : 35 macro : __SYSCALL_ULONG_TYPE __ULONGWORD_TYPE
 DW_MACRO_define_strp - lineno : 38 macro : __DEV_T_TYPE __UQUAD_TYPE
 DW_MACRO_define_strp - lineno : 39 macro : __UID_T_TYPE __U32_TYPE
 DW_MACRO_define_strp - lineno : 40 macro : __GID_T_TYPE __U32_TYPE
 DW_MACRO_define_strp - lineno : 41 macro : __INO_T_TYPE __SYSCALL_ULONG_TYPE
 DW_MACRO_define_strp - lineno : 42 macro : __INO64_T_TYPE __UQUAD_TYPE
 DW_MACRO_define_strp - lineno : 43 macro : __MODE_T_TYPE __U32_TYPE
 DW_MACRO_define_strp - lineno : 45 macro : __NLINK_T_TYPE __SYSCALL_ULONG_TYPE
 DW_MACRO_define_strp - lineno : 46 macro : __FSWORD_T_TYPE __SYSCALL_SLONG_TYPE
 DW_MACRO_define_strp - lineno : 51 macro : __OFF_T_TYPE __SYSCALL_SLONG_TYPE
 DW_MACRO_define_strp - lineno : 52 macro : __OFF64_T_TYPE __SQUAD_TYPE
 DW_MACRO_define_strp - lineno : 53 macro : __PID_T_TYPE __S32_TYPE
 DW_MACRO_define_strp - lineno : 54 macro : __RLIM_T_TYPE __SYSCALL_ULONG_TYPE
 DW_MACRO_define_strp - lineno : 55 macro : __RLIM64_T_TYPE __UQUAD_TYPE
 DW_MACRO_define_strp - lineno : 56 macro : __BLKCNT_T_TYPE __SYSCALL_SLONG_TYPE
 DW_MACRO_define_strp - lineno : 57 macro : __BLKCNT64_T_TYPE __SQUAD_TYPE
 DW_MACRO_define_strp - lineno : 58 macro : __FSBLKCNT_T_TYPE __SYSCALL_ULONG_TYPE
 DW_MACRO_define_strp - lineno : 59 macro : __FSBLKCNT64_T_TYPE __UQUAD_TYPE
 DW_MACRO_define_strp - lineno : 60 macro : __FSFILCNT_T_TYPE __SYSCALL_ULONG_TYPE
 DW_MACRO_define_strp - lineno : 61 macro : __FSFILCNT64_T_TYPE __UQUAD_TYPE
 DW_MACRO_define_strp - lineno : 62 macro : __ID_T_TYPE __U32_TYPE
 DW_MACRO_define_strp - lineno : 63 macro : __CLOCK_T_TYPE __SYSCALL_SLONG_TYPE
 DW_MACRO_define_strp - lineno : 64 macro : __TIME_T_TYPE __SYSCALL_SLONG_TYPE
 DW_MACRO_define_strp - lineno : 65 macro : __USECONDS_T_TYPE __U32_TYPE
 DW_MACRO_define_strp - lineno : 66 macro : __SUSECONDS_T_TYPE __SYSCALL_SLONG_TYPE
 DW_MACRO_define_strp - lineno : 67 macro : __DADDR_T_TYPE __S32_TYPE
 DW_MACRO_define_strp - lineno : 68 macro : __KEY_T_TYPE __S32_TYPE
 DW_MACRO_define_strp - lineno : 69 macro : __CLOCKID_T_TYPE __S32_TYPE
 DW_MACRO_define_strp - lineno : 70 macro : __TIMER_T_TYPE void *
 DW_MACRO_define_strp - lineno : 71 macro : __BLKSIZE_T_TYPE __SYSCALL_SLONG_TYPE
 DW_MACRO_define_strp - lineno : 72 macro : __FSID_T_TYPE struct { int __val[2]; }
 DW_MACRO_define_strp - lineno : 73 macro : __SSIZE_T_TYPE __SWORD_TYPE
 DW_MACRO_define_strp - lineno : 74 macro : __CPU_MASK_TYPE __SYSCALL_ULONG_TYPE
 DW_MACRO_define_strp - lineno : 80 macro : __OFF_T_MATCHES_OFF64_T 1
 DW_MACRO_define_strp - lineno : 83 macro : __INO_T_MATCHES_INO64_T 1
 DW_MACRO_define_strp - lineno : 86 macro : __RLIM_T_MATCHES_RLIM64_T 1
 DW_MACRO_define_strp - lineno : 92 macro : __FD_SETSIZE 1024

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_define_strp - lineno : 5 macro : _BITS_G_CONFIG_H 1
 DW_MACRO_define_strp - lineno : 14 macro : __need_size_t 
 DW_MACRO_define_strp - lineno : 18 macro : __need_NULL 

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_undef_strp - lineno : 238 macro : __need_size_t
 DW_MACRO_undef_strp - lineno : 401 macro : NULL
 DW_MACRO_define_strp - lineno : 406 macro : NULL ((void *)0)
 DW_MACRO_undef_strp - lineno : 412 macro : __need_NULL

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_define_strp - lineno : 51 macro : _G_va_list __gnuc_va_list
 DW_MACRO_define_strp - lineno : 53 macro : _G_HAVE_MMAP 1
 DW_MACRO_define_strp - lineno : 54 macro : _G_HAVE_MREMAP 1
 DW_MACRO_define_strp - lineno : 56 macro : _G_IO_IO_FILE_VERSION 0x20001
 DW_MACRO_define_strp - lineno : 59 macro : _G_HAVE_ST_BLKSIZE defined (_STATBUF_ST_BLKSIZE)
 DW_MACRO_define_strp - lineno : 61 macro : _G_BUFSIZ 8192

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_define_strp - lineno : 37 macro : _IO_fpos_t _G_fpos_t
 DW_MACRO_define_strp - lineno : 38 macro : _IO_fpos64_t _G_fpos64_t
 DW_MACRO_define_strp - lineno : 39 macro : _IO_size_t size_t
 DW_MACRO_define_strp - lineno : 40 macro : _IO_ssize_t __ssize_t
 DW_MACRO_define_strp - lineno : 41 macro : _IO_off_t __off_t
 DW_MACRO_define_strp - lineno : 42 macro : _IO_off64_t __off64_t
 DW_MACRO_define_strp - lineno : 43 macro : _IO_pid_t __pid_t
 DW_MACRO_define_strp - lineno : 44 macro : _IO_uid_t __uid_t
 DW_MACRO_define_strp - lineno : 45 macro : _IO_iconv_t _G_iconv_t
 DW_MACRO_define_strp - lineno : 46 macro : _IO_HAVE_ST_BLKSIZE _G_HAVE_ST_BLKSIZE
 DW_MACRO_define_strp - lineno : 47 macro : _IO_BUFSIZ _G_BUFSIZ
 DW_MACRO_define_strp - lineno : 48 macro : _IO_va_list _G_va_list
 DW_MACRO_define_strp - lineno : 49 macro : _IO_wint_t wint_t
 DW_MACRO_define_strp - lineno : 52 macro : __need___va_list 

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_undef_strp - lineno : 34 macro : __need___va_list
 DW_MACRO_define_strp - lineno : 39 macro : __GNUC_VA_LIST 

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_undef_strp - lineno : 55 macro : _IO_va_list
 DW_MACRO_define_strp - lineno : 56 macro : _IO_va_list __gnuc_va_list
 DW_MACRO_define_strp - lineno : 63 macro : _IO_UNIFIED_JUMPTABLES 1
 DW_MACRO_define_strp - lineno : 66 macro : EOF (-1)
 DW_MACRO_define_strp - lineno : 81 macro : _IOS_INPUT 1
 DW_MACRO_define_strp - lineno : 82 macro : _IOS_OUTPUT 2
 DW_MACRO_define_strp - lineno : 83 macro : _IOS_ATEND 4
 DW_MACRO_define_strp - lineno : 84 macro : _IOS_APPEND 8
 DW_MACRO_define_strp - lineno : 85 macro : _IOS_TRUNC 16
 DW_MACRO_define_strp - lineno : 86 macro : _IOS_NOCREATE 32
 DW_MACRO_define_strp - lineno : 87 macro : _IOS_NOREPLACE 64
 DW_MACRO_define_strp - lineno : 88 macro : _IOS_BIN 128
 DW_MACRO_define_strp - lineno : 96 macro : _IO_MAGIC 0xFBAD0000
 DW_MACRO_define_strp - lineno : 97 macro : _OLD_STDIO_MAGIC 0xFABC0000
 DW_MACRO_define_strp - lineno : 98 macro : _IO_MAGIC_MASK 0xFFFF0000
 DW_MACRO_define_strp - lineno : 99 macro : _IO_USER_BUF 1
 DW_MACRO_define_strp - lineno : 100 macro : _IO_UNBUFFERED 2
 DW_MACRO_define_strp - lineno : 101 macro : _IO_NO_READS 4
 DW_MACRO_define_strp - lineno : 102 macro : _IO_NO_WRITES 8
 DW_MACRO_define_strp - lineno : 103 macro : _IO_EOF_SEEN 0x10
 DW_MACRO_define_strp - lineno : 104 macro : _IO_ERR_SEEN 0x20
 DW_MACRO_define_strp - lineno : 105 macro : _IO_DELETE_DONT_CLOSE 0x40
 DW_MACRO_define_strp - lineno : 106 macro : _IO_LINKED 0x80
 DW_MACRO_define_strp - lineno : 107 macro : _IO_IN_BACKUP 0x100
 DW_MACRO_define_strp - lineno : 108 macro : _IO_LINE_BUF 0x200
 DW_MACRO_define_strp - lineno : 109 macro : _IO_TIED_PUT_GET 0x400
 DW_MACRO_define_strp - lineno : 110 macro : _IO_CURRENTLY_PUTTING 0x800
 DW_MACRO_define_strp - lineno : 111 macro : _IO_IS_APPENDING 0x1000
 DW_MACRO_define_strp - lineno : 112 macro : _IO_IS_FILEBUF 0x2000
 DW_MACRO_define_strp - lineno : 113 macro : _IO_BAD_SEEN 0x4000
 DW_MACRO_define_strp - lineno : 114 macro : _IO_USER_LOCK 0x8000
 DW_MACRO_define_strp - lineno : 116 macro : _IO_FLAGS2_MMAP 1
 DW_MACRO_define_strp - lineno : 117 macro : _IO_FLAGS2_NOTCANCEL 2
 DW_MACRO_define_strp - lineno : 121 macro : _IO_FLAGS2_USER_WBUF 8
 DW_MACRO_define_strp - lineno : 130 macro : _IO_SKIPWS 01
 DW_MACRO_define_strp - lineno : 131 macro : _IO_LEFT 02
 DW_MACRO_define_strp - lineno : 132 macro : _IO_RIGHT 04
 DW_MACRO_define_strp - lineno : 133 macro : _IO_INTERNAL 010
 DW_MACRO_define_strp - lineno : 134 macro : _IO_DEC 020
 DW_MACRO_define_strp - lineno : 135 macro : _IO_OCT 040
 DW_MACRO_define_strp - lineno : 136 macro : _IO_HEX 0100
 DW_MACRO_define_strp - lineno : 137 macro : _IO_SHOWBASE 0200
 DW_MACRO_define_strp - lineno : 138 macro : _IO_SHOWPOINT 0400
 DW_MACRO_define_strp - lineno : 139 macro : _IO_UPPERCASE 01000
 DW_MACRO_define_strp - lineno : 140 macro : _IO_SHOWPOS 02000
 DW_MACRO_define_strp - lineno : 141 macro : _IO_SCIENTIFIC 04000
 DW_MACRO_define_strp - lineno : 142 macro : _IO_FIXED 010000
 DW_MACRO_define_strp - lineno : 143 macro : _IO_UNITBUF 020000
 DW_MACRO_define_strp - lineno : 144 macro : _IO_STDIO 040000
 DW_MACRO_define_strp - lineno : 145 macro : _IO_DONT_CLOSE 0100000
 DW_MACRO_define_strp - lineno : 146 macro : _IO_BOOLALPHA 0200000
 DW_MACRO_define_strp - lineno : 247 macro : _IO_file_flags _flags
 DW_MACRO_define_strp - lineno : 276 macro : __HAVE_COLUMN 
 DW_MACRO_define_strp - lineno : 323 macro : _IO_stdin ((_IO_FILE*)(&_IO_2_1_stdin_))
 DW_MACRO_define_strp - lineno : 324 macro : _IO_stdout ((_IO_FILE*)(&_IO_2_1_stdout_))
 DW_MACRO_define_strp - lineno : 325 macro : _IO_stderr ((_IO_FILE*)(&_IO_2_1_stderr_))
 DW_MACRO_define_strp - lineno : 399 macro : _IO_BE(expr,res) __builtin_expect ((expr), res)
 DW_MACRO_define_strp - lineno : 404 macro : _IO_getc_unlocked(_fp) (_IO_BE ((_fp)->_IO_read_ptr >= (_fp)->_IO_read_end, 0) ? __uflow (_fp) : *(unsigned char *) (_fp)->_IO_read_ptr++)
 DW_MACRO_define_strp - lineno : 407 macro : _IO_peekc_unlocked(_fp) (_IO_BE ((_fp)->_IO_read_ptr >= (_fp)->_IO_read_end, 0) && __underflow (_fp) == EOF ? EOF : *(unsigned char *) (_fp)->_IO_read_ptr)
 DW_MACRO_define_strp - lineno : 411 macro : _IO_putc_unlocked(_ch,_fp) (_IO_BE ((_fp)->_IO_write_ptr >= (_fp)->_IO_write_end, 0) ? __overflow (_fp, (unsigned char) (_ch)) : (unsigned char) (*(_fp)->_IO_write_ptr++ = (_ch)))
 DW_MACRO_define_strp - lineno : 430 macro : _IO_feof_unlocked(__fp) (((__fp)->_flags & _IO_EOF_SEEN) != 0)
 DW_MACRO_define_strp - lineno : 431 macro : _IO_ferror_unlocked(__fp) (((__fp)->_flags & _IO_ERR_SEEN) != 0)
 DW_MACRO_define_strp - lineno : 441 macro : _IO_PENDING_OUTPUT_COUNT(_fp) ((_fp)->_IO_write_ptr - (_fp)->_IO_write_base)
 DW_MACRO_define_strp - lineno : 448 macro : _IO_peekc(_fp) _IO_peekc_unlocked (_fp)
 DW_MACRO_define_strp - lineno : 449 macro : _IO_flockfile(_fp) 
 DW_MACRO_define_strp - lineno : 450 macro : _IO_funlockfile(_fp) 
 DW_MACRO_define_strp - lineno : 451 macro : _IO_ftrylockfile(_fp) 
 DW_MACRO_define_strp - lineno : 453 macro : _IO_cleanup_region_start(_fct,_fp) 
 DW_MACRO_define_strp - lineno : 456 macro : _IO_cleanup_region_end(_Doit) 
 DW_MACRO_define_strp - lineno : 459 macro : _IO_need_lock(_fp) (((_fp)->_flags2 & _IO_FLAGS2_NEED_LOCK) != 0)

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_define_strp - lineno : 47 macro : _VA_LIST_DEFINED 
 DW_MACRO_define_strp - lineno : 61 macro : __off_t_defined 
 DW_MACRO_define_strp - lineno : 72 macro : __ssize_t_defined 
 DW_MACRO_define_strp - lineno : 87 macro : _IOFBF 0
 DW_MACRO_define_strp - lineno : 88 macro : _IOLBF 1
 DW_MACRO_define_strp - lineno : 89 macro : _IONBF 2
 DW_MACRO_define_strp - lineno : 94 macro : BUFSIZ _IO_BUFSIZ
 DW_MACRO_define_strp - lineno : 107 macro : SEEK_SET 0
 DW_MACRO_define_strp - lineno : 108 macro : SEEK_CUR 1
 DW_MACRO_define_strp - lineno : 109 macro : SEEK_END 2
 DW_MACRO_define_strp - lineno : 118 macro : P_tmpdir "/tmp"

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_define_strp - lineno : 19 macro : _BITS_STDIO_LIM_H 1
 DW_MACRO_define_strp - lineno : 25 macro : L_tmpnam 20
 DW_MACRO_define_strp - lineno : 26 macro : TMP_MAX 238328
 DW_MACRO_define_strp - lineno : 27 macro : FILENAME_MAX 4096
 DW_MACRO_define_strp - lineno : 30 macro : L_ctermid 9
 DW_MACRO_undef_strp - lineno : 36 macro : FOPEN_MAX
 DW_MACRO_define_strp - lineno : 37 macro : FOPEN_MAX 16

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4

 DW_MACRO_define_strp - lineno : 139 macro : stdin stdin
 DW_MACRO_define_strp - lineno : 140 macro : stdout stdout
 DW_MACRO_define_strp - lineno : 141 macro : stderr stderr
 DW_MACRO_define_strp - lineno : 488 macro : getc(_fp) _IO_getc (_fp)
 DW_MACRO_define_strp - lineno : 528 macro : putc(_ch,_fp) _IO_putc (_ch, _fp)

Raw dump of debug contents of section .debug_line:

  Offset:                      0x0
  Length:                      558
  DWARF Version:               2
  Prologue Length:             525
  Minimum Instruction Length:  1
  Initial value of 'is_stmt':  1
  Line Base:                   -5
  Line Range:                  14
  Opcode Base:                 13

 Opcodes:
  Opcode 1 has 0 args
  Opcode 2 has 1 arg
  Opcode 3 has 1 arg
  Opcode 4 has 1 arg
  Opcode 5 has 1 arg
  Opcode 6 has 0 args
  Opcode 7 has 0 args
  Opcode 8 has 0 args
  Opcode 9 has 1 arg
  Opcode 10 has 0 args
  Opcode 11 has 0 args
  Opcode 12 has 1 arg

 The Directory Table (offset 0x1b):
  1	/usr/lib/gcc/x86_64-linux-gnu/7/include
  2	/usr/x86_64-linux-gnu/include/bits
  3	/usr/x86_64-linux-gnu/include
  4	/usr/x86_64-linux-gnu/include/sys
  5	/usr/x86_64-linux-gnu/include/gnu
  6	/usr/x86_64-linux-gnu/include/bits/types

 The File Name Table (offset 0xf2):
  Entry	Dir	Time	Size	Name
  1	0	0	0	if_then.c
  2	1	0	0	stddef.h
  3	2	0	0	types.h
  4	2	0	0	libio.h
  5	3	0	0	stdio.h
  6	2	0	0	sys_errlist.h
  7	3	0	0	stdc-predef.h
  8	2	0	0	libc-header-start.h
  9	3	0	0	features.h
  10	4	0	0	cdefs.h
  11	2	0	0	wordsize.h
  12	2	0	0	long-double.h
  13	5	0	0	stubs.h
  14	5	0	0	stubs-64.h
  15	2	0	0	typesizes.h
  16	6	0	0	__FILE.h
  17	6	0	0	FILE.h
  18	2	0	0	_G_config.h
  19	6	0	0	__mbstate_t.h
  20	1	0	0	stdarg.h
  21	2	0	0	stdio_lim.h

 Line Number Statements:
  [0x00000217]  Extended opcode 2: set Address to 0x0
  [0x00000222]  Special opcode 7: advance Address by 0 to 0x0 and Line by 2 to 3
  [0x00000223]  Special opcode 215: advance Address by 15 to 0xf and Line by 0 to 3
  [0x00000224]  Special opcode 219: advance Address by 15 to 0x1e and Line by 4 to 7
  [0x00000225]  Special opcode 105: advance Address by 7 to 0x25 and Line by 2 to 9
  [0x00000226]  Advance PC by constant 17 to 0x36
  [0x00000227]  Special opcode 6: advance Address by 0 to 0x36 and Line by 1 to 10
  [0x00000228]  Advance PC by constant 17 to 0x47
  [0x00000229]  Special opcode 105: advance Address by 7 to 0x4e and Line by 2 to 12
  [0x0000022a]  Special opcode 118: advance Address by 8 to 0x56 and Line by 1 to 13
  [0x0000022b]  Advance PC by constant 17 to 0x67
  [0x0000022c]  Special opcode 8: advance Address by 0 to 0x67 and Line by 3 to 16
  [0x0000022d]  Advance PC by 22 to 0x7d
  [0x0000022f]  Extended opcode 1: End of Sequence


Contents of the .debug_str section:

  0x00000000 5f494f5f 44454320 30323000 5f53495a _IO_DEC 020._SIZ
  0x00000010 455f545f 20005f5f 5349475f 41544f4d E_T_ .__SIG_ATOM
  0x00000020 49435f4d 41585f5f 20307837 66666666 IC_MAX__ 0x7ffff
  0x00000030 66666600 5f5f464c 5436345f 4841535f fff.__FLT64_HAS_
  0x00000040 51554945 545f4e41 4e5f5f20 31005f53 QUIET_NAN__ 1._S
  0x00000050 495a455f 545f4445 46494e45 4420005f IZE_T_DEFINED ._
  0x00000060 494f5f49 535f4649 4c454255 46203078 IO_IS_FILEBUF 0x
  0x00000070 32303030 005f5f44 45433634 5f535542 2000.__DEC64_SUB
  0x00000080 4e4f524d 414c5f4d 494e5f5f 20302e30 NORMAL_MIN__ 0.0
  0x00000090 30303030 30303030 30303030 3031452d 00000000000001E-
  0x000000a0 33383344 44005f5f 464c5433 325f4841 383DD.__FLT32_HA
  0x000000b0 535f494e 46494e49 54595f5f 2031005f S_INFINITY__ 1._
  0x000000c0 5f464c54 36345f4d 41585f45 58505f5f _FLT64_MAX_EXP__
  0x000000d0 20313032 34005f5f 464c545f 4d494e5f  1024.__FLT_MIN_
  0x000000e0 31305f45 58505f5f 20282d33 3729005f 10_EXP__ (-37)._
  0x000000f0 5f535953 43414c4c 5f554c4f 4e475f54 _SYSCALL_ULONG_T
  0x00000100 59504520 5f5f554c 4f4e4757 4f52445f YPE __ULONGWORD_
  0x00000110 54595045 005f5f46 4c543634 585f4550 TYPE.__FLT64X_EP
  0x00000120 53494c4f 4e5f5f20 312e3038 34323032 SILON__ 1.084202
  0x00000130 31373234 38353530 34343334 30303734 1724855044340074
  0x00000140 35323830 30383639 39343137 31652d31 5280086994171e-1
  0x00000150 39463634 78005f5f 464c5433 32585f4d 9F64x.__FLT32X_M
  0x00000160 41585f45 58505f5f 20313032 34005f73 AX_EXP__ 1024._s
  0x00000170 686f7274 62756600 5f5f4743 435f4154 hortbuf.__GCC_AT
  0x00000180 4f4d4943 5f544553 545f414e 445f5345 OMIC_TEST_AND_SE
  0x00000190 545f5452 55455641 4c203100 5f5f4f46 T_TRUEVAL 1.__OF
  0x000001a0 465f545f 4d415443 4845535f 4f464636 F_T_MATCHES_OFF6
  0x000001b0 345f5420 31005f5f 44454336 345f4550 4_T 1.__DEC64_EP
  0x000001c0 53494c4f 4e5f5f20 31452d31 35444400 SILON__ 1E-15DD.
  0x000001d0 5f5f4442 4c5f4445 4e4f524d 5f4d494e __DBL_DENORM_MIN
  0x000001e0 5f5f2028 28646f75 626c6529 342e3934 __ ((double)4.94
  0x000001f0 30363536 34353834 31323436 35343431 0656458412465441
  0x00000200 37363536 38373932 38363832 32313337 7656879286822137
  0x00000210 32652d33 32344c29 005f494f 5f6c6f63 2e-324L)._IO_loc
  0x00000220 6b5f7400 5f5f494e 54505452 5f4d4158 k_t.__INTPTR_MAX
  0x00000230 5f5f2030 78376666 66666666 66666666 __ 0x7ffffffffff
  0x00000240 66666666 664c005f 475f4841 56455f53 fffffL._G_HAVE_S
  0x00000250 545f424c 4b53495a 45206465 66696e65 T_BLKSIZE define
  0x00000260 6420285f 53544154 4255465f 53545f42 d (_STATBUF_ST_B
  0x00000270 4c4b5349 5a452900 5f5f666c 65786172 LKSIZE).__flexar
  0x00000280 72205b5d 005f5f46 4c543332 5f4d414e r [].__FLT32_MAN
  0x00000290 545f4449 475f5f20 32340063 68617200 T_DIG__ 24.char.
  0x000002a0 5f5f4743 435f4841 56455f53 594e435f __GCC_HAVE_SYNC_
  0x000002b0 434f4d50 4152455f 414e445f 53574150 COMPARE_AND_SWAP
  0x000002c0 5f382031 005f494f 535f4249 4e203132 _8 1._IOS_BIN 12
  0x000002d0 38004649 4c454e41 4d455f4d 41582034 8.FILENAME_MAX 4
  0x000002e0 30393600 5f535444 435f5052 45444546 096._STDC_PREDEF
  0x000002f0 5f482031 00737464 65727200 5f5f5553 _H 1.stderr.__US
  0x00000300 455f4953 4f433131 2031005f 494f4642 E_ISOC11 1._IOFB
  0x00000310 46203000 5f494f5f 6275665f 656e6400 F 0._IO_buf_end.
  0x00000320 5f5f494e 545f4641 53543634 5f574944 __INT_FAST64_WID
  0x00000330 54485f5f 20363400 5f494f5f 454f465f TH__ 64._IO_EOF_
  0x00000340 5345454e 20307831 30005345 454b5f43 SEEN 0x10.SEEK_C
  0x00000350 55522031 005f5f46 4c543332 585f4445 UR 1.__FLT32X_DE
  0x00000360 43494d41 4c5f4449 475f5f20 3137005f CIMAL_DIG__ 17._
  0x00000370 5f6b385f 5f203100 5f5f4442 4c5f4d49 _k8__ 1.__DBL_MI
  0x00000380 4e5f4558 505f5f20 282d3130 32312900 N_EXP__ (-1021).
  0x00000390 5f5f494e 545f4641 53543634 5f4d4158 __INT_FAST64_MAX
  0x000003a0 5f5f2030 78376666 66666666 66666666 __ 0x7ffffffffff
  0x000003b0 66666666 664c005f 5f686173 5f696e63 fffffL.__has_inc
  0x000003c0 6c756465 5f6e6578 74285354 5229205f lude_next(STR) _
  0x000003d0 5f686173 5f696e63 6c756465 5f6e6578 _has_include_nex
  0x000003e0 745f5f28 53545229 005f494f 5f524947 t__(STR)._IO_RIG
  0x000003f0 48542030 34005f49 4f5f5553 45525f42 HT 04._IO_USER_B
  0x00000400 55462031 005f5359 535f4344 4546535f UF 1._SYS_CDEFS_
  0x00000410 48203100 5f5f464c 54333258 5f4d4158 H 1.__FLT32X_MAX
  0x00000420 5f5f2031 2e373937 36393331 33343836 __ 1.79769313486
  0x00000430 32333135 37303831 34353237 34323337 2315708145274237
  0x00000440 33313730 34333537 652b3330 38463332 31704357e+308F32
  0x00000450 78005f5f 676c6962 635f756e 6c696b65 x.__glibc_unlike
  0x00000460 6c792863 6f6e6429 205f5f62 75696c74 ly(cond) __built
  0x00000470 696e5f65 78706563 74202828 636f6e64 in_expect ((cond
  0x00000480 292c2030 29005f5f 53495a45 4f465f57 ), 0).__SIZEOF_W
  0x00000490 494e545f 545f5f20 34005f5f 474e5543 INT_T__ 4.__GNUC
  0x000004a0 5f505245 52455128 6d616a2c 6d696e29 _PREREQ(maj,min)
  0x000004b0 2028285f 5f474e55 435f5f20 3c3c2031  ((__GNUC__ << 1
  0x000004c0 3629202b 205f5f47 4e55435f 4d494e4f 6) + __GNUC_MINO
  0x000004d0 525f5f20 3e3d2028 286d616a 29203c3c R__ >= ((maj) <<
  0x000004e0 20313629 202b2028 6d696e29 29005f5f  16) + (min)).__
  0x000004f0 55494e54 5054525f 4d41585f 5f203078 UINTPTR_MAX__ 0x
  0x00000500 66666666 66666666 66666666 66666666 ffffffffffffffff
  0x00000510 554c005f 53495a45 5f542000 5f5f7661 UL._SIZE_T .__va
  0x00000520 5f617267 5f706163 6b5f6c65 6e282920 _arg_pack_len() 
  0x00000530 5f5f6275 696c7469 6e5f7661 5f617267 __builtin_va_arg
  0x00000540 5f706163 6b5f6c65 6e202829 005f475f _pack_len ()._G_
  0x00000550 48415645 5f4d4d41 50203100 5f5f6174 HAVE_MMAP 1.__at
  0x00000560 74726962 7574655f 636f6e73 745f5f20 tribute_const__ 
  0x00000570 5f5f6174 74726962 7574655f 5f202828 __attribute__ ((
  0x00000580 5f5f636f 6e73745f 5f292900 5f5f474c __const__)).__GL
  0x00000590 4942435f 5553455f 44455052 45434154 IBC_USE_DEPRECAT
  0x000005a0 45445f47 45545300 5f494f5f 4e4f5f57 ED_GETS._IO_NO_W
  0x000005b0 52495445 53203800 5f5f474e 55435f4d RITES 8.__GNUC_M
  0x000005c0 494e4f52 5f5f2033 005f5f55 53455f4c INOR__ 3.__USE_L
  0x000005d0 41524745 46494c45 3634005f 5f524c49 ARGEFILE64.__RLI
  0x000005e0 4d5f545f 54595045 205f5f53 59534341 M_T_TYPE __SYSCA
  0x000005f0 4c4c5f55 4c4f4e47 5f545950 45005f5f LL_ULONG_TYPE.__
  0x00000600 4c44424c 5f524544 4952286e 616d652c LDBL_REDIR(name,
  0x00000610 70726f74 6f29206e 616d6520 70726f74 proto) name prot
  0x00000620 6f005f49 4f5f7772 6974655f 656e6400 o._IO_write_end.
  0x00000630 756e7369 676e6564 20696e74 005f5f47 unsigned int.__G
  0x00000640 4c494243 5f505245 52455128 6d616a2c LIBC_PREREQ(maj,
  0x00000650 6d696e29 2028285f 5f474c49 42435f5f min) ((__GLIBC__
  0x00000660 203c3c20 31362920 2b205f5f 474c4942  << 16) + __GLIB
  0x00000670 435f4d49 4e4f525f 5f203e3d 2028286d C_MINOR__ >= ((m
  0x00000680 616a2920 3c3c2031 3629202b 20286d69 aj) << 16) + (mi
  0x00000690 6e292900 5f5f6e65 65645f4e 554c4c20 n)).__need_NULL 
  0x000006a0 005f5f46 4c543634 5f4d494e 5f5f2032 .__FLT64_MIN__ 2
  0x000006b0 2e323235 30373338 35383530 37323031 .225073858507201
  0x000006c0 33383330 39303233 32373137 33333234 3830902327173324
  0x000006d0 30343036 652d3330 38463634 005f5f4c 0406e-308F64.__L
  0x000006e0 4f4e475f 4c4f4e47 5f574944 54485f5f ONG_LONG_WIDTH__
  0x000006f0 20363400 5f504f53 49585f53 4f555243  64._POSIX_SOURC
  0x00000700 45005f5f 464c545f 44454e4f 524d5f4d E.__FLT_DENORM_M
  0x00000710 494e5f5f 20312e34 30313239 38343634 IN__ 1.401298464
  0x00000720 33323438 31373037 30393233 37323935 3248170709237295
  0x00000730 38333238 39393136 3133652d 34354600 8328991613e-45F.
  0x00000740 2f686f6d 652f7562 756e7475 2f456e67 /home/ubuntu/Eng
  0x00000750 696e6565 72696e67 2f50726f 6772616d ineering/Program
  0x00000760 6d696e67 2f446973 61737365 6d626c69 ming/Disassembli
  0x00000770 6e672d42 696e6172 6965732f 432f496e ng-Binaries/C/In
  0x00000780 74656c5f 61726368 69746563 74757265 tel_architecture
  0x00000790 2f414d44 36342f43 6f6e6469 74696f6e /AMD64/Condition
  0x000007a0 616c732f 57697468 5f446562 75675f49 als/With_Debug_I
  0x000007b0 6e666f00 5f5f5349 5a454f46 5f53495a nfo.__SIZEOF_SIZ
  0x000007c0 455f545f 5f203800 61726763 005f666c E_T__ 8.argc._fl
  0x000007d0 61677300 5f5f4f52 4445525f 4249475f ags.__ORDER_BIG_
  0x000007e0 454e4449 414e5f5f 20343332 31005f5f ENDIAN__ 4321.__
  0x000007f0 474e5543 5f5f2037 005f494f 5f4c494e GNUC__ 7._IO_LIN
  0x00000800 455f4255 46203078 32303000 5f5f5553 E_BUF 0x200.__US
  0x00000810 455f4953 4f435858 3131005f 5f555345 E_ISOCXX11.__USE
  0x00000820 5f415446 494c4520 31005f5f 6e6f6e6e _ATFILE 1.__nonn
  0x00000830 756c6c28 70617261 6d732920 5f5f6174 ull(params) __at
  0x00000840 74726962 7574655f 5f202828 5f5f6e6f tribute__ ((__no
  0x00000850 6e6e756c 6c5f5f20 70617261 6d732929 nnull__ params))
  0x00000860 005f5f55 494e5436 345f4328 63292063 .__UINT64_C(c) c
  0x00000870 20232320 554c005f 5f474e55 5f4c4942  ## UL.__GNU_LIB
  0x00000880 52415259 5f5f005f 5f44424c 5f4d414e RARY__.__DBL_MAN
  0x00000890 545f4449 475f5f20 3533005f 5f555345 T_DIG__ 53.__USE
  0x000008a0 5f504f53 49583139 39353036 2031005f _POSIX199506 1._
  0x000008b0 5f737475 625f6368 666c6167 7320005f _stub_chflags ._
  0x000008c0 5f494e54 5f4d4158 5f5f2030 78376666 _INT_MAX__ 0x7ff
  0x000008d0 66666666 66005f66 6c616773 32005f5f fffff._flags2.__
  0x000008e0 4e54484e 4c286663 7429205f 5f617474 NTHNL(fct) __att
  0x000008f0 72696275 74655f5f 2028285f 5f6e6f74 ribute__ ((__not
  0x00000900 68726f77 5f5f2929 20666374 005f5f73 hrow__)) fct.__s
  0x00000910 7475625f 66636866 6c616773 20005f5f tub_fchflags .__
  0x00000920 494e5431 365f5459 50455f5f 2073686f INT16_TYPE__ sho
  0x00000930 72742069 6e74005f 5f444543 494d414c rt int.__DECIMAL
  0x00000940 5f424944 5f464f52 4d41545f 5f203100 _BID_FORMAT__ 1.
  0x00000950 5f5f4445 4333325f 45505349 4c4f4e5f __DEC32_EPSILON_
  0x00000960 5f203145 2d364446 005f5349 5a455f54 _ 1E-6DF._SIZE_T
  0x00000970 5f444543 4c415245 4420005f 5f46445f _DECLARED .__FD_
  0x00000980 53455453 495a4520 31303234 005f5f4c SETSIZE 1024.__L
  0x00000990 44424c5f 4449475f 5f203138 005f6d61 DBL_DIG__ 18._ma
  0x000009a0 726b6572 73005f5f 41544f4d 49435f53 rkers.__ATOMIC_S
  0x000009b0 45515f43 53542035 005f5f55 53455f50 EQ_CST 5.__USE_P
  0x000009c0 4f534958 32203100 5f5f5553 455f4953 OSIX2 1.__USE_IS
  0x000009d0 4f433935 2031005f 5f53495a 454f465f OC95 1.__SIZEOF_
  0x000009e0 53484f52 545f5f20 32005f47 5f76615f SHORT__ 2._G_va_
  0x000009f0 6c697374 205f5f67 6e75635f 76615f6c list __gnuc_va_l
  0x00000a00 69737400 5f5f5549 4e543634 5f545950 ist.__UINT64_TYP
  0x00000a10 455f5f20 6c6f6e67 20756e73 69676e65 E__ long unsigne
  0x00000a20 6420696e 74005f5f 494e545f 46415354 d int.__INT_FAST
  0x00000a30 33325f4d 41585f5f 20307837 66666666 32_MAX__ 0x7ffff
  0x00000a40 66666666 66666666 6666664c 005f5f49 fffffffffffL.__I
  0x00000a50 4e545f4c 45415354 385f5459 50455f5f NT_LEAST8_TYPE__
  0x00000a60 20736967 6e656420 63686172 005f5f73  signed char.__s
  0x00000a70 697a655f 7420005f 5f55494e 545f4c45 ize_t .__UINT_LE
  0x00000a80 41535433 325f5459 50455f5f 20756e73 AST32_TYPE__ uns
  0x00000a90 69676e65 6420696e 74005f5f 73747562 igned int.__stub
  0x00000aa0 5f736967 72657475 726e2000 5f5f7074 _sigreturn .__pt
  0x00000ab0 725f7420 766f6964 202a005f 5f533332 r_t void *.__S32
  0x00000ac0 5f545950 4520696e 74005f5f 53544443 _TYPE int.__STDC
  0x00000ad0 5f4e4f5f 54485245 4144535f 5f203100 _NO_THREADS__ 1.
  0x00000ae0 5f5f4259 54455f4f 52444552 5f5f205f __BYTE_ORDER__ _
  0x00000af0 5f4f5244 45525f4c 4954544c 455f454e _ORDER_LITTLE_EN
  0x00000b00 4449414e 5f5f005f 5f4c4442 4c5f4d49 DIAN__.__LDBL_MI
  0x00000b10 4e5f5f20 332e3336 32313033 31343331 N__ 3.3621031431
  0x00000b20 31323039 33353036 32363236 37373831 1209350626267781
  0x00000b30 37333231 37353236 30652d34 3933324c 732175260e-4932L
  0x00000b40 006c696e 75782031 005f5f46 4c543332 .linux 1.__FLT32
  0x00000b50 5f4d494e 5f31305f 4558505f 5f20282d _MIN_10_EXP__ (-
  0x00000b60 33372900 5f5f4442 4c5f4841 535f4445 37).__DBL_HAS_DE
  0x00000b70 4e4f524d 5f5f2031 005f5f49 4e545f4c NORM__ 1.__INT_L
  0x00000b80 45415354 36345f54 5950455f 5f206c6f EAST64_TYPE__ lo
  0x00000b90 6e672069 6e74005f 5f574348 41525f4d ng int.__WCHAR_M
  0x00000ba0 494e5f5f 20282d5f 5f574348 41525f4d IN__ (-__WCHAR_M
  0x00000bb0 41585f5f 202d2031 29005f49 4f5f5348 AX__ - 1)._IO_SH
  0x00000bc0 4f57504f 494e5420 30343030 005f5f6f OWPOINT 0400.__o
  0x00000bd0 66665f74 5f646566 696e6564 20005f5f ff_t_defined .__
  0x00000be0 53544443 5f555446 5f33325f 5f203100 STDC_UTF_32__ 1.
  0x00000bf0 5f5f424c 4b53495a 455f545f 54595045 __BLKSIZE_T_TYPE
  0x00000c00 205f5f53 59534341 4c4c5f53 4c4f4e47  __SYSCALL_SLONG
  0x00000c10 5f545950 45005f5f 494e545f 4c454153 _TYPE.__INT_LEAS
  0x00000c20 5431365f 4d41585f 5f203078 37666666 T16_MAX__ 0x7fff
  0x00000c30 005f5f4c 44424c5f 52454449 525f4445 .__LDBL_REDIR_DE
  0x00000c40 434c286e 616d6529 2000474e 55204331 CL(name) .GNU C1
  0x00000c50 3120372e 332e3020 2d6d7475 6e653d67 1 7.3.0 -mtune=g
  0x00000c60 656e6572 6963202d 6d617263 683d7838 eneric -march=x8
  0x00000c70 362d3634 202d6767 64623320 2d667374 6-64 -ggdb3 -fst
  0x00000c80 61636b2d 70726f74 6563746f 722d7374 ack-protector-st
  0x00000c90 726f6e67 005f5f53 43484152 5f4d4158 rong.__SCHAR_MAX
  0x00000ca0 5f5f2030 78376600 5f5f6578 7465726e __ 0x7f.__extern
  0x00000cb0 5f616c77 6179735f 696e6c69 6e652065 _always_inline e
  0x00000cc0 78746572 6e205f5f 616c7761 79735f69 xtern __always_i
  0x00000cd0 6e6c696e 65205f5f 61747472 69627574 nline __attribut
  0x00000ce0 655f5f20 28285f5f 676e755f 696e6c69 e__ ((__gnu_inli
  0x00000cf0 6e655f5f 2929005f 5f464c54 36345f44 ne__)).__FLT64_D
  0x00000d00 49475f5f 20313500 5f5f494e 545f4641 IG__ 15.__INT_FA
  0x00000d10 5354385f 54595045 5f5f2073 69676e65 ST8_TYPE__ signe
  0x00000d20 64206368 6172005f 5f504945 5f5f2032 d char.__PIE__ 2
  0x00000d30 005f494f 5f6f6666 36345f74 205f5f6f ._IO_off64_t __o
  0x00000d40 66663634 5f740069 665f7468 656e2e63 ff64_t.if_then.c
  0x00000d50 005f5f47 4c494243 5f555345 5f494543 .__GLIBC_USE_IEC
  0x00000d60 5f363035 35395f54 59504553 5f455854 _60559_TYPES_EXT
  0x00000d70 005f5f46 4c543332 585f4841 535f494e .__FLT32X_HAS_IN
  0x00000d80 46494e49 54595f5f 2031005f 5f555345 FINITY__ 1.__USE
  0x00000d90 5f554e49 58393800 5f5f5553 455f464f _UNIX98.__USE_FO
  0x00000da0 52544946 595f4c45 56454c20 30005f41 RTIFY_LEVEL 0._A
  0x00000db0 5446494c 455f534f 55524345 005f5f55 TFILE_SOURCE.__U
  0x00000dc0 53455f41 5446494c 45005f5f 55494e54 SE_ATFILE.__UINT
  0x00000dd0 5f4c4541 5354385f 54595045 5f5f2075 _LEAST8_TYPE__ u
  0x00000de0 6e736967 6e656420 63686172 005f5f53 nsigned char.__S
  0x00000df0 495a454f 465f494e 54313238 5f5f2031 IZEOF_INT128__ 1
  0x00000e00 36005f5f 4e544828 66637429 205f5f61 6.__NTH(fct) __a
  0x00000e10 74747269 62757465 5f5f2028 285f5f6e ttribute__ ((__n
  0x00000e20 6f746872 6f775f5f 205f5f4c 45414629 othrow__ __LEAF)
  0x00000e30 29206663 74005f49 4f535f41 54454e44 ) fct._IOS_ATEND
  0x00000e40 2034005f 5f676c69 62635f6d 6163726f  4.__glibc_macro
  0x00000e50 5f776172 6e696e67 286d6573 73616765 _warning(message
  0x00000e60 29205f5f 676c6962 635f6d61 63726f5f ) __glibc_macro_
  0x00000e70 7761726e 696e6731 20284743 43207761 warning1 (GCC wa
  0x00000e80 726e696e 67206d65 73736167 6529005f rning message)._
  0x00000e90 5f464c54 3132385f 4841535f 51554945 _FLT128_HAS_QUIE
  0x00000ea0 545f4e41 4e5f5f20 31005f54 5f53495a T_NAN__ 1._T_SIZ
  0x00000eb0 4520005f 5f464c54 3132385f 4d41585f E .__FLT128_MAX_
  0x00000ec0 5f20312e 31383937 33313439 35333537 _ 1.189731495357
  0x00000ed0 32333137 36353038 35373539 33323636 2317650857593266
  0x00000ee0 32383030 37303265 2b343933 32463132 2800702e+4932F12
  0x00000ef0 38004255 4653495a 205f494f 5f425546 8.BUFSIZ _IO_BUF
  0x00000f00 53495a00 5f415446 494c455f 534f5552 SIZ._ATFILE_SOUR
  0x00000f10 43452031 005f5f46 4c543634 585f4449 CE 1.__FLT64X_DI
  0x00000f20 475f5f20 3138005f 5f494e54 5f4c4541 G__ 18.__INT_LEA
  0x00000f30 53543136 5f574944 54485f5f 20313600 ST16_WIDTH__ 16.
  0x00000f40 5f5f4653 49445f54 5f545950 45207374 __FSID_T_TYPE st
  0x00000f50 72756374 207b2069 6e74205f 5f76616c ruct { int __val
  0x00000f60 5b325d3b 207d005f 5f737369 7a655f74 [2]; }.__ssize_t
  0x00000f70 5f646566 696e6564 20005f54 5f53495a _defined ._T_SIZ
  0x00000f80 455f2000 5f706f73 005f494f 5f666572 E_ ._pos._IO_fer
  0x00000f90 726f725f 756e6c6f 636b6564 285f5f66 ror_unlocked(__f
  0x00000fa0 70292028 28285f5f 6670292d 3e5f666c p) (((__fp)->_fl
  0x00000fb0 61677320 26205f49 4f5f4552 525f5345 ags & _IO_ERR_SE
  0x00000fc0 454e2920 213d2030 29005f5f 65787465 EN) != 0).__exte
  0x00000fd0 726e5f69 6e6c696e 65206578 7465726e rn_inline extern
  0x00000fe0 205f5f69 6e6c696e 65205f5f 61747472  __inline __attr
  0x00000ff0 69627574 655f5f20 28285f5f 676e755f ibute__ ((__gnu_
  0x00001000 696e6c69 6e655f5f 2929005f 4743435f inline__))._GCC_
  0x00001010 53495a45 5f542000 7374646f 7574005f SIZE_T .stdout._
  0x00001020 5f464c54 33325f48 41535f44 454e4f52 _FLT32_HAS_DENOR
  0x00001030 4d5f5f20 31005f5f 756e6978 5f5f2031 M__ 1.__unix__ 1
  0x00001040 005f5f47 43435f48 4156455f 53594e43 .__GCC_HAVE_SYNC
  0x00001050 5f434f4d 50415245 5f414e44 5f535741 _COMPARE_AND_SWA
  0x00001060 505f3120 31005f49 4f5f7361 76655f65 P_1 1._IO_save_e
  0x00001070 6e64005f 5f464c54 3634585f 4d494e5f nd.__FLT64X_MIN_
  0x00001080 4558505f 5f20282d 31363338 3129005f EXP__ (-16381)._
  0x00001090 4253445f 53495a45 5f545f20 005f5f73 BSD_SIZE_T_ .__s
  0x000010a0 7475625f 7365746c 6f67696e 20005f5f tub_setlogin .__
  0x000010b0 464c545f 4449475f 5f203600 5f5f494e FLT_DIG__ 6.__IN
  0x000010c0 545f4641 53543136 5f574944 54485f5f T_FAST16_WIDTH__
  0x000010d0 20363400 5f5f4743 435f4154 4f4d4943  64.__GCC_ATOMIC
  0x000010e0 5f424f4f 4c5f4c4f 434b5f46 52454520 _BOOL_LOCK_FREE 
  0x000010f0 32005f49 4f5f6f66 665f7420 5f5f6f66 2._IO_off_t __of
  0x00001100 665f7400 5f5f7069 655f5f20 32005f53 f_t.__pie__ 2._S
  0x00001110 5444494f 5f482031 005f5f44 45433332 TDIO_H 1.__DEC32
  0x00001120 5f4d494e 5f5f2031 452d3935 4446005f _MIN__ 1E-95DF._
  0x00001130 5f494e54 4d41585f 4d41585f 5f203078 _INTMAX_MAX__ 0x
  0x00001140 37666666 66666666 66666666 66666666 7fffffffffffffff
  0x00001150 4c005f42 4954535f 4c494249 4f5f4820 L._BITS_LIBIO_H 
  0x00001160 31005f5f 4743435f 4945435f 35353920 1.__GCC_IEC_559 
  0x00001170 32005f5f 464c5431 32385f4d 494e5f45 2.__FLT128_MIN_E
  0x00001180 58505f5f 20282d31 36333831 29005f5f XP__ (-16381).__
  0x00001190 464c5433 325f4841 535f5155 4945545f FLT32_HAS_QUIET_
  0x000011a0 4e414e5f 5f203100 5f425344 5f53495a NAN__ 1._BSD_SIZ
  0x000011b0 455f545f 44454649 4e45445f 20005f5f E_T_DEFINED_ .__
  0x000011c0 55494e54 5f4c4541 53543136 5f4d4158 UINT_LEAST16_MAX
  0x000011d0 5f5f2030 78666666 66005f5f 55494e54 __ 0xffff.__UINT
  0x000011e0 5f464153 5436345f 4d41585f 5f203078 _FAST64_MAX__ 0x
  0x000011f0 66666666 66666666 66666666 66666666 ffffffffffffffff
  0x00001200 554c005f 494f5f45 52525f53 45454e20 UL._IO_ERR_SEEN 
  0x00001210 30783230 005f5f61 74747269 62757465 0x20.__attribute
  0x00001220 5f757365 645f5f20 5f5f6174 74726962 _used__ __attrib
  0x00001230 7574655f 5f202828 5f5f7573 65645f5f ute__ ((__used__
  0x00001240 2929005f 5f617474 72696275 74655f61 )).__attribute_a
  0x00001250 72746966 69636961 6c5f5f20 5f5f6174 rtificial__ __at
  0x00001260 74726962 7574655f 5f202828 5f5f6172 tribute__ ((__ar
  0x00001270 74696669 6369616c 5f5f2929 005f494f tificial__))._IO
  0x00001280 5f667472 796c6f63 6b66696c 65285f66 _ftrylockfile(_f
  0x00001290 70292000 5f5f5549 4e545f4c 45415354 p) .__UINT_LEAST
  0x000012a0 385f4d41 585f5f20 30786666 005f5f47 8_MAX__ 0xff.__G
  0x000012b0 4c494243 5f555345 5f4c4942 5f455854 LIBC_USE_LIB_EXT
  0x000012c0 32203000 5f5f4445 43313238 5f4d494e 2 0.__DEC128_MIN
  0x000012d0 5f455850 5f5f2028 2d363134 3229005f _EXP__ (-6142)._
  0x000012e0 5f4b4552 4e454c5f 53545249 43545f4e _KERNEL_STRICT_N
  0x000012f0 414d4553 20005f5f 57434841 525f5459 AMES .__WCHAR_TY
  0x00001300 50455f5f 20696e74 005f5f49 4e54385f PE__ int.__INT8_
  0x00001310 4d41585f 5f203078 37660067 65746328 MAX__ 0x7f.getc(
  0x00001320 5f667029 205f494f 5f676574 6320285f _fp) _IO_getc (_
  0x00001330 66702900 5f5f4445 43313238 5f455053 fp).__DEC128_EPS
  0x00001340 494c4f4e 5f5f2031 452d3333 444c005f ILON__ 1E-33DL._
  0x00001350 5f555345 5f504f53 49583139 39353036 _USE_POSIX199506
  0x00001360 005f5f6e 6565645f 4e554c4c 005f5f52 .__need_NULL.__R
  0x00001370 45444952 4543545f 4e54485f 4c44424c EDIRECT_NTH_LDBL
  0x00001380 286e616d 652c7072 6f746f2c 616c6961 (name,proto,alia
  0x00001390 7329205f 5f524544 49524543 545f4e54 s) __REDIRECT_NT
  0x000013a0 4820286e 616d652c 2070726f 746f2c20 H (name, proto, 
  0x000013b0 616c6961 7329005f 5f524544 49524543 alias).__REDIREC
  0x000013c0 545f4e54 484e4c28 6e616d65 2c70726f T_NTHNL(name,pro
  0x000013d0 746f2c61 6c696173 29206e61 6d652070 to,alias) name p
  0x000013e0 726f746f 205f5f61 736d5f5f 20285f5f roto __asm__ (__
  0x000013f0 41534d4e 414d4520 2823616c 69617329 ASMNAME (#alias)
  0x00001400 29205f5f 5448524f 574e4c00 5f5f464c ) __THROWNL.__FL
  0x00001410 54313238 5f4d4158 5f455850 5f5f2031 T128_MAX_EXP__ 1
  0x00001420 36333834 005f5f46 4c545f52 41444958 6384.__FLT_RADIX
  0x00001430 5f5f2032 005f5f46 4c543332 585f4445 __ 2.__FLT32X_DE
  0x00001440 4e4f524d 5f4d494e 5f5f2034 2e393430 NORM_MIN__ 4.940
  0x00001450 36353634 35383431 32343635 34343137 6564584124654417
  0x00001460 36353638 37393238 36383232 31333732 6568792868221372
  0x00001470 652d3332 34463332 78005f5f 676c6962 e-324F32x.__glib
  0x00001480 635f636c 616e675f 6861735f 65787465 c_clang_has_exte
  0x00001490 6e73696f 6e286578 74292030 005f5f50 nsion(ext) 0.__P
  0x000014a0 4d542861 72677329 20617267 73005f5f MT(args) args.__
  0x000014b0 4749445f 545f5459 5045205f 5f553332 GID_T_TYPE __U32
  0x000014c0 5f545950 45005f5f 53495a45 4f465f4c _TYPE.__SIZEOF_L
  0x000014d0 4f4e475f 444f5542 4c455f5f 20313600 ONG_DOUBLE__ 16.
  0x000014e0 5f5f4442 4c5f4841 535f5155 4945545f __DBL_HAS_QUIET_
  0x000014f0 4e414e5f 5f203100 5f5f7775 7220005f NAN__ 1.__wur ._
  0x00001500 42495453 5f545950 45535f48 2031005f BITS_TYPES_H 1._
  0x00001510 5f4c4442 4c5f4445 4e4f524d 5f4d494e _LDBL_DENORM_MIN
  0x00001520 5f5f2033 2e363435 31393935 33313838 __ 3.64519953188
  0x00001530 32343734 36303235 32383430 35393333 2474602528405933
  0x00001540 36313934 31393832 652d3439 35314c00 61941982e-4951L.
  0x00001550 5f5f5049 445f545f 54595045 205f5f53 __PID_T_TYPE __S
  0x00001560 33325f54 59504500 5f5f7374 75625f66 32_TYPE.__stub_f
  0x00001570 61747461 63682000 7379735f 6572726c attach .sys_errl
  0x00001580 69737400 5f5f464c 5436345f 4841535f ist.__FLT64_HAS_
  0x00001590 494e4649 4e495459 5f5f2031 005f5f55 INFINITY__ 1.__U
  0x000015a0 494e545f 46415354 385f4d41 585f5f20 INT_FAST8_MAX__ 
  0x000015b0 30786666 005f5f41 544f4d49 435f484c 0xff.__ATOMIC_HL
  0x000015c0 455f5245 4c454153 45203133 31303732 E_RELEASE 131072
  0x000015d0 005f5f4c 44424c5f 4d41585f 4558505f .__LDBL_MAX_EXP_
  0x000015e0 5f203136 33383400 5f6f6666 73657400 _ 16384._offset.
  0x000015f0 5f5f7374 75625f67 74747920 005f4249 __stub_gtty ._BI
  0x00001600 54535f54 59504553 495a4553 5f482031 TS_TYPESIZES_H 1
  0x00001610 005f5f55 5345434f 4e44535f 545f5459 .__USECONDS_T_TY
  0x00001620 5045205f 5f553332 5f545950 45005f49 PE __U32_TYPE._I
  0x00001630 4f5f7065 656b6328 5f667029 205f494f O_peekc(_fp) _IO
  0x00001640 5f706565 6b635f75 6e6c6f63 6b656420 _peekc_unlocked 
  0x00001650 285f6670 29005f5f 494e5450 54525f54 (_fp).__INTPTR_T
  0x00001660 5950455f 5f206c6f 6e672069 6e74005f YPE__ long int._
  0x00001670 5f444543 36345f4d 41585f5f 20392e39 _DEC64_MAX__ 9.9
  0x00001680 39393939 39393939 39393939 39394533 99999999999999E3
  0x00001690 38344444 00737973 5f6e6572 72005f5f 84DD.sys_nerr.__
  0x000016a0 4743435f 41544f4d 49435f49 4e545f4c GCC_ATOMIC_INT_L
  0x000016b0 4f434b5f 46524545 2032005f 5359535f OCK_FREE 2._SYS_
  0x000016c0 53495a45 5f545f48 20005f5f 4d4d585f SIZE_T_H .__MMX_
  0x000016d0 5f203100 5f5f424c 4b434e54 5f545f54 _ 1.__BLKCNT_T_T
  0x000016e0 59504520 5f5f5359 5343414c 4c5f534c YPE __SYSCALL_SL
  0x000016f0 4f4e475f 54595045 005f494f 5f53484f ONG_TYPE._IO_SHO
  0x00001700 57424153 45203032 3030005f 5f737475 WBASE 0200.__stu
  0x00001710 625f7374 74792000 5f66696c 656e6f00 b_stty ._fileno.
  0x00001720 5f5f4841 56455f47 454e4552 49435f53 __HAVE_GENERIC_S
  0x00001730 454c4543 54494f4e 2031005f 5f524c49 ELECTION 1.__RLI
  0x00001740 4d36345f 545f5459 5045205f 5f555155 M64_T_TYPE __UQU
  0x00001750 41445f54 59504500 5f5f464c 54313238 AD_TYPE.__FLT128
  0x00001760 5f4d414e 545f4449 475f5f20 31313300 _MANT_DIG__ 113.
  0x00001770 5f5f4f52 4445525f 4c495454 4c455f45 __ORDER_LITTLE_E
  0x00001780 4e444941 4e5f5f20 31323334 005f5f55 NDIAN__ 1234.__U
  0x00001790 53455f58 4f50454e 324b2031 005f5f53 SE_XOPEN2K 1.__S
  0x000017a0 495a454f 465f5054 52444946 465f545f IZEOF_PTRDIFF_T_
  0x000017b0 5f203800 5f494f53 5f545255 4e432031 _ 8._IOS_TRUNC 1
  0x000017c0 36005f5f 44454331 32385f4d 414e545f 6.__DEC128_MANT_
  0x000017d0 4449475f 5f203334 005f5f55 53455f49 DIG__ 34.__USE_I
  0x000017e0 534f4339 39203100 5f5f494e 5433325f SOC99 1.__INT32_
  0x000017f0 54595045 5f5f2069 6e74005f 5f4b4552 TYPE__ int.__KER
  0x00001800 4e454c5f 53545249 43545f4e 414d4553 NEL_STRICT_NAMES
  0x00001810 005f5f55 33325f54 59504520 756e7369 .__U32_TYPE unsi
  0x00001820 676e6564 20696e74 005f5f63 6f64655f gned int.__code_
  0x00001830 6d6f6465 6c5f736d 616c6c5f 5f203100 model_small__ 1.
  0x00001840 5f5f5553 455f4953 4f433935 005f5f46 __USE_ISOC95.__F
  0x00001850 4c543634 585f4841 535f4445 4e4f524d LT64X_HAS_DENORM
  0x00001860 5f5f2031 005f5f44 45433332 5f4d4158 __ 1.__DEC32_MAX
  0x00001870 5f455850 5f5f2039 37005f49 4f4e4246 _EXP__ 97._IONBF
  0x00001880 2032005f 5f555345 5f49534f 43393900  2.__USE_ISOC99.
  0x00001890 73697a65 5f740073 74646572 72207374 size_t.stderr st
  0x000018a0 64657272 005f7674 61626c65 5f6f6666 derr._vtable_off
  0x000018b0 73657400 5f475f49 4f5f494f 5f46494c set._G_IO_IO_FIL
  0x000018c0 455f5645 5253494f 4e203078 32303030 E_VERSION 0x2000
  0x000018d0 31005f49 4f5f5449 45445f50 55545f47 1._IO_TIED_PUT_G
  0x000018e0 45542030 78343030 004c5f74 6d706e61 ET 0x400.L_tmpna
  0x000018f0 6d203230 005f494f 5f636c65 616e7570 m 20._IO_cleanup
  0x00001900 5f726567 696f6e5f 73746172 74285f66 _region_start(_f
  0x00001910 63742c5f 66702920 005f5f53 5444435f ct,_fp) .__STDC_
  0x00001920 4945435f 3535395f 434f4d50 4c45585f IEC_559_COMPLEX_
  0x00001930 5f203100 5f5f474c 4942435f 5553455f _ 1.__GLIBC_USE_
  0x00001940 44455052 45434154 45445f47 45545320 DEPRECATED_GETS 
  0x00001950 30005f49 4f5f4845 58203031 3030005f 0._IO_HEX 0100._
  0x00001960 5f464c54 3634585f 4d494e5f 31305f45 _FLT64X_MIN_10_E
  0x00001970 58505f5f 20282d34 39333129 005f5f73 XP__ (-4931).__s
  0x00001980 7475625f 7075746d 73672000 5f494f5f tub_putmsg ._IO_
  0x00001990 72656164 5f626173 65005f5f 53544443 read_base.__STDC
  0x000019a0 5f49534f 5f313036 34365f5f 20323031 _ISO_10646__ 201
  0x000019b0 3730364c 005f5349 5a455f54 5f444546 706L._SIZE_T_DEF
  0x000019c0 494e4544 5f20005f 5f424547 494e5f44 INED_ .__BEGIN_D
  0x000019d0 45434c53 20005f49 4f5f7374 64696e20 ECLS ._IO_stdin 
  0x000019e0 28285f49 4f5f4649 4c452a29 28265f49 ((_IO_FILE*)(&_I
  0x000019f0 4f5f325f 315f7374 64696e5f 2929004e O_2_1_stdin_)).N
  0x00001a00 554c4c00 5f5f464c 54313238 5f4d4158 ULL.__FLT128_MAX
  0x00001a10 5f31305f 4558505f 5f203439 3332005f _10_EXP__ 4932._
  0x00001a20 5f464c54 3132385f 4d494e5f 5f20332e _FLT128_MIN__ 3.
  0x00001a30 33363231 30333134 33313132 30393335 3621031431120935
  0x00001a40 30363236 32363737 38313733 32313735 0626267781732175
  0x00001a50 32363065 2d343933 32463132 38005f5f 260e-4932F128.__
  0x00001a60 53555345 434f4e44 535f545f 54595045 SUSECONDS_T_TYPE
  0x00001a70 205f5f53 59534341 4c4c5f53 4c4f4e47  __SYSCALL_SLONG
  0x00001a80 5f545950 45005345 454b5f45 4e442032 _TYPE.SEEK_END 2
  0x00001a90 005f5f49 4e545f46 41535438 5f574944 .__INT_FAST8_WID
  0x00001aa0 54485f5f 2038005f 5f464c54 36345f4d TH__ 8.__FLT64_M
  0x00001ab0 494e5f31 305f4558 505f5f20 282d3330 IN_10_EXP__ (-30
  0x00001ac0 3729005f 5f737475 625f6664 65746163 7).__stub_fdetac
  0x00001ad0 6820005f 6e657874 005f5f44 424c5f4d h ._next.__DBL_M
  0x00001ae0 41585f5f 20282864 6f75626c 6529312e AX__ ((double)1.
  0x00001af0 37393736 39333133 34383632 33313537 7976931348623157
  0x00001b00 30383134 35323734 32333733 31373034 0814527423731704
  0x00001b10 33353765 2b333038 4c29005f 44454641 357e+308L)._DEFA
  0x00001b20 554c545f 534f5552 43452031 005f5f52 ULT_SOURCE 1.__R
  0x00001b30 4c494d5f 545f4d41 54434845 535f524c LIM_T_MATCHES_RL
  0x00001b40 494d3634 5f542031 005f5f61 6d643634 IM64_T 1.__amd64
  0x00001b50 5f5f2031 005f5f5f 5f6d6273 74617465 __ 1.____mbstate
  0x00001b60 5f745f64 6566696e 65642031 005f494f _t_defined 1._IO
  0x00001b70 5f44454c 4554455f 444f4e54 5f434c4f _DELETE_DONT_CLO
  0x00001b80 53452030 78343000 5f5f464c 5433325f SE 0x40.__FLT32_
  0x00001b90 44454349 4d414c5f 4449475f 5f203900 DECIMAL_DIG__ 9.
  0x00001ba0 5f5f464c 54313238 5f444947 5f5f2033 __FLT128_DIG__ 3
  0x00001bb0 33005f5f 55494e54 31365f54 5950455f 3.__UINT16_TYPE_
  0x00001bc0 5f207368 6f727420 756e7369 676e6564 _ short unsigned
  0x00001bd0 20696e74 005f5f48 4156455f 434f4c55  int.__HAVE_COLU
  0x00001be0 4d4e2000 5f4f4c44 5f535444 494f5f4d MN ._OLD_STDIO_M
  0x00001bf0 41474943 20307846 41424330 30303000 AGIC 0xFABC0000.
  0x00001c00 5f494f53 5f4e4f43 52454154 45203332 _IOS_NOCREATE 32
  0x00001c10 005f5f57 43484152 5f574944 54485f5f .__WCHAR_WIDTH__
  0x00001c20 20333200 5f5f4743 435f4154 4f4d4943  32.__GCC_ATOMIC
  0x00001c30 5f434841 525f4c4f 434b5f46 52454520 _CHAR_LOCK_FREE 
  0x00001c40 32005f49 4f5f6d61 726b6572 005f5f42 2._IO_marker.__B
  0x00001c50 49474745 53545f41 4c49474e 4d454e54 IGGEST_ALIGNMENT
  0x00001c60 5f5f2031 36005f5f 4c4f4e47 5f4c4f4e __ 16.__LONG_LON
  0x00001c70 475f4d41 585f5f20 30783766 66666666 G_MAX__ 0x7fffff
  0x00001c80 66666666 66666666 66664c4c 005f5f55 ffffffffffLL.__U
  0x00001c90 4c4f4e47 33325f54 59504520 756e7369 LONG32_TYPE unsi
  0x00001ca0 676e6564 20696e74 005f5f55 494e545f gned int.__UINT_
  0x00001cb0 4c454153 5431365f 54595045 5f5f2073 LEAST16_TYPE__ s
  0x00001cc0 686f7274 20756e73 69676e65 6420696e hort unsigned in
  0x00001cd0 74005f5f 464c545f 4d41585f 31305f45 t.__FLT_MAX_10_E
  0x00001ce0 58505f5f 20333800 5f494f5f 534b4950 XP__ 38._IO_SKIP
  0x00001cf0 57532030 31005f5f 464c5433 32585f45 WS 01.__FLT32X_E
  0x00001d00 5053494c 4f4e5f5f 20322e32 32303434 PSILON__ 2.22044
  0x00001d10 36303439 32353033 31333038 30383437 6049250313080847
  0x00001d20 32363333 33363138 31363430 3632652d 26333618164062e-
  0x00001d30 31364633 3278004e 554c4c20 2828766f 16F32x.NULL ((vo
  0x00001d40 6964202a 29302900 61726776 005f5f55 id *)0).argv.__U
  0x00001d50 53455f50 4f534958 5f494d50 4c494349 SE_POSIX_IMPLICI
  0x00001d60 544c5920 31005f49 4f5f6665 6f665f75 TLY 1._IO_feof_u
  0x00001d70 6e6c6f63 6b656428 5f5f6670 29202828 nlocked(__fp) ((
  0x00001d80 285f5f66 70292d3e 5f666c61 67732026 (__fp)->_flags &
  0x00001d90 205f494f 5f454f46 5f534545 4e292021  _IO_EOF_SEEN) !
  0x00001da0 3d203029 005f5f4e 4f5f494e 4c494e45 = 0).__NO_INLINE
  0x00001db0 5f5f2031 005f494f 5f737464 65727220 __ 1._IO_stderr 
  0x00001dc0 28285f49 4f5f4649 4c452a29 28265f49 ((_IO_FILE*)(&_I
  0x00001dd0 4f5f325f 315f7374 64657272 5f292900 O_2_1_stderr_)).
  0x00001de0 5f5f7661 5f617267 5f706163 6b282920 __va_arg_pack() 
  0x00001df0 5f5f6275 696c7469 6e5f7661 5f617267 __builtin_va_arg
  0x00001e00 5f706163 6b202829 005f5f46 4c545f4d _pack ().__FLT_M
  0x00001e10 414e545f 4449475f 5f203234 005f5f44 ANT_DIG__ 24.__D
  0x00001e20 41444452 5f545f54 59504520 5f5f5333 ADDR_T_TYPE __S3
  0x00001e30 325f5459 5045005f 5f464c54 36345f44 2_TYPE.__FLT64_D
  0x00001e40 4543494d 414c5f44 49475f5f 20313700 ECIMAL_DIG__ 17.
  0x00001e50 5f5f4743 435f4841 56455f53 594e435f __GCC_HAVE_SYNC_
  0x00001e60 434f4d50 4152455f 414e445f 53574150 COMPARE_AND_SWAP
  0x00001e70 5f342031 005f5f46 4c543332 5f4d494e _4 1.__FLT32_MIN
  0x00001e80 5f455850 5f5f2028 2d313235 29005f5f _EXP__ (-125).__
  0x00001e90 53495a45 5f545950 455f5f20 6c6f6e67 SIZE_TYPE__ long
  0x00001ea0 20756e73 69676e65 6420696e 74005f5f  unsigned int.__
  0x00001eb0 4c44424c 5f4d4158 5f5f2031 2e313839 LDBL_MAX__ 1.189
  0x00001ec0 37333134 39353335 37323331 37363530 7314953572317650
  0x00001ed0 32313236 33383533 30333039 37303231 2126385303097021
  0x00001ee0 652b3439 33324c00 5f5f4445 435f4556 e+4932L.__DEC_EV
  0x00001ef0 414c5f4d 4554484f 445f5f20 32005f5f AL_METHOD__ 2.__
  0x00001f00 464c545f 4d41585f 5f20332e 34303238 FLT_MAX__ 3.4028
  0x00001f10 32333436 36333835 32383835 39383131 2346638528859811
  0x00001f20 37303431 38333438 34353136 39323565 704183484516925e
  0x00001f30 2b333846 005f494f 5f756964 5f74205f +38F._IO_uid_t _
  0x00001f40 5f756964 5f74005f 5f44424c 5f4d494e _uid_t.__DBL_MIN
  0x00001f50 5f31305f 4558505f 5f20282d 33303729 _10_EXP__ (-307)
  0x00001f60 005f494f 5f325f31 5f737464 6572725f ._IO_2_1_stderr_
  0x00001f70 005f5f55 494e5433 325f4d41 585f5f20 .__UINT32_MAX__ 
  0x00001f80 30786666 66666666 66665500 5f494f5f 0xffffffffU._IO_
  0x00001f90 4f435420 30343000 5f5f464c 54313238 OCT 040.__FLT128
  0x00001fa0 5f484153 5f494e46 494e4954 595f5f20 _HAS_INFINITY__ 
  0x00001fb0 31005f6d 6f646500 5f494f5f 48415645 1._mode._IO_HAVE
  0x00001fc0 5f53545f 424c4b53 495a4520 5f475f48 _ST_BLKSIZE _G_H
  0x00001fd0 4156455f 53545f42 4c4b5349 5a45005f AVE_ST_BLKSIZE._
  0x00001fe0 5f464c54 36345f48 41535f44 454e4f52 _FLT64_HAS_DENOR
  0x00001ff0 4d5f5f20 31005f5f 464c545f 4556414c M__ 1.__FLT_EVAL
  0x00002000 5f4d4554 484f445f 5f203000 5f5f4653 _METHOD__ 0.__FS
  0x00002010 424c4b43 4e545f54 5f545950 45205f5f BLKCNT_T_TYPE __
  0x00002020 53595343 414c4c5f 554c4f4e 475f5459 SYSCALL_ULONG_TY
  0x00002030 5045005f 5f464c54 3332585f 4841535f PE.__FLT32X_HAS_
  0x00002040 44454e4f 524d5f5f 2031005f 5f783836 DENORM__ 1.__x86
  0x00002050 5f36345f 5f203100 5f5f464c 54363458 _64__ 1.__FLT64X
  0x00002060 5f4d4158 5f455850 5f5f2031 36333834 _MAX_EXP__ 16384
  0x00002070 005f5f56 45525349 4f4e5f5f 2022372e .__VERSION__ "7.
  0x00002080 332e3022 005f494f 5f4c494e 4b454420 3.0"._IO_LINKED 
  0x00002090 30783830 005f5f52 45444952 45435428 0x80.__REDIRECT(
  0x000020a0 6e616d65 2c70726f 746f2c61 6c696173 name,proto,alias
  0x000020b0 29206e61 6d652070 726f746f 205f5f61 ) name proto __a
  0x000020c0 736d5f5f 20285f5f 41534d4e 414d4520 sm__ (__ASMNAME 
  0x000020d0 2823616c 69617329 29005f5f 4653424c (#alias)).__FSBL
  0x000020e0 4b434e54 36345f54 5f545950 45205f5f KCNT64_T_TYPE __
  0x000020f0 55515541 445f5459 5045005f 5f464c54 UQUAD_TYPE.__FLT
  0x00002100 3634585f 4d41585f 5f20312e 31383937 64X_MAX__ 1.1897
  0x00002110 33313439 35333537 32333137 36353032 3149535723176502
  0x00002120 31323633 38353330 33303937 30323165 126385303097021e
  0x00002130 2b343933 32463634 78005f49 4f5f7265 +4932F64x._IO_re
  0x00002140 61645f70 7472005f 5f53495a 455f5420 ad_ptr.__SIZE_T 
  0x00002150 005f5f49 445f545f 54595045 205f5f55 .__ID_T_TYPE __U
  0x00002160 33325f54 59504500 5f5f5349 5a455f54 32_TYPE.__SIZE_T
  0x00002170 5f5f2000 5f494f5f 66756e6c 6f636b66 __ ._IO_funlockf
  0x00002180 696c6528 5f667029 20005f5f 4b45595f ile(_fp) .__KEY_
  0x00002190 545f5459 5045205f 5f533332 5f545950 T_TYPE __S32_TYP
  0x000021a0 45005f5f 494e545f 4c454153 5436345f E.__INT_LEAST64_
  0x000021b0 4d41585f 5f203078 37666666 66666666 MAX__ 0x7fffffff
  0x000021c0 66666666 66666666 4c005f5f 494e545f ffffffffL.__INT_
  0x000021d0 4c454153 54385f57 49445448 5f5f2038 LEAST8_WIDTH__ 8
  0x000021e0 005f5f4c 44424c5f 52454449 52315f4e .__LDBL_REDIR1_N
  0x000021f0 5448286e 616d652c 70726f74 6f2c616c TH(name,proto,al
  0x00002200 69617329 206e616d 65207072 6f746f20 ias) name proto 
  0x00002210 5f5f5448 524f5700 5f5f5549 4e54385f __THROW.__UINT8_
  0x00002220 4d41585f 5f203078 6666005f 494f5f46 MAX__ 0xff._IO_F
  0x00002230 4c414753 325f4e4f 5443414e 43454c20 LAGS2_NOTCANCEL 
  0x00002240 32005f5f 616c7761 79735f69 6e6c696e 2.__always_inlin
  0x00002250 65205f5f 696e6c69 6e65205f 5f617474 e __inline __att
  0x00002260 72696275 74655f5f 2028285f 5f616c77 ribute__ ((__alw
  0x00002270 6179735f 696e6c69 6e655f5f 2929005f ays_inline__))._
  0x00002280 5f55494e 5431365f 4d41585f 5f203078 _UINT16_MAX__ 0x
  0x00002290 66666666 005f494f 5f4d4147 49432030 ffff._IO_MAGIC 0
  0x000022a0 78464241 44303030 30005f5f 474c4942 xFBAD0000.__GLIB
  0x000022b0 435f5553 45284629 205f5f47 4c494243 C_USE(F) __GLIBC
  0x000022c0 5f555345 5f202323 2046005f 5f494e54 _USE_ ## F.__INT
  0x000022d0 5f464153 5436345f 54595045 5f5f206c _FAST64_TYPE__ l
  0x000022e0 6f6e6720 696e7400 73746469 6e207374 ong int.stdin st
  0x000022f0 64696e00 5f5f6174 74726962 7574655f din.__attribute_
  0x00002300 6e6f696e 6c696e65 5f5f205f 5f617474 noinline__ __att
  0x00002310 72696275 74655f5f 2028285f 5f6e6f69 ribute__ ((__noi
  0x00002320 6e6c696e 655f5f29 29005f5f 53544443 nline__)).__STDC
  0x00002330 5f564552 53494f4e 5f5f2032 30313131 _VERSION__ 20111
  0x00002340 324c005f 5f494e54 4d41585f 57494454 2L.__INTMAX_WIDT
  0x00002350 485f5f20 3634005f 5f444543 33325f4d H__ 64.__DEC32_M
  0x00002360 41585f5f 20392e39 39393939 39453936 AX__ 9.999999E96
  0x00002370 4446005f 5f474e55 435f5641 5f4c4953 DF.__GNUC_VA_LIS
  0x00002380 5420005f 5f505452 44494646 5f4d4158 T .__PTRDIFF_MAX
  0x00002390 5f5f2030 78376666 66666666 66666666 __ 0x7ffffffffff
  0x000023a0 66666666 664c005f 5f555345 5f504f53 fffffL.__USE_POS
  0x000023b0 49583139 39333039 005f5f49 4e545f4c IX199309.__INT_L
  0x000023c0 45415354 31365f54 5950455f 5f207368 EAST16_TYPE__ sh
  0x000023d0 6f727420 696e7400 5f5f464c 5433325f ort int.__FLT32_
  0x000023e0 4d41585f 4558505f 5f203132 38005f5f MAX_EXP__ 128.__
  0x000023f0 676e755f 6c696e75 785f5f20 31005f5f gnu_linux__ 1.__
  0x00002400 5354445f 54595045 20747970 65646566 STD_TYPE typedef
  0x00002410 005f5f4d 4f44455f 545f5459 5045205f .__MODE_T_TYPE _
  0x00002420 5f553332 5f545950 45005f5f 53495a45 _U32_TYPE.__SIZE
  0x00002430 4f465f46 4c4f4154 3132385f 5f203136 OF_FLOAT128__ 16
  0x00002440 005f5f47 4e55435f 53544443 5f494e4c .__GNUC_STDC_INL
  0x00002450 494e455f 5f203100 5f5f4442 4c5f4449 INE__ 1.__DBL_DI
  0x00002460 475f5f20 3135005f 5f474343 5f41544f G__ 15.__GCC_ATO
  0x00002470 4d49435f 43484152 31365f54 5f4c4f43 MIC_CHAR16_T_LOC
  0x00002480 4b5f4652 45452032 005f5f49 4e545f4c K_FREE 2.__INT_L
  0x00002490 45415354 385f4d41 585f5f20 30783766 EAST8_MAX__ 0x7f
  0x000024a0 005f5f53 31365f54 59504520 73686f72 .__S16_TYPE shor
  0x000024b0 7420696e 74005f5f 4c503634 5f5f2031 t int.__LP64__ 1
  0x000024c0 005f5f53 59534341 4c4c5f57 4f524453 .__SYSCALL_WORDS
  0x000024d0 495a4520 3634005f 5f474343 5f41544f IZE 64.__GCC_ATO
  0x000024e0 4d49435f 4c4f4e47 5f4c4f43 4b5f4652 MIC_LONG_LOCK_FR
  0x000024f0 45452032 005f5f46 4c543332 585f4449 EE 2.__FLT32X_DI
  0x00002500 475f5f20 3135005f 5f464c54 3332585f G__ 15.__FLT32X_
  0x00002510 4d414e54 5f444947 5f5f2035 33005f49 MANT_DIG__ 53._I
  0x00002520 4f5f7772 6974655f 62617365 005f4c50 O_write_base._LP
  0x00002530 36342031 005f4645 41545552 45535f48 64 1._FEATURES_H
  0x00002540 2031005f 5f464c54 33325f44 49475f5f  1.__FLT32_DIG__
  0x00002550 2036005f 5f465357 4f52445f 545f5459  6.__FSWORD_T_TY
  0x00002560 5045205f 5f535953 43414c4c 5f534c4f PE __SYSCALL_SLO
  0x00002570 4e475f54 59504500 5f5f534c 4f4e4757 NG_TYPE.__SLONGW
  0x00002580 4f52445f 54595045 206c6f6e 6720696e ORD_TYPE long in
  0x00002590 74005f49 4f5f325f 315f7374 64696e5f t._IO_2_1_stdin_
  0x000025a0 005f5f78 38365f36 34203100 5f5f464c .__x86_64 1.__FL
  0x000025b0 54363458 5f4d4158 5f31305f 4558505f T64X_MAX_10_EXP_
  0x000025c0 5f203439 3332005f 5f44424c 5f4d494e _ 4932.__DBL_MIN
  0x000025d0 5f5f2028 28646f75 626c6529 322e3232 __ ((double)2.22
  0x000025e0 35303733 38353835 30373230 31333833 5073858507201383
  0x000025f0 30393032 33323731 37333332 34303430 0902327173324040
  0x00002600 36652d33 30384c29 005f494f 5f325f31 6e-308L)._IO_2_1
  0x00002610 5f737464 6f75745f 005f5f55 494e545f _stdout_.__UINT_
  0x00002620 46415354 33325f4d 41585f5f 20307866 FAST32_MAX__ 0xf
  0x00002630 66666666 66666666 66666666 66666655 fffffffffffffffU
  0x00002640 4c005f5f 46494e49 54455f4d 4154485f L.__FINITE_MATH_
  0x00002650 4f4e4c59 5f5f2030 005f494f 5f736176 ONLY__ 0._IO_sav
  0x00002660 655f6261 7365005f 5f553136 5f545950 e_base.__U16_TYP
  0x00002670 4520756e 7369676e 65642073 686f7274 E unsigned short
  0x00002680 20696e74 00454f46 20282d31 29005f5f  int.EOF (-1).__
  0x00002690 464c5436 345f4d41 585f5f20 312e3739 FLT64_MAX__ 1.79
  0x000026a0 37363933 31333438 36323331 35373038 7693134862315708
  0x000026b0 31343532 37343233 37333137 30343335 1452742373170435
  0x000026c0 37652b33 30384636 34005f5f 73697a65 7e+308F64.__size
  0x000026d0 5f745f5f 20005f5f 55494e54 385f5459 _t__ .__UINT8_TY
  0x000026e0 50455f5f 20756e73 69676e65 64206368 PE__ unsigned ch
  0x000026f0 6172005f 494f5f66 696c655f 666c6167 ar._IO_file_flag
  0x00002700 73205f66 6c616773 005f5f55 53455f58 s _flags.__USE_X
  0x00002710 4f50454e 324b3858 5349005f 5f494e54 OPEN2K8XSI.__INT
  0x00002720 5f464153 5433325f 54595045 5f5f206c _FAST32_TYPE__ l
  0x00002730 6f6e6720 696e7400 5f494f53 5f494e50 ong int._IOS_INP
  0x00002740 55542031 005f5f47 43435f41 534d5f46 UT 1.__GCC_ASM_F
  0x00002750 4c41475f 4f555450 5554535f 5f203100 LAG_OUTPUTS__ 1.
  0x00002760 70757463 285f6368 2c5f6670 29205f49 putc(_ch,_fp) _I
  0x00002770 4f5f7075 74632028 5f63682c 205f6670 O_putc (_ch, _fp
  0x00002780 29005f5f 55494e54 5f4c4541 53543634 ).__UINT_LEAST64
  0x00002790 5f4d4158 5f5f2030 78666666 66666666 _MAX__ 0xfffffff
  0x000027a0 66666666 66666666 66554c00 5f5f504d fffffffffUL.__PM
  0x000027b0 54005f5f 55515541 445f5459 50452075 T.__UQUAD_TYPE u
  0x000027c0 6e736967 6e656420 6c6f6e67 20696e74 nsigned long int
  0x000027d0 005f5f45 4c465f5f 2031005f 5f464c54 .__ELF__ 1.__FLT
  0x000027e0 3332585f 4d494e5f 5f20322e 32323530 32X_MIN__ 2.2250
  0x000027f0 37333835 38353037 32303133 38333039 7385850720138309
  0x00002800 30323332 37313733 33323430 34303665 023271733240406e
  0x00002810 2d333038 46333278 005f5f55 494e5450 -308F32x.__UINTP
  0x00002820 54525f54 5950455f 5f206c6f 6e672075 TR_TYPE__ long u
  0x00002830 6e736967 6e656420 696e7400 5f5f494e nsigned int.__IN
  0x00002840 5431365f 43286329 2063005f 5f474343 T16_C(c) c.__GCC
  0x00002850 5f484156 455f4457 41524632 5f434649 _HAVE_DWARF2_CFI
  0x00002860 5f41534d 2031005f 5f53495a 454f465f _ASM 1.__SIZEOF_
  0x00002870 464c4f41 545f5f20 34005f5f 44454333 FLOAT__ 4.__DEC3
  0x00002880 325f5355 424e4f52 4d414c5f 4d494e5f 2_SUBNORMAL_MIN_
  0x00002890 5f20302e 30303030 3031452d 39354446 _ 0.000001E-95DF
  0x000028a0 005f494f 5f49535f 41505045 4e44494e ._IO_IS_APPENDIN
  0x000028b0 47203078 31303030 005f5f46 4c543634 G 0x1000.__FLT64
  0x000028c0 585f4841 535f5155 4945545f 4e414e5f X_HAS_QUIET_NAN_
  0x000028d0 5f203100 5f5f464c 545f4841 535f494e _ 1.__FLT_HAS_IN
  0x000028e0 46494e49 54595f5f 2031005f 494f535f FINITY__ 1._IOS_
  0x000028f0 4e4f5245 504c4143 45203634 005f5f53 NOREPLACE 64.__S
  0x00002900 54445f54 59504500 5f5f5553 455f504f TD_TYPE.__USE_PO
  0x00002910 53495831 39393330 39203100 5f494f5f SIX199309 1._IO_
  0x00002920 73697a65 5f742073 697a655f 74005f5f size_t size_t.__
  0x00002930 494e4f36 345f545f 54595045 205f5f55 INO64_T_TYPE __U
  0x00002940 51554144 5f545950 45005f5f 474e555f QUAD_TYPE.__GNU_
  0x00002950 4c494252 4152595f 5f203600 5f5f5354 LIBRARY__ 6.__ST
  0x00002960 44435f5f 2031005f 5f676c69 62635f63 DC__ 1.__glibc_c
  0x00002970 39395f66 6c657861 72725f61 7661696c 99_flexarr_avail
  0x00002980 61626c65 2031005f 5f535345 325f5f20 able 1.__SSE2__ 
  0x00002990 31005f5f 534c4f4e 4733325f 54595045 1.__SLONG32_TYPE
  0x000029a0 20696e74 005f5f44 424c5f4d 41585f45  int.__DBL_MAX_E
  0x000029b0 58505f5f 20313032 34005f5f 53495a45 XP__ 1024.__SIZE
  0x000029c0 4f465f4c 4f4e475f 5f203800 5f5f4154 OF_LONG__ 8.__AT
  0x000029d0 4f4d4943 5f434f4e 53554d45 2031005f OMIC_CONSUME 1._
  0x000029e0 5f555345 5f46494c 455f4f46 46534554 _USE_FILE_OFFSET
  0x000029f0 3634005f 494f5f46 4c414753 325f4d4d 64._IO_FLAGS2_MM
  0x00002a00 41502031 005f5f46 4c543332 5f4d494e AP 1.__FLT32_MIN
  0x00002a10 5f5f2031 2e313735 34393433 35303832 __ 1.17549435082
  0x00002a20 32323837 35303739 36383733 36353337 2287507968736537
  0x00002a30 32323232 34353638 652d3338 46333200 22224568e-38F32.
  0x00002a40 5f5f5749 4e545f54 5950455f 5f20756e __WINT_TYPE__ un
  0x00002a50 7369676e 65642069 6e74005f 5f555345 signed int.__USE
  0x00002a60 5f4d4953 43005f49 4f5f636c 65616e75 _MISC._IO_cleanu
  0x00002a70 705f7265 67696f6e 5f656e64 285f446f p_region_end(_Do
  0x00002a80 69742920 005f5f49 4e543136 5f4d4158 it) .__INT16_MAX
  0x00002a90 5f5f2030 78376666 66005f50 4f534958 __ 0x7fff._POSIX
  0x00002aa0 5f435f53 4f555243 45203230 30383039 _C_SOURCE 200809
  0x00002ab0 4c005f5f 53434841 525f5749 4454485f L.__SCHAR_WIDTH_
  0x00002ac0 5f203800 5f5f5549 4e543332 5f432863 _ 8.__UINT32_C(c
  0x00002ad0 29206320 23232055 005f5f4c 44424c5f ) c ## U.__LDBL_
  0x00002ae0 4d494e5f 31305f45 58505f5f 20282d34 MIN_10_EXP__ (-4
  0x00002af0 39333129 005f5354 44494f5f 55534553 931)._STDIO_USES
  0x00002b00 5f494f53 54524541 4d20005f 5f53495a _IOSTREAM .__SIZ
  0x00002b10 454f465f 444f5542 4c455f5f 2038005f EOF_DOUBLE__ 8._
  0x00002b20 5f55494e 54385f43 28632920 63005f5f _UINT8_C(c) c.__
  0x00002b30 424c4b43 4e543634 5f545f54 59504520 BLKCNT64_T_TYPE 
  0x00002b40 5f5f5351 5541445f 54595045 005f494f __SQUAD_TYPE._IO
  0x00002b50 5f535444 494f2030 34303030 30005f5f _STDIO 040000.__
  0x00002b60 5553455f 464f5254 4946595f 4c455645 USE_FORTIFY_LEVE
  0x00002b70 4c005f5f 474c4942 435f5553 455f4c49 L.__GLIBC_USE_LI
  0x00002b80 425f4558 5432005f 5f57494e 545f4d49 B_EXT2.__WINT_MI
  0x00002b90 4e5f5f20 3055005f 5f4c4442 4c5f4d41 N__ 0U.__LDBL_MA
  0x00002ba0 4e545f44 49475f5f 20363400 5f5f7061 NT_DIG__ 64.__pa
  0x00002bb0 6431005f 5f706164 32005f5f 70616433 d1.__pad2.__pad3
  0x00002bc0 005f5f70 61643400 5f5f7061 6435005f .__pad4.__pad5._
  0x00002bd0 5f535444 435f5554 465f3136 5f5f2031 _STDC_UTF_16__ 1
  0x00002be0 005f5f4c 44424c5f 45505349 4c4f4e5f .__LDBL_EPSILON_
  0x00002bf0 5f20312e 30383432 30323137 32343835 _ 1.084202172485
  0x00002c00 35303434 33343030 37343532 38303038 5044340074528008
  0x00002c10 36393934 31373165 2d31394c 005f5f62 6994171e-19L.__b
  0x00002c20 6f733028 70747229 205f5f62 75696c74 os0(ptr) __built
  0x00002c30 696e5f6f 626a6563 745f7369 7a652028 in_object_size (
  0x00002c40 7074722c 20302900 5f494f4c 42462031 ptr, 0)._IOLBF 1
  0x00002c50 005f5f61 74747269 62757465 5f666f72 .__attribute_for
  0x00002c60 6d61745f 6172675f 5f287829 205f5f61 mat_arg__(x) __a
  0x00002c70 74747269 62757465 5f5f2028 285f5f66 ttribute__ ((__f
  0x00002c80 6f726d61 745f6172 675f5f20 28782929 ormat_arg__ (x))
  0x00002c90 29005f5f 5f5f4649 4c455f64 6566696e ).____FILE_defin
  0x00002ca0 65642031 005f4249 54535f53 5444494f ed 1._BITS_STDIO
  0x00002cb0 5f4c494d 5f482031 005f5f4c 44424c5f _LIM_H 1.__LDBL_
  0x00002cc0 4841535f 494e4649 4e495459 5f5f2031 HAS_INFINITY__ 1
  0x00002cd0 005f5f55 53455f50 4f534958 2031005f .__USE_POSIX 1._
  0x00002ce0 5f494e4f 5f545f4d 41544348 45535f49 _INO_T_MATCHES_I
  0x00002cf0 4e4f3634 5f542031 005f5f47 43435f49 NO64_T 1.__GCC_I
  0x00002d00 45435f35 35395f43 4f4d504c 45582032 EC_559_COMPLEX 2
  0x00002d10 005f5f53 49475f41 544f4d49 435f4d49 .__SIG_ATOMIC_MI
  0x00002d20 4e5f5f20 282d5f5f 5349475f 41544f4d N__ (-__SIG_ATOM
  0x00002d30 49435f4d 41585f5f 202d2031 29005f49 IC_MAX__ - 1)._I
  0x00002d40 4f5f494e 5f424143 4b555020 30783130 O_IN_BACKUP 0x10
  0x00002d50 30005f49 4f5f666c 6f636b66 696c6528 0._IO_flockfile(
  0x00002d60 5f667029 20005f5f 53495a45 4f465f57 _fp) .__SIZEOF_W
  0x00002d70 43484152 5f545f5f 2034005f 5f617474 CHAR_T__ 4.__att
  0x00002d80 72696275 74655f64 65707265 63617465 ribute_deprecate
  0x00002d90 645f5f20 5f5f6174 74726962 7574655f d__ __attribute_
  0x00002da0 5f202828 5f5f6465 70726563 61746564 _ ((__deprecated
  0x00002db0 5f5f2929 005f5f46 4c543132 385f4d49 __)).__FLT128_MI
  0x00002dc0 4e5f3130 5f455850 5f5f2028 2d343933 N_10_EXP__ (-493
  0x00002dd0 3129005f 5f464c4f 41545f57 4f52445f 1).__FLOAT_WORD_
  0x00002de0 4f524445 525f5f20 5f5f4f52 4445525f ORDER__ __ORDER_
  0x00002df0 4c495454 4c455f45 4e444941 4e5f5f00 LITTLE_ENDIAN__.
  0x00002e00 5f5f4743 435f4841 56455f53 594e435f __GCC_HAVE_SYNC_
  0x00002e10 434f4d50 4152455f 414e445f 53574150 COMPARE_AND_SWAP
  0x00002e20 5f322031 005f475f 48415645 5f4d5245 _2 1._G_HAVE_MRE
  0x00002e30 4d415020 31005f5f 44454333 325f4d41 MAP 1.__DEC32_MA
  0x00002e40 4e545f44 49475f5f 2037005f 5f464c54 NT_DIG__ 7.__FLT
  0x00002e50 33325f44 454e4f52 4d5f4d49 4e5f5f20 32_DENORM_MIN__ 
  0x00002e60 312e3430 31323938 34363433 32343831 1.40129846432481
  0x00002e70 37303730 39323337 32393538 33323839 7070923729583289
  0x00002e80 39313631 33652d34 35463332 005f5f6e 91613e-45F32.__n
  0x00002e90 6565645f 73697a65 5f74005f 5f55494e eed_size_t.__UIN
  0x00002ea0 545f4641 53543136 5f4d4158 5f5f2030 T_FAST16_MAX__ 0
  0x00002eb0 78666666 66666666 66666666 66666666 xfffffffffffffff
  0x00002ec0 66554c00 5f5f6e65 65645f5f 5f76615f fUL.__need___va_
  0x00002ed0 6c697374 005f5f49 4e543332 5f4d4158 list.__INT32_MAX
  0x00002ee0 5f5f2030 78376666 66666666 66005f49 __ 0x7fffffff._I
  0x00002ef0 4f5f494e 5445524e 414c2030 3130005f O_INTERNAL 010._
  0x00002f00 5f5f696e 745f7369 7a655f74 5f682000 __int_size_t_h .
  0x00002f10 5f5f676c 6962635f 6c696b65 6c792863 __glibc_likely(c
  0x00002f20 6f6e6429 205f5f62 75696c74 696e5f65 ond) __builtin_e
  0x00002f30 78706563 74202828 636f6e64 292c2031 xpect ((cond), 1
  0x00002f40 29005f5f 41544f4d 49435f41 43515549 ).__ATOMIC_ACQUI
  0x00002f50 52452032 005f5f55 494e5431 365f4328 RE 2.__UINT16_C(
  0x00002f60 63292063 005f494f 5f464c41 4753325f c) c._IO_FLAGS2_
  0x00002f70 55534552 5f574255 46203800 5f5f494e USER_WBUF 8.__IN
  0x00002f80 5436345f 4d41585f 5f203078 37666666 T64_MAX__ 0x7fff
  0x00002f90 66666666 66666666 66666666 4c005f5f ffffffffffffL.__
  0x00002fa0 6e656564 5f73697a 655f7420 005f5f62 need_size_t .__b
  0x00002fb0 6f732870 74722920 5f5f6275 696c7469 os(ptr) __builti
  0x00002fc0 6e5f6f62 6a656374 5f73697a 65202870 n_object_size (p
  0x00002fd0 74722c20 5f5f5553 455f464f 52544946 tr, __USE_FORTIF
  0x00002fe0 595f4c45 56454c20 3e203129 005f5f55 Y_LEVEL > 1).__U
  0x00002ff0 574f5244 5f545950 4520756e 7369676e WORD_TYPE unsign
  0x00003000 6564206c 6f6e6720 696e7400 5f5f474c ed long int.__GL
  0x00003010 4942435f 4d494e4f 525f5f20 3237005f IBC_MINOR__ 27._
  0x00003020 5f534547 5f475320 31005f5f 5353455f _SEG_GS 1.__SSE_
  0x00003030 4d415448 5f5f2031 005f5f4e 4c494e4b MATH__ 1.__NLINK
  0x00003040 5f545f54 59504520 5f5f5359 5343414c _T_TYPE __SYSCAL
  0x00003050 4c5f554c 4f4e475f 54595045 005f5f55 L_ULONG_TYPE.__U
  0x00003060 494e544d 41585f54 5950455f 5f206c6f INTMAX_TYPE__ lo
  0x00003070 6e672075 6e736967 6e656420 696e7400 ng unsigned int.
  0x00003080 5f5f5553 455f584f 50454e32 4b005f5f __USE_XOPEN2K.__
  0x00003090 4c454146 202c205f 5f6c6561 665f5f00 LEAF , __leaf__.
  0x000030a0 5f5f4445 43313238 5f4d4158 5f455850 __DEC128_MAX_EXP
  0x000030b0 5f5f2036 31343500 5f494f5f 4c454654 __ 6145._IO_LEFT
  0x000030c0 20303200 5f5f666f 72746966 795f6675  02.__fortify_fu
  0x000030d0 6e637469 6f6e205f 5f657874 65726e5f nction __extern_
  0x000030e0 616c7761 79735f69 6e6c696e 65205f5f always_inline __
  0x000030f0 61747472 69627574 655f6172 74696669 attribute_artifi
  0x00003100 6369616c 5f5f005f 494f5f42 4f4f4c41 cial__._IO_BOOLA
  0x00003110 4c504841 20303230 30303030 005f5f53 LPHA 0200000.__S
  0x00003120 49475f41 544f4d49 435f5749 4454485f IG_ATOMIC_WIDTH_
  0x00003130 5f203332 005f5f43 4f4e4341 5428782c _ 32.__CONCAT(x,
  0x00003140 79292078 20232320 79005f5f 61747472 y) x ## y.__attr
  0x00003150 69627574 655f6465 70726563 61746564 ibute_deprecated
  0x00003160 5f6d7367 5f5f286d 73672920 5f5f6174 _msg__(msg) __at
  0x00003170 74726962 7574655f 5f202828 5f5f6465 tribute__ ((__de
  0x00003180 70726563 61746564 5f5f2028 6d736729 precated__ (msg)
  0x00003190 2929005f 5f534852 545f4d41 585f5f20 )).__SHRT_MAX__ 
  0x000031a0 30783766 6666005f 5f474343 5f41544f 0x7fff.__GCC_ATO
  0x000031b0 4d49435f 57434841 525f545f 4c4f434b MIC_WCHAR_T_LOCK
  0x000031c0 5f465245 45203200 5f494f5f 50454e44 _FREE 2._IO_PEND
  0x000031d0 494e475f 4f555450 55545f43 4f554e54 ING_OUTPUT_COUNT
  0x000031e0 285f6670 29202828 5f667029 2d3e5f49 (_fp) ((_fp)->_I
  0x000031f0 4f5f7772 6974655f 70747220 2d20285f O_write_ptr - (_
  0x00003200 6670292d 3e5f494f 5f777269 74655f62 fp)->_IO_write_b
  0x00003210 61736529 005f494f 5f555345 525f4c4f ase)._IO_USER_LO
  0x00003220 434b2030 78383030 30005f5f 4f524445 CK 0x8000.__ORDE
  0x00003230 525f5044 505f454e 4449414e 5f5f2033 R_PDP_ENDIAN__ 3
  0x00003240 34313200 5f494f5f 554e4946 4945445f 412._IO_UNIFIED_
  0x00003250 4a554d50 5441424c 45532031 00544d50 JUMPTABLES 1.TMP
  0x00003260 5f4d4158 20323338 33323800 5f494f5f _MAX 238328._IO_
  0x00003270 6e656564 5f6c6f63 6b285f66 70292028 need_lock(_fp) (
  0x00003280 28285f66 70292d3e 5f666c61 67733220 ((_fp)->_flags2 
  0x00003290 26205f49 4f5f464c 41475332 5f4e4545 & _IO_FLAGS2_NEE
  0x000032a0 445f4c4f 434b2920 213d2030 29005f5f D_LOCK) != 0).__
  0x000032b0 464c545f 44454349 4d414c5f 4449475f FLT_DECIMAL_DIG_
  0x000032c0 5f203900 5f5f7761 726e6465 636c286e _ 9.__warndecl(n
  0x000032d0 616d652c 6d736729 20657874 65726e20 ame,msg) extern 
  0x000032e0 766f6964 206e616d 65202876 6f696429 void name (void)
  0x000032f0 205f5f61 74747269 62757465 5f5f2828  __attribute__((
  0x00003300 5f5f7761 726e696e 675f5f20 286d7367 __warning__ (msg
  0x00003310 29292900 5f5f464c 5436345f 4d41585f ))).__FLT64_MAX_
  0x00003320 31305f45 58505f5f 20333038 005f5f53 10_EXP__ 308.__S
  0x00003330 5452494e 47287829 20237800 5f5f4649 TRING(x) #x.__FI
  0x00003340 4c455f64 6566696e 65642031 005f5f4c LE_defined 1.__L
  0x00003350 44424c5f 4d494e5f 4558505f 5f20282d DBL_MIN_EXP__ (-
  0x00003360 31363338 3129005f 5f57494e 545f5749 16381).__WINT_WI
  0x00003370 4454485f 5f203332 005f494f 5f53484f DTH__ 32._IO_SHO
  0x00003380 57504f53 20303230 3030005f 494f5f72 WPOS 02000._IO_r
  0x00003390 6561645f 656e6400 5f5f464c 54363458 ead_end.__FLT64X
  0x000033a0 5f4d494e 5f5f2033 2e333632 31303331 _MIN__ 3.3621031
  0x000033b0 34333131 32303933 35303632 36323637 4311209350626267
  0x000033c0 37383137 33323137 35323630 652d3439 781732175260e-49
  0x000033d0 33324636 3478005f 494f535f 4f555450 32F64x._IOS_OUTP
  0x000033e0 55542032 005f5f49 4e545f46 41535438 UT 2.__INT_FAST8
  0x000033f0 5f4d4158 5f5f2030 78376600 5f5f5245 _MAX__ 0x7f.__RE
  0x00003400 47495354 45525f50 52454649 585f5f20 GISTER_PREFIX__ 
  0x00003410 005f5f46 4c543332 5f455053 494c4f4e .__FLT32_EPSILON
  0x00003420 5f5f2031 2e313932 30393238 39353530 __ 1.19209289550
  0x00003430 37383132 35303030 30303030 30303030 7812500000000000
  0x00003440 30303030 30303030 652d3746 3332005f 00000000e-7F32._
  0x00003450 5f474c49 42435f49 4e544552 4e414c5f _GLIBC_INTERNAL_
  0x00003460 53544152 54494e47 5f484541 4445525f STARTING_HEADER_
  0x00003470 494d504c 454d454e 54415449 4f4e2000 IMPLEMENTATION .
  0x00003480 5f5f5357 4f52445f 54595045 206c6f6e __SWORD_TYPE lon
  0x00003490 6720696e 74007368 6f727420 696e7400 g int.short int.
  0x000034a0 5f5f4c4f 4e475f4d 41585f5f 20307837 __LONG_MAX__ 0x7
  0x000034b0 66666666 66666666 66666666 6666664c fffffffffffffffL
  0x000034c0 005f5f73 7475625f 6765746d 73672000 .__stub_getmsg .
  0x000034d0 5f5f4445 4336345f 4d41585f 4558505f __DEC64_MAX_EXP_
  0x000034e0 5f203338 35005f5f 464c5433 32585f4d _ 385.__FLT32X_M
  0x000034f0 494e5f31 305f4558 505f5f20 282d3330 IN_10_EXP__ (-30
  0x00003500 3729005f 5f555345 5f504f53 49583200 7).__USE_POSIX2.
  0x00003510 6c6f6e67 20696e74 005f494f 5f554e49 long int._IO_UNI
  0x00003520 54425546 20303230 30303000 5f5f4f46 TBUF 020000.__OF
  0x00003530 465f545f 54595045 205f5f53 59534341 F_T_TYPE __SYSCA
  0x00003540 4c4c5f53 4c4f4e47 5f545950 45005f5f LL_SLONG_TYPE.__
  0x00003550 55494e54 4d41585f 43286329 20632023 UINTMAX_C(c) c #
  0x00003560 2320554c 005f5f43 48415233 325f5459 # UL.__CHAR32_TY
  0x00003570 50455f5f 20756e73 69676e65 6420696e PE__ unsigned in
  0x00003580 74005f5f 464c5436 34585f48 41535f49 t.__FLT64X_HAS_I
  0x00003590 4e46494e 4954595f 5f203100 5f424954 NFINITY__ 1._BIT
  0x000035a0 535f475f 434f4e46 49475f48 2031005f S_G_CONFIG_H 1._
  0x000035b0 5f444543 3132385f 4d494e5f 5f203145 _DEC128_MIN__ 1E
  0x000035c0 2d363134 33444c00 5f5f464c 54333258 -6143DL.__FLT32X
  0x000035d0 5f4d494e 5f455850 5f5f2028 2d313032 _MIN_EXP__ (-102
  0x000035e0 3129005f 494f5f67 6574635f 756e6c6f 1)._IO_getc_unlo
  0x000035f0 636b6564 285f6670 2920285f 494f5f42 cked(_fp) (_IO_B
  0x00003600 45202828 5f667029 2d3e5f49 4f5f7265 E ((_fp)->_IO_re
  0x00003610 61645f70 7472203e 3d20285f 6670292d ad_ptr >= (_fp)-
  0x00003620 3e5f494f 5f726561 645f656e 642c2030 >_IO_read_end, 0
  0x00003630 29203f20 5f5f7566 6c6f7720 285f6670 ) ? __uflow (_fp
  0x00003640 29203a20 2a28756e 7369676e 65642063 ) : *(unsigned c
  0x00003650 68617220 2a292028 5f667029 2d3e5f49 har *) (_fp)->_I
  0x00003660 4f5f7265 61645f70 74722b2b 29005f5f O_read_ptr++).__
  0x00003670 494e5450 54525f57 49445448 5f5f2036 INTPTR_WIDTH__ 6
  0x00003680 34005f5f 494e4f5f 545f5459 5045205f 4.__INO_T_TYPE _
  0x00003690 5f535953 43414c4c 5f554c4f 4e475f54 _SYSCALL_ULONG_T
  0x000036a0 59504500 5f5f5549 4e545f46 41535438 YPE.__UINT_FAST8
  0x000036b0 5f545950 455f5f20 756e7369 676e6564 _TYPE__ unsigned
  0x000036c0 20636861 72005f5f 494e5433 325f4328  char.__INT32_C(
  0x000036d0 63292063 005f5f46 5346494c 434e5436 c) c.__FSFILCNT6
  0x000036e0 345f545f 54595045 205f5f55 51554144 4_T_TYPE __UQUAD
  0x000036f0 5f545950 45005f5f 4c44424c 5f484153 _TYPE.__LDBL_HAS
  0x00003700 5f515549 45545f4e 414e5f5f 2031005f _QUIET_NAN__ 1._
  0x00003710 5f474e55 435f5041 5443484c 4556454c _GNUC_PATCHLEVEL
  0x00003720 5f5f2030 005f5f57 494e545f 4d41585f __ 0.__WINT_MAX_
  0x00003730 5f203078 66666666 66666666 55005f5f _ 0xffffffffU.__
  0x00003740 61747472 69627574 655f6e6f 6e737472 attribute_nonstr
  0x00003750 696e675f 5f20005f 494f5f4d 41474943 ing__ ._IO_MAGIC
  0x00003760 5f4d4153 4b203078 46464646 30303030 _MASK 0xFFFF0000
  0x00003770 005f5f6c 696e7578 2031005f 5f474c49 .__linux 1.__GLI
  0x00003780 42435f55 53455f49 45435f36 30353539 BC_USE_IEC_60559
  0x00003790 5f46554e 43535f45 5854005f 494f5f76 _FUNCS_EXT._IO_v
  0x000037a0 615f6c69 7374205f 5f676e75 635f7661 a_list __gnuc_va
  0x000037b0 5f6c6973 74005f47 5f425546 53495a20 _list._G_BUFSIZ 
  0x000037c0 38313932 005f5f4c 44424c5f 52454449 8192.__LDBL_REDI
  0x000037d0 5231286e 616d652c 70726f74 6f2c616c R1(name,proto,al
  0x000037e0 69617329 206e616d 65207072 6f746f00 ias) name proto.
  0x000037f0 5f5f6174 74726962 7574655f 6d616c6c __attribute_mall
  0x00003800 6f635f5f 205f5f61 74747269 62757465 oc__ __attribute
  0x00003810 5f5f2028 285f5f6d 616c6c6f 635f5f29 __ ((__malloc__)
  0x00003820 29005f5f 55494e54 33325f54 5950455f ).__UINT32_TYPE_
  0x00003830 5f20756e 7369676e 65642069 6e74005f _ unsigned int._
  0x00003840 5f4c4442 4c5f5245 4449525f 4e544828 _LDBL_REDIR_NTH(
  0x00003850 6e616d65 2c70726f 746f2920 6e616d65 name,proto) name
  0x00003860 2070726f 746f205f 5f544852 4f57005f  proto __THROW._
  0x00003870 5f555345 5f584f50 454e324b 38005f49 _USE_XOPEN2K8._I
  0x00003880 4f5f5550 50455243 41534520 30313030 O_UPPERCASE 0100
  0x00003890 3000505f 746d7064 69722022 2f746d70 0.P_tmpdir "/tmp
  0x000038a0 22005f5f 52454449 52454354 5f4e5448 ".__REDIRECT_NTH
  0x000038b0 286e616d 652c7072 6f746f2c 616c6961 (name,proto,alia
  0x000038c0 7329206e 616d6520 70726f74 6f205f5f s) name proto __
  0x000038d0 61736d5f 5f20285f 5f41534d 4e414d45 asm__ (__ASMNAME
  0x000038e0 20282361 6c696173 2929205f 5f544852  (#alias)) __THR
  0x000038f0 4f57005f 5f555345 5f584f50 454e005f OW.__USE_XOPEN._
  0x00003900 5f464c54 3132385f 45505349 4c4f4e5f _FLT128_EPSILON_
  0x00003910 5f20312e 39323539 32393934 34333837 _ 1.925929944387
  0x00003920 32333538 35333035 35393737 39343235 2358530559779425
  0x00003930 38343932 37333265 2d333446 31323800 8492732e-34F128.
  0x00003940 464f5045 4e5f4d41 58203136 005f494f FOPEN_MAX 16._IO
  0x00003950 5f46494c 455f706c 7573005f 504f5349 _FILE_plus._POSI
  0x00003960 585f435f 534f5552 4345005f 5f544852 X_C_SOURCE.__THR
  0x00003970 4f57205f 5f617474 72696275 74655f5f OW __attribute__
  0x00003980 2028285f 5f6e6f74 68726f77 5f5f205f  ((__nothrow__ _
  0x00003990 5f4c4541 46292900 5f5f5349 5a454f46 _LEAF)).__SIZEOF
  0x000039a0 5f4c4f4e 475f4c4f 4e475f5f 2038005f _LONG_LONG__ 8._
  0x000039b0 56415f4c 4953545f 44454649 4e454420 VA_LIST_DEFINED 
  0x000039c0 005f5f55 494e545f 46415354 33325f54 .__UINT_FAST32_T
  0x000039d0 5950455f 5f206c6f 6e672075 6e736967 YPE__ long unsig
  0x000039e0 6e656420 696e7400 5f5f5348 52545f57 ned int.__SHRT_W
  0x000039f0 49445448 5f5f2031 36005f5f 53534532 IDTH__ 16.__SSE2
  0x00003a00 5f4d4154 485f5f20 31005f5f 5353495a _MATH__ 1.__SSIZ
  0x00003a10 455f545f 54595045 205f5f53 574f5244 E_T_TYPE __SWORD
  0x00003a20 5f545950 45005f5f 5336345f 54595045 _TYPE.__S64_TYPE
  0x00003a30 206c6f6e 6720696e 74005f5f 61747472  long int.__attr
  0x00003a40 69627574 655f7075 72655f5f 205f5f61 ibute_pure__ __a
  0x00003a50 74747269 62757465 5f5f2028 285f5f70 ttribute__ ((__p
  0x00003a60 7572655f 5f292900 5f5f494e 544d4158 ure__)).__INTMAX
  0x00003a70 5f432863 29206320 2323204c 005f494f _C(c) c ## L._IO
  0x00003a80 5f69636f 6e765f74 205f475f 69636f6e _iconv_t _G_icon
  0x00003a90 765f7400 5f5f494e 545f4641 53543332 v_t.__INT_FAST32
  0x00003aa0 5f574944 54485f5f 20363400 5f5f5553 _WIDTH__ 64.__US
  0x00003ab0 455f584f 50454e32 4b382031 005f5f49 E_XOPEN2K8 1.__I
  0x00003ac0 4e545f4c 45415354 36345f57 49445448 NT_LEAST64_WIDTH
  0x00003ad0 5f5f2036 34005f5f 474c4942 435f5553 __ 64.__GLIBC_US
  0x00003ae0 455f4945 435f3630 3535395f 54595045 E_IEC_60559_TYPE
  0x00003af0 535f4558 54203000 5f5f494e 54385f43 S_EXT 0.__INT8_C
  0x00003b00 28632920 63005f5f 53495a45 4f465f50 (c) c.__SIZEOF_P
  0x00003b10 4f494e54 45525f5f 2038005f 5f464c54 OINTER__ 8.__FLT
  0x00003b20 36345f45 5053494c 4f4e5f5f 20322e32 64_EPSILON__ 2.2
  0x00003b30 32303434 36303439 32353033 31333038 2044604925031308
  0x00003b40 30383437 32363333 33363138 31363430 0847263336181640
  0x00003b50 3632652d 31364636 34005f49 4f5f7661 62e-16F64._IO_va
  0x00003b60 5f6c6973 74205f47 5f76615f 6c697374 _list _G_va_list
  0x00003b70 005f5f46 4c543634 585f4d41 4e545f44 .__FLT64X_MANT_D
  0x00003b80 49475f5f 20363400 5f444546 41554c54 IG__ 64._DEFAULT
  0x00003b90 5f534f55 52434500 5f5f5743 4841525f _SOURCE.__WCHAR_
  0x00003ba0 4d41585f 5f203078 37666666 66666666 MAX__ 0x7fffffff
  0x00003bb0 005f494f 5f425546 53495a20 5f475f42 ._IO_BUFSIZ _G_B
  0x00003bc0 55465349 5a005f5f 46534649 4c434e54 UFSIZ.__FSFILCNT
  0x00003bd0 5f545f54 59504520 5f5f5359 5343414c _T_TYPE __SYSCAL
  0x00003be0 4c5f554c 4f4e475f 54595045 005f494f L_ULONG_TYPE._IO
  0x00003bf0 5f424144 5f534545 4e203078 34303030 _BAD_SEEN 0x4000
  0x00003c00 005f5f77 61726e61 74747228 6d736729 .__warnattr(msg)
  0x00003c10 205f5f61 74747269 62757465 5f5f2828  __attribute__((
  0x00003c20 5f5f7761 726e696e 675f5f20 286d7367 __warning__ (msg
  0x00003c30 29292900 5f5f494e 545f5749 4454485f ))).__INT_WIDTH_
  0x00003c40 5f203332 005f5f4c 44424c5f 44454349 _ 32.__LDBL_DECI
  0x00003c50 4d414c5f 4449475f 5f203231 005f5f47 MAL_DIG__ 21.__G
  0x00003c60 43435f41 544f4d49 435f504f 494e5445 CC_ATOMIC_POINTE
  0x00003c70 525f4c4f 434b5f46 52454520 32005f5f R_LOCK_FREE 2.__
  0x00003c80 73747562 5f5f5f63 6f6d7061 745f6264 stub___compat_bd
  0x00003c90 666c7573 68200046 4f50454e 5f4d4158 flush .FOPEN_MAX
  0x00003ca0 005f6c6f 636b005f 5f534547 5f465320 ._lock.__SEG_FS 
  0x00003cb0 31005f5f 50286172 67732920 61726773 1.__P(args) args
  0x00003cc0 005f5f54 494d455f 545f5459 5045205f .__TIME_T_TYPE _
  0x00003cd0 5f535953 43414c4c 5f534c4f 4e475f54 _SYSCALL_SLONG_T
  0x00003ce0 59504500 5f5f5549 4e545f46 41535431 YPE.__UINT_FAST1
  0x00003cf0 365f5459 50455f5f 206c6f6e 6720756e 6_TYPE__ long un
  0x00003d00 7369676e 65642069 6e74005f 5f474c49 signed int.__GLI
  0x00003d10 42435f5f 2032005f 494f5f73 74646f75 BC__ 2._IO_stdou
  0x00003d20 74202828 5f494f5f 46494c45 2a292826 t ((_IO_FILE*)(&
  0x00003d30 5f494f5f 325f315f 7374646f 75745f29 _IO_2_1_stdout_)
  0x00003d40 29005f5f 55534552 5f4c4142 454c5f50 ).__USER_LABEL_P
  0x00003d50 52454649 585f5f20 006c6f6e 6720756e REFIX__ .long un
  0x00003d60 7369676e 65642069 6e74005f 494f5f70 signed int._IO_p
  0x00003d70 69645f74 205f5f70 69645f74 005f5f67 id_t __pid_t.__g
  0x00003d80 6c696263 5f6d6163 726f5f77 61726e69 libc_macro_warni
  0x00003d90 6e673128 6d657373 61676529 205f5072 ng1(message) _Pr
  0x00003da0 61676d61 2028236d 65737361 67652900 agma (#message).
  0x00003db0 5f5f4743 435f4154 4f4d4943 5f434841 __GCC_ATOMIC_CHA
  0x00003dc0 5233325f 545f4c4f 434b5f46 52454520 R32_T_LOCK_FREE 
  0x00003dd0 32005f6f 6c645f6f 66667365 74007374 2._old_offset.st
  0x00003de0 64696e00 5f494f5f 46494c45 005f494f din._IO_FILE._IO
  0x00003df0 5f554e42 55464645 52454420 32005f5f _UNBUFFERED 2.__
  0x00003e00 43484152 5f424954 5f5f2038 005f5f43 CHAR_BIT__ 8.__C
  0x00003e10 4c4f434b 5f545f54 59504520 5f5f5359 LOCK_T_TYPE __SY
  0x00003e20 5343414c 4c5f534c 4f4e475f 54595045 SCALL_SLONG_TYPE
  0x00003e30 005f5f41 544f4d49 435f5245 4c415845 .__ATOMIC_RELAXE
  0x00003e40 44203000 5f494f5f 7373697a 655f7420 D 0._IO_ssize_t 
  0x00003e50 5f5f7373 697a655f 74005f5f 53544443 __ssize_t.__STDC
  0x00003e60 5f484f53 5445445f 5f203100 5f5f5349 _HOSTED__ 1.__SI
  0x00003e70 5a455f57 49445448 5f5f2036 34005f5f ZE_WIDTH__ 64.__
  0x00003e80 52454449 52454354 5f4c4442 4c286e61 REDIRECT_LDBL(na
  0x00003e90 6d652c70 726f746f 2c616c69 61732920 me,proto,alias) 
  0x00003ea0 5f5f5245 44495245 43542028 6e616d65 __REDIRECT (name
  0x00003eb0 2c207072 6f746f2c 20616c69 61732900 , proto, alias).
  0x00003ec0 5f5f616c 77617973 5f696e6c 696e6500 __always_inline.
  0x00003ed0 5f5f6861 735f696e 636c7564 65285354 __has_include(ST
  0x00003ee0 5229205f 5f686173 5f696e63 6c756465 R) __has_include
  0x00003ef0 5f5f2853 54522900 5f5f6e65 65645f5f __(STR).__need__
  0x00003f00 5f76615f 6c697374 20005f5f 41534d4e _va_list .__ASMN
  0x00003f10 414d4532 28707265 6669782c 636e616d AME2(prefix,cnam
  0x00003f20 6529205f 5f535452 494e4720 28707265 e) __STRING (pre
  0x00003f30 66697829 20636e61 6d65005f 494f5f53 fix) cname._IO_S
  0x00003f40 4349454e 54494649 43203034 30303000 CIENTIFIC 04000.
  0x00003f50 5f494f5f 7065656b 635f756e 6c6f636b _IO_peekc_unlock
  0x00003f60 6564285f 66702920 285f494f 5f424520 ed(_fp) (_IO_BE 
  0x00003f70 28285f66 70292d3e 5f494f5f 72656164 ((_fp)->_IO_read
  0x00003f80 5f707472 203e3d20 285f6670 292d3e5f _ptr >= (_fp)->_
  0x00003f90 494f5f72 6561645f 656e642c 20302920 IO_read_end, 0) 
  0x00003fa0 2626205f 5f756e64 6572666c 6f772028 && __underflow (
  0x00003fb0 5f667029 203d3d20 454f4620 3f20454f _fp) == EOF ? EO
  0x00003fc0 46203a20 2a28756e 7369676e 65642063 F : *(unsigned c
  0x00003fd0 68617220 2a292028 5f667029 2d3e5f49 har *) (_fp)->_I
  0x00003fe0 4f5f7265 61645f70 74722900 5f5f4c4f O_read_ptr).__LO
  0x00003ff0 4e475f57 49445448 5f5f2036 34005f5f NG_WIDTH__ 64.__
  0x00004000 55494e54 36345f4d 41585f5f 20307866 UINT64_MAX__ 0xf
  0x00004010 66666666 66666666 66666666 66666655 fffffffffffffffU
  0x00004020 4c005f5f 53515541 445f5459 5045206c L.__SQUAD_TYPE l
  0x00004030 6f6e6720 696e7400 5f5f5553 455f584f ong int.__USE_XO
  0x00004040 50454e32 4b585349 005f5f61 74747269 PEN2KXSI.__attri
  0x00004050 62757465 5f616c6c 6f635f73 697a655f bute_alloc_size_
  0x00004060 5f287061 72616d73 29205f5f 61747472 _(params) __attr
  0x00004070 69627574 655f5f20 28285f5f 616c6c6f ibute__ ((__allo
  0x00004080 635f7369 7a655f5f 20706172 616d7329 c_size__ params)
  0x00004090 29005f49 4f5f7769 6e745f74 2077696e )._IO_wint_t win
  0x000040a0 745f7400 5f5f6b38 2031005f 5f434841 t_t.__k8 1.__CHA
  0x000040b0 5231365f 54595045 5f5f2073 686f7274 R16_TYPE__ short
  0x000040c0 20756e73 69676e65 6420696e 74005f5f  unsigned int.__
  0x000040d0 4743435f 41544f4d 49435f4c 4c4f4e47 GCC_ATOMIC_LLONG
  0x000040e0 5f4c4f43 4b5f4652 45452032 005f5f44 _LOCK_FREE 2.__D
  0x000040f0 45433634 5f4d494e 5f455850 5f5f2028 EC64_MIN_EXP__ (
  0x00004100 2d333832 29005f5f 72657374 72696374 -382).__restrict
  0x00004110 5f617272 205f5f72 65737472 69637400 _arr __restrict.
  0x00004120 5f5f4154 4f4d4943 5f414351 5f52454c __ATOMIC_ACQ_REL
  0x00004130 2034005f 494f5f66 706f735f 74205f47  4._IO_fpos_t _G
  0x00004140 5f66706f 735f7400 5f5f6174 74726962 _fpos_t.__attrib
  0x00004150 7574655f 666f726d 61745f73 7472666d ute_format_strfm
  0x00004160 6f6e5f5f 28612c62 29205f5f 61747472 on__(a,b) __attr
  0x00004170 69627574 655f5f20 28285f5f 666f726d ibute__ ((__form
  0x00004180 61745f5f 20285f5f 73747266 6d6f6e5f at__ (__strfmon_
  0x00004190 5f2c2061 2c206229 29290075 6e736967 _, a, b))).unsig
  0x000041a0 6e656420 63686172 005f5f44 45433332 ned char.__DEC32
  0x000041b0 5f4d494e 5f455850 5f5f2028 2d393429 _MIN_EXP__ (-94)
  0x000041c0 005f494f 5f464958 45442030 31303030 ._IO_FIXED 01000
  0x000041d0 30005f5f 494e5436 345f5459 50455f5f 0.__INT64_TYPE__
  0x000041e0 206c6f6e 6720696e 74005f5f 464c545f  long int.__FLT_
  0x000041f0 4d494e5f 5f20312e 31373534 39343335 MIN__ 1.17549435
  0x00004200 30383232 32383735 30373936 38373336 0822287507968736
  0x00004210 35333732 32323234 35363865 2d333846 53722224568e-38F
  0x00004220 005f5f55 36345f54 59504520 756e7369 .__U64_TYPE unsi
  0x00004230 676e6564 206c6f6e 6720696e 74005f73 gned long int._s
  0x00004240 62756600 5f494f5f 76615f6c 69737400 buf._IO_va_list.
  0x00004250 7374646f 75742073 74646f75 74005f5f stdout stdout.__
  0x00004260 5553455f 474e5500 5f5f5449 4d45525f USE_GNU.__TIMER_
  0x00004270 545f5459 50452076 6f696420 2a005f49 T_TYPE void *._I
  0x00004280 4f5f7772 6974655f 70747200 5f5f4658 O_write_ptr.__FX
  0x00004290 53525f5f 2031005f 5f4c4541 465f4154 SR__ 1.__LEAF_AT
  0x000042a0 5452205f 5f617474 72696275 74655f5f TR __attribute__
  0x000042b0 2028285f 5f6c6561 665f5f29 29005f5f  ((__leaf__)).__
  0x000042c0 494e5438 5f545950 455f5f20 7369676e INT8_TYPE__ sign
  0x000042d0 65642063 68617200 5f5f494e 545f4c45 ed char.__INT_LE
  0x000042e0 41535433 325f5749 4454485f 5f203332 AST32_WIDTH__ 32
  0x000042f0 005f5f53 59534341 4c4c5f53 4c4f4e47 .__SYSCALL_SLONG
  0x00004300 5f545950 45205f5f 534c4f4e 47574f52 _TYPE __SLONGWOR
  0x00004310 445f5459 5045005f 5f55494e 544d4158 D_TYPE.__UINTMAX
  0x00004320 5f4d4158 5f5f2030 78666666 66666666 _MAX__ 0xfffffff
  0x00004330 66666666 66666666 66554c00 5f5f676c fffffffffUL.__gl
  0x00004340 6962635f 636c616e 675f7072 65726571 ibc_clang_prereq
  0x00004350 286d616a 2c6d696e 29203000 5f494f5f (maj,min) 0._IO_
  0x00004360 6261636b 75705f62 61736500 5f5f6c69 backup_base.__li
  0x00004370 6e75785f 5f203100 5f5f5049 435f5f20 nux__ 1.__PIC__ 
  0x00004380 32005f5f 494e545f 4c454153 5433325f 2.__INT_LEAST32_
  0x00004390 54595045 5f5f2069 6e74005f 5f55494e TYPE__ int.__UIN
  0x000043a0 545f4c45 41535436 345f5459 50455f5f T_LEAST64_TYPE__
  0x000043b0 206c6f6e 6720756e 7369676e 65642069  long unsigned i
  0x000043c0 6e74005f 494f5f70 7574635f 756e6c6f nt._IO_putc_unlo
  0x000043d0 636b6564 285f6368 2c5f6670 2920285f cked(_ch,_fp) (_
  0x000043e0 494f5f42 45202828 5f667029 2d3e5f49 IO_BE ((_fp)->_I
  0x000043f0 4f5f7772 6974655f 70747220 3e3d2028 O_write_ptr >= (
  0x00004400 5f667029 2d3e5f49 4f5f7772 6974655f _fp)->_IO_write_
  0x00004410 656e642c 20302920 3f205f5f 6f766572 end, 0) ? __over
  0x00004420 666c6f77 20285f66 702c2028 756e7369 flow (_fp, (unsi
  0x00004430 676e6564 20636861 72292028 5f636829 gned char) (_ch)
  0x00004440 29203a20 28756e73 69676e65 64206368 ) : (unsigned ch
  0x00004450 61722920 282a285f 6670292d 3e5f494f ar) (*(_fp)->_IO
  0x00004460 5f777269 74655f70 74722b2b 203d2028 _write_ptr++ = (
  0x00004470 5f636829 2929005f 504f5349 585f534f _ch)))._POSIX_SO
  0x00004480 55524345 2031005f 494f5f44 4f4e545f URCE 1._IO_DONT_
  0x00004490 434c4f53 45203031 30303030 30005f5f CLOSE 0100000.__
  0x000044a0 474c4942 435f5553 455f4945 435f3630 GLIBC_USE_IEC_60
  0x000044b0 3535395f 4246505f 45585400 5f5f5349 559_BFP_EXT.__SI
  0x000044c0 5a455f4d 41585f5f 20307866 66666666 ZE_MAX__ 0xfffff
  0x000044d0 66666666 66666666 66666655 4c005f5f fffffffffffUL.__
  0x000044e0 5549445f 545f5459 5045205f 5f553332 UID_T_TYPE __U32
  0x000044f0 5f545950 45005f5f 554c4f4e 47574f52 _TYPE.__ULONGWOR
  0x00004500 445f5459 50452075 6e736967 6e656420 D_TYPE unsigned 
  0x00004510 6c6f6e67 20696e74 005f5f47 43435f41 long int.__GCC_A
  0x00004520 544f4d49 435f5348 4f52545f 4c4f434b TOMIC_SHORT_LOCK
  0x00004530 5f465245 45203200 5f5f464c 54363458 _FREE 2.__FLT64X
  0x00004540 5f444543 494d414c 5f444947 5f5f2032 _DECIMAL_DIG__ 2
  0x00004550 31005345 454b5f53 45542030 005f5f55 1.SEEK_SET 0.__U
  0x00004560 53455f58 4f50454e 5f455854 454e4445 SE_XOPEN_EXTENDE
  0x00004570 44005f5f 494e545f 46415354 31365f4d D.__INT_FAST16_M
  0x00004580 41585f5f 20307837 66666666 66666666 AX__ 0x7ffffffff
  0x00004590 66666666 6666664c 005f5f46 4c545f45 fffffffL.__FLT_E
  0x000045a0 5053494c 4f4e5f5f 20312e31 39323039 PSILON__ 1.19209
  0x000045b0 32383935 35303738 31323530 30303030 2895507812500000
  0x000045c0 30303030 30303030 30303030 3030652d 00000000000000e-
  0x000045d0 3746005f 5f464c54 36345f4d 494e5f45 7F.__FLT64_MIN_E
  0x000045e0 58505f5f 20282d31 30323129 005f494f XP__ (-1021)._IO
  0x000045f0 535f4150 50454e44 2038005f 5f474c49 S_APPEND 8.__GLI
  0x00004600 42435f49 4e544552 4e414c5f 53544152 BC_INTERNAL_STAR
  0x00004610 54494e47 5f484541 4445525f 494d504c TING_HEADER_IMPL
  0x00004620 454d454e 54415449 4f4e005f 5f464c54 EMENTATION.__FLT
  0x00004630 5f455641 4c5f4d45 54484f44 5f54535f _EVAL_METHOD_TS_
  0x00004640 31383636 315f335f 5f203000 5f5f4442 18661_3__ 0.__DB
  0x00004650 4c5f4841 535f494e 46494e49 54595f5f L_HAS_INFINITY__
  0x00004660 2031005f 5f617474 72696275 74655f77  1.__attribute_w
  0x00004670 61726e5f 756e7573 65645f72 6573756c arn_unused_resul
  0x00004680 745f5f20 5f5f6174 74726962 7574655f t__ __attribute_
  0x00004690 5f202828 5f5f7761 726e5f75 6e757365 _ ((__warn_unuse
  0x000046a0 645f7265 73756c74 5f5f2929 005f5f49 d_result__)).__I
  0x000046b0 4e543634 5f432863 29206320 2323204c NT64_C(c) c ## L
  0x000046c0 005f5f45 4e445f44 45434c53 20005f5f .__END_DECLS .__
  0x000046d0 464c545f 4841535f 51554945 545f4e41 FLT_HAS_QUIET_NA
  0x000046e0 4e5f5f20 31005f5f 53495a45 4f465f49 N__ 1.__SIZEOF_I
  0x000046f0 4e545f5f 2034005f 5f434c4f 434b4944 NT__ 4.__CLOCKID
  0x00004700 5f545f54 59504520 5f5f5333 325f5459 _T_TYPE __S32_TY
  0x00004710 5045005f 5f494e54 5f464153 5431365f PE.__INT_FAST16_
  0x00004720 54595045 5f5f206c 6f6e6720 696e7400 TYPE__ long int.
  0x00004730 5f5f5354 44435f49 45435f35 35395f5f __STDC_IEC_559__
  0x00004740 2031005f 5f444543 3132385f 5355424e  1.__DEC128_SUBN
  0x00004750 4f524d41 4c5f4d49 4e5f5f20 302e3030 ORMAL_MIN__ 0.00
  0x00004760 30303030 30303030 30303030 30303030 0000000000000000
  0x00004770 30303030 30303030 30303030 30303145 000000000000001E
  0x00004780 2d363134 33444c00 5f5f6f66 665f7400 -6143DL.__off_t.
  0x00004790 5f5f5553 455f4c41 52474546 494c4500 __USE_LARGEFILE.
  0x000047a0 7369676e 65642063 68617200 5f5f5349 signed char.__SI
  0x000047b0 5a454f46 5f464c4f 41543830 5f5f2031 ZEOF_FLOAT80__ 1
  0x000047c0 36005f5f 464c5433 32585f48 41535f51 6.__FLT32X_HAS_Q
  0x000047d0 55494554 5f4e414e 5f5f2031 005f5f44 UIET_NAN__ 1.__D
  0x000047e0 424c5f4d 41585f31 305f4558 505f5f20 BL_MAX_10_EXP__ 
  0x000047f0 33303800 5f5f5553 455f4d49 53432031 308.__USE_MISC 1
  0x00004800 0073686f 72742075 6e736967 6e656420 .short unsigned 
  0x00004810 696e7400 5f5f4758 585f4142 495f5645 int.__GXX_ABI_VE
  0x00004820 5253494f 4e203130 3131005f 5f706963 RSION 1011.__pic
  0x00004830 5f5f2032 005f5f41 544f4d49 435f5245 __ 2.__ATOMIC_RE
  0x00004840 4c454153 45203300 5f5f5353 455f5f20 LEASE 3.__SSE__ 
  0x00004850 31005f49 4f5f4e4f 5f524541 44532034 1._IO_NO_READS 4
  0x00004860 005f5f47 4c494243 5f555345 5f494543 .__GLIBC_USE_IEC
  0x00004870 5f363035 35395f46 554e4353 5f455854 _60559_FUNCS_EXT
  0x00004880 2030006d 61696e00 5f53495a 45545f20  0.main._SIZET_ 
  0x00004890 005f5f46 4c543132 385f4445 4e4f524d .__FLT128_DENORM
  0x000048a0 5f4d494e 5f5f2036 2e343735 31373531 _MIN__ 6.4751751
  0x000048b0 31393433 38303235 31313039 32343433 1943802511092443
  0x000048c0 38393538 32323736 34363535 652d3439 895822764655e-49
  0x000048d0 36364631 3238005f 5f474c49 42435f55 66F128.__GLIBC_U
  0x000048e0 53455f49 45435f36 30353539 5f424650 SE_IEC_60559_BFP
  0x000048f0 5f455854 2030005f 5f737475 625f7265 _EXT 0.__stub_re
  0x00004900 766f6b65 20005f5f 494e544d 41585f54 voke .__INTMAX_T
  0x00004910 5950455f 5f206c6f 6e672069 6e74005f YPE__ long int._
  0x00004920 5f464c54 5f4d494e 5f455850 5f5f2028 _FLT_MIN_EXP__ (
  0x00004930 2d313235 29005f5f 5353505f 5354524f -125).__SSP_STRO
  0x00004940 4e475f5f 2033005f 5f657272 6f726465 NG__ 3.__errorde
  0x00004950 636c286e 616d652c 6d736729 20657874 cl(name,msg) ext
  0x00004960 65726e20 766f6964 206e616d 65202876 ern void name (v
  0x00004970 6f696429 205f5f61 74747269 62757465 oid) __attribute
  0x00004980 5f5f2828 5f5f6572 726f725f 5f20286d __((__error__ (m
  0x00004990 73672929 29005f5f 44454331 32385f4d sg))).__DEC128_M
  0x000049a0 41585f5f 20392e39 39393939 39393939 AX__ 9.999999999
  0x000049b0 39393939 39393939 39393939 39393939 9999999999999999
  0x000049c0 39393939 39393939 45363134 34444c00 99999999E6144DL.
  0x000049d0 5f5f464c 545f4d41 585f4558 505f5f20 __FLT_MAX_EXP__ 
  0x000049e0 31323800 5f5f4154 4f4d4943 5f484c45 128.__ATOMIC_HLE
  0x000049f0 5f414351 55495245 20363535 3336005f _ACQUIRE 65536._
  0x00004a00 5f4f4646 36345f54 5f545950 45205f5f _OFF64_T_TYPE __
  0x00004a10 53515541 445f5459 5045005f 5f555345 SQUAD_TYPE.__USE
  0x00004a20 5f49534f 43313100 5f5f4445 565f545f _ISOC11.__DEV_T_
  0x00004a30 54595045 205f5f55 51554144 5f545950 TYPE __UQUAD_TYP
  0x00004a40 45005f5f 4350555f 4d41534b 5f545950 E.__CPU_MASK_TYP
  0x00004a50 45205f5f 53595343 414c4c5f 554c4f4e E __SYSCALL_ULON
  0x00004a60 475f5459 5045005f 5f55494e 545f4c45 G_TYPE.__UINT_LE
  0x00004a70 41535433 325f4d41 585f5f20 30786666 AST32_MAX__ 0xff
  0x00004a80 66666666 66665500 5f494f5f 42452865 ffffffU._IO_BE(e
  0x00004a90 7870722c 72657329 205f5f62 75696c74 xpr,res) __built
  0x00004aa0 696e5f65 78706563 74202828 65787072 in_expect ((expr
  0x00004ab0 292c2072 65732900 5f5f4153 4d4e414d ), res).__ASMNAM
  0x00004ac0 4528636e 616d6529 205f5f41 534d4e41 E(cname) __ASMNA
  0x00004ad0 4d453220 285f5f55 5345525f 4c414245 ME2 (__USER_LABE
  0x00004ae0 4c5f5052 45464958 5f5f2c20 636e616d L_PREFIX__, cnam
  0x00004af0 6529005f 5f464c54 3332585f 4d41585f e).__FLT32X_MAX_
  0x00004b00 31305f45 58505f5f 20333038 005f5f61 10_EXP__ 308.__a
  0x00004b10 6d643634 2031005f 5f574f52 4453495a md64 1.__WORDSIZ
  0x00004b20 45203634 005f5f75 6e697820 31005f63 E 64.__unix 1._c
  0x00004b30 6861696e 005f5f46 4c543634 5f44454e hain.__FLT64_DEN
  0x00004b40 4f524d5f 4d494e5f 5f20342e 39343036 ORM_MIN__ 4.9406
  0x00004b50 35363435 38343132 34363534 34313736 5645841246544176
  0x00004b60 35363837 39323836 38323231 33373265 568792868221372e
  0x00004b70 2d333234 46363400 4c5f6374 65726d69 -324F64.L_ctermi
  0x00004b80 64203900 5f5f5054 52444946 465f5459 d 9.__PTRDIFF_TY
  0x00004b90 50455f5f 206c6f6e 6720696e 74005f5f PE__ long int.__
  0x00004ba0 464c5433 325f4d41 585f3130 5f455850 FLT32_MAX_10_EXP
  0x00004bb0 5f5f2033 38005f5f 574f5244 53495a45 __ 38.__WORDSIZE
  0x00004bc0 5f54494d 4536345f 434f4d50 41543332 _TIME64_COMPAT32
  0x00004bd0 2031005f 5f464c54 3132385f 44454349  1.__FLT128_DECI
  0x00004be0 4d414c5f 4449475f 5f203336 005f5f50 MAL_DIG__ 36.__P
  0x00004bf0 54524449 46465f57 49445448 5f5f2036 TRDIFF_WIDTH__ 6
  0x00004c00 34005f5f 494e545f 4c454153 5433325f 4.__INT_LEAST32_
  0x00004c10 4d41585f 5f203078 37666666 66666666 MAX__ 0x7fffffff
  0x00004c20 005f5f55 494e545f 46415354 36345f54 .__UINT_FAST64_T
  0x00004c30 5950455f 5f206c6f 6e672075 6e736967 YPE__ long unsig
  0x00004c40 6e656420 696e7400 5f5f7374 75625f73 ned int.__stub_s
  0x00004c50 73746b20 005f494f 5f66706f 7336345f stk ._IO_fpos64_
  0x00004c60 74205f47 5f66706f 7336345f 74005f5f t _G_fpos64_t.__
  0x00004c70 5448524f 574e4c20 5f5f6174 74726962 THROWNL __attrib
  0x00004c80 7574655f 5f202828 5f5f6e6f 7468726f ute__ ((__nothro
  0x00004c90 775f5f29 29005f5f 4c44424c 5f4d4158 w__)).__LDBL_MAX
  0x00004ca0 5f31305f 4558505f 5f203439 3332005f _10_EXP__ 4932._
  0x00004cb0 5f444543 36345f4d 494e5f5f 2031452d _DEC64_MIN__ 1E-
  0x00004cc0 33383344 44005f5f 464c5433 325f4d41 383DD.__FLT32_MA
  0x00004cd0 585f5f20 332e3430 32383233 34363633 X__ 3.4028234663
  0x00004ce0 38353238 38353938 31313730 34313833 8528859811704183
  0x00004cf0 34383435 31363932 35652b33 38463332 484516925e+38F32
  0x00004d00 005f5f44 424c5f45 5053494c 4f4e5f5f .__DBL_EPSILON__
  0x00004d10 20282864 6f75626c 6529322e 32323034  ((double)2.2204
  0x00004d20 34363034 39323530 33313330 38303834 4604925031308084
  0x00004d30 37323633 33333631 38313634 30363265 726333618164062e
  0x00004d40 2d31364c 29005f63 75725f63 6f6c756d -16L)._cur_colum
  0x00004d50 6e00756e 69782031 005f5f50 5241474d n.unix 1.__PRAGM
  0x00004d60 415f5245 44454649 4e455f45 58544e41 A_REDEFINE_EXTNA
  0x00004d70 4d452031 005f5f53 49475f41 544f4d49 ME 1.__SIG_ATOMI
  0x00004d80 435f5459 50455f5f 20696e74 005f5f46 C_TYPE__ int.__F
  0x00004d90 4c543634 585f4445 4e4f524d 5f4d494e LT64X_DENORM_MIN
  0x00004da0 5f5f2033 2e363435 31393935 33313838 __ 3.64519953188
  0x00004db0 32343734 36303235 32383430 35393333 2474602528405933
  0x00004dc0 36313934 31393832 652d3439 35314636 61941982e-4951F6
  0x00004dd0 3478005f 5f555345 5f504f53 4958005f 4x.__USE_POSIX._
  0x00004de0 5f464c54 3132385f 4841535f 44454e4f _FLT128_HAS_DENO
  0x00004df0 524d5f5f 2031005f 494f5f43 55525245 RM__ 1._IO_CURRE
  0x00004e00 4e544c59 5f505554 54494e47 20307838 NTLY_PUTTING 0x8
  0x00004e10 3030005f 5f44424c 5f444543 494d414c 00.__DBL_DECIMAL
  0x00004e20 5f444947 5f5f2031 37005f5f 4c44424c _DIG__ 17.__LDBL
  0x00004e30 5f484153 5f44454e 4f524d5f 5f203100 _HAS_DENORM__ 1.
  0x00004e40 5f756e75 73656432 005f494f 5f627566 _unused2._IO_buf
  0x00004e50 5f626173 65005f5f 73747562 5f6c6368 _base.__stub_lch
  0x00004e60 6d6f6420 005f5f46 4c543634 5f4d414e mod .__FLT64_MAN
  0x00004e70 545f4449 475f5f20 3533005f 5f444543 T_DIG__ 53.__DEC
  0x00004e80 36345f4d 414e545f 4449475f 5f203136 64_MANT_DIG__ 16
  0x00004e90 005f5f46 4c545f48 41535f44 454e4f52 .__FLT_HAS_DENOR
  0x00004ea0 4d5f5f20 31005f5f 6f666636 345f7400 M__ 1.__off64_t.
  0x00004eb0 5f5f4445 43494d41 4c5f4449 475f5f20 __DECIMAL_DIG__ 
  0x00004ec0 323100                              21.

Contents of the .eh_frame section:


00000000 0000000000000014 00000000 CIE
  Version:               1
  Augmentation:          "zR"
  Code alignment factor: 1
  Data alignment factor: -8
  Return address column: 16
  Augmentation data:     1b
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_offset: r16 (rip) at cfa-8
  DW_CFA_nop
  DW_CFA_nop

00000018 000000000000001c 0000001c FDE cie=00000000 pc=0000000000000000..000000000000007d
  DW_CFA_advance_loc: 1 to 0000000000000001
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000004
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc1: 120 to 000000000000007c
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop

