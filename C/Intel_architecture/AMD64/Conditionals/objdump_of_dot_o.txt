
if_then.o:     file format elf64-x86-64
if_then.o
architecture: i386:x86-64, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x0000000000000000

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         0000007d  0000000000000000  0000000000000000  00000040  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  0000000000000000  0000000000000000  000000bd  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  0000000000000000  0000000000000000  000000bd  2**0
                  ALLOC
  3 .rodata       00000045  0000000000000000  0000000000000000  000000c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000002b  0000000000000000  0000000000000000  00000105  2**0
                  CONTENTS, READONLY
  5 .note.GNU-stack 00000000  0000000000000000  0000000000000000  00000130  2**0
                  CONTENTS, READONLY
  6 .eh_frame     00000038  0000000000000000  0000000000000000  00000130  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 if_then.c
0000000000000000 l    d  .text	0000000000000000 .text
0000000000000000 l    d  .data	0000000000000000 .data
0000000000000000 l    d  .bss	0000000000000000 .bss
0000000000000000 l    d  .rodata	0000000000000000 .rodata
0000000000000000 l    d  .note.GNU-stack	0000000000000000 .note.GNU-stack
0000000000000000 l    d  .eh_frame	0000000000000000 .eh_frame
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 g     F .text	000000000000007d main
0000000000000000         *UND*	0000000000000000 _GLOBAL_OFFSET_TABLE_
0000000000000000         *UND*	0000000000000000 printf
0000000000000000         *UND*	0000000000000000 __isoc99_scanf
0000000000000000         *UND*	0000000000000000 puts
0000000000000000         *UND*	0000000000000000 __stack_chk_fail


Contents of section .text:
 0000 554889e5 4883ec20 897dec48 8975e064  UH..H.. .}.H.u.d
 0010 488b0425 28000000 488945f8 31c0c745  H..%(...H.E.1..E
 0020 f4050000 00488d3d 00000000 b8000000  .....H.=........
 0030 00e80000 0000488d 45f04889 c6488d3d  ......H.E.H..H.=
 0040 00000000 b8000000 00e80000 00008b45  ...............E
 0050 f03945f4 7d0c488d 3d000000 00e80000  .9E.}.H.=.......
 0060 0000b800 00000048 8b55f864 48331425  .......H.U.dH3.%
 0070 28000000 7405e800 000000c9 c3        (...t........   
Contents of section .rodata:
 0000 456e7465 72206120 6e756d62 65722062  Enter a number b
 0010 65747765 656e2031 20616e64 20313020  etween 1 and 10 
 0020 2d3e2000 25640054 6865206e 756d6265  -> .%d.The numbe
 0030 72207761 73206869 67686572 20746861  r was higher tha
 0040 6e203521 00                          n 5!.           
Contents of section .comment:
 0000 00474343 3a202855 62756e74 7520372e  .GCC: (Ubuntu 7.
 0010 332e302d 32377562 756e7475 317e3138  3.0-27ubuntu1~18
 0020 2e303429 20372e33 2e3000             .04) 7.3.0.     
Contents of section .eh_frame:
 0000 14000000 00000000 017a5200 01781001  .........zR..x..
 0010 1b0c0708 90010000 1c000000 1c000000  ................
 0020 00000000 7d000000 00410e10 8602430d  ....}....A....C.
 0030 0602780c 07080000                    ..x.....        

Disassembly of section .text:

0000000000000000 <main>:
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp
   4:	48 83 ec 20          	sub    rsp,0x20
   8:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   f:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  16:	00 00 
  18:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  1c:	31 c0                	xor    eax,eax
  1e:	c7 45 f4 05 00 00 00 	mov    DWORD PTR [rbp-0xc],0x5
  25:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 2c <main+0x2c>
			28: R_X86_64_PC32	.rodata-0x4
  2c:	b8 00 00 00 00       	mov    eax,0x0
  31:	e8 00 00 00 00       	call   36 <main+0x36>
			32: R_X86_64_PLT32	printf-0x4
  36:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  3a:	48 89 c6             	mov    rsi,rax
  3d:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 44 <main+0x44>
			40: R_X86_64_PC32	.rodata+0x20
  44:	b8 00 00 00 00       	mov    eax,0x0
  49:	e8 00 00 00 00       	call   4e <main+0x4e>
			4a: R_X86_64_PLT32	__isoc99_scanf-0x4
  4e:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  51:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
  54:	7d 0c                	jge    62 <main+0x62>
  56:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 5d <main+0x5d>
			59: R_X86_64_PC32	.rodata+0x23
  5d:	e8 00 00 00 00       	call   62 <main+0x62>
			5e: R_X86_64_PLT32	puts-0x4
  62:	b8 00 00 00 00       	mov    eax,0x0
  67:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  6b:	64 48 33 14 25 28 00 	xor    rdx,QWORD PTR fs:0x28
  72:	00 00 
  74:	74 05                	je     7b <main+0x7b>
  76:	e8 00 00 00 00       	call   7b <main+0x7b>
			77: R_X86_64_PLT32	__stack_chk_fail-0x4
  7b:	c9                   	leave  
  7c:	c3                   	ret    

Disassembly of section .rodata:

0000000000000000 <.rodata>:
   0:	45 6e                	rex.RB outs dx,BYTE PTR ds:[rsi]
   2:	74 65                	je     69 <main+0x69>
   4:	72 20                	jb     26 <.rodata+0x26>
   6:	61                   	(bad)  
   7:	20 6e 75             	and    BYTE PTR [rsi+0x75],ch
   a:	6d                   	ins    DWORD PTR es:[rdi],dx
   b:	62                   	(bad)  
   c:	65 72 20             	gs jb  2f <.rodata+0x2f>
   f:	62                   	(bad)  
  10:	65 74 77             	gs je  8a <main+0x8a>
  13:	65 65 6e             	gs outs dx,BYTE PTR gs:[rsi]
  16:	20 31                	and    BYTE PTR [rcx],dh
  18:	20 61 6e             	and    BYTE PTR [rcx+0x6e],ah
  1b:	64 20 31             	and    BYTE PTR fs:[rcx],dh
  1e:	30 20                	xor    BYTE PTR [rax],ah
  20:	2d 3e 20 00 25       	sub    eax,0x2500203e
  25:	64 00 54 68 65       	add    BYTE PTR fs:[rax+rbp*2+0x65],dl
  2a:	20 6e 75             	and    BYTE PTR [rsi+0x75],ch
  2d:	6d                   	ins    DWORD PTR es:[rdi],dx
  2e:	62                   	(bad)  
  2f:	65 72 20             	gs jb  52 <main+0x52>
  32:	77 61                	ja     95 <main+0x95>
  34:	73 20                	jae    56 <main+0x56>
  36:	68 69 67 68 65       	push   0x65686769
  3b:	72 20                	jb     5d <main+0x5d>
  3d:	74 68                	je     a7 <main+0xa7>
  3f:	61                   	(bad)  
  40:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  41:	20                   	.byte 0x20
  42:	35                   	.byte 0x35
  43:	21 00                	and    DWORD PTR [rax],eax

Disassembly of section .comment:

0000000000000000 <.comment>:
   0:	00 47 43             	add    BYTE PTR [rdi+0x43],al
   3:	43 3a 20             	rex.XB cmp spl,BYTE PTR [r8]
   6:	28 55 62             	sub    BYTE PTR [rbp+0x62],dl
   9:	75 6e                	jne    79 <main+0x79>
   b:	74 75                	je     82 <main+0x82>
   d:	20 37                	and    BYTE PTR [rdi],dh
   f:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  12:	30 2d 32 37 75 62    	xor    BYTE PTR [rip+0x62753732],ch        # 6275374a <main+0x6275374a>
  18:	75 6e                	jne    88 <main+0x88>
  1a:	74 75                	je     91 <main+0x91>
  1c:	31 7e 31             	xor    DWORD PTR [rsi+0x31],edi
  1f:	38 2e                	cmp    BYTE PTR [rsi],ch
  21:	30 34 29             	xor    BYTE PTR [rcx+rbp*1],dh
  24:	20 37                	and    BYTE PTR [rdi],dh
  26:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  29:	30 00                	xor    BYTE PTR [rax],al

Disassembly of section .eh_frame:

0000000000000000 <.eh_frame>:
   0:	14 00                	adc    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   4:	00 00                	add    BYTE PTR [rax],al
   6:	00 00                	add    BYTE PTR [rax],al
   8:	01 7a 52             	add    DWORD PTR [rdx+0x52],edi
   b:	00 01                	add    BYTE PTR [rcx],al
   d:	78 10                	js     1f <.eh_frame+0x1f>
   f:	01 1b                	add    DWORD PTR [rbx],ebx
  11:	0c 07                	or     al,0x7
  13:	08 90 01 00 00 1c    	or     BYTE PTR [rax+0x1c000001],dl
  19:	00 00                	add    BYTE PTR [rax],al
  1b:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  1e:	00 00                	add    BYTE PTR [rax],al
  20:	00 00                	add    BYTE PTR [rax],al
			20: R_X86_64_PC32	.text
  22:	00 00                	add    BYTE PTR [rax],al
  24:	7d 00                	jge    26 <.eh_frame+0x26>
  26:	00 00                	add    BYTE PTR [rax],al
  28:	00 41 0e             	add    BYTE PTR [rcx+0xe],al
  2b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  31:	02 78 0c             	add    bh,BYTE PTR [rax+0xc]
  34:	07                   	(bad)  
  35:	08 00                	or     BYTE PTR [rax],al
	...
