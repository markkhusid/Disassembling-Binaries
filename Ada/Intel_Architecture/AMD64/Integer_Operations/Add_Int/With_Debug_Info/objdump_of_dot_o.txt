
add_int.o:     file format elf64-x86-64
add_int.o
architecture: i386:x86-64, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x0000000000000000

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         0000001c  0000000000000000  0000000000000000  00000040  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  0000000000000000  0000000000000000  0000005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  0000000000000000  0000000000000000  0000005c  2**0
                  ALLOC
  3 .debug_info   0000007f  0000000000000000  0000000000000000  0000005c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .debug_abbrev 0000004e  0000000000000000  0000000000000000  000000db  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000030  0000000000000000  0000000000000000  00000129  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_line   00000047  0000000000000000  0000000000000000  00000159  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  7 .debug_str    000000f2  0000000000000000  0000000000000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .comment      0000001e  0000000000000000  0000000000000000  00000292  2**0
                  CONTENTS, READONLY
  9 .note.GNU-stack 00000000  0000000000000000  0000000000000000  000002b0  2**0
                  CONTENTS, READONLY
 10 .eh_frame     00000038  0000000000000000  0000000000000000  000002b0  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 add_int.adb
0000000000000000 l    d  .text	0000000000000000 .text
0000000000000000 l    d  .data	0000000000000000 .data
0000000000000000 l    d  .bss	0000000000000000 .bss
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .note.GNU-stack	0000000000000000 .note.GNU-stack
0000000000000000 l    d  .eh_frame	0000000000000000 .eh_frame
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 g     F .text	000000000000001c _ada_add_int


Contents of section .text:
 0000 554889e5 c745fc03 000000c7 45f80500  UH...E......E...
 0010 0000c745 f4080000 00905dc3           ...E......].    
Contents of section .debug_info:
 0000 7b000000 04000000 00000801 00000000  {...............
 0010 0d000000 00000000 00000000 00000000  ................
 0020 001c0000 00000000 00000000 00020000  ................
 0030 00000105 01000000 00000000 00000000  ................
 0040 001c0000 00000000 00019c77 00000003  ...........w....
 0050 61000106 04770000 0002916c 03620001  a....w.....l.b..
 0060 06077700 00000291 68036300 01060a77  ..w.....h.c....w
 0070 00000002 91640004 04050000 000000    .....d......... 
Contents of section .debug_abbrev:
 0000 01110125 0e130b03 0e1b0e11 01120710  ...%............
 0010 17000002 2e013f19 030e3a0b 3b0b390b  ......?...:.;.9.
 0020 6e0e1101 12074018 97421901 13000003  n.....@..B......
 0030 34000308 3a0b3b0b 390b4913 02180000  4...:.;.9.I.....
 0040 0424000b 0b3e0b03 0e341900 0000      .$...>...4....  
Contents of section .debug_aranges:
 0000 2c000000 02000000 00000800 00000000  ,...............
 0010 00000000 00000000 1c000000 00000000  ................
 0020 00000000 00000000 00000000 00000000  ................
Contents of section .debug_line:
 0000 43000000 02002200 00000101 fb0e0d00  C.....".........
 0010 01010101 00000001 00000100 6164645f  ............add_
 0020 696e742e 61646200 00000000 05010009  int.adb.........
 0030 02000000 00000000 00160506 4f757605  ............Ouv.
 0040 05760203 000101                      .v.....         
Contents of section .debug_str:
 0000 2f686f6d 652f6861 786f722f 456e6769  /home/haxor/Engi
 0010 6e656572 696e672f 50726f67 72616d6d  neering/Programm
 0020 696e672f 44697361 7373656d 626c696e  ing/Disassemblin
 0030 672d4269 6e617269 65732f41 64612f49  g-Binaries/Ada/I
 0040 6e74656c 5f417263 68697465 63747572  ntel_Architectur
 0050 652f414d 4436342f 496e7465 6765725f  e/AMD64/Integer_
 0060 4f706572 6174696f 6e732f41 64645f49  Operations/Add_I
 0070 6e742f57 6974685f 44656275 675f496e  nt/With_Debug_In
 0080 666f0069 6e746567 65720061 64645f69  fo.integer.add_i
 0090 6e742e61 64620061 64645f69 6e740047  nt.adb.add_int.G
 00a0 4e552041 64612038 2e322e30 202d676e  NU Ada 8.2.0 -gn
 00b0 6174657a 202d676e 61746561 202d6720  atez -gnatea -g 
 00c0 2d676e61 74657a20 2d6d7475 6e653d67  -gnatez -mtune=g
 00d0 656e6572 6963202d 6d617263 683d7838  eneric -march=x8
 00e0 362d3634 005f6164 615f6164 645f696e  6-64._ada_add_in
 00f0 7400                                 t.              
Contents of section .comment:
 0000 00474343 3a202844 65626961 6e20382e  .GCC: (Debian 8.
 0010 322e302d 31342920 382e322e 3000      2.0-14) 8.2.0.  
Contents of section .eh_frame:
 0000 14000000 00000000 017a5200 01781001  .........zR..x..
 0010 1b0c0708 90010000 1c000000 1c000000  ................
 0020 00000000 1c000000 00410e10 8602430d  .........A....C.
 0030 06570c07 08000000                    .W......        

Disassembly of section .text:

0000000000000000 <_ada_add_int>:
--
-- Some numbers to come and go.
--
with Gnat.Io; use Gnat.Io;
procedure Add_Int is
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp
   a, b, c: Integer;

begin

   a := 3;
   4:	c7 45 fc 03 00 00 00 	mov    DWORD PTR [rbp-0x4],0x3
   b := 5;
   b:	c7 45 f8 05 00 00 00 	mov    DWORD PTR [rbp-0x8],0x5

   c := a + b;
  12:	c7 45 f4 08 00 00 00 	mov    DWORD PTR [rbp-0xc],0x8

end Add_Int;
  19:	90                   	nop
  1a:	5d                   	pop    rbp
  1b:	c3                   	ret    

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
procedure Add_Int is
   0:	7b 00                	jnp    2 <.debug_info+0x2>
   2:	00 00                	add    BYTE PTR [rax],al
   a := 3;
   4:	04 00                	add    al,0x0
   6:	00 00                	add    BYTE PTR [rax],al
			6: R_X86_64_32	.debug_abbrev
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 01                	or     BYTE PTR [rcx],al
   b := 5;
   c:	00 00                	add    BYTE PTR [rax],al
			c: R_X86_64_32	.debug_str+0x9f
   e:	00 00                	add    BYTE PTR [rax],al
  10:	0d 00 00 00 00       	or     eax,0x0
			11: R_X86_64_32	.debug_str+0x8b
	...
			15: R_X86_64_32	.debug_str
			19: R_X86_64_64	.text
  21:	1c 00                	sbb    al,0x0
	...
			29: R_X86_64_32	.debug_line
  2b:	00 00                	add    BYTE PTR [rax],al
  2d:	02 00                	add    al,BYTE PTR [rax]
			2e: R_X86_64_32	.debug_str+0x97
  2f:	00 00                	add    BYTE PTR [rax],al
  31:	00 01                	add    BYTE PTR [rcx],al
  33:	05 01 00 00 00       	add    eax,0x1
			35: R_X86_64_32	.debug_str+0xe5
	...
			39: R_X86_64_64	.text
  40:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  43:	00 00                	add    BYTE PTR [rax],al
  45:	00 00                	add    BYTE PTR [rax],al
  47:	00 00                	add    BYTE PTR [rax],al
  49:	01 9c 77 00 00 00 03 	add    DWORD PTR [rdi+rsi*2+0x3000000],ebx
  50:	61                   	(bad)  
  51:	00 01                	add    BYTE PTR [rcx],al
  53:	06                   	(bad)  
  54:	04 77                	add    al,0x77
  56:	00 00                	add    BYTE PTR [rax],al
  58:	00 02                	add    BYTE PTR [rdx],al
  5a:	91                   	xchg   ecx,eax
  5b:	6c                   	ins    BYTE PTR es:[rdi],dx
  5c:	03 62 00             	add    esp,DWORD PTR [rdx+0x0]
  5f:	01 06                	add    DWORD PTR [rsi],eax
  61:	07                   	(bad)  
  62:	77 00                	ja     64 <.debug_info+0x64>
  64:	00 00                	add    BYTE PTR [rax],al
  66:	02 91 68 03 63 00    	add    dl,BYTE PTR [rcx+0x630368]
  6c:	01 06                	add    DWORD PTR [rsi],eax
  6e:	0a 77 00             	or     dh,BYTE PTR [rdi+0x0]
  71:	00 00                	add    BYTE PTR [rax],al
  73:	02 91 64 00 04 04    	add    dl,BYTE PTR [rcx+0x4040064]
  79:	05 00 00 00 00       	add    eax,0x0
			7a: R_X86_64_32	.debug_str+0x83
	...

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
procedure Add_Int is
   0:	01 11                	add    DWORD PTR [rcx],edx
   2:	01 25 0e 13 0b 03    	add    DWORD PTR [rip+0x30b130e],esp        # 30b1316 <_ada_add_int+0x30b1316>
   a := 3;
   8:	0e                   	(bad)  
   9:	1b 0e                	sbb    ecx,DWORD PTR [rsi]
   b := 5;
   b:	11 01                	adc    DWORD PTR [rcx],eax
   d:	12 07                	adc    al,BYTE PTR [rdi]
   f:	10 17                	adc    BYTE PTR [rdi],dl
  11:	00 00                	add    BYTE PTR [rax],al
   c := a + b;
  13:	02 2e                	add    ch,BYTE PTR [rsi]
  15:	01 3f                	add    DWORD PTR [rdi],edi
  17:	19 03                	sbb    DWORD PTR [rbx],eax
end Add_Int;
  19:	0e                   	(bad)  
  1a:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  1c:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  1e:	39 0b                	cmp    DWORD PTR [rbx],ecx
  20:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  21:	0e                   	(bad)  
  22:	11 01                	adc    DWORD PTR [rcx],eax
  24:	12 07                	adc    al,BYTE PTR [rdi]
  26:	40 18 97 42 19 01 13 	sbb    BYTE PTR [rdi+0x13011942],dl
  2d:	00 00                	add    BYTE PTR [rax],al
  2f:	03 34 00             	add    esi,DWORD PTR [rax+rax*1]
  32:	03 08                	add    ecx,DWORD PTR [rax]
  34:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  36:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  38:	39 0b                	cmp    DWORD PTR [rbx],ecx
  3a:	49 13 02             	adc    rax,QWORD PTR [r10]
  3d:	18 00                	sbb    BYTE PTR [rax],al
  3f:	00 04 24             	add    BYTE PTR [rsp],al
  42:	00 0b                	add    BYTE PTR [rbx],cl
  44:	0b 3e                	or     edi,DWORD PTR [rsi]
  46:	0b 03                	or     eax,DWORD PTR [rbx]
  48:	0e                   	(bad)  
  49:	34 19                	xor    al,0x19
  4b:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
procedure Add_Int is
   0:	2c 00                	sub    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   a := 3;
   4:	02 00                	add    al,BYTE PTR [rax]
   6:	00 00                	add    BYTE PTR [rax],al
			6: R_X86_64_32	.debug_info
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 00                	or     BYTE PTR [rax],al
	...
			10: R_X86_64_64	.text
   c := a + b;
  18:	1c 00                	sbb    al,0x0
	...

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
procedure Add_Int is
   0:	43 00 00             	rex.XB add BYTE PTR [r8],al
   3:	00 02                	add    BYTE PTR [rdx],al
   a := 3;
   5:	00 22                	add    BYTE PTR [rdx],ah
   7:	00 00                	add    BYTE PTR [rax],al
   9:	00 01                	add    BYTE PTR [rcx],al
   b := 5;
   b:	01 fb                	add    ebx,edi
   d:	0e                   	(bad)  
   e:	0d 00 01 01 01       	or     eax,0x1010100
   c := a + b;
  13:	01 00                	add    DWORD PTR [rax],eax
  15:	00 00                	add    BYTE PTR [rax],al
  17:	01 00                	add    DWORD PTR [rax],eax
end Add_Int;
  19:	00 01                	add    BYTE PTR [rcx],al
  1b:	00 61 64             	add    BYTE PTR [rcx+0x64],ah
  1e:	64 5f                	fs pop rdi
  20:	69 6e 74 2e 61 64 62 	imul   ebp,DWORD PTR [rsi+0x74],0x6264612e
  27:	00 00                	add    BYTE PTR [rax],al
  29:	00 00                	add    BYTE PTR [rax],al
  2b:	00 05 01 00 09 02    	add    BYTE PTR [rip+0x2090001],al        # 2090032 <_ada_add_int+0x2090032>
	...
			31: R_X86_64_64	.text
  39:	16                   	(bad)  
  3a:	05 06 4f 75 76       	add    eax,0x76754f06
  3f:	05 05 76 02 03       	add    eax,0x3027605
  44:	00 01                	add    BYTE PTR [rcx],al
  46:	01                   	.byte 0x1

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
procedure Add_Int is
   0:	2f                   	(bad)  
   1:	68 6f 6d 65 2f       	push   0x2f656d6f
   a := 3;
   6:	68 61 78 6f 72       	push   0x726f7861
   b := 5;
   b:	2f                   	(bad)  
   c:	45 6e                	rex.RB outs dx,BYTE PTR ds:[rsi]
   e:	67 69 6e 65 65 72 69 	imul   ebp,DWORD PTR [esi+0x65],0x6e697265
  15:	6e 
   c := a + b;
  16:	67 2f                	addr32 (bad) 
  18:	50                   	push   rax
end Add_Int;
  19:	72 6f                	jb     8a <.debug_str+0x8a>
  1b:	67 72 61             	addr32 jb 7f <.debug_str+0x7f>
  1e:	6d                   	ins    DWORD PTR es:[rdi],dx
  1f:	6d                   	ins    DWORD PTR es:[rdi],dx
  20:	69 6e 67 2f 44 69 73 	imul   ebp,DWORD PTR [rsi+0x67],0x7369442f
  27:	61                   	(bad)  
  28:	73 73                	jae    9d <.debug_str+0x9d>
  2a:	65 6d                	gs ins DWORD PTR es:[rdi],dx
  2c:	62                   	(bad)  
  2d:	6c                   	ins    BYTE PTR es:[rdi],dx
  2e:	69 6e 67 2d 42 69 6e 	imul   ebp,DWORD PTR [rsi+0x67],0x6e69422d
  35:	61                   	(bad)  
  36:	72 69                	jb     a1 <.debug_str+0xa1>
  38:	65 73 2f             	gs jae 6a <.debug_str+0x6a>
  3b:	41                   	rex.B
  3c:	64 61                	fs (bad) 
  3e:	2f                   	(bad)  
  3f:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  41:	74 65                	je     a8 <.debug_str+0xa8>
  43:	6c                   	ins    BYTE PTR es:[rdi],dx
  44:	5f                   	pop    rdi
  45:	41 72 63             	rex.B jb ab <.debug_str+0xab>
  48:	68 69 74 65 63       	push   0x63657469
  4d:	74 75                	je     c4 <.debug_str+0xc4>
  4f:	72 65                	jb     b6 <.debug_str+0xb6>
  51:	2f                   	(bad)  
  52:	41                   	rex.B
  53:	4d                   	rex.WRB
  54:	44                   	rex.R
  55:	36 34 2f             	ss xor al,0x2f
  58:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  5a:	74 65                	je     c1 <.debug_str+0xc1>
  5c:	67 65 72 5f          	addr32 gs jb bf <.debug_str+0xbf>
  60:	4f 70 65             	rex.WRXB jo c8 <.debug_str+0xc8>
  63:	72 61                	jb     c6 <.debug_str+0xc6>
  65:	74 69                	je     d0 <.debug_str+0xd0>
  67:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  68:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  69:	73 2f                	jae    9a <.debug_str+0x9a>
  6b:	41                   	rex.B
  6c:	64 64 5f             	fs fs pop rdi
  6f:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  71:	74 2f                	je     a2 <.debug_str+0xa2>
  73:	57                   	push   rdi
  74:	69 74 68 5f 44 65 62 	imul   esi,DWORD PTR [rax+rbp*2+0x5f],0x75626544
  7b:	75 
  7c:	67 5f                	addr32 pop rdi
  7e:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  80:	66 6f                	outs   dx,WORD PTR ds:[rsi]
  82:	00 69 6e             	add    BYTE PTR [rcx+0x6e],ch
  85:	74 65                	je     ec <.debug_str+0xec>
  87:	67 65 72 00          	addr32 gs jb 8b <.debug_str+0x8b>
  8b:	61                   	(bad)  
  8c:	64 64 5f             	fs fs pop rdi
  8f:	69 6e 74 2e 61 64 62 	imul   ebp,DWORD PTR [rsi+0x74],0x6264612e
  96:	00 61 64             	add    BYTE PTR [rcx+0x64],ah
  99:	64 5f                	fs pop rdi
  9b:	69 6e 74 00 47 4e 55 	imul   ebp,DWORD PTR [rsi+0x74],0x554e4700
  a2:	20 41 64             	and    BYTE PTR [rcx+0x64],al
  a5:	61                   	(bad)  
  a6:	20 38                	and    BYTE PTR [rax],bh
  a8:	2e 32 2e             	xor    ch,BYTE PTR cs:[rsi]
  ab:	30 20                	xor    BYTE PTR [rax],ah
  ad:	2d 67 6e 61 74       	sub    eax,0x74616e67
  b2:	65 7a 20             	gs jp  d5 <.debug_str+0xd5>
  b5:	2d 67 6e 61 74       	sub    eax,0x74616e67
  ba:	65 61                	gs (bad) 
  bc:	20 2d 67 20 2d 67    	and    BYTE PTR [rip+0x672d2067],ch        # 672d2129 <_ada_add_int+0x672d2129>
  c2:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  c3:	61                   	(bad)  
  c4:	74 65                	je     12b <_ada_add_int+0x12b>
  c6:	7a 20                	jp     e8 <.debug_str+0xe8>
  c8:	2d 6d 74 75 6e       	sub    eax,0x6e75746d
  cd:	65 3d 67 65 6e 65    	gs cmp eax,0x656e6567
  d3:	72 69                	jb     13e <_ada_add_int+0x13e>
  d5:	63 20                	movsxd esp,DWORD PTR [rax]
  d7:	2d 6d 61 72 63       	sub    eax,0x6372616d
  dc:	68 3d 78 38 36       	push   0x3638783d
  e1:	2d 36 34 00 5f       	sub    eax,0x5f003436
  e6:	61                   	(bad)  
  e7:	64 61                	fs (bad) 
  e9:	5f                   	pop    rdi
  ea:	61                   	(bad)  
  eb:	64 64 5f             	fs fs pop rdi
  ee:	69                   	.byte 0x69
  ef:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  f0:	74 00                	je     f2 <_ada_add_int+0xf2>

Disassembly of section .comment:

0000000000000000 <.comment>:
procedure Add_Int is
   0:	00 47 43             	add    BYTE PTR [rdi+0x43],al
   3:	43 3a 20             	rex.XB cmp spl,BYTE PTR [r8]
   a := 3;
   6:	28 44 65 62          	sub    BYTE PTR [rbp+riz*2+0x62],al
   a:	69 61 6e 20 38 2e 32 	imul   esp,DWORD PTR [rcx+0x6e],0x322e3820
   b := 5;
  11:	2e 30 2d 31 34 29 20 	xor    BYTE PTR cs:[rip+0x20293431],ch        # 20293449 <_ada_add_int+0x20293449>
   c := a + b;
  18:	38 2e                	cmp    BYTE PTR [rsi],ch
end Add_Int;
  1a:	32 2e                	xor    ch,BYTE PTR [rsi]
  1c:	30 00                	xor    BYTE PTR [rax],al

Disassembly of section .eh_frame:

0000000000000000 <.eh_frame>:
   0:	14 00                	adc    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   4:	00 00                	add    BYTE PTR [rax],al
   6:	00 00                	add    BYTE PTR [rax],al
   8:	01 7a 52             	add    DWORD PTR [rdx+0x52],edi
   b:	00 01                	add    BYTE PTR [rcx],al
   d:	78 10                	js     1f <.eh_frame+0x1f>
   f:	01 1b                	add    DWORD PTR [rbx],ebx
  11:	0c 07                	or     al,0x7
  13:	08 90 01 00 00 1c    	or     BYTE PTR [rax+0x1c000001],dl
  19:	00 00                	add    BYTE PTR [rax],al
  1b:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  1e:	00 00                	add    BYTE PTR [rax],al
  20:	00 00                	add    BYTE PTR [rax],al
			20: R_X86_64_PC32	.text
  22:	00 00                	add    BYTE PTR [rax],al
  24:	1c 00                	sbb    al,0x0
  26:	00 00                	add    BYTE PTR [rax],al
  28:	00 41 0e             	add    BYTE PTR [rcx+0xe],al
  2b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  31:	57                   	push   rdi
  32:	0c 07                	or     al,0x7
  34:	08 00                	or     BYTE PTR [rax],al
	...
Contents of the .debug_info section:

  Compilation Unit @ offset 0x0:
   Length:        0x7b (32-bit)
   Version:       4
   Abbrev Offset: 0x0
   Pointer Size:  8
 <0><b>: Abbrev Number: 1 (DW_TAG_compile_unit)
    <c>   DW_AT_producer    : (indirect string, offset: 0x9f): GNU Ada 8.2.0 -gnatez -gnatea -g -gnatez -mtune=generic -march=x86-64
    <10>   DW_AT_language    : 13	(ADA 95)
    <11>   DW_AT_name        : (indirect string, offset: 0x8b): add_int.adb
    <15>   DW_AT_comp_dir    : (indirect string, offset: 0x0): /home/haxor/Engineering/Programming/Disassembling-Binaries/Ada/Intel_Architecture/AMD64/Integer_Operations/Add_Int/With_Debug_Info
    <19>   DW_AT_low_pc      : 0x0
    <21>   DW_AT_high_pc     : 0x1c
    <29>   DW_AT_stmt_list   : 0x0
 <1><2d>: Abbrev Number: 2 (DW_TAG_subprogram)
    <2e>   DW_AT_external    : 1
    <2e>   DW_AT_name        : (indirect string, offset: 0x97): add_int
    <32>   DW_AT_decl_file   : 1
    <33>   DW_AT_decl_line   : 5
    <34>   DW_AT_decl_column : 1
    <35>   DW_AT_linkage_name: (indirect string, offset: 0xe5): _ada_add_int
    <39>   DW_AT_low_pc      : 0x0
    <41>   DW_AT_high_pc     : 0x1c
    <49>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <4b>   DW_AT_GNU_all_call_sites: 1
    <4b>   DW_AT_sibling     : <0x77>
 <2><4f>: Abbrev Number: 3 (DW_TAG_variable)
    <50>   DW_AT_name        : a
    <52>   DW_AT_decl_file   : 1
    <53>   DW_AT_decl_line   : 6
    <54>   DW_AT_decl_column : 4
    <55>   DW_AT_type        : <0x77>
    <59>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><5c>: Abbrev Number: 3 (DW_TAG_variable)
    <5d>   DW_AT_name        : b
    <5f>   DW_AT_decl_file   : 1
    <60>   DW_AT_decl_line   : 6
    <61>   DW_AT_decl_column : 7
    <62>   DW_AT_type        : <0x77>
    <66>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><69>: Abbrev Number: 3 (DW_TAG_variable)
    <6a>   DW_AT_name        : c
    <6c>   DW_AT_decl_file   : 1
    <6d>   DW_AT_decl_line   : 6
    <6e>   DW_AT_decl_column : 10
    <6f>   DW_AT_type        : <0x77>
    <73>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><76>: Abbrev Number: 0
 <1><77>: Abbrev Number: 4 (DW_TAG_base_type)
    <78>   DW_AT_byte_size   : 4
    <79>   DW_AT_encoding    : 5	(signed)
    <7a>   DW_AT_name        : (indirect string, offset: 0x83): integer
    <7e>   DW_AT_artificial  : 1
 <1><7e>: Abbrev Number: 0

Contents of the .debug_abbrev section:

  Number TAG (0x0)
   1      DW_TAG_compile_unit    [has children]
    DW_AT_producer     DW_FORM_strp
    DW_AT_language     DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT_comp_dir     DW_FORM_strp
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_stmt_list    DW_FORM_sec_offset
    DW_AT value: 0     DW_FORM value: 0
   2      DW_TAG_subprogram    [has children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_linkage_name DW_FORM_strp
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   3      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   4      DW_TAG_base_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_encoding     DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT_artificial   DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0

Contents of the .debug_aranges section:

  Length:                   44
  Version:                  2
  Offset into .debug_info:  0x0
  Pointer Size:             8
  Segment Size:             0

    Address            Length
    0000000000000000 000000000000001c 
    0000000000000000 0000000000000000 

Raw dump of debug contents of section .debug_line:

  Offset:                      0x0
  Length:                      67
  DWARF Version:               2
  Prologue Length:             34
  Minimum Instruction Length:  1
  Initial value of 'is_stmt':  1
  Line Base:                   -5
  Line Range:                  14
  Opcode Base:                 13

 Opcodes:
  Opcode 1 has 0 args
  Opcode 2 has 1 arg
  Opcode 3 has 1 arg
  Opcode 4 has 1 arg
  Opcode 5 has 1 arg
  Opcode 6 has 0 args
  Opcode 7 has 0 args
  Opcode 8 has 0 args
  Opcode 9 has 1 arg
  Opcode 10 has 0 args
  Opcode 11 has 0 args
  Opcode 12 has 1 arg

 The Directory Table is empty.

 The File Name Table (offset 0x1c):
  Entry	Dir	Time	Size	Name
  1	0	0	0	add_int.adb

 Line Number Statements:
  [0x0000002c]  Set column to 1
  [0x0000002e]  Extended opcode 2: set Address to 0x0
  [0x00000039]  Special opcode 9: advance Address by 0 to 0x0 and Line by 4 to 5
  [0x0000003a]  Set column to 6
  [0x0000003c]  Special opcode 66: advance Address by 4 to 0x4 and Line by 5 to 10
  [0x0000003d]  Special opcode 104: advance Address by 7 to 0xb and Line by 1 to 11
  [0x0000003e]  Special opcode 105: advance Address by 7 to 0x12 and Line by 2 to 13
  [0x0000003f]  Set column to 5
  [0x00000041]  Special opcode 105: advance Address by 7 to 0x19 and Line by 2 to 15
  [0x00000042]  Advance PC by 3 to 0x1c
  [0x00000044]  Extended opcode 1: End of Sequence


Contents of the .debug_str section:

  0x00000000 2f686f6d 652f6861 786f722f 456e6769 /home/haxor/Engi
  0x00000010 6e656572 696e672f 50726f67 72616d6d neering/Programm
  0x00000020 696e672f 44697361 7373656d 626c696e ing/Disassemblin
  0x00000030 672d4269 6e617269 65732f41 64612f49 g-Binaries/Ada/I
  0x00000040 6e74656c 5f417263 68697465 63747572 ntel_Architectur
  0x00000050 652f414d 4436342f 496e7465 6765725f e/AMD64/Integer_
  0x00000060 4f706572 6174696f 6e732f41 64645f49 Operations/Add_I
  0x00000070 6e742f57 6974685f 44656275 675f496e nt/With_Debug_In
  0x00000080 666f0069 6e746567 65720061 64645f69 fo.integer.add_i
  0x00000090 6e742e61 64620061 64645f69 6e740047 nt.adb.add_int.G
  0x000000a0 4e552041 64612038 2e322e30 202d676e NU Ada 8.2.0 -gn
  0x000000b0 6174657a 202d676e 61746561 202d6720 atez -gnatea -g 
  0x000000c0 2d676e61 74657a20 2d6d7475 6e653d67 -gnatez -mtune=g
  0x000000d0 656e6572 6963202d 6d617263 683d7838 eneric -march=x8
  0x000000e0 362d3634 005f6164 615f6164 645f696e 6-64._ada_add_in
  0x000000f0 7400                                t.

Contents of the .eh_frame section:


00000000 0000000000000014 00000000 CIE
  Version:               1
  Augmentation:          "zR"
  Code alignment factor: 1
  Data alignment factor: -8
  Return address column: 16
  Augmentation data:     1b
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_offset: r16 (rip) at cfa-8
  DW_CFA_nop
  DW_CFA_nop

00000018 000000000000001c 0000001c FDE cie=00000000 pc=0000000000000000..000000000000001c
  DW_CFA_advance_loc: 1 to 0000000000000001
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000004
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 23 to 000000000000001b
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

