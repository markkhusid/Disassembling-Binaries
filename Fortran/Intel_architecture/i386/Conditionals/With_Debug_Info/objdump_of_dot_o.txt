
if_then.o:     file format elf32-i386
if_then.o
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
  1 .text         000001af  00000000  00000000  0000003c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  2 .data         00000000  00000000  00000000  000001eb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000000  00000000  00000000  000001eb  2**0
                  ALLOC
  4 .rodata       0000006c  00000000  00000000  000001ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .text.__x86.get_pc_thunk.bx 00000004  00000000  00000000  00000258  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .debug_info   000000c7  00000000  00000000  0000025c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  7 .debug_abbrev 0000009c  00000000  00000000  00000323  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000020  00000000  00000000  000003bf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_macro  0000000c  00000000  00000000  000003df  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_line   00000048  00000000  00000000  000003eb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_str    00000147  00000000  00000000  00000433  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000002b  00000000  00000000  0000057a  2**0
                  CONTENTS, READONLY
 13 .note.GNU-stack 00000000  00000000  00000000  000005a5  2**0
                  CONTENTS, READONLY
 14 .eh_frame     00000084  00000000  00000000  000005a8  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 if_then.f08
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .rodata	00000000 .rodata
00000000 l     F .text	0000015b MAIN__
00000050 l     O .rodata	0000001c options.3.3426
00000000 l    d  .text.__x86.get_pc_thunk.bx	00000000 .text.__x86.get_pc_thunk.bx
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .note.GNU-stack	00000000 .note.GNU-stack
00000000 l    d  .eh_frame	00000000 .eh_frame
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .group	00000000 .group
00000000 g     F .text.__x86.get_pc_thunk.bx	00000000 .hidden __x86.get_pc_thunk.bx
00000000         *UND*	00000000 _GLOBAL_OFFSET_TABLE_
00000000         *UND*	00000000 _gfortran_st_write
00000000         *UND*	00000000 _gfortran_transfer_character_write
00000000         *UND*	00000000 _gfortran_st_write_done
00000000         *UND*	00000000 _gfortran_st_read
00000000         *UND*	00000000 _gfortran_transfer_integer
00000000         *UND*	00000000 _gfortran_st_read_done
0000015b g     F .text	00000054 main
00000000         *UND*	00000000 _gfortran_set_args
00000000         *UND*	00000000 _gfortran_set_options


Contents of section .group:
 0000 01000000 07000000                    ........        
Contents of section .text:
 0000 5589e553 81ec6401 0000e8fc ffffff81  U..S..d.........
 0010 c3020000 008d8300 00000089 85a8feff  ................
 0020 ffc785ac feffff08 000000c7 85a0feff  ................
 0030 ff800000 00c785a4 feffff06 00000083  ................
 0040 ec0c8d85 a0feffff 50e8fcff ffff83c4  ........P.......
 0050 1083ec04 6a238d83 0c000000 508d85a0  ....j#......P...
 0060 feffff50 e8fcffff ff83c410 83ec0c8d  ...P............
 0070 85a0feff ff50e8fc ffffff83 c4108d83  .....P..........
 0080 00000000 8985a8fe ffffc785 acfeffff  ................
 0090 09000000 c785a0fe ffff8000 0000c785  ................
 00a0 a4feffff 05000000 83ec0c8d 85a0feff  ................
 00b0 ff50e8fc ffffff83 c41083ec 046a048d  .P...........j..
 00c0 45f4508d 85a0feff ff50e8fc ffffff83  E.P......P......
 00d0 c41083ec 0c8d85a0 feffff50 e8fcffff  ...........P....
 00e0 ff83c410 8b45f483 f8057e69 8d830000  .....E....~i....
 00f0 00008985 a8feffff c785acfe ffff0c00  ................
 0100 0000c785 a0feffff 80000000 c785a4fe  ................
 0110 ffff0600 000083ec 0c8d85a0 feffff50  ...............P
 0120 e8fcffff ff83c410 83ec046a 1e8d832f  ...........j.../
 0130 00000050 8d85a0fe ffff50e8 fcffffff  ...P......P.....
 0140 83c41083 ec0c8d85 a0feffff 50e8fcff  ............P...
 0150 ffff83c4 10908b5d fcc9c38d 4c240483  .......]....L$..
 0160 e4f0ff71 fc5589e5 5351e8fc ffffff81  ...q.U..SQ......
 0170 c3020000 0089c883 ec08ff70 04ff30e8  ...........p..0.
 0180 fcffffff 83c41083 ec088d83 50000000  ............P...
 0190 506a07e8 fcffffff 83c410e8 60feffff  Pj..........`...
 01a0 b8000000 008d65f8 595b5d8d 61fcc3    ......e.Y[].a.. 
Contents of section .rodata:
 0000 69665f74 68656e2e 66303800 456e7465  if_then.f08.Ente
 0010 72206120 6e756d62 65722062 65747765  r a number betwe
 0020 656e2031 20616e64 20313020 2d3e204e  en 1 and 10 -> N
 0030 756d6265 7220656e 74657265 64206772  umber entered gr
 0040 65617465 72207468 616e2035 21000000  eater than 5!...
 0050 44000000 ff030000 00000000 01000000  D...............
 0060 01000000 00000000 1f000000           ............    
Contents of section .text.__x86.get_pc_thunk.bx:
 0000 8b1c24c3                             ..$.            
Contents of section .debug_info:
 0000 c3000000 04000000 00000401 c3000000  ................
 0010 0e028100 00000000 00000000 0000af01  ................
 0020 00000000 00000000 00000204 05ae0000  ................
 0030 00032a00 000004be 00000001 0f2a0000  ..*..........*..
 0040 005b0100 00540000 00019c6d 00000005  .[...T.....m....
 0050 9f000000 010f3100 00000291 00054201  ......1.......B.
 0060 0000010f 6d000000 03910406 00060473  ....m..........s
 0070 00000002 01088d00 00000779 00000001  ...........y....
 0080 01020000 00005b01 0000019c 08a40000  ......[.........
 0090 0001052a 00000002 916c0915 00000069  ...*.....l.....i
 00a0 00000009 7e000000 66000000 09ec0000  ....~...f.......
 00b0 00690000 000aa900 00000106 31000000  .i..........1...
 00c0 04050000 000000                      .......         
Contents of section .debug_abbrev:
 0000 01110125 0e130b42 0b030e1b 0e110112  ...%...B........
 0010 06101799 42170000 0224000b 0b3e0b03  ....B....$...>..
 0020 0e000003 26004913 0000042e 013f1903  ....&.I......?..
 0030 0e3a0b3b 0b491311 01120640 18964219  .:.;.I.....@..B.
 0040 01130000 05050003 0e3a0b3b 0b491302  .........:.;.I..
 0050 18000006 0f000b0b 49130000 072e0103  ........I.......
 0060 0e3a0b3b 0b6a1936 0b110112 06401896  .:.;.j.6.....@..
 0070 42190000 08340003 0e3a0b3b 0b491302  B....4...:.;.I..
 0080 18000009 0b001101 12060000 0a270003  .............'..
 0090 0e3a0b3b 0b49131c 0a000000           .:.;.I......    
Contents of section .debug_aranges:
 0000 1c000000 02000000 00000400 00000000  ................
 0010 00000000 af010000 00000000 00000000  ................
Contents of section .debug_macro:
 0000 04000200 00000003 00010400           ............    
Contents of section .debug_line:
 0000 44000000 02002200 00000101 fb0e0d00  D.....".........
 0010 01010101 00000001 00000100 69665f74  ............if_t
 0020 68656e2e 66303800 00000000 00050200  hen.f08.........
 0030 00000001 08510269 13026614 83026915  .....Q.i..f...i.
 0040 6608ac02 38000101                    f...8...        
Contents of section .debug_str:
 0000 2f686f6d 652f7562 756e7475 2f456e67  /home/ubuntu/Eng
 0010 696e6565 72696e67 2f50726f 6772616d  ineering/Program
 0020 6d696e67 2f446973 61737365 6d626c69  ming/Disassembli
 0030 6e672d42 696e6172 6965732f 466f7274  ng-Binaries/Fort
 0040 72616e2f 496e7465 6c5f6172 63686974  ran/Intel_archit
 0050 65637475 72652f69 3338362f 436f6e64  ecture/i386/Cond
 0060 6974696f 6e616c73 2f576974 685f4465  itionals/With_De
 0070 6275675f 496e666f 0069665f 7468656e  bug_Info.if_then
 0080 0069665f 7468656e 2e663038 00636861  .if_then.f08.cha
 0090 72616374 6572286b 696e643d 31290061  racter(kind=1).a
 00a0 72676300 6e756d31 006e756d 3200696e  rgc.num1.num2.in
 00b0 74656765 72286b69 6e643d34 29006d61  teger(kind=4).ma
 00c0 696e0047 4e552046 6f727472 616e3230  in.GNU Fortran20
 00d0 30382037 2e332e30 202d6d33 32202d6d  08 7.3.0 -m32 -m
 00e0 74756e65 3d67656e 65726963 202d6d61  tune=generic -ma
 00f0 7263683d 69363836 202d6767 64623320  rch=i686 -ggdb3 
 0100 2d66696e 7472696e 7369632d 6d6f6475  -fintrinsic-modu
 0110 6c65732d 70617468 202f7573 722f6c69  les-path /usr/li
 0120 622f6763 632f7838 365f3634 2d6c696e  b/gcc/x86_64-lin
 0130 75782d67 6e752f37 2f66696e 636c7564  ux-gnu/7/finclud
 0140 65006172 677600                      e.argv.         
Contents of section .comment:
 0000 00474343 3a202855 62756e74 7520372e  .GCC: (Ubuntu 7.
 0010 332e302d 32377562 756e7475 317e3138  3.0-27ubuntu1~18
 0020 2e303429 20372e33 2e3000             .04) 7.3.0.     
Contents of section .eh_frame:
 0000 14000000 00000000 017a5200 017c0801  .........zR..|..
 0010 1b0c0404 88010000 20000000 1c000000  ........ .......
 0020 00000000 5b010000 00410e08 8502420d  ....[....A....B.
 0030 05478303 035001c5 c30c0404 30000000  .G...P......0...
 0040 40000000 5b010000 54000000 00440c01  @...[...T....D..
 0050 00471005 02750044 0f037578 06100302  .G...u.D..ux....
 0060 757c7fc1 0c010041 c341c543 0c040400  u|.....A.A.C....
 0070 10000000 74000000 00000000 04000000  ....t...........
 0080 00000000                             ....            

Disassembly of section .group:

00000000 <.group>:
program if_then
   0:	01 00                	add    DWORD PTR [eax],eax
   2:	00 00                	add    BYTE PTR [eax],al
   4:	07                   	pop    es
   5:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .text:

00000000 <MAIN__>:
   0:	55                   	push   ebp
   1:	89 e5                	mov    ebp,esp
   3:	53                   	push   ebx
   4:	81 ec 64 01 00 00    	sub    esp,0x164
   a:	e8 fc ff ff ff       	call   b <MAIN__+0xb>
			b: R_386_PC32	__x86.get_pc_thunk.bx
   f:	81 c3 02 00 00 00    	add    ebx,0x2
			11: R_386_GOTPC	_GLOBAL_OFFSET_TABLE_
      implicit none

      integer                   ::      num1
      integer, parameter        ::      num2 = 5

      print *, "Enter a number between 1 and 10 -> "
  15:	8d 83 00 00 00 00    	lea    eax,[ebx+0x0]
			17: R_386_GOTOFF	.rodata
  1b:	89 85 a8 fe ff ff    	mov    DWORD PTR [ebp-0x158],eax
  21:	c7 85 ac fe ff ff 08 	mov    DWORD PTR [ebp-0x154],0x8
  28:	00 00 00 
  2b:	c7 85 a0 fe ff ff 80 	mov    DWORD PTR [ebp-0x160],0x80
  32:	00 00 00 
  35:	c7 85 a4 fe ff ff 06 	mov    DWORD PTR [ebp-0x15c],0x6
  3c:	00 00 00 
  3f:	83 ec 0c             	sub    esp,0xc
  42:	8d 85 a0 fe ff ff    	lea    eax,[ebp-0x160]
  48:	50                   	push   eax
  49:	e8 fc ff ff ff       	call   4a <MAIN__+0x4a>
			4a: R_386_PLT32	_gfortran_st_write
  4e:	83 c4 10             	add    esp,0x10
  51:	83 ec 04             	sub    esp,0x4
  54:	6a 23                	push   0x23
  56:	8d 83 0c 00 00 00    	lea    eax,[ebx+0xc]
			58: R_386_GOTOFF	.rodata
  5c:	50                   	push   eax
  5d:	8d 85 a0 fe ff ff    	lea    eax,[ebp-0x160]
  63:	50                   	push   eax
  64:	e8 fc ff ff ff       	call   65 <MAIN__+0x65>
			65: R_386_PLT32	_gfortran_transfer_character_write
  69:	83 c4 10             	add    esp,0x10
  6c:	83 ec 0c             	sub    esp,0xc
  6f:	8d 85 a0 fe ff ff    	lea    eax,[ebp-0x160]
  75:	50                   	push   eax
  76:	e8 fc ff ff ff       	call   77 <MAIN__+0x77>
			77: R_386_PLT32	_gfortran_st_write_done
  7b:	83 c4 10             	add    esp,0x10
      read *, num1
  7e:	8d 83 00 00 00 00    	lea    eax,[ebx+0x0]
			80: R_386_GOTOFF	.rodata
  84:	89 85 a8 fe ff ff    	mov    DWORD PTR [ebp-0x158],eax
  8a:	c7 85 ac fe ff ff 09 	mov    DWORD PTR [ebp-0x154],0x9
  91:	00 00 00 
  94:	c7 85 a0 fe ff ff 80 	mov    DWORD PTR [ebp-0x160],0x80
  9b:	00 00 00 
  9e:	c7 85 a4 fe ff ff 05 	mov    DWORD PTR [ebp-0x15c],0x5
  a5:	00 00 00 
  a8:	83 ec 0c             	sub    esp,0xc
  ab:	8d 85 a0 fe ff ff    	lea    eax,[ebp-0x160]
  b1:	50                   	push   eax
  b2:	e8 fc ff ff ff       	call   b3 <MAIN__+0xb3>
			b3: R_386_PLT32	_gfortran_st_read
  b7:	83 c4 10             	add    esp,0x10
  ba:	83 ec 04             	sub    esp,0x4
  bd:	6a 04                	push   0x4
  bf:	8d 45 f4             	lea    eax,[ebp-0xc]
  c2:	50                   	push   eax
  c3:	8d 85 a0 fe ff ff    	lea    eax,[ebp-0x160]
  c9:	50                   	push   eax
  ca:	e8 fc ff ff ff       	call   cb <MAIN__+0xcb>
			cb: R_386_PLT32	_gfortran_transfer_integer
  cf:	83 c4 10             	add    esp,0x10
  d2:	83 ec 0c             	sub    esp,0xc
  d5:	8d 85 a0 fe ff ff    	lea    eax,[ebp-0x160]
  db:	50                   	push   eax
  dc:	e8 fc ff ff ff       	call   dd <MAIN__+0xdd>
			dd: R_386_PLT32	_gfortran_st_read_done
  e1:	83 c4 10             	add    esp,0x10

      if (num1 > num2) then
  e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
  e7:	83 f8 05             	cmp    eax,0x5
  ea:	7e 69                	jle    155 <MAIN__+0x155>
              print *, "Number entered greater than 5!"
  ec:	8d 83 00 00 00 00    	lea    eax,[ebx+0x0]
			ee: R_386_GOTOFF	.rodata
  f2:	89 85 a8 fe ff ff    	mov    DWORD PTR [ebp-0x158],eax
  f8:	c7 85 ac fe ff ff 0c 	mov    DWORD PTR [ebp-0x154],0xc
  ff:	00 00 00 
 102:	c7 85 a0 fe ff ff 80 	mov    DWORD PTR [ebp-0x160],0x80
 109:	00 00 00 
 10c:	c7 85 a4 fe ff ff 06 	mov    DWORD PTR [ebp-0x15c],0x6
 113:	00 00 00 
 116:	83 ec 0c             	sub    esp,0xc
 119:	8d 85 a0 fe ff ff    	lea    eax,[ebp-0x160]
 11f:	50                   	push   eax
 120:	e8 fc ff ff ff       	call   121 <MAIN__+0x121>
			121: R_386_PLT32	_gfortran_st_write
 125:	83 c4 10             	add    esp,0x10
 128:	83 ec 04             	sub    esp,0x4
 12b:	6a 1e                	push   0x1e
 12d:	8d 83 2f 00 00 00    	lea    eax,[ebx+0x2f]
			12f: R_386_GOTOFF	.rodata
 133:	50                   	push   eax
 134:	8d 85 a0 fe ff ff    	lea    eax,[ebp-0x160]
 13a:	50                   	push   eax
 13b:	e8 fc ff ff ff       	call   13c <MAIN__+0x13c>
			13c: R_386_PLT32	_gfortran_transfer_character_write
 140:	83 c4 10             	add    esp,0x10
 143:	83 ec 0c             	sub    esp,0xc
 146:	8d 85 a0 fe ff ff    	lea    eax,[ebp-0x160]
 14c:	50                   	push   eax
 14d:	e8 fc ff ff ff       	call   14e <MAIN__+0x14e>
			14e: R_386_PLT32	_gfortran_st_write_done
 152:	83 c4 10             	add    esp,0x10
      end if

end program if_then
 155:	90                   	nop
 156:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
 159:	c9                   	leave  
 15a:	c3                   	ret    

0000015b <main>:
 15b:	8d 4c 24 04          	lea    ecx,[esp+0x4]
 15f:	83 e4 f0             	and    esp,0xfffffff0
 162:	ff 71 fc             	push   DWORD PTR [ecx-0x4]
 165:	55                   	push   ebp
 166:	89 e5                	mov    ebp,esp
 168:	53                   	push   ebx
 169:	51                   	push   ecx
 16a:	e8 fc ff ff ff       	call   16b <main+0x10>
			16b: R_386_PC32	__x86.get_pc_thunk.bx
 16f:	81 c3 02 00 00 00    	add    ebx,0x2
			171: R_386_GOTPC	_GLOBAL_OFFSET_TABLE_
 175:	89 c8                	mov    eax,ecx
 177:	83 ec 08             	sub    esp,0x8
 17a:	ff 70 04             	push   DWORD PTR [eax+0x4]
 17d:	ff 30                	push   DWORD PTR [eax]
 17f:	e8 fc ff ff ff       	call   180 <main+0x25>
			180: R_386_PLT32	_gfortran_set_args
 184:	83 c4 10             	add    esp,0x10
 187:	83 ec 08             	sub    esp,0x8
 18a:	8d 83 50 00 00 00    	lea    eax,[ebx+0x50]
			18c: R_386_GOTOFF	.rodata
 190:	50                   	push   eax
 191:	6a 07                	push   0x7
 193:	e8 fc ff ff ff       	call   194 <main+0x39>
			194: R_386_PLT32	_gfortran_set_options
 198:	83 c4 10             	add    esp,0x10
 19b:	e8 60 fe ff ff       	call   0 <MAIN__>
 1a0:	b8 00 00 00 00       	mov    eax,0x0
 1a5:	8d 65 f8             	lea    esp,[ebp-0x8]
 1a8:	59                   	pop    ecx
 1a9:	5b                   	pop    ebx
 1aa:	5d                   	pop    ebp
 1ab:	8d 61 fc             	lea    esp,[ecx-0x4]
 1ae:	c3                   	ret    

Disassembly of section .rodata:

00000000 <options.3.3426-0x50>:
   0:	69 66 5f 74 68 65 6e 	imul   esp,DWORD PTR [esi+0x5f],0x6e656874
   7:	2e 66 30 38          	data16 xor BYTE PTR cs:[eax],bh
   b:	00 45 6e             	add    BYTE PTR [ebp+0x6e],al
   e:	74 65                	je     75 <options.3.3426+0x25>
  10:	72 20                	jb     32 <options.3.3426-0x1e>
  12:	61                   	popa   
  13:	20 6e 75             	and    BYTE PTR [esi+0x75],ch
  16:	6d                   	ins    DWORD PTR es:[edi],dx
  17:	62 65 72             	bound  esp,QWORD PTR [ebp+0x72]
  1a:	20 62 65             	and    BYTE PTR [edx+0x65],ah
  1d:	74 77                	je     96 <options.3.3426+0x46>
  1f:	65 65 6e             	gs outs dx,BYTE PTR gs:[esi]
  22:	20 31                	and    BYTE PTR [ecx],dh
  24:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
  27:	64 20 31             	and    BYTE PTR fs:[ecx],dh
  2a:	30 20                	xor    BYTE PTR [eax],ah
  2c:	2d 3e 20 4e 75       	sub    eax,0x754e203e
  31:	6d                   	ins    DWORD PTR es:[edi],dx
  32:	62 65 72             	bound  esp,QWORD PTR [ebp+0x72]
  35:	20 65 6e             	and    BYTE PTR [ebp+0x6e],ah
  38:	74 65                	je     9f <options.3.3426+0x4f>
  3a:	72 65                	jb     a1 <options.3.3426+0x51>
  3c:	64 20 67 72          	and    BYTE PTR fs:[edi+0x72],ah
  40:	65 61                	gs popa 
  42:	74 65                	je     a9 <options.3.3426+0x59>
  44:	72 20                	jb     66 <options.3.3426+0x16>
  46:	74 68                	je     b0 <options.3.3426+0x60>
  48:	61                   	popa   
  49:	6e                   	outs   dx,BYTE PTR ds:[esi]
  4a:	20 35 21 00 00 00    	and    BYTE PTR ds:0x21,dh

00000050 <options.3.3426>:
  50:	44                   	inc    esp
  51:	00 00                	add    BYTE PTR [eax],al
  53:	00 ff                	add    bh,bh
  55:	03 00                	add    eax,DWORD PTR [eax]
  57:	00 00                	add    BYTE PTR [eax],al
  59:	00 00                	add    BYTE PTR [eax],al
  5b:	00 01                	add    BYTE PTR [ecx],al
  5d:	00 00                	add    BYTE PTR [eax],al
  5f:	00 01                	add    BYTE PTR [ecx],al
  61:	00 00                	add    BYTE PTR [eax],al
  63:	00 00                	add    BYTE PTR [eax],al
  65:	00 00                	add    BYTE PTR [eax],al
  67:	00 1f                	add    BYTE PTR [edi],bl
  69:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .text.__x86.get_pc_thunk.bx:

00000000 <__x86.get_pc_thunk.bx>:
   0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
   3:	c3                   	ret    

Disassembly of section .debug_info:

00000000 <.debug_info>:
program if_then
   0:	c3                   	ret    
   1:	00 00                	add    BYTE PTR [eax],al
   3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
   6:	00 00                	add    BYTE PTR [eax],al
			6: R_386_32	.debug_abbrev
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 01                	add    al,0x1
   c:	c3                   	ret    
			c: R_386_32	.debug_str
   d:	00 00                	add    BYTE PTR [eax],al
   f:	00 0e                	add    BYTE PTR [esi],cl
  11:	02 81 00 00 00 00    	add    al,BYTE PTR [ecx+0x0]
			12: R_386_32	.debug_str
			16: R_386_32	.debug_str
      print *, "Enter a number between 1 and 10 -> "
  17:	00 00                	add    BYTE PTR [eax],al
  19:	00 00                	add    BYTE PTR [eax],al
			1a: R_386_32	.text
  1b:	00 00                	add    BYTE PTR [eax],al
  1d:	00 af 01 00 00 00    	add    BYTE PTR [edi+0x1],ch
			22: R_386_32	.debug_line
  23:	00 00                	add    BYTE PTR [eax],al
  25:	00 00                	add    BYTE PTR [eax],al
			26: R_386_32	.debug_macro
  27:	00 00                	add    BYTE PTR [eax],al
  29:	00 02                	add    BYTE PTR [edx],al
  2b:	04 05                	add    al,0x5
  2d:	ae                   	scas   al,BYTE PTR es:[edi]
			2d: R_386_32	.debug_str
  2e:	00 00                	add    BYTE PTR [eax],al
  30:	00 03                	add    BYTE PTR [ebx],al
  32:	2a 00                	sub    al,BYTE PTR [eax]
  34:	00 00                	add    BYTE PTR [eax],al
  36:	04 be                	add    al,0xbe
			37: R_386_32	.debug_str
  38:	00 00                	add    BYTE PTR [eax],al
  3a:	00 01                	add    BYTE PTR [ecx],al
  3c:	0f 2a 00             	cvtpi2ps xmm0,QWORD PTR [eax]
  3f:	00 00                	add    BYTE PTR [eax],al
  41:	5b                   	pop    ebx
			41: R_386_32	.text
  42:	01 00                	add    DWORD PTR [eax],eax
  44:	00 54 00 00          	add    BYTE PTR [eax+eax*1+0x0],dl
  48:	00 01                	add    BYTE PTR [ecx],al
  4a:	9c                   	pushf  
  4b:	6d                   	ins    DWORD PTR es:[edi],dx
  4c:	00 00                	add    BYTE PTR [eax],al
  4e:	00 05 9f 00 00 00    	add    BYTE PTR ds:0x9f,al
			50: R_386_32	.debug_str
  54:	01 0f                	add    DWORD PTR [edi],ecx
  56:	31 00                	xor    DWORD PTR [eax],eax
  58:	00 00                	add    BYTE PTR [eax],al
  5a:	02 91 00 05 42 01    	add    dl,BYTE PTR [ecx+0x1420500]
			5e: R_386_32	.debug_str
  60:	00 00                	add    BYTE PTR [eax],al
  62:	01 0f                	add    DWORD PTR [edi],ecx
  64:	6d                   	ins    DWORD PTR es:[edi],dx
  65:	00 00                	add    BYTE PTR [eax],al
  67:	00 03                	add    BYTE PTR [ebx],al
  69:	91                   	xchg   ecx,eax
  6a:	04 06                	add    al,0x6
  6c:	00 06                	add    BYTE PTR [esi],al
  6e:	04 73                	add    al,0x73
  70:	00 00                	add    BYTE PTR [eax],al
  72:	00 02                	add    BYTE PTR [edx],al
  74:	01 08                	add    DWORD PTR [eax],ecx
  76:	8d 00                	lea    eax,[eax]
			76: R_386_32	.debug_str
  78:	00 00                	add    BYTE PTR [eax],al
  7a:	07                   	pop    es
  7b:	79 00                	jns    7d <.debug_info+0x7d>
			7b: R_386_32	.debug_str
  7d:	00 00                	add    BYTE PTR [eax],al
      read *, num1
  7f:	01 01                	add    DWORD PTR [ecx],eax
  81:	02 00                	add    al,BYTE PTR [eax]
			82: R_386_32	.text
  83:	00 00                	add    BYTE PTR [eax],al
  85:	00 5b 01             	add    BYTE PTR [ebx+0x1],bl
  88:	00 00                	add    BYTE PTR [eax],al
  8a:	01 9c 08 a4 00 00 00 	add    DWORD PTR [eax+ecx*1+0xa4],ebx
			8d: R_386_32	.debug_str
  91:	01 05 2a 00 00 00    	add    DWORD PTR ds:0x2a,eax
  97:	02 91 6c 09 15 00    	add    dl,BYTE PTR [ecx+0x15096c]
			9b: R_386_32	.text
  9d:	00 00                	add    BYTE PTR [eax],al
  9f:	69 00 00 00 09 7e    	imul   eax,DWORD PTR [eax],0x7e090000
			a4: R_386_32	.text
  a5:	00 00                	add    BYTE PTR [eax],al
  a7:	00 66 00             	add    BYTE PTR [esi+0x0],ah
  aa:	00 00                	add    BYTE PTR [eax],al
  ac:	09 ec                	or     esp,ebp
			ad: R_386_32	.text
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	00 69 00             	add    BYTE PTR [ecx+0x0],ch
  b3:	00 00                	add    BYTE PTR [eax],al
  b5:	0a a9 00 00 00 01    	or     ch,BYTE PTR [ecx+0x1000000]
			b6: R_386_32	.debug_str
  bb:	06                   	push   es
  bc:	31 00                	xor    DWORD PTR [eax],eax
  be:	00 00                	add    BYTE PTR [eax],al
  c0:	04 05                	add    al,0x5
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
program if_then
   0:	01 11                	add    DWORD PTR [ecx],edx
   2:	01 25 0e 13 0b 42    	add    DWORD PTR ds:0x420b130e,esp
   8:	0b 03                	or     eax,DWORD PTR [ebx]
   a:	0e                   	push   cs
   b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
   d:	11 01                	adc    DWORD PTR [ecx],eax
   f:	12 06                	adc    al,BYTE PTR [esi]
  11:	10 17                	adc    BYTE PTR [edi],dl
  13:	99                   	cdq    
  14:	42                   	inc    edx
      print *, "Enter a number between 1 and 10 -> "
  15:	17                   	pop    ss
  16:	00 00                	add    BYTE PTR [eax],al
  18:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
  1b:	0b 0b                	or     ecx,DWORD PTR [ebx]
  1d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
  20:	0e                   	push   cs
  21:	00 00                	add    BYTE PTR [eax],al
  23:	03 26                	add    esp,DWORD PTR [esi]
  25:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
  28:	00 00                	add    BYTE PTR [eax],al
  2a:	04 2e                	add    al,0x2e
  2c:	01 3f                	add    DWORD PTR [edi],edi
  2e:	19 03                	sbb    DWORD PTR [ebx],eax
  30:	0e                   	push   cs
  31:	3a 0b                	cmp    cl,BYTE PTR [ebx]
  33:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
  35:	49                   	dec    ecx
  36:	13 11                	adc    edx,DWORD PTR [ecx]
  38:	01 12                	add    DWORD PTR [edx],edx
  3a:	06                   	push   es
  3b:	40                   	inc    eax
  3c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
  42:	00 00                	add    BYTE PTR [eax],al
  44:	05 05 00 03 0e       	add    eax,0xe030005
  49:	3a 0b                	cmp    cl,BYTE PTR [ebx]
  4b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
  4d:	49                   	dec    ecx
  4e:	13 02                	adc    eax,DWORD PTR [edx]
  50:	18 00                	sbb    BYTE PTR [eax],al
  52:	00 06                	add    BYTE PTR [esi],al
  54:	0f 00 0b             	str    WORD PTR [ebx]
  57:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
  5a:	00 00                	add    BYTE PTR [eax],al
  5c:	07                   	pop    es
  5d:	2e 01 03             	add    DWORD PTR cs:[ebx],eax
  60:	0e                   	push   cs
  61:	3a 0b                	cmp    cl,BYTE PTR [ebx]
  63:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
  65:	6a 19                	push   0x19
  67:	36 0b 11             	or     edx,DWORD PTR ss:[ecx]
  6a:	01 12                	add    DWORD PTR [edx],edx
  6c:	06                   	push   es
  6d:	40                   	inc    eax
  6e:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
  74:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
  77:	03 0e                	add    ecx,DWORD PTR [esi]
  79:	3a 0b                	cmp    cl,BYTE PTR [ebx]
  7b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
  7d:	49                   	dec    ecx
      read *, num1
  7e:	13 02                	adc    eax,DWORD PTR [edx]
  80:	18 00                	sbb    BYTE PTR [eax],al
  82:	00 09                	add    BYTE PTR [ecx],cl
  84:	0b 00                	or     eax,DWORD PTR [eax]
  86:	11 01                	adc    DWORD PTR [ecx],eax
  88:	12 06                	adc    al,BYTE PTR [esi]
  8a:	00 00                	add    BYTE PTR [eax],al
  8c:	0a 27                	or     ah,BYTE PTR [edi]
  8e:	00 03                	add    BYTE PTR [ebx],al
  90:	0e                   	push   cs
  91:	3a 0b                	cmp    cl,BYTE PTR [ebx]
  93:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
  95:	49                   	dec    ecx
  96:	13 1c 0a             	adc    ebx,DWORD PTR [edx+ecx*1]
  99:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
program if_then
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
			6: R_386_32	.debug_info
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
	...
			10: R_386_32	.text
  14:	af                   	scas   eax,DWORD PTR es:[edi]
      print *, "Enter a number between 1 and 10 -> "
  15:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .debug_macro:

00000000 <.debug_macro>:
program if_then
   0:	04 00                	add    al,0x0
   2:	02 00                	add    al,BYTE PTR [eax]
			3: R_386_32	.debug_line
   4:	00 00                	add    BYTE PTR [eax],al
   6:	00 03                	add    BYTE PTR [ebx],al
   8:	00 01                	add    BYTE PTR [ecx],al
   a:	04 00                	add    al,0x0

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	44                   	inc    esp
   1:	00 00                	add    BYTE PTR [eax],al
   3:	00 02                	add    BYTE PTR [edx],al
   5:	00 22                	add    BYTE PTR [edx],ah
   7:	00 00                	add    BYTE PTR [eax],al
   9:	00 01                	add    BYTE PTR [ecx],al
   b:	01 fb                	add    ebx,edi
   d:	0e                   	push   cs
   e:	0d 00 01 01 01       	or     eax,0x1010100
  13:	01 00                	add    DWORD PTR [eax],eax
      print *, "Enter a number between 1 and 10 -> "
  15:	00 00                	add    BYTE PTR [eax],al
  17:	01 00                	add    DWORD PTR [eax],eax
  19:	00 01                	add    BYTE PTR [ecx],al
  1b:	00 69 66             	add    BYTE PTR [ecx+0x66],ch
  1e:	5f                   	pop    edi
  1f:	74 68                	je     89 <options.3.3426+0x39>
  21:	65 6e                	outs   dx,BYTE PTR gs:[esi]
  23:	2e 66 30 38          	data16 xor BYTE PTR cs:[eax],bh
  27:	00 00                	add    BYTE PTR [eax],al
  29:	00 00                	add    BYTE PTR [eax],al
  2b:	00 00                	add    BYTE PTR [eax],al
  2d:	05 02 00 00 00       	add    eax,0x2
			2f: R_386_32	.text
  32:	00 01                	add    BYTE PTR [ecx],al
  34:	08 51 02             	or     BYTE PTR [ecx+0x2],dl
  37:	69 13 02 66 14 83    	imul   edx,DWORD PTR [ebx],0x83146602
  3d:	02 69 15             	add    ch,BYTE PTR [ecx+0x15]
  40:	66 08 ac 02 38 00 01 	data16 or BYTE PTR [edx+eax*1+0x1010038],ch
  47:	01 

Disassembly of section .debug_str:

00000000 <.debug_str>:
program if_then
   0:	2f                   	das    
   1:	68 6f 6d 65 2f       	push   0x2f656d6f
   6:	75 62                	jne    6a <.debug_str+0x6a>
   8:	75 6e                	jne    78 <.debug_str+0x78>
   a:	74 75                	je     81 <.debug_str+0x81>
   c:	2f                   	das    
   d:	45                   	inc    ebp
   e:	6e                   	outs   dx,BYTE PTR ds:[esi]
   f:	67 69 6e 65 65 72 69 	imul   ebp,DWORD PTR [bp+0x65],0x6e697265
  16:	6e 
      print *, "Enter a number between 1 and 10 -> "
  17:	67 2f                	addr16 das 
  19:	50                   	push   eax
  1a:	72 6f                	jb     8b <.debug_str+0x8b>
  1c:	67 72 61             	addr16 jb 80 <.debug_str+0x80>
  1f:	6d                   	ins    DWORD PTR es:[edi],dx
  20:	6d                   	ins    DWORD PTR es:[edi],dx
  21:	69 6e 67 2f 44 69 73 	imul   ebp,DWORD PTR [esi+0x67],0x7369442f
  28:	61                   	popa   
  29:	73 73                	jae    9e <.debug_str+0x9e>
  2b:	65 6d                	gs ins DWORD PTR es:[edi],dx
  2d:	62 6c 69 6e          	bound  ebp,QWORD PTR [ecx+ebp*2+0x6e]
  31:	67 2d 42 69 6e 61    	addr16 sub eax,0x616e6942
  37:	72 69                	jb     a2 <.debug_str+0xa2>
  39:	65 73 2f             	gs jae 6b <.debug_str+0x6b>
  3c:	46                   	inc    esi
  3d:	6f                   	outs   dx,DWORD PTR ds:[esi]
  3e:	72 74                	jb     b4 <.debug_str+0xb4>
  40:	72 61                	jb     a3 <.debug_str+0xa3>
  42:	6e                   	outs   dx,BYTE PTR ds:[esi]
  43:	2f                   	das    
  44:	49                   	dec    ecx
  45:	6e                   	outs   dx,BYTE PTR ds:[esi]
  46:	74 65                	je     ad <.debug_str+0xad>
  48:	6c                   	ins    BYTE PTR es:[edi],dx
  49:	5f                   	pop    edi
  4a:	61                   	popa   
  4b:	72 63                	jb     b0 <.debug_str+0xb0>
  4d:	68 69 74 65 63       	push   0x63657469
  52:	74 75                	je     c9 <.debug_str+0xc9>
  54:	72 65                	jb     bb <.debug_str+0xbb>
  56:	2f                   	das    
  57:	69 33 38 36 2f 43    	imul   esi,DWORD PTR [ebx],0x432f3638
  5d:	6f                   	outs   dx,DWORD PTR ds:[esi]
  5e:	6e                   	outs   dx,BYTE PTR ds:[esi]
  5f:	64 69 74 69 6f 6e 61 	imul   esi,DWORD PTR fs:[ecx+ebp*2+0x6f],0x736c616e
  66:	6c 73 
  68:	2f                   	das    
  69:	57                   	push   edi
  6a:	69 74 68 5f 44 65 62 	imul   esi,DWORD PTR [eax+ebp*2+0x5f],0x75626544
  71:	75 
  72:	67 5f                	addr16 pop edi
  74:	49                   	dec    ecx
  75:	6e                   	outs   dx,BYTE PTR ds:[esi]
  76:	66 6f                	outs   dx,WORD PTR ds:[esi]
  78:	00 69 66             	add    BYTE PTR [ecx+0x66],ch
  7b:	5f                   	pop    edi
  7c:	74 68                	je     e6 <.debug_str+0xe6>
      read *, num1
  7e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
  80:	00 69 66             	add    BYTE PTR [ecx+0x66],ch
  83:	5f                   	pop    edi
  84:	74 68                	je     ee <.debug_str+0xee>
  86:	65 6e                	outs   dx,BYTE PTR gs:[esi]
  88:	2e 66 30 38          	data16 xor BYTE PTR cs:[eax],bh
  8c:	00 63 68             	add    BYTE PTR [ebx+0x68],ah
  8f:	61                   	popa   
  90:	72 61                	jb     f3 <.debug_str+0xf3>
  92:	63 74 65 72          	arpl   WORD PTR [ebp+eiz*2+0x72],si
  96:	28 6b 69             	sub    BYTE PTR [ebx+0x69],ch
  99:	6e                   	outs   dx,BYTE PTR ds:[esi]
  9a:	64 3d 31 29 00 61    	fs cmp eax,0x61002931
  a0:	72 67                	jb     109 <.debug_str+0x109>
  a2:	63 00                	arpl   WORD PTR [eax],ax
  a4:	6e                   	outs   dx,BYTE PTR ds:[esi]
  a5:	75 6d                	jne    114 <.debug_str+0x114>
  a7:	31 00                	xor    DWORD PTR [eax],eax
  a9:	6e                   	outs   dx,BYTE PTR ds:[esi]
  aa:	75 6d                	jne    119 <.debug_str+0x119>
  ac:	32 00                	xor    al,BYTE PTR [eax]
  ae:	69 6e 74 65 67 65 72 	imul   ebp,DWORD PTR [esi+0x74],0x72656765
  b5:	28 6b 69             	sub    BYTE PTR [ebx+0x69],ch
  b8:	6e                   	outs   dx,BYTE PTR ds:[esi]
  b9:	64 3d 34 29 00 6d    	fs cmp eax,0x6d002934
  bf:	61                   	popa   
  c0:	69 6e 00 47 4e 55 20 	imul   ebp,DWORD PTR [esi+0x0],0x20554e47
  c7:	46                   	inc    esi
  c8:	6f                   	outs   dx,DWORD PTR ds:[esi]
  c9:	72 74                	jb     13f <.debug_str+0x13f>
  cb:	72 61                	jb     12e <.debug_str+0x12e>
  cd:	6e                   	outs   dx,BYTE PTR ds:[esi]
  ce:	32 30                	xor    dh,BYTE PTR [eax]
  d0:	30 38                	xor    BYTE PTR [eax],bh
  d2:	20 37                	and    BYTE PTR [edi],dh
  d4:	2e 33 2e             	xor    ebp,DWORD PTR cs:[esi]
  d7:	30 20                	xor    BYTE PTR [eax],ah
  d9:	2d 6d 33 32 20       	sub    eax,0x2032336d
  de:	2d 6d 74 75 6e       	sub    eax,0x6e75746d
  e3:	65 3d 67 65 6e 65    	gs cmp eax,0x656e6567
      if (num1 > num2) then
  e9:	72 69                	jb     154 <options.3.3426+0x104>
  eb:	63 20                	arpl   WORD PTR [eax],sp
              print *, "Number entered greater than 5!"
  ed:	2d 6d 61 72 63       	sub    eax,0x6372616d
  f2:	68 3d 69 36 38       	push   0x3836693d
  f7:	36 20 2d 67 67 64 62 	and    BYTE PTR ss:0x62646767,ch
  fe:	33 20                	xor    esp,DWORD PTR [eax]
 100:	2d 66 69 6e 74       	sub    eax,0x746e6966
 105:	72 69                	jb     170 <main+0x15>
 107:	6e                   	outs   dx,BYTE PTR ds:[esi]
 108:	73 69                	jae    173 <main+0x18>
 10a:	63 2d 6d 6f 64 75    	arpl   WORD PTR ds:0x75646f6d,bp
 110:	6c                   	ins    BYTE PTR es:[edi],dx
 111:	65 73 2d             	gs jae 141 <.debug_str+0x141>
 114:	70 61                	jo     177 <main+0x1c>
 116:	74 68                	je     180 <main+0x25>
 118:	20 2f                	and    BYTE PTR [edi],ch
 11a:	75 73                	jne    18f <main+0x34>
 11c:	72 2f                	jb     14d <options.3.3426+0xfd>
 11e:	6c                   	ins    BYTE PTR es:[edi],dx
 11f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
 126:	78 38                	js     160 <main+0x5>
 128:	36 5f                	ss pop edi
 12a:	36 34 2d             	ss xor al,0x2d
 12d:	6c                   	ins    BYTE PTR es:[edi],dx
 12e:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
 135:	75 2f                	jne    166 <main+0xb>
 137:	37                   	aaa    
 138:	2f                   	das    
 139:	66 69 6e 63 6c 75    	imul   bp,WORD PTR [esi+0x63],0x756c
 13f:	64 65 00 61 72       	fs add BYTE PTR gs:[ecx+0x72],ah
 144:	67 76 00             	addr16 jbe 147 <options.3.3426+0xf7>

Disassembly of section .comment:

00000000 <.comment>:
program if_then
   0:	00 47 43             	add    BYTE PTR [edi+0x43],al
   3:	43                   	inc    ebx
   4:	3a 20                	cmp    ah,BYTE PTR [eax]
   6:	28 55 62             	sub    BYTE PTR [ebp+0x62],dl
   9:	75 6e                	jne    79 <options.3.3426+0x29>
   b:	74 75                	je     82 <options.3.3426+0x32>
   d:	20 37                	and    BYTE PTR [edi],dh
   f:	2e 33 2e             	xor    ebp,DWORD PTR cs:[esi]
  12:	30 2d 32 37 75 62    	xor    BYTE PTR ds:0x62753732,ch
      print *, "Enter a number between 1 and 10 -> "
  18:	75 6e                	jne    88 <options.3.3426+0x38>
  1a:	74 75                	je     91 <options.3.3426+0x41>
  1c:	31 7e 31             	xor    DWORD PTR [esi+0x31],edi
  1f:	38 2e                	cmp    BYTE PTR [esi],ch
  21:	30 34 29             	xor    BYTE PTR [ecx+ebp*1],dh
  24:	20 37                	and    BYTE PTR [edi],dh
  26:	2e 33 2e             	xor    ebp,DWORD PTR cs:[esi]
  29:	30 00                	xor    BYTE PTR [eax],al

Disassembly of section .eh_frame:

00000000 <.eh_frame>:
   0:	14 00                	adc    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	00 00                	add    BYTE PTR [eax],al
   6:	00 00                	add    BYTE PTR [eax],al
   8:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
   b:	00 01                	add    BYTE PTR [ecx],al
   d:	7c 08                	jl     17 <.eh_frame+0x17>
   f:	01 1b                	add    DWORD PTR [ebx],ebx
  11:	0c 04                	or     al,0x4
  13:	04 88                	add    al,0x88
  15:	01 00                	add    DWORD PTR [eax],eax
  17:	00 20                	add    BYTE PTR [eax],ah
  19:	00 00                	add    BYTE PTR [eax],al
  1b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  1e:	00 00                	add    BYTE PTR [eax],al
  20:	00 00                	add    BYTE PTR [eax],al
			20: R_386_PC32	.text
  22:	00 00                	add    BYTE PTR [eax],al
  24:	5b                   	pop    ebx
  25:	01 00                	add    DWORD PTR [eax],eax
  27:	00 00                	add    BYTE PTR [eax],al
  29:	41                   	inc    ecx
  2a:	0e                   	push   cs
  2b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
  31:	47                   	inc    edi
  32:	83 03 03             	add    DWORD PTR [ebx],0x3
  35:	50                   	push   eax
  36:	01 c5                	add    ebp,eax
  38:	c3                   	ret    
  39:	0c 04                	or     al,0x4
  3b:	04 30                	add    al,0x30
  3d:	00 00                	add    BYTE PTR [eax],al
  3f:	00 40 00             	add    BYTE PTR [eax+0x0],al
  42:	00 00                	add    BYTE PTR [eax],al
  44:	5b                   	pop    ebx
			44: R_386_PC32	.text
  45:	01 00                	add    DWORD PTR [eax],eax
  47:	00 54 00 00          	add    BYTE PTR [eax+eax*1+0x0],dl
  4b:	00 00                	add    BYTE PTR [eax],al
  4d:	44                   	inc    esp
  4e:	0c 01                	or     al,0x1
  50:	00 47 10             	add    BYTE PTR [edi+0x10],al
  53:	05 02 75 00 44       	add    eax,0x44007502
  58:	0f 03 75 78          	lsl    esi,WORD PTR [ebp+0x78]
  5c:	06                   	push   es
  5d:	10 03                	adc    BYTE PTR [ebx],al
  5f:	02 75 7c             	add    dh,BYTE PTR [ebp+0x7c]
  62:	7f c1                	jg     25 <.eh_frame+0x25>
  64:	0c 01                	or     al,0x1
  66:	00 41 c3             	add    BYTE PTR [ecx-0x3d],al
  69:	41                   	inc    ecx
  6a:	c5 43 0c             	lds    eax,FWORD PTR [ebx+0xc]
  6d:	04 04                	add    al,0x4
  6f:	00 10                	add    BYTE PTR [eax],dl
  71:	00 00                	add    BYTE PTR [eax],al
  73:	00 74 00 00          	add    BYTE PTR [eax+eax*1+0x0],dh
  77:	00 00                	add    BYTE PTR [eax],al
			78: R_386_PC32	.text.__x86.get_pc_thunk.bx
  79:	00 00                	add    BYTE PTR [eax],al
  7b:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  7e:	00 00                	add    BYTE PTR [eax],al
  80:	00 00                	add    BYTE PTR [eax],al
	...
Contents of the .debug_info section:

  Compilation Unit @ offset 0x0:
   Length:        0xc3 (32-bit)
   Version:       4
   Abbrev Offset: 0x0
   Pointer Size:  4
 <0><b>: Abbrev Number: 1 (DW_TAG_compile_unit)
    <c>   DW_AT_producer    : (indirect string, offset: 0xc3): GNU Fortran2008 7.3.0 -m32 -mtune=generic -march=i686 -ggdb3 -fintrinsic-modules-path /usr/lib/gcc/x86_64-linux-gnu/7/finclude
    <10>   DW_AT_language    : 14	(Fortran 95)
    <11>   DW_AT_identifier_case: 2	(down_case)
    <12>   DW_AT_name        : (indirect string, offset: 0x81): if_then.f08
    <16>   DW_AT_comp_dir    : (indirect string, offset: 0x0): /home/ubuntu/Engineering/Programming/Disassembling-Binaries/Fortran/Intel_architecture/i386/Conditionals/With_Debug_Info
    <1a>   DW_AT_low_pc      : 0x0
    <1e>   DW_AT_high_pc     : 0x1af
    <22>   DW_AT_stmt_list   : 0x0
    <26>   DW_AT_GNU_macros  : 0x0
 <1><2a>: Abbrev Number: 2 (DW_TAG_base_type)
    <2b>   DW_AT_byte_size   : 4
    <2c>   DW_AT_encoding    : 5	(signed)
    <2d>   DW_AT_name        : (indirect string, offset: 0xae): integer(kind=4)
 <1><31>: Abbrev Number: 3 (DW_TAG_const_type)
    <32>   DW_AT_type        : <0x2a>
 <1><36>: Abbrev Number: 4 (DW_TAG_subprogram)
    <37>   DW_AT_external    : 1
    <37>   DW_AT_name        : (indirect string, offset: 0xbe): main
    <3b>   DW_AT_decl_file   : 1
    <3c>   DW_AT_decl_line   : 15
    <3d>   DW_AT_type        : <0x2a>
    <41>   DW_AT_low_pc      : 0x15b
    <45>   DW_AT_high_pc     : 0x54
    <49>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <4b>   DW_AT_GNU_all_tail_call_sites: 1
    <4b>   DW_AT_sibling     : <0x6d>
 <2><4f>: Abbrev Number: 5 (DW_TAG_formal_parameter)
    <50>   DW_AT_name        : (indirect string, offset: 0x9f): argc
    <54>   DW_AT_decl_file   : 1
    <55>   DW_AT_decl_line   : 15
    <56>   DW_AT_type        : <0x31>
    <5a>   DW_AT_location    : 2 byte block: 91 0 	(DW_OP_fbreg: 0)
 <2><5d>: Abbrev Number: 5 (DW_TAG_formal_parameter)
    <5e>   DW_AT_name        : (indirect string, offset: 0x142): argv
    <62>   DW_AT_decl_file   : 1
    <63>   DW_AT_decl_line   : 15
    <64>   DW_AT_type        : <0x6d>
    <68>   DW_AT_location    : 3 byte block: 91 4 6 	(DW_OP_fbreg: 4; DW_OP_deref)
 <2><6c>: Abbrev Number: 0
 <1><6d>: Abbrev Number: 6 (DW_TAG_pointer_type)
    <6e>   DW_AT_byte_size   : 4
    <6f>   DW_AT_type        : <0x73>
 <1><73>: Abbrev Number: 2 (DW_TAG_base_type)
    <74>   DW_AT_byte_size   : 1
    <75>   DW_AT_encoding    : 8	(unsigned char)
    <76>   DW_AT_name        : (indirect string, offset: 0x8d): character(kind=1)
 <1><7a>: Abbrev Number: 7 (DW_TAG_subprogram)
    <7b>   DW_AT_name        : (indirect string, offset: 0x79): if_then
    <7f>   DW_AT_decl_file   : 1
    <80>   DW_AT_decl_line   : 1
    <81>   DW_AT_main_subprogram: 1
    <81>   DW_AT_calling_convention: 2	(program)
    <82>   DW_AT_low_pc      : 0x0
    <86>   DW_AT_high_pc     : 0x15b
    <8a>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <8c>   DW_AT_GNU_all_tail_call_sites: 1
 <2><8c>: Abbrev Number: 8 (DW_TAG_variable)
    <8d>   DW_AT_name        : (indirect string, offset: 0xa4): num1
    <91>   DW_AT_decl_file   : 1
    <92>   DW_AT_decl_line   : 5
    <93>   DW_AT_type        : <0x2a>
    <97>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><9a>: Abbrev Number: 9 (DW_TAG_lexical_block)
    <9b>   DW_AT_low_pc      : 0x15
    <9f>   DW_AT_high_pc     : 0x69
 <2><a3>: Abbrev Number: 9 (DW_TAG_lexical_block)
    <a4>   DW_AT_low_pc      : 0x7e
    <a8>   DW_AT_high_pc     : 0x66
 <2><ac>: Abbrev Number: 9 (DW_TAG_lexical_block)
    <ad>   DW_AT_low_pc      : 0xec
    <b1>   DW_AT_high_pc     : 0x69
 <2><b5>: Abbrev Number: 10 (DW_TAG_constant)
    <b6>   DW_AT_name        : (indirect string, offset: 0xa9): num2
    <ba>   DW_AT_decl_file   : 1
    <bb>   DW_AT_decl_line   : 6
    <bc>   DW_AT_type        : <0x31>
    <c0>   DW_AT_const_value : 4 byte block: 5 0 0 0 
 <2><c5>: Abbrev Number: 0
 <1><c6>: Abbrev Number: 0

Contents of the .debug_abbrev section:

  Number TAG (0x0)
   1      DW_TAG_compile_unit    [has children]
    DW_AT_producer     DW_FORM_strp
    DW_AT_language     DW_FORM_data1
    DW_AT_identifier_case DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT_comp_dir     DW_FORM_strp
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data4
    DW_AT_stmt_list    DW_FORM_sec_offset
    DW_AT_GNU_macros   DW_FORM_sec_offset
    DW_AT value: 0     DW_FORM value: 0
   2      DW_TAG_base_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_encoding     DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT value: 0     DW_FORM value: 0
   3      DW_TAG_const_type    [no children]
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   4      DW_TAG_subprogram    [has children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data4
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   5      DW_TAG_formal_parameter    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   6      DW_TAG_pointer_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   7      DW_TAG_subprogram    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_main_subprogram DW_FORM_flag_present
    DW_AT_calling_convention DW_FORM_data1
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data4
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   8      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   9      DW_TAG_lexical_block    [no children]
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data4
    DW_AT value: 0     DW_FORM value: 0
   10      DW_TAG_constant    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_const_value  DW_FORM_block1
    DW_AT value: 0     DW_FORM value: 0

Contents of the .debug_aranges section:

  Length:                   28
  Version:                  2
  Offset into .debug_info:  0x0
  Pointer Size:             4
  Segment Size:             0

    Address    Length
    00000000 000001af 
    00000000 00000000 

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4
  Offset into .debug_line:     0x0

 DW_MACRO_start_file - lineno: 0 filenum: 1 filename: if_then.f08
 DW_MACRO_end_file

Raw dump of debug contents of section .debug_line:

  Offset:                      0x0
  Length:                      68
  DWARF Version:               2
  Prologue Length:             34
  Minimum Instruction Length:  1
  Initial value of 'is_stmt':  1
  Line Base:                   -5
  Line Range:                  14
  Opcode Base:                 13

 Opcodes:
  Opcode 1 has 0 args
  Opcode 2 has 1 arg
  Opcode 3 has 1 arg
  Opcode 4 has 1 arg
  Opcode 5 has 1 arg
  Opcode 6 has 0 args
  Opcode 7 has 0 args
  Opcode 8 has 0 args
  Opcode 9 has 1 arg
  Opcode 10 has 0 args
  Opcode 11 has 0 args
  Opcode 12 has 1 arg

 The Directory Table is empty.

 The File Name Table (offset 0x1c):
  Entry	Dir	Time	Size	Name
  1	0	0	0	if_then.f08

 Line Number Statements:
  [0x0000002c]  Extended opcode 2: set Address to 0x0
  [0x00000033]  Copy
  [0x00000034]  Advance PC by constant 17 to 0x11
  [0x00000035]  Special opcode 68: advance Address by 4 to 0x15 and Line by 7 to 8
  [0x00000036]  Advance PC by 105 to 0x7e
  [0x00000038]  Special opcode 6: advance Address by 0 to 0x7e and Line by 1 to 9
  [0x00000039]  Advance PC by 102 to 0xe4
  [0x0000003b]  Special opcode 7: advance Address by 0 to 0xe4 and Line by 2 to 11
  [0x0000003c]  Special opcode 118: advance Address by 8 to 0xec and Line by 1 to 12
  [0x0000003d]  Advance PC by 105 to 0x155
  [0x0000003f]  Special opcode 8: advance Address by 0 to 0x155 and Line by 3 to 15
  [0x00000040]  Special opcode 89: advance Address by 6 to 0x15b and Line by 0 to 15
  [0x00000041]  Advance PC by constant 17 to 0x16c
  [0x00000042]  Special opcode 159: advance Address by 11 to 0x177 and Line by 0 to 15
  [0x00000043]  Advance PC by 56 to 0x1af
  [0x00000045]  Extended opcode 1: End of Sequence


Contents of the .debug_str section:

  0x00000000 2f686f6d 652f7562 756e7475 2f456e67 /home/ubuntu/Eng
  0x00000010 696e6565 72696e67 2f50726f 6772616d ineering/Program
  0x00000020 6d696e67 2f446973 61737365 6d626c69 ming/Disassembli
  0x00000030 6e672d42 696e6172 6965732f 466f7274 ng-Binaries/Fort
  0x00000040 72616e2f 496e7465 6c5f6172 63686974 ran/Intel_archit
  0x00000050 65637475 72652f69 3338362f 436f6e64 ecture/i386/Cond
  0x00000060 6974696f 6e616c73 2f576974 685f4465 itionals/With_De
  0x00000070 6275675f 496e666f 0069665f 7468656e bug_Info.if_then
  0x00000080 0069665f 7468656e 2e663038 00636861 .if_then.f08.cha
  0x00000090 72616374 6572286b 696e643d 31290061 racter(kind=1).a
  0x000000a0 72676300 6e756d31 006e756d 3200696e rgc.num1.num2.in
  0x000000b0 74656765 72286b69 6e643d34 29006d61 teger(kind=4).ma
  0x000000c0 696e0047 4e552046 6f727472 616e3230 in.GNU Fortran20
  0x000000d0 30382037 2e332e30 202d6d33 32202d6d 08 7.3.0 -m32 -m
  0x000000e0 74756e65 3d67656e 65726963 202d6d61 tune=generic -ma
  0x000000f0 7263683d 69363836 202d6767 64623320 rch=i686 -ggdb3 
  0x00000100 2d66696e 7472696e 7369632d 6d6f6475 -fintrinsic-modu
  0x00000110 6c65732d 70617468 202f7573 722f6c69 les-path /usr/li
  0x00000120 622f6763 632f7838 365f3634 2d6c696e b/gcc/x86_64-lin
  0x00000130 75782d67 6e752f37 2f66696e 636c7564 ux-gnu/7/finclud
  0x00000140 65006172 677600                     e.argv.

Contents of the .eh_frame section:


00000000 00000014 00000000 CIE
  Version:               1
  Augmentation:          "zR"
  Code alignment factor: 1
  Data alignment factor: -4
  Return address column: 8
  Augmentation data:     1b
  DW_CFA_def_cfa: r4 (esp) ofs 4
  DW_CFA_offset: r8 (eip) at cfa-4
  DW_CFA_nop
  DW_CFA_nop

00000018 00000020 0000001c FDE cie=00000000 pc=00000000..0000015b
  DW_CFA_advance_loc: 1 to 00000001
  DW_CFA_def_cfa_offset: 8
  DW_CFA_offset: r5 (ebp) at cfa-8
  DW_CFA_advance_loc: 2 to 00000003
  DW_CFA_def_cfa_register: r5 (ebp)
  DW_CFA_advance_loc: 7 to 0000000a
  DW_CFA_offset: r3 (ebx) at cfa-12
  DW_CFA_advance_loc2: 336 to 0000015a
  DW_CFA_restore: r5 (ebp)
  DW_CFA_restore: r3 (ebx)
  DW_CFA_def_cfa: r4 (esp) ofs 4

0000003c 00000030 00000040 FDE cie=00000000 pc=0000015b..000001af
  DW_CFA_advance_loc: 4 to 0000015f
  DW_CFA_def_cfa: r1 (ecx) ofs 0
  DW_CFA_advance_loc: 7 to 00000166
  DW_CFA_expression: r5 (ebp) (DW_OP_breg5 (ebp): 0)
  DW_CFA_advance_loc: 4 to 0000016a
  DW_CFA_def_cfa_expression (DW_OP_breg5 (ebp): -8; DW_OP_deref)
  DW_CFA_expression: r3 (ebx) (DW_OP_breg5 (ebp): -4)
  DW_CFA_advance_loc: 63 to 000001a9
  DW_CFA_restore: r1 (ecx)
  DW_CFA_def_cfa: r1 (ecx) ofs 0
  DW_CFA_advance_loc: 1 to 000001aa
  DW_CFA_restore: r3 (ebx)
  DW_CFA_advance_loc: 1 to 000001ab
  DW_CFA_restore: r5 (ebp)
  DW_CFA_advance_loc: 3 to 000001ae
  DW_CFA_def_cfa: r4 (esp) ofs 4
  DW_CFA_nop

00000070 00000010 00000074 FDE cie=00000000 pc=00000000..00000004
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

