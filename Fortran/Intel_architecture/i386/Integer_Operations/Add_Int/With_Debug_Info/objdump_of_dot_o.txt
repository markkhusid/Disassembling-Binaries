
add_int.o:     file format elf32-i386
add_int.o
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  00000000  00000000  0000003c  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
  2 .text         00000080  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  3 .data         00000000  00000000  00000000  000000c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  00000000  00000000  000000c4  2**0
                  ALLOC
  5 .rodata       0000001c  00000000  00000000  000000c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .text.__x86.get_pc_thunk.ax 00000004  00000000  00000000  000000e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text.__x86.get_pc_thunk.bx 00000004  00000000  00000000  000000e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .debug_info   000000b2  00000000  00000000  000000e8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_abbrev 00000084  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000020  00000000  00000000  0000021e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_macro  0000000c  00000000  00000000  0000023e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 12 .debug_line   00000040  00000000  00000000  0000024a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 13 .debug_str    00000142  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000001e  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY
 15 .note.GNU-stack 00000000  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY
 16 .eh_frame     00000094  00000000  00000000  000003ec  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 add_int.f08
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l     F .text	0000002c MAIN__
00000000 l     O .rodata	0000001c options.0.3693
00000000 l    d  .rodata	00000000 .rodata
00000000 l    d  .text.__x86.get_pc_thunk.ax	00000000 .text.__x86.get_pc_thunk.ax
00000000 l    d  .text.__x86.get_pc_thunk.bx	00000000 .text.__x86.get_pc_thunk.bx
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .note.GNU-stack	00000000 .note.GNU-stack
00000000 l    d  .eh_frame	00000000 .eh_frame
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .group	00000000 .group
00000000 l    d  .group	00000000 .group
00000000 g     F .text.__x86.get_pc_thunk.ax	00000000 .hidden __x86.get_pc_thunk.ax
00000000         *UND*	00000000 _GLOBAL_OFFSET_TABLE_
0000002c g     F .text	00000054 main
00000000 g     F .text.__x86.get_pc_thunk.bx	00000000 .hidden __x86.get_pc_thunk.bx
00000000         *UND*	00000000 _gfortran_set_args
00000000         *UND*	00000000 _gfortran_set_options


Contents of section .group:
 0000 01000000 08000000                    ........        
Contents of section .group:
 0000 01000000 09000000                    ........        
Contents of section .text:
 0000 5589e583 ec10e8fc ffffff05 01000000  U...............
 0010 c745fc01 000000c7 45f80900 00008b55  .E......E......U
 0020 fc8b45f8 01d08945 f490c9c3 8d4c2404  ..E....E.....L$.
 0030 83e4f0ff 71fc5589 e55351e8 fcffffff  ....q.U..SQ.....
 0040 81c30200 000089c8 83ec08ff 7004ff30  ............p..0
 0050 e8fcffff ff83c410 83ec088d 83000000  ................
 0060 00506a07 e8fcffff ff83c410 e88fffff  .Pj.............
 0070 ffb80000 00008d65 f8595b5d 8d61fcc3  .......e.Y[].a..
Contents of section .rodata:
 0000 44000000 ff1f0000 00000000 01000000  D...............
 0010 01000000 00000000 1f000000           ............    
Contents of section .text.__x86.get_pc_thunk.ax:
 0000 8b0424c3                             ..$.            
Contents of section .text.__x86.get_pc_thunk.bx:
 0000 8b1c24c3                             ..$.            
Contents of section .debug_info:
 0000 ae000000 04000000 00000401 a9000000  ................
 0010 0e021200 00001e00 00000000 00008000  ................
 0020 00000000 00000000 00000238 01000001  ...........8....
 0030 0c610000 002c0000 00540000 00019c61  .a...,...T.....a
 0040 00000003 a4000000 010c6800 00000291  ..........h.....
 0050 00033d01 0000010c 6d000000 03910406  ..=.....m.......
 0060 00040405 28010000 05610000 00060473  ....(....a.....s
 0070 00000004 01080000 00000761 64640001  ...........add..
 0080 01020000 00002c00 0000019c 08610001  ......,......a..
 0090 05610000 00029174 08620001 05610000  .a.....t.b...a..
 00a0 00029170 08630001 05610000 0002916c  ...p.c...a.....l
 00b0 0000                                 ..              
Contents of section .debug_abbrev:
 0000 01110125 0e130b42 0b030e1b 0e110112  ...%...B........
 0010 06101799 42170000 022e013f 19030e3a  ....B......?...:
 0020 0b3b0b49 13110112 06401896 42190113  .;.I.....@..B...
 0030 00000305 00030e3a 0b3b0b49 13021800  .......:.;.I....
 0040 00042400 0b0b3e0b 030e0000 05260049  ..$...>......&.I
 0050 13000006 0f000b0b 49130000 072e0103  ........I.......
 0060 083a0b3b 0b6a1936 0b110112 06401897  .:.;.j.6.....@..
 0070 42190000 08340003 083a0b3b 0b491302  B....4...:.;.I..
 0080 18000000                             ....            
Contents of section .debug_aranges:
 0000 1c000000 02000000 00000400 00000000  ................
 0010 00000000 80000000 00000000 00000000  ................
Contents of section .debug_macro:
 0000 04000200 00000003 00010400           ............    
Contents of section .debug_line:
 0000 3c000000 02002200 00000101 fb0e0d00  <.....".........
 0010 01010101 00000001 00000100 6164645f  ............add_
 0020 696e742e 66303800 00000000 00050200  int.f08.........
 0030 00000001 f87576ae 3c08ac02 38000101  .....uv.<...8...
Contents of section .debug_str:
 0000 63686172 61637465 72286b69 6e643d31  character(kind=1
 0010 29006164 645f696e 742e6630 38002f68  ).add_int.f08./h
 0020 6f6d652f 6861786f 722f456e 67696e65  ome/haxor/Engine
 0030 6572696e 672f5072 6f677261 6d6d696e  ering/Programmin
 0040 672f4469 73617373 656d626c 696e672d  g/Disassembling-
 0050 42696e61 72696573 2f466f72 7472616e  Binaries/Fortran
 0060 2f496e74 656c5f61 72636869 74656374  /Intel_architect
 0070 7572652f 69333836 2f496e74 65676572  ure/i386/Integer
 0080 5f4f7065 72617469 6f6e732f 4164645f  _Operations/Add_
 0090 496e742f 57697468 5f446562 75675f49  Int/With_Debug_I
 00a0 6e666f00 61726763 00474e55 20466f72  nfo.argc.GNU For
 00b0 7472616e 32303038 20382e32 2e30202d  tran2008 8.2.0 -
 00c0 6d333220 2d6d7475 6e653d67 656e6572  m32 -mtune=gener
 00d0 6963202d 6d617263 683d6936 3836202d  ic -march=i686 -
 00e0 67676462 33202d66 696e7472 696e7369  ggdb3 -fintrinsi
 00f0 632d6d6f 64756c65 732d7061 7468202f  c-modules-path /
 0100 7573722f 6c69622f 6763632f 7838365f  usr/lib/gcc/x86_
 0110 36342d6c 696e7578 2d676e75 2f382f66  64-linux-gnu/8/f
 0120 696e636c 75646500 696e7465 67657228  include.integer(
 0130 6b696e64 3d342900 6d61696e 00617267  kind=4).main.arg
 0140 7600                                 v.              
Contents of section .comment:
 0000 00474343 3a202844 65626961 6e20382e  .GCC: (Debian 8.
 0010 322e302d 31342920 382e322e 3000      2.0-14) 8.2.0.  
Contents of section .eh_frame:
 0000 14000000 00000000 017a5200 017c0801  .........zR..|..
 0010 1b0c0404 88010000 1c000000 1c000000  ................
 0020 00000000 2c000000 00410e08 8502420d  ....,....A....B.
 0030 0568c50c 04040000 30000000 3c000000  .h......0...<...
 0040 2c000000 54000000 00440c01 00471005  ,...T....D...G..
 0050 02750044 0f037578 06100302 757c7fc1  .u.D..ux....u|..
 0060 0c010041 c341c543 0c040400 10000000  ...A.A.C........
 0070 70000000 00000000 04000000 00000000  p...............
 0080 10000000 84000000 00000000 04000000  ................
 0090 00000000                             ....            

Disassembly of section .group:

00000000 <.group>:
program add
   0:	01 00                	add    DWORD PTR [eax],eax
   2:	00 00                	add    BYTE PTR [eax],al
   4:	08 00                	or     BYTE PTR [eax],al
	...

Disassembly of section .group:

00000000 <.group>:
   0:	01 00                	add    DWORD PTR [eax],eax
   2:	00 00                	add    BYTE PTR [eax],al
   4:	09 00                	or     DWORD PTR [eax],eax
	...

Disassembly of section .text:

00000000 <MAIN__>:
   0:	55                   	push   ebp
   1:	89 e5                	mov    ebp,esp
   3:	83 ec 10             	sub    esp,0x10
   6:	e8 fc ff ff ff       	call   7 <MAIN__+0x7>
			7: R_386_PC32	__x86.get_pc_thunk.ax
   b:	05 01 00 00 00       	add    eax,0x1
			c: R_386_GOTPC	_GLOBAL_OFFSET_TABLE_

	implicit none

	integer		:: a, b, c

	a = 1
  10:	c7 45 fc 01 00 00 00 	mov    DWORD PTR [ebp-0x4],0x1
	b = 9
  17:	c7 45 f8 09 00 00 00 	mov    DWORD PTR [ebp-0x8],0x9

	c = a + b
  1e:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
  21:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
  24:	01 d0                	add    eax,edx
  26:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax

end program add
  29:	90                   	nop
  2a:	c9                   	leave  
  2b:	c3                   	ret    

0000002c <main>:
  2c:	8d 4c 24 04          	lea    ecx,[esp+0x4]
  30:	83 e4 f0             	and    esp,0xfffffff0
  33:	ff 71 fc             	push   DWORD PTR [ecx-0x4]
  36:	55                   	push   ebp
  37:	89 e5                	mov    ebp,esp
  39:	53                   	push   ebx
  3a:	51                   	push   ecx
  3b:	e8 fc ff ff ff       	call   3c <main+0x10>
			3c: R_386_PC32	__x86.get_pc_thunk.bx
  40:	81 c3 02 00 00 00    	add    ebx,0x2
			42: R_386_GOTPC	_GLOBAL_OFFSET_TABLE_
  46:	89 c8                	mov    eax,ecx
  48:	83 ec 08             	sub    esp,0x8
  4b:	ff 70 04             	push   DWORD PTR [eax+0x4]
  4e:	ff 30                	push   DWORD PTR [eax]
  50:	e8 fc ff ff ff       	call   51 <main+0x25>
			51: R_386_PLT32	_gfortran_set_args
  55:	83 c4 10             	add    esp,0x10
  58:	83 ec 08             	sub    esp,0x8
  5b:	8d 83 00 00 00 00    	lea    eax,[ebx+0x0]
			5d: R_386_GOTOFF	.rodata
  61:	50                   	push   eax
  62:	6a 07                	push   0x7
  64:	e8 fc ff ff ff       	call   65 <main+0x39>
			65: R_386_PLT32	_gfortran_set_options
  69:	83 c4 10             	add    esp,0x10
  6c:	e8 8f ff ff ff       	call   0 <MAIN__>
  71:	b8 00 00 00 00       	mov    eax,0x0
  76:	8d 65 f8             	lea    esp,[ebp-0x8]
  79:	59                   	pop    ecx
  7a:	5b                   	pop    ebx
  7b:	5d                   	pop    ebp
  7c:	8d 61 fc             	lea    esp,[ecx-0x4]
  7f:	c3                   	ret    

Disassembly of section .rodata:

00000000 <options.0.3693>:
   0:	44                   	inc    esp
   1:	00 00                	add    BYTE PTR [eax],al
   3:	00 ff                	add    bh,bh
   5:	1f                   	pop    ds
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	00 00                	add    BYTE PTR [eax],al
   c:	01 00                	add    DWORD PTR [eax],eax
   e:	00 00                	add    BYTE PTR [eax],al
  10:	01 00                	add    DWORD PTR [eax],eax
  12:	00 00                	add    BYTE PTR [eax],al
  14:	00 00                	add    BYTE PTR [eax],al
  16:	00 00                	add    BYTE PTR [eax],al
  18:	1f                   	pop    ds
  19:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .text.__x86.get_pc_thunk.ax:

00000000 <__x86.get_pc_thunk.ax>:
   0:	8b 04 24             	mov    eax,DWORD PTR [esp]
   3:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.bx:

00000000 <__x86.get_pc_thunk.bx>:
   0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
   3:	c3                   	ret    

Disassembly of section .debug_info:

00000000 <.debug_info>:
program add
   0:	ae                   	scas   al,BYTE PTR es:[edi]
   1:	00 00                	add    BYTE PTR [eax],al
   3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
   6:	00 00                	add    BYTE PTR [eax],al
			6: R_386_32	.debug_abbrev
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 01                	add    al,0x1
   c:	a9 00 00 00 0e       	test   eax,0xe000000
			c: R_386_32	.debug_str
	a = 1
  11:	02 12                	add    dl,BYTE PTR [edx]
			12: R_386_32	.debug_str
  13:	00 00                	add    BYTE PTR [eax],al
  15:	00 1e                	add    BYTE PTR [esi],bl
			16: R_386_32	.debug_str
	b = 9
  17:	00 00                	add    BYTE PTR [eax],al
  19:	00 00                	add    BYTE PTR [eax],al
			1a: R_386_32	.text
  1b:	00 00                	add    BYTE PTR [eax],al
  1d:	00 80 00 00 00 00    	add    BYTE PTR [eax+0x0],al
			22: R_386_32	.debug_line
	c = a + b
  23:	00 00                	add    BYTE PTR [eax],al
  25:	00 00                	add    BYTE PTR [eax],al
			26: R_386_32	.debug_macro
  27:	00 00                	add    BYTE PTR [eax],al
end program add
  29:	00 02                	add    BYTE PTR [edx],al
  2b:	38 01                	cmp    BYTE PTR [ecx],al
			2b: R_386_32	.debug_str
  2d:	00 00                	add    BYTE PTR [eax],al
  2f:	01 0c 61             	add    DWORD PTR [ecx+eiz*2],ecx
  32:	00 00                	add    BYTE PTR [eax],al
  34:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
			35: R_386_32	.text
  37:	00 00                	add    BYTE PTR [eax],al
  39:	54                   	push   esp
  3a:	00 00                	add    BYTE PTR [eax],al
  3c:	00 01                	add    BYTE PTR [ecx],al
  3e:	9c                   	pushf  
  3f:	61                   	popa   
  40:	00 00                	add    BYTE PTR [eax],al
  42:	00 03                	add    BYTE PTR [ebx],al
  44:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
			44: R_386_32	.debug_str
  45:	00 00                	add    BYTE PTR [eax],al
  47:	00 01                	add    BYTE PTR [ecx],al
  49:	0c 68                	or     al,0x68
  4b:	00 00                	add    BYTE PTR [eax],al
  4d:	00 02                	add    BYTE PTR [edx],al
  4f:	91                   	xchg   ecx,eax
  50:	00 03                	add    BYTE PTR [ebx],al
  52:	3d 01 00 00 01       	cmp    eax,0x1000001
			52: R_386_32	.debug_str
  57:	0c 6d                	or     al,0x6d
  59:	00 00                	add    BYTE PTR [eax],al
  5b:	00 03                	add    BYTE PTR [ebx],al
  5d:	91                   	xchg   ecx,eax
  5e:	04 06                	add    al,0x6
  60:	00 04 04             	add    BYTE PTR [esp+eax*1],al
  63:	05 28 01 00 00       	add    eax,0x128
			64: R_386_32	.debug_str
  68:	05 61 00 00 00       	add    eax,0x61
  6d:	06                   	push   es
  6e:	04 73                	add    al,0x73
  70:	00 00                	add    BYTE PTR [eax],al
  72:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
  75:	08 00                	or     BYTE PTR [eax],al
			76: R_386_32	.debug_str
  77:	00 00                	add    BYTE PTR [eax],al
  79:	00 07                	add    BYTE PTR [edi],al
  7b:	61                   	popa   
  7c:	64 64 00 01          	fs add BYTE PTR fs:[ecx],al
  80:	01 02                	add    DWORD PTR [edx],eax
  82:	00 00                	add    BYTE PTR [eax],al
			82: R_386_32	.text
  84:	00 00                	add    BYTE PTR [eax],al
  86:	2c 00                	sub    al,0x0
  88:	00 00                	add    BYTE PTR [eax],al
  8a:	01 9c 08 61 00 01 05 	add    DWORD PTR [eax+ecx*1+0x5010061],ebx
  91:	61                   	popa   
  92:	00 00                	add    BYTE PTR [eax],al
  94:	00 02                	add    BYTE PTR [edx],al
  96:	91                   	xchg   ecx,eax
  97:	74 08                	je     a1 <.debug_info+0xa1>
  99:	62 00                	bound  eax,QWORD PTR [eax]
  9b:	01 05 61 00 00 00    	add    DWORD PTR ds:0x61,eax
  a1:	02 91 70 08 63 00    	add    dl,BYTE PTR [ecx+0x630870]
  a7:	01 05 61 00 00 00    	add    DWORD PTR ds:0x61,eax
  ad:	02                   	.byte 0x2
  ae:	91                   	xchg   ecx,eax
  af:	6c                   	ins    BYTE PTR es:[edi],dx
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
program add
   0:	01 11                	add    DWORD PTR [ecx],edx
   2:	01 25 0e 13 0b 42    	add    DWORD PTR ds:0x420b130e,esp
   8:	0b 03                	or     eax,DWORD PTR [ebx]
   a:	0e                   	push   cs
   b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
   d:	11 01                	adc    DWORD PTR [ecx],eax
   f:	12 06                	adc    al,BYTE PTR [esi]
	a = 1
  11:	10 17                	adc    BYTE PTR [edi],dl
  13:	99                   	cdq    
  14:	42                   	inc    edx
  15:	17                   	pop    ss
  16:	00 00                	add    BYTE PTR [eax],al
	b = 9
  18:	02 2e                	add    ch,BYTE PTR [esi]
  1a:	01 3f                	add    DWORD PTR [edi],edi
  1c:	19 03                	sbb    DWORD PTR [ebx],eax
	c = a + b
  1e:	0e                   	push   cs
  1f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
  21:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
  23:	49                   	dec    ecx
  24:	13 11                	adc    edx,DWORD PTR [ecx]
  26:	01 12                	add    DWORD PTR [edx],edx
  28:	06                   	push   es
end program add
  29:	40                   	inc    eax
  2a:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
  30:	00 00                	add    BYTE PTR [eax],al
  32:	03 05 00 03 0e 3a    	add    eax,DWORD PTR ds:0x3a0e0300
  38:	0b 3b                	or     edi,DWORD PTR [ebx]
  3a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
  3d:	02 18                	add    bl,BYTE PTR [eax]
  3f:	00 00                	add    BYTE PTR [eax],al
  41:	04 24                	add    al,0x24
  43:	00 0b                	add    BYTE PTR [ebx],cl
  45:	0b 3e                	or     edi,DWORD PTR [esi]
  47:	0b 03                	or     eax,DWORD PTR [ebx]
  49:	0e                   	push   cs
  4a:	00 00                	add    BYTE PTR [eax],al
  4c:	05 26 00 49 13       	add    eax,0x13490026
  51:	00 00                	add    BYTE PTR [eax],al
  53:	06                   	push   es
  54:	0f 00 0b             	str    WORD PTR [ebx]
  57:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
  5a:	00 00                	add    BYTE PTR [eax],al
  5c:	07                   	pop    es
  5d:	2e 01 03             	add    DWORD PTR cs:[ebx],eax
  60:	08 3a                	or     BYTE PTR [edx],bh
  62:	0b 3b                	or     edi,DWORD PTR [ebx]
  64:	0b 6a 19             	or     ebp,DWORD PTR [edx+0x19]
  67:	36 0b 11             	or     edx,DWORD PTR ss:[ecx]
  6a:	01 12                	add    DWORD PTR [edx],edx
  6c:	06                   	push   es
  6d:	40                   	inc    eax
  6e:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
  74:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
  77:	03 08                	add    ecx,DWORD PTR [eax]
  79:	3a 0b                	cmp    cl,BYTE PTR [ebx]
  7b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
  7d:	49                   	dec    ecx
  7e:	13 02                	adc    eax,DWORD PTR [edx]
  80:	18 00                	sbb    BYTE PTR [eax],al
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
program add
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
			6: R_386_32	.debug_info
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
	...
			10: R_386_32	.text
	a = 1
  14:	80 00 00             	add    BYTE PTR [eax],0x0
	...

Disassembly of section .debug_macro:

00000000 <.debug_macro>:
program add
   0:	04 00                	add    al,0x0
   2:	02 00                	add    al,BYTE PTR [eax]
			3: R_386_32	.debug_line
   4:	00 00                	add    BYTE PTR [eax],al
   6:	00 03                	add    BYTE PTR [ebx],al
   8:	00 01                	add    BYTE PTR [ecx],al
   a:	04 00                	add    al,0x0

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	3c 00                	cmp    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	22 00                	and    al,BYTE PTR [eax]
   8:	00 00                	add    BYTE PTR [eax],al
   a:	01 01                	add    DWORD PTR [ecx],eax
   c:	fb                   	sti    
   d:	0e                   	push   cs
   e:	0d 00 01 01 01       	or     eax,0x1010100
	a = 1
  13:	01 00                	add    DWORD PTR [eax],eax
  15:	00 00                	add    BYTE PTR [eax],al
	b = 9
  17:	01 00                	add    DWORD PTR [eax],eax
  19:	00 01                	add    BYTE PTR [ecx],al
  1b:	00 61 64             	add    BYTE PTR [ecx+0x64],ah
	c = a + b
  1e:	64 5f                	fs pop edi
  20:	69 6e 74 2e 66 30 38 	imul   ebp,DWORD PTR [esi+0x74],0x3830662e
  27:	00 00                	add    BYTE PTR [eax],al
end program add
  29:	00 00                	add    BYTE PTR [eax],al
  2b:	00 00                	add    BYTE PTR [eax],al
  2d:	05 02 00 00 00       	add    eax,0x2
			2f: R_386_32	.text
  32:	00 01                	add    BYTE PTR [ecx],al
  34:	f8                   	clc    
  35:	75 76                	jne    ad <main+0x81>
  37:	ae                   	scas   al,BYTE PTR es:[edi]
  38:	3c 08                	cmp    al,0x8
  3a:	ac                   	lods   al,BYTE PTR ds:[esi]
  3b:	02 38                	add    bh,BYTE PTR [eax]
  3d:	00 01                	add    BYTE PTR [ecx],al
  3f:	01                   	.byte 0x1

Disassembly of section .debug_str:

00000000 <.debug_str>:
program add
   0:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
   3:	72 61                	jb     66 <.debug_str+0x66>
   5:	63 74 65 72          	arpl   WORD PTR [ebp+eiz*2+0x72],si
   9:	28 6b 69             	sub    BYTE PTR [ebx+0x69],ch
   c:	6e                   	outs   dx,BYTE PTR ds:[esi]
   d:	64 3d 31 29 00 61    	fs cmp eax,0x61002931
	a = 1
  13:	64 64 5f             	fs fs pop edi
  16:	69 6e 74 2e 66 30 38 	imul   ebp,DWORD PTR [esi+0x74],0x3830662e
	b = 9
  1d:	00 2f                	add    BYTE PTR [edi],ch
	c = a + b
  1f:	68 6f 6d 65 2f       	push   0x2f656d6f
  24:	68 61 78 6f 72       	push   0x726f7861
end program add
  29:	2f                   	das    
  2a:	45                   	inc    ebp
  2b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  2c:	67 69 6e 65 65 72 69 	imul   ebp,DWORD PTR [bp+0x65],0x6e697265
  33:	6e 
  34:	67 2f                	addr16 das 
  36:	50                   	push   eax
  37:	72 6f                	jb     a8 <.debug_str+0xa8>
  39:	67 72 61             	addr16 jb 9d <.debug_str+0x9d>
  3c:	6d                   	ins    DWORD PTR es:[edi],dx
  3d:	6d                   	ins    DWORD PTR es:[edi],dx
  3e:	69 6e 67 2f 44 69 73 	imul   ebp,DWORD PTR [esi+0x67],0x7369442f
  45:	61                   	popa   
  46:	73 73                	jae    bb <.debug_str+0xbb>
  48:	65 6d                	gs ins DWORD PTR es:[edi],dx
  4a:	62 6c 69 6e          	bound  ebp,QWORD PTR [ecx+ebp*2+0x6e]
  4e:	67 2d 42 69 6e 61    	addr16 sub eax,0x616e6942
  54:	72 69                	jb     bf <.debug_str+0xbf>
  56:	65 73 2f             	gs jae 88 <.debug_str+0x88>
  59:	46                   	inc    esi
  5a:	6f                   	outs   dx,DWORD PTR ds:[esi]
  5b:	72 74                	jb     d1 <.debug_str+0xd1>
  5d:	72 61                	jb     c0 <.debug_str+0xc0>
  5f:	6e                   	outs   dx,BYTE PTR ds:[esi]
  60:	2f                   	das    
  61:	49                   	dec    ecx
  62:	6e                   	outs   dx,BYTE PTR ds:[esi]
  63:	74 65                	je     ca <.debug_str+0xca>
  65:	6c                   	ins    BYTE PTR es:[edi],dx
  66:	5f                   	pop    edi
  67:	61                   	popa   
  68:	72 63                	jb     cd <.debug_str+0xcd>
  6a:	68 69 74 65 63       	push   0x63657469
  6f:	74 75                	je     e6 <.debug_str+0xe6>
  71:	72 65                	jb     d8 <.debug_str+0xd8>
  73:	2f                   	das    
  74:	69 33 38 36 2f 49    	imul   esi,DWORD PTR [ebx],0x492f3638
  7a:	6e                   	outs   dx,BYTE PTR ds:[esi]
  7b:	74 65                	je     e2 <.debug_str+0xe2>
  7d:	67 65 72 5f          	addr16 gs jb e0 <.debug_str+0xe0>
  81:	4f                   	dec    edi
  82:	70 65                	jo     e9 <.debug_str+0xe9>
  84:	72 61                	jb     e7 <.debug_str+0xe7>
  86:	74 69                	je     f1 <.debug_str+0xf1>
  88:	6f                   	outs   dx,DWORD PTR ds:[esi]
  89:	6e                   	outs   dx,BYTE PTR ds:[esi]
  8a:	73 2f                	jae    bb <.debug_str+0xbb>
  8c:	41                   	inc    ecx
  8d:	64 64 5f             	fs fs pop edi
  90:	49                   	dec    ecx
  91:	6e                   	outs   dx,BYTE PTR ds:[esi]
  92:	74 2f                	je     c3 <.debug_str+0xc3>
  94:	57                   	push   edi
  95:	69 74 68 5f 44 65 62 	imul   esi,DWORD PTR [eax+ebp*2+0x5f],0x75626544
  9c:	75 
  9d:	67 5f                	addr16 pop edi
  9f:	49                   	dec    ecx
  a0:	6e                   	outs   dx,BYTE PTR ds:[esi]
  a1:	66 6f                	outs   dx,WORD PTR ds:[esi]
  a3:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
  a6:	67 63 00             	arpl   WORD PTR [bx+si],ax
  a9:	47                   	inc    edi
  aa:	4e                   	dec    esi
  ab:	55                   	push   ebp
  ac:	20 46 6f             	and    BYTE PTR [esi+0x6f],al
  af:	72 74                	jb     125 <.debug_str+0x125>
  b1:	72 61                	jb     114 <.debug_str+0x114>
  b3:	6e                   	outs   dx,BYTE PTR ds:[esi]
  b4:	32 30                	xor    dh,BYTE PTR [eax]
  b6:	30 38                	xor    BYTE PTR [eax],bh
  b8:	20 38                	and    BYTE PTR [eax],bh
  ba:	2e 32 2e             	xor    ch,BYTE PTR cs:[esi]
  bd:	30 20                	xor    BYTE PTR [eax],ah
  bf:	2d 6d 33 32 20       	sub    eax,0x2032336d
  c4:	2d 6d 74 75 6e       	sub    eax,0x6e75746d
  c9:	65 3d 67 65 6e 65    	gs cmp eax,0x656e6567
  cf:	72 69                	jb     13a <.debug_str+0x13a>
  d1:	63 20                	arpl   WORD PTR [eax],sp
  d3:	2d 6d 61 72 63       	sub    eax,0x6372616d
  d8:	68 3d 69 36 38       	push   0x3836693d
  dd:	36 20 2d 67 67 64 62 	and    BYTE PTR ss:0x62646767,ch
  e4:	33 20                	xor    esp,DWORD PTR [eax]
  e6:	2d 66 69 6e 74       	sub    eax,0x746e6966
  eb:	72 69                	jb     156 <main+0x12a>
  ed:	6e                   	outs   dx,BYTE PTR ds:[esi]
  ee:	73 69                	jae    159 <main+0x12d>
  f0:	63 2d 6d 6f 64 75    	arpl   WORD PTR ds:0x75646f6d,bp
  f6:	6c                   	ins    BYTE PTR es:[edi],dx
  f7:	65 73 2d             	gs jae 127 <.debug_str+0x127>
  fa:	70 61                	jo     15d <main+0x131>
  fc:	74 68                	je     166 <main+0x13a>
  fe:	20 2f                	and    BYTE PTR [edi],ch
 100:	75 73                	jne    175 <main+0x149>
 102:	72 2f                	jb     133 <.debug_str+0x133>
 104:	6c                   	ins    BYTE PTR es:[edi],dx
 105:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
 10c:	78 38                	js     146 <main+0x11a>
 10e:	36 5f                	ss pop edi
 110:	36 34 2d             	ss xor al,0x2d
 113:	6c                   	ins    BYTE PTR es:[edi],dx
 114:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
 11b:	75 2f                	jne    14c <main+0x120>
 11d:	38 2f                	cmp    BYTE PTR [edi],ch
 11f:	66 69 6e 63 6c 75    	imul   bp,WORD PTR [esi+0x63],0x756c
 125:	64 65 00 69 6e       	fs add BYTE PTR gs:[ecx+0x6e],ch
 12a:	74 65                	je     191 <main+0x165>
 12c:	67 65 72 28          	addr16 gs jb 158 <main+0x12c>
 130:	6b 69 6e 64          	imul   ebp,DWORD PTR [ecx+0x6e],0x64
 134:	3d 34 29 00 6d       	cmp    eax,0x6d002934
 139:	61                   	popa   
 13a:	69 6e 00 61 72 67 76 	imul   ebp,DWORD PTR [esi+0x0],0x76677261
	...

Disassembly of section .comment:

00000000 <.comment>:
program add
   0:	00 47 43             	add    BYTE PTR [edi+0x43],al
   3:	43                   	inc    ebx
   4:	3a 20                	cmp    ah,BYTE PTR [eax]
   6:	28 44 65 62          	sub    BYTE PTR [ebp+eiz*2+0x62],al
   a:	69 61 6e 20 38 2e 32 	imul   esp,DWORD PTR [ecx+0x6e],0x322e3820
	a = 1
  11:	2e 30 2d 31 34 29 20 	xor    BYTE PTR cs:0x20293431,ch
	b = 9
  18:	38 2e                	cmp    BYTE PTR [esi],ch
  1a:	32 2e                	xor    ch,BYTE PTR [esi]
  1c:	30 00                	xor    BYTE PTR [eax],al

Disassembly of section .eh_frame:

00000000 <.eh_frame>:
   0:	14 00                	adc    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	00 00                	add    BYTE PTR [eax],al
   6:	00 00                	add    BYTE PTR [eax],al
   8:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
   b:	00 01                	add    BYTE PTR [ecx],al
   d:	7c 08                	jl     17 <.eh_frame+0x17>
   f:	01 1b                	add    DWORD PTR [ebx],ebx
  11:	0c 04                	or     al,0x4
  13:	04 88                	add    al,0x88
  15:	01 00                	add    DWORD PTR [eax],eax
  17:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  1a:	00 00                	add    BYTE PTR [eax],al
  1c:	1c 00                	sbb    al,0x0
  1e:	00 00                	add    BYTE PTR [eax],al
  20:	00 00                	add    BYTE PTR [eax],al
			20: R_386_PC32	.text
  22:	00 00                	add    BYTE PTR [eax],al
  24:	2c 00                	sub    al,0x0
  26:	00 00                	add    BYTE PTR [eax],al
  28:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
  2b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
  31:	68 c5 0c 04 04       	push   0x4040cc5
  36:	00 00                	add    BYTE PTR [eax],al
  38:	30 00                	xor    BYTE PTR [eax],al
  3a:	00 00                	add    BYTE PTR [eax],al
  3c:	3c 00                	cmp    al,0x0
  3e:	00 00                	add    BYTE PTR [eax],al
  40:	2c 00                	sub    al,0x0
			40: R_386_PC32	.text
  42:	00 00                	add    BYTE PTR [eax],al
  44:	54                   	push   esp
  45:	00 00                	add    BYTE PTR [eax],al
  47:	00 00                	add    BYTE PTR [eax],al
  49:	44                   	inc    esp
  4a:	0c 01                	or     al,0x1
  4c:	00 47 10             	add    BYTE PTR [edi+0x10],al
  4f:	05 02 75 00 44       	add    eax,0x44007502
  54:	0f 03 75 78          	lsl    esi,WORD PTR [ebp+0x78]
  58:	06                   	push   es
  59:	10 03                	adc    BYTE PTR [ebx],al
  5b:	02 75 7c             	add    dh,BYTE PTR [ebp+0x7c]
  5e:	7f c1                	jg     21 <.eh_frame+0x21>
  60:	0c 01                	or     al,0x1
  62:	00 41 c3             	add    BYTE PTR [ecx-0x3d],al
  65:	41                   	inc    ecx
  66:	c5 43 0c             	lds    eax,FWORD PTR [ebx+0xc]
  69:	04 04                	add    al,0x4
  6b:	00 10                	add    BYTE PTR [eax],dl
  6d:	00 00                	add    BYTE PTR [eax],al
  6f:	00 70 00             	add    BYTE PTR [eax+0x0],dh
  72:	00 00                	add    BYTE PTR [eax],al
  74:	00 00                	add    BYTE PTR [eax],al
			74: R_386_PC32	.text.__x86.get_pc_thunk.ax
  76:	00 00                	add    BYTE PTR [eax],al
  78:	04 00                	add    al,0x0
  7a:	00 00                	add    BYTE PTR [eax],al
  7c:	00 00                	add    BYTE PTR [eax],al
  7e:	00 00                	add    BYTE PTR [eax],al
  80:	10 00                	adc    BYTE PTR [eax],al
  82:	00 00                	add    BYTE PTR [eax],al
  84:	84 00                	test   BYTE PTR [eax],al
  86:	00 00                	add    BYTE PTR [eax],al
  88:	00 00                	add    BYTE PTR [eax],al
			88: R_386_PC32	.text.__x86.get_pc_thunk.bx
  8a:	00 00                	add    BYTE PTR [eax],al
  8c:	04 00                	add    al,0x0
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	00 00                	add    BYTE PTR [eax],al
	...
Contents of the .debug_info section:

  Compilation Unit @ offset 0x0:
   Length:        0xae (32-bit)
   Version:       4
   Abbrev Offset: 0x0
   Pointer Size:  4
 <0><b>: Abbrev Number: 1 (DW_TAG_compile_unit)
    <c>   DW_AT_producer    : (indirect string, offset: 0xa9): GNU Fortran2008 8.2.0 -m32 -mtune=generic -march=i686 -ggdb3 -fintrinsic-modules-path /usr/lib/gcc/x86_64-linux-gnu/8/finclude
    <10>   DW_AT_language    : 14	(Fortran 95)
    <11>   DW_AT_identifier_case: 2	(down_case)
    <12>   DW_AT_name        : (indirect string, offset: 0x12): add_int.f08
    <16>   DW_AT_comp_dir    : (indirect string, offset: 0x1e): /home/haxor/Engineering/Programming/Disassembling-Binaries/Fortran/Intel_architecture/i386/Integer_Operations/Add_Int/With_Debug_Info
    <1a>   DW_AT_low_pc      : 0x0
    <1e>   DW_AT_high_pc     : 0x80
    <22>   DW_AT_stmt_list   : 0x0
    <26>   DW_AT_GNU_macros  : 0x0
 <1><2a>: Abbrev Number: 2 (DW_TAG_subprogram)
    <2b>   DW_AT_external    : 1
    <2b>   DW_AT_name        : (indirect string, offset: 0x138): main
    <2f>   DW_AT_decl_file   : 1
    <30>   DW_AT_decl_line   : 12
    <31>   DW_AT_type        : <0x61>
    <35>   DW_AT_low_pc      : 0x2c
    <39>   DW_AT_high_pc     : 0x54
    <3d>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <3f>   DW_AT_GNU_all_tail_call_sites: 1
    <3f>   DW_AT_sibling     : <0x61>
 <2><43>: Abbrev Number: 3 (DW_TAG_formal_parameter)
    <44>   DW_AT_name        : (indirect string, offset: 0xa4): argc
    <48>   DW_AT_decl_file   : 1
    <49>   DW_AT_decl_line   : 12
    <4a>   DW_AT_type        : <0x68>
    <4e>   DW_AT_location    : 2 byte block: 91 0 	(DW_OP_fbreg: 0)
 <2><51>: Abbrev Number: 3 (DW_TAG_formal_parameter)
    <52>   DW_AT_name        : (indirect string, offset: 0x13d): argv
    <56>   DW_AT_decl_file   : 1
    <57>   DW_AT_decl_line   : 12
    <58>   DW_AT_type        : <0x6d>
    <5c>   DW_AT_location    : 3 byte block: 91 4 6 	(DW_OP_fbreg: 4; DW_OP_deref)
 <2><60>: Abbrev Number: 0
 <1><61>: Abbrev Number: 4 (DW_TAG_base_type)
    <62>   DW_AT_byte_size   : 4
    <63>   DW_AT_encoding    : 5	(signed)
    <64>   DW_AT_name        : (indirect string, offset: 0x128): integer(kind=4)
 <1><68>: Abbrev Number: 5 (DW_TAG_const_type)
    <69>   DW_AT_type        : <0x61>
 <1><6d>: Abbrev Number: 6 (DW_TAG_pointer_type)
    <6e>   DW_AT_byte_size   : 4
    <6f>   DW_AT_type        : <0x73>
 <1><73>: Abbrev Number: 4 (DW_TAG_base_type)
    <74>   DW_AT_byte_size   : 1
    <75>   DW_AT_encoding    : 8	(unsigned char)
    <76>   DW_AT_name        : (indirect string, offset: 0x0): character(kind=1)
 <1><7a>: Abbrev Number: 7 (DW_TAG_subprogram)
    <7b>   DW_AT_name        : add
    <7f>   DW_AT_decl_file   : 1
    <80>   DW_AT_decl_line   : 1
    <81>   DW_AT_main_subprogram: 1
    <81>   DW_AT_calling_convention: 2	(program)
    <82>   DW_AT_low_pc      : 0x0
    <86>   DW_AT_high_pc     : 0x2c
    <8a>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <8c>   DW_AT_GNU_all_call_sites: 1
 <2><8c>: Abbrev Number: 8 (DW_TAG_variable)
    <8d>   DW_AT_name        : a
    <8f>   DW_AT_decl_file   : 1
    <90>   DW_AT_decl_line   : 5
    <91>   DW_AT_type        : <0x61>
    <95>   DW_AT_location    : 2 byte block: 91 74 	(DW_OP_fbreg: -12)
 <2><98>: Abbrev Number: 8 (DW_TAG_variable)
    <99>   DW_AT_name        : b
    <9b>   DW_AT_decl_file   : 1
    <9c>   DW_AT_decl_line   : 5
    <9d>   DW_AT_type        : <0x61>
    <a1>   DW_AT_location    : 2 byte block: 91 70 	(DW_OP_fbreg: -16)
 <2><a4>: Abbrev Number: 8 (DW_TAG_variable)
    <a5>   DW_AT_name        : c
    <a7>   DW_AT_decl_file   : 1
    <a8>   DW_AT_decl_line   : 5
    <a9>   DW_AT_type        : <0x61>
    <ad>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><b0>: Abbrev Number: 0
 <1><b1>: Abbrev Number: 0

Contents of the .debug_abbrev section:

  Number TAG (0x0)
   1      DW_TAG_compile_unit    [has children]
    DW_AT_producer     DW_FORM_strp
    DW_AT_language     DW_FORM_data1
    DW_AT_identifier_case DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT_comp_dir     DW_FORM_strp
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data4
    DW_AT_stmt_list    DW_FORM_sec_offset
    DW_AT_GNU_macros   DW_FORM_sec_offset
    DW_AT value: 0     DW_FORM value: 0
   2      DW_TAG_subprogram    [has children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data4
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   3      DW_TAG_formal_parameter    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   4      DW_TAG_base_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_encoding     DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT value: 0     DW_FORM value: 0
   5      DW_TAG_const_type    [no children]
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   6      DW_TAG_pointer_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   7      DW_TAG_subprogram    [has children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_main_subprogram DW_FORM_flag_present
    DW_AT_calling_convention DW_FORM_data1
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data4
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_call_sites DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   8      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0

Contents of the .debug_aranges section:

  Length:                   28
  Version:                  2
  Offset into .debug_info:  0x0
  Pointer Size:             4
  Segment Size:             0

    Address    Length
    00000000 00000080 
    00000000 00000000 

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4
  Offset into .debug_line:     0x0

 DW_MACRO_start_file - lineno: 0 filenum: 1 filename: add_int.f08
 DW_MACRO_end_file

Raw dump of debug contents of section .debug_line:

  Offset:                      0x0
  Length:                      60
  DWARF Version:               2
  Prologue Length:             34
  Minimum Instruction Length:  1
  Initial value of 'is_stmt':  1
  Line Base:                   -5
  Line Range:                  14
  Opcode Base:                 13

 Opcodes:
  Opcode 1 has 0 args
  Opcode 2 has 1 arg
  Opcode 3 has 1 arg
  Opcode 4 has 1 arg
  Opcode 5 has 1 arg
  Opcode 6 has 0 args
  Opcode 7 has 0 args
  Opcode 8 has 0 args
  Opcode 9 has 1 arg
  Opcode 10 has 0 args
  Opcode 11 has 0 args
  Opcode 12 has 1 arg

 The Directory Table is empty.

 The File Name Table (offset 0x1c):
  Entry	Dir	Time	Size	Name
  1	0	0	0	add_int.f08

 Line Number Statements:
  [0x0000002c]  Extended opcode 2: set Address to 0x0
  [0x00000033]  Copy
  [0x00000034]  Special opcode 235: advance Address by 16 to 0x10 and Line by 6 to 7
  [0x00000035]  Special opcode 104: advance Address by 7 to 0x17 and Line by 1 to 8
  [0x00000036]  Special opcode 105: advance Address by 7 to 0x1e and Line by 2 to 10
  [0x00000037]  Special opcode 161: advance Address by 11 to 0x29 and Line by 2 to 12
  [0x00000038]  Special opcode 47: advance Address by 3 to 0x2c and Line by 0 to 12
  [0x00000039]  Advance PC by constant 17 to 0x3d
  [0x0000003a]  Special opcode 159: advance Address by 11 to 0x48 and Line by 0 to 12
  [0x0000003b]  Advance PC by 56 to 0x80
  [0x0000003d]  Extended opcode 1: End of Sequence


Contents of the .debug_str section:

  0x00000000 63686172 61637465 72286b69 6e643d31 character(kind=1
  0x00000010 29006164 645f696e 742e6630 38002f68 ).add_int.f08./h
  0x00000020 6f6d652f 6861786f 722f456e 67696e65 ome/haxor/Engine
  0x00000030 6572696e 672f5072 6f677261 6d6d696e ering/Programmin
  0x00000040 672f4469 73617373 656d626c 696e672d g/Disassembling-
  0x00000050 42696e61 72696573 2f466f72 7472616e Binaries/Fortran
  0x00000060 2f496e74 656c5f61 72636869 74656374 /Intel_architect
  0x00000070 7572652f 69333836 2f496e74 65676572 ure/i386/Integer
  0x00000080 5f4f7065 72617469 6f6e732f 4164645f _Operations/Add_
  0x00000090 496e742f 57697468 5f446562 75675f49 Int/With_Debug_I
  0x000000a0 6e666f00 61726763 00474e55 20466f72 nfo.argc.GNU For
  0x000000b0 7472616e 32303038 20382e32 2e30202d tran2008 8.2.0 -
  0x000000c0 6d333220 2d6d7475 6e653d67 656e6572 m32 -mtune=gener
  0x000000d0 6963202d 6d617263 683d6936 3836202d ic -march=i686 -
  0x000000e0 67676462 33202d66 696e7472 696e7369 ggdb3 -fintrinsi
  0x000000f0 632d6d6f 64756c65 732d7061 7468202f c-modules-path /
  0x00000100 7573722f 6c69622f 6763632f 7838365f usr/lib/gcc/x86_
  0x00000110 36342d6c 696e7578 2d676e75 2f382f66 64-linux-gnu/8/f
  0x00000120 696e636c 75646500 696e7465 67657228 include.integer(
  0x00000130 6b696e64 3d342900 6d61696e 00617267 kind=4).main.arg
  0x00000140 7600                                v.

Contents of the .eh_frame section:


00000000 00000014 00000000 CIE
  Version:               1
  Augmentation:          "zR"
  Code alignment factor: 1
  Data alignment factor: -4
  Return address column: 8
  Augmentation data:     1b
  DW_CFA_def_cfa: r4 (esp) ofs 4
  DW_CFA_offset: r8 (eip) at cfa-4
  DW_CFA_nop
  DW_CFA_nop

00000018 0000001c 0000001c FDE cie=00000000 pc=00000000..0000002c
  DW_CFA_advance_loc: 1 to 00000001
  DW_CFA_def_cfa_offset: 8
  DW_CFA_offset: r5 (ebp) at cfa-8
  DW_CFA_advance_loc: 2 to 00000003
  DW_CFA_def_cfa_register: r5 (ebp)
  DW_CFA_advance_loc: 40 to 0000002b
  DW_CFA_restore: r5 (ebp)
  DW_CFA_def_cfa: r4 (esp) ofs 4
  DW_CFA_nop
  DW_CFA_nop

00000038 00000030 0000003c FDE cie=00000000 pc=0000002c..00000080
  DW_CFA_advance_loc: 4 to 00000030
  DW_CFA_def_cfa: r1 (ecx) ofs 0
  DW_CFA_advance_loc: 7 to 00000037
  DW_CFA_expression: r5 (ebp) (DW_OP_breg5 (ebp): 0)
  DW_CFA_advance_loc: 4 to 0000003b
  DW_CFA_def_cfa_expression (DW_OP_breg5 (ebp): -8; DW_OP_deref)
  DW_CFA_expression: r3 (ebx) (DW_OP_breg5 (ebp): -4)
  DW_CFA_advance_loc: 63 to 0000007a
  DW_CFA_restore: r1 (ecx)
  DW_CFA_def_cfa: r1 (ecx) ofs 0
  DW_CFA_advance_loc: 1 to 0000007b
  DW_CFA_restore: r3 (ebx)
  DW_CFA_advance_loc: 1 to 0000007c
  DW_CFA_restore: r5 (ebp)
  DW_CFA_advance_loc: 3 to 0000007f
  DW_CFA_def_cfa: r4 (esp) ofs 4
  DW_CFA_nop

0000006c 00000010 00000070 FDE cie=00000000 pc=00000000..00000004
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000080 00000010 00000084 FDE cie=00000000 pc=00000000..00000004
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

