
add_reals.o:     file format elf32-i386
add_reals.o
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  00000000  00000000  0000003c  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
  2 .text         00000082  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  3 .data         00000000  00000000  00000000  000000c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  00000000  00000000  000000c6  2**0
                  ALLOC
  5 .rodata       00000024  00000000  00000000  000000c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .text.__x86.get_pc_thunk.ax 00000004  00000000  00000000  000000ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text.__x86.get_pc_thunk.bx 00000004  00000000  00000000  000000f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .debug_info   000000bd  00000000  00000000  000000f4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_abbrev 00000086  00000000  00000000  000001b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000020  00000000  00000000  00000237  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_macro  0000000c  00000000  00000000  00000257  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 12 .debug_line   00000042  00000000  00000000  00000263  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 13 .debug_str    0000015b  00000000  00000000  000002a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000002b  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY
 15 .note.GNU-stack 00000000  00000000  00000000  0000042b  2**0
                  CONTENTS, READONLY
 16 .eh_frame     00000094  00000000  00000000  0000042c  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 add_reals.f08
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l     F .text	0000002e MAIN__
00000000 l     O .rodata	0000001c options.0.3423
00000000 l    d  .rodata	00000000 .rodata
00000000 l    d  .text.__x86.get_pc_thunk.ax	00000000 .text.__x86.get_pc_thunk.ax
00000000 l    d  .text.__x86.get_pc_thunk.bx	00000000 .text.__x86.get_pc_thunk.bx
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .note.GNU-stack	00000000 .note.GNU-stack
00000000 l    d  .eh_frame	00000000 .eh_frame
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .group	00000000 .group
00000000 l    d  .group	00000000 .group
00000000 g     F .text.__x86.get_pc_thunk.ax	00000000 .hidden __x86.get_pc_thunk.ax
00000000         *UND*	00000000 _GLOBAL_OFFSET_TABLE_
0000002e g     F .text	00000054 main
00000000 g     F .text.__x86.get_pc_thunk.bx	00000000 .hidden __x86.get_pc_thunk.bx
00000000         *UND*	00000000 _gfortran_set_args
00000000         *UND*	00000000 _gfortran_set_options


Contents of section .group:
 0000 01000000 08000000                    ........        
Contents of section .group:
 0000 01000000 09000000                    ........        
Contents of section .text:
 0000 5589e583 ec10e8fc ffffff05 01000000  U...............
 0010 d9801c00 0000d95d fcd98020 000000d9  .......]... ....
 0020 5df8d945 f8d845fc d95df490 c9c38d4c  ]..E..E..].....L
 0030 240483e4 f0ff71fc 5589e553 51e8fcff  $.....q.U..SQ...
 0040 ffff81c3 02000000 89c883ec 08ff7004  ..............p.
 0050 ff30e8fc ffffff83 c41083ec 088d8300  .0..............
 0060 00000050 6a07e8fc ffffff83 c410e88d  ...Pj...........
 0070 ffffffb8 00000000 8d65f859 5b5d8d61  .........e.Y[].a
 0080 fcc3                                 ..              
Contents of section .rodata:
 0000 44000000 ff030000 00000000 01000000  D...............
 0010 01000000 00000000 1f000000 00002041  .............. A
 0020 00000040                             ...@            
Contents of section .text.__x86.get_pc_thunk.ax:
 0000 8b0424c3                             ..$.            
Contents of section .text.__x86.get_pc_thunk.bx:
 0000 8b1c24c3                             ..$.            
Contents of section .debug_info:
 0000 b9000000 04000000 00000401 c1000000  ................
 0010 0e024d01 00003600 00000000 00008200  ..M...6.........
 0020 00000000 00000000 000002bc 00000001  ................
 0030 0d610000 002e0000 00540000 00019c61  .a.......T.....a
 0040 00000003 21000000 010d6800 00000291  ....!.....h.....
 0050 00030a00 0000010d 6d000000 03910406  ........m.......
 0060 00040405 26000000 05610000 00060473  ....&....a.....s
 0070 00000004 01080f00 00000700 00000001  ................
 0080 01020000 00002e00 0000019c b5000000  ................
 0090 08610001 05b50000 00029174 08620001  .a.........t.b..
 00a0 05b50000 00029170 08630001 05b50000  .......p.c......
 00b0 0002916c 00040404 40010000 00        ...l....@....   
Contents of section .debug_abbrev:
 0000 01110125 0e130b42 0b030e1b 0e110112  ...%...B........
 0010 06101799 42170000 022e013f 19030e3a  ....B......?...:
 0020 0b3b0b49 13110112 06401896 42190113  .;.I.....@..B...
 0030 00000305 00030e3a 0b3b0b49 13021800  .......:.;.I....
 0040 00042400 0b0b3e0b 030e0000 05260049  ..$...>......&.I
 0050 13000006 0f000b0b 49130000 072e0103  ........I.......
 0060 0e3a0b3b 0b6a1936 0b110112 06401897  .:.;.j.6.....@..
 0070 42190113 00000834 0003083a 0b3b0b49  B......4...:.;.I
 0080 13021800 0000                        ......          
Contents of section .debug_aranges:
 0000 1c000000 02000000 00000400 00000000  ................
 0010 00000000 82000000 00000000 00000000  ................
Contents of section .debug_macro:
 0000 04000200 00000003 00010400           ............    
Contents of section .debug_line:
 0000 3e000000 02002400 00000101 fb0e0d00  >.....$.........
 0010 01010101 00000001 00000100 6164645f  ............add_
 0020 7265616c 732e6630 38000000 00000005  reals.f08.......
 0030 02000000 0001f892 92923c08 ac023800  ..........<...8.
 0040 0101                                 ..              
Contents of section .debug_str:
 0000 6164645f 7265616c 73006172 67760063  add_reals.argv.c
 0010 68617261 63746572 286b696e 643d3129  haracter(kind=1)
 0020 00617267 6300696e 74656765 72286b69  .argc.integer(ki
 0030 6e643d34 29002f68 6f6d652f 7562756e  nd=4)./home/ubun
 0040 74752f45 6e67696e 65657269 6e672f50  tu/Engineering/P
 0050 726f6772 616d6d69 6e672f44 69736173  rogramming/Disas
 0060 73656d62 6c696e67 2d42696e 61726965  sembling-Binarie
 0070 732f466f 72747261 6e2f496e 74656c5f  s/Fortran/Intel_
 0080 61726368 69746563 74757265 2f693338  architecture/i38
 0090 362f5265 616c5f4f 70657261 74696f6e  6/Real_Operation
 00a0 732f4164 645f5265 616c732f 57697468  s/Add_Reals/With
 00b0 5f446562 75675f49 6e666f00 6d61696e  _Debug_Info.main
 00c0 00474e55 20466f72 7472616e 32303038  .GNU Fortran2008
 00d0 20372e33 2e30202d 6d333220 2d6d7475   7.3.0 -m32 -mtu
 00e0 6e653d67 656e6572 6963202d 6d617263  ne=generic -marc
 00f0 683d6936 3836202d 67676462 33202d66  h=i686 -ggdb3 -f
 0100 696e7472 696e7369 632d6d6f 64756c65  intrinsic-module
 0110 732d7061 7468202f 7573722f 6c69622f  s-path /usr/lib/
 0120 6763632f 7838365f 36342d6c 696e7578  gcc/x86_64-linux
 0130 2d676e75 2f372f66 696e636c 75646500  -gnu/7/finclude.
 0140 7265616c 286b696e 643d3429 00616464  real(kind=4).add
 0150 5f726561 6c732e66 303800             _reals.f08.     
Contents of section .comment:
 0000 00474343 3a202855 62756e74 7520372e  .GCC: (Ubuntu 7.
 0010 332e302d 32377562 756e7475 317e3138  3.0-27ubuntu1~18
 0020 2e303429 20372e33 2e3000             .04) 7.3.0.     
Contents of section .eh_frame:
 0000 14000000 00000000 017a5200 017c0801  .........zR..|..
 0010 1b0c0404 88010000 1c000000 1c000000  ................
 0020 00000000 2e000000 00410e08 8502420d  .........A....B.
 0030 056ac50c 04040000 30000000 3c000000  .j......0...<...
 0040 2e000000 54000000 00440c01 00471005  ....T....D...G..
 0050 02750044 0f037578 06100302 757c7fc1  .u.D..ux....u|..
 0060 0c010041 c341c543 0c040400 10000000  ...A.A.C........
 0070 70000000 00000000 04000000 00000000  p...............
 0080 10000000 84000000 00000000 04000000  ................
 0090 00000000                             ....            

Disassembly of section .group:

00000000 <.group>:
program add_reals
   0:	01 00                	add    DWORD PTR [eax],eax
   2:	00 00                	add    BYTE PTR [eax],al
   4:	08 00                	or     BYTE PTR [eax],al
	...

Disassembly of section .group:

00000000 <.group>:
   0:	01 00                	add    DWORD PTR [eax],eax
   2:	00 00                	add    BYTE PTR [eax],al
   4:	09 00                	or     DWORD PTR [eax],eax
	...

Disassembly of section .text:

00000000 <MAIN__>:
   0:	55                   	push   ebp
   1:	89 e5                	mov    ebp,esp
   3:	83 ec 10             	sub    esp,0x10
   6:	e8 fc ff ff ff       	call   7 <MAIN__+0x7>
			7: R_386_PC32	__x86.get_pc_thunk.ax
   b:	05 01 00 00 00       	add    eax,0x1
			c: R_386_GOTPC	_GLOBAL_OFFSET_TABLE_
        
        implicit none

        real :: a, b, c

        a = 10.0
  10:	d9 80 1c 00 00 00    	fld    DWORD PTR [eax+0x1c]
			12: R_386_GOTOFF	.rodata
  16:	d9 5d fc             	fstp   DWORD PTR [ebp-0x4]

        b = 2.0
  19:	d9 80 20 00 00 00    	fld    DWORD PTR [eax+0x20]
			1b: R_386_GOTOFF	.rodata
  1f:	d9 5d f8             	fstp   DWORD PTR [ebp-0x8]

        c = b + a
  22:	d9 45 f8             	fld    DWORD PTR [ebp-0x8]
  25:	d8 45 fc             	fadd   DWORD PTR [ebp-0x4]
  28:	d9 5d f4             	fstp   DWORD PTR [ebp-0xc]

end program add_reals
  2b:	90                   	nop
  2c:	c9                   	leave  
  2d:	c3                   	ret    

0000002e <main>:
  2e:	8d 4c 24 04          	lea    ecx,[esp+0x4]
  32:	83 e4 f0             	and    esp,0xfffffff0
  35:	ff 71 fc             	push   DWORD PTR [ecx-0x4]
  38:	55                   	push   ebp
  39:	89 e5                	mov    ebp,esp
  3b:	53                   	push   ebx
  3c:	51                   	push   ecx
  3d:	e8 fc ff ff ff       	call   3e <main+0x10>
			3e: R_386_PC32	__x86.get_pc_thunk.bx
  42:	81 c3 02 00 00 00    	add    ebx,0x2
			44: R_386_GOTPC	_GLOBAL_OFFSET_TABLE_
  48:	89 c8                	mov    eax,ecx
  4a:	83 ec 08             	sub    esp,0x8
  4d:	ff 70 04             	push   DWORD PTR [eax+0x4]
  50:	ff 30                	push   DWORD PTR [eax]
  52:	e8 fc ff ff ff       	call   53 <main+0x25>
			53: R_386_PLT32	_gfortran_set_args
  57:	83 c4 10             	add    esp,0x10
  5a:	83 ec 08             	sub    esp,0x8
  5d:	8d 83 00 00 00 00    	lea    eax,[ebx+0x0]
			5f: R_386_GOTOFF	.rodata
  63:	50                   	push   eax
  64:	6a 07                	push   0x7
  66:	e8 fc ff ff ff       	call   67 <main+0x39>
			67: R_386_PLT32	_gfortran_set_options
  6b:	83 c4 10             	add    esp,0x10
  6e:	e8 8d ff ff ff       	call   0 <MAIN__>
  73:	b8 00 00 00 00       	mov    eax,0x0
  78:	8d 65 f8             	lea    esp,[ebp-0x8]
  7b:	59                   	pop    ecx
  7c:	5b                   	pop    ebx
  7d:	5d                   	pop    ebp
  7e:	8d 61 fc             	lea    esp,[ecx-0x4]
  81:	c3                   	ret    

Disassembly of section .rodata:

00000000 <options.0.3423>:
   0:	44                   	inc    esp
   1:	00 00                	add    BYTE PTR [eax],al
   3:	00 ff                	add    bh,bh
   5:	03 00                	add    eax,DWORD PTR [eax]
   7:	00 00                	add    BYTE PTR [eax],al
   9:	00 00                	add    BYTE PTR [eax],al
   b:	00 01                	add    BYTE PTR [ecx],al
   d:	00 00                	add    BYTE PTR [eax],al
   f:	00 01                	add    BYTE PTR [ecx],al
  11:	00 00                	add    BYTE PTR [eax],al
  13:	00 00                	add    BYTE PTR [eax],al
  15:	00 00                	add    BYTE PTR [eax],al
  17:	00 1f                	add    BYTE PTR [edi],bl
  19:	00 00                	add    BYTE PTR [eax],al
  1b:	00 00                	add    BYTE PTR [eax],al
  1d:	00 20                	add    BYTE PTR [eax],ah
  1f:	41                   	inc    ecx
  20:	00 00                	add    BYTE PTR [eax],al
  22:	00                   	.byte 0x0
  23:	40                   	inc    eax

Disassembly of section .text.__x86.get_pc_thunk.ax:

00000000 <__x86.get_pc_thunk.ax>:
   0:	8b 04 24             	mov    eax,DWORD PTR [esp]
   3:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.bx:

00000000 <__x86.get_pc_thunk.bx>:
   0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
   3:	c3                   	ret    

Disassembly of section .debug_info:

00000000 <.debug_info>:
program add_reals
   0:	b9 00 00 00 04       	mov    ecx,0x4000000
   5:	00 00                	add    BYTE PTR [eax],al
			6: R_386_32	.debug_abbrev
   7:	00 00                	add    BYTE PTR [eax],al
   9:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
   c:	c1 00 00             	rol    DWORD PTR [eax],0x0
			c: R_386_32	.debug_str
   f:	00 0e                	add    BYTE PTR [esi],cl
        a = 10.0
  11:	02 4d 01             	add    cl,BYTE PTR [ebp+0x1]
			12: R_386_32	.debug_str
  14:	00 00                	add    BYTE PTR [eax],al
  16:	36 00 00             	add    BYTE PTR ss:[eax],al
			16: R_386_32	.debug_str
        b = 2.0
  19:	00 00                	add    BYTE PTR [eax],al
			1a: R_386_32	.text
  1b:	00 00                	add    BYTE PTR [eax],al
  1d:	00 82 00 00 00 00    	add    BYTE PTR [edx+0x0],al
			22: R_386_32	.debug_line
        c = b + a
  23:	00 00                	add    BYTE PTR [eax],al
  25:	00 00                	add    BYTE PTR [eax],al
			26: R_386_32	.debug_macro
  27:	00 00                	add    BYTE PTR [eax],al
  29:	00 02                	add    BYTE PTR [edx],al
end program add_reals
  2b:	bc 00 00 00 01       	mov    esp,0x1000000
			2b: R_386_32	.debug_str
  30:	0d 61 00 00 00       	or     eax,0x61
  35:	2e 00 00             	add    BYTE PTR cs:[eax],al
			35: R_386_32	.text
  38:	00 54 00 00          	add    BYTE PTR [eax+eax*1+0x0],dl
  3c:	00 01                	add    BYTE PTR [ecx],al
  3e:	9c                   	pushf  
  3f:	61                   	popa   
  40:	00 00                	add    BYTE PTR [eax],al
  42:	00 03                	add    BYTE PTR [ebx],al
  44:	21 00                	and    DWORD PTR [eax],eax
			44: R_386_32	.debug_str
  46:	00 00                	add    BYTE PTR [eax],al
  48:	01 0d 68 00 00 00    	add    DWORD PTR ds:0x68,ecx
  4e:	02 91 00 03 0a 00    	add    dl,BYTE PTR [ecx+0xa0300]
			52: R_386_32	.debug_str
  54:	00 00                	add    BYTE PTR [eax],al
  56:	01 0d 6d 00 00 00    	add    DWORD PTR ds:0x6d,ecx
  5c:	03 91 04 06 00 04    	add    edx,DWORD PTR [ecx+0x4000604]
  62:	04 05                	add    al,0x5
  64:	26 00 00             	add    BYTE PTR es:[eax],al
			64: R_386_32	.debug_str
  67:	00 05 61 00 00 00    	add    BYTE PTR ds:0x61,al
  6d:	06                   	push   es
  6e:	04 73                	add    al,0x73
  70:	00 00                	add    BYTE PTR [eax],al
  72:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
  75:	08 0f                	or     BYTE PTR [edi],cl
			76: R_386_32	.debug_str
  77:	00 00                	add    BYTE PTR [eax],al
  79:	00 07                	add    BYTE PTR [edi],al
  7b:	00 00                	add    BYTE PTR [eax],al
			7b: R_386_32	.debug_str
  7d:	00 00                	add    BYTE PTR [eax],al
  7f:	01 01                	add    DWORD PTR [ecx],eax
  81:	02 00                	add    al,BYTE PTR [eax]
			82: R_386_32	.text
  83:	00 00                	add    BYTE PTR [eax],al
  85:	00 2e                	add    BYTE PTR [esi],ch
  87:	00 00                	add    BYTE PTR [eax],al
  89:	00 01                	add    BYTE PTR [ecx],al
  8b:	9c                   	pushf  
  8c:	b5 00                	mov    ch,0x0
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	08 61 00             	or     BYTE PTR [ecx+0x0],ah
  93:	01 05 b5 00 00 00    	add    DWORD PTR ds:0xb5,eax
  99:	02 91 74 08 62 00    	add    dl,BYTE PTR [ecx+0x620874]
  9f:	01 05 b5 00 00 00    	add    DWORD PTR ds:0xb5,eax
  a5:	02 91 70 08 63 00    	add    dl,BYTE PTR [ecx+0x630870]
  ab:	01 05 b5 00 00 00    	add    DWORD PTR ds:0xb5,eax
  b1:	02 91 6c 00 04 04    	add    dl,BYTE PTR [ecx+0x404006c]
  b7:	04 40                	add    al,0x40
			b8: R_386_32	.debug_str
  b9:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
program add_reals
   0:	01 11                	add    DWORD PTR [ecx],edx
   2:	01 25 0e 13 0b 42    	add    DWORD PTR ds:0x420b130e,esp
   8:	0b 03                	or     eax,DWORD PTR [ebx]
   a:	0e                   	push   cs
   b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
   d:	11 01                	adc    DWORD PTR [ecx],eax
   f:	12 06                	adc    al,BYTE PTR [esi]
        a = 10.0
  11:	10 17                	adc    BYTE PTR [edi],dl
  13:	99                   	cdq    
  14:	42                   	inc    edx
  15:	17                   	pop    ss
  16:	00 00                	add    BYTE PTR [eax],al
  18:	02 2e                	add    ch,BYTE PTR [esi]
        b = 2.0
  1a:	01 3f                	add    DWORD PTR [edi],edi
  1c:	19 03                	sbb    DWORD PTR [ebx],eax
  1e:	0e                   	push   cs
  1f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
  21:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
        c = b + a
  23:	49                   	dec    ecx
  24:	13 11                	adc    edx,DWORD PTR [ecx]
  26:	01 12                	add    DWORD PTR [edx],edx
  28:	06                   	push   es
  29:	40                   	inc    eax
  2a:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
end program add_reals
  30:	00 00                	add    BYTE PTR [eax],al
  32:	03 05 00 03 0e 3a    	add    eax,DWORD PTR ds:0x3a0e0300
  38:	0b 3b                	or     edi,DWORD PTR [ebx]
  3a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
  3d:	02 18                	add    bl,BYTE PTR [eax]
  3f:	00 00                	add    BYTE PTR [eax],al
  41:	04 24                	add    al,0x24
  43:	00 0b                	add    BYTE PTR [ebx],cl
  45:	0b 3e                	or     edi,DWORD PTR [esi]
  47:	0b 03                	or     eax,DWORD PTR [ebx]
  49:	0e                   	push   cs
  4a:	00 00                	add    BYTE PTR [eax],al
  4c:	05 26 00 49 13       	add    eax,0x13490026
  51:	00 00                	add    BYTE PTR [eax],al
  53:	06                   	push   es
  54:	0f 00 0b             	str    WORD PTR [ebx]
  57:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
  5a:	00 00                	add    BYTE PTR [eax],al
  5c:	07                   	pop    es
  5d:	2e 01 03             	add    DWORD PTR cs:[ebx],eax
  60:	0e                   	push   cs
  61:	3a 0b                	cmp    cl,BYTE PTR [ebx]
  63:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
  65:	6a 19                	push   0x19
  67:	36 0b 11             	or     edx,DWORD PTR ss:[ecx]
  6a:	01 12                	add    DWORD PTR [edx],edx
  6c:	06                   	push   es
  6d:	40                   	inc    eax
  6e:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
  74:	00 00                	add    BYTE PTR [eax],al
  76:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
  79:	03 08                	add    ecx,DWORD PTR [eax]
  7b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
  7d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
  7f:	49                   	dec    ecx
  80:	13 02                	adc    eax,DWORD PTR [edx]
  82:	18 00                	sbb    BYTE PTR [eax],al
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
program add_reals
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
			6: R_386_32	.debug_info
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
	...
			10: R_386_32	.text
        a = 10.0
  14:	82 00 00             	add    BYTE PTR [eax],0x0
	...

Disassembly of section .debug_macro:

00000000 <.debug_macro>:
program add_reals
   0:	04 00                	add    al,0x0
   2:	02 00                	add    al,BYTE PTR [eax]
			3: R_386_32	.debug_line
   4:	00 00                	add    BYTE PTR [eax],al
   6:	00 03                	add    BYTE PTR [ebx],al
   8:	00 01                	add    BYTE PTR [ecx],al
   a:	04 00                	add    al,0x0

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	3e 00 00             	add    BYTE PTR ds:[eax],al
   3:	00 02                	add    BYTE PTR [edx],al
   5:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
   8:	00 00                	add    BYTE PTR [eax],al
   a:	01 01                	add    DWORD PTR [ecx],eax
   c:	fb                   	sti    
   d:	0e                   	push   cs
   e:	0d 00 01 01 01       	or     eax,0x1010100
        a = 10.0
  13:	01 00                	add    DWORD PTR [eax],eax
  15:	00 00                	add    BYTE PTR [eax],al
  17:	01 00                	add    DWORD PTR [eax],eax
        b = 2.0
  19:	00 01                	add    BYTE PTR [ecx],al
  1b:	00 61 64             	add    BYTE PTR [ecx+0x64],ah
  1e:	64 5f                	fs pop edi
  20:	72 65                	jb     87 <main+0x59>
        c = b + a
  22:	61                   	popa   
  23:	6c                   	ins    BYTE PTR es:[edi],dx
  24:	73 2e                	jae    54 <main+0x26>
  26:	66 30 38             	data16 xor BYTE PTR [eax],bh
  29:	00 00                	add    BYTE PTR [eax],al
end program add_reals
  2b:	00 00                	add    BYTE PTR [eax],al
  2d:	00 00                	add    BYTE PTR [eax],al
  2f:	05 02 00 00 00       	add    eax,0x2
			31: R_386_32	.text
  34:	00 01                	add    BYTE PTR [ecx],al
  36:	f8                   	clc    
  37:	92                   	xchg   edx,eax
  38:	92                   	xchg   edx,eax
  39:	92                   	xchg   edx,eax
  3a:	3c 08                	cmp    al,0x8
  3c:	ac                   	lods   al,BYTE PTR ds:[esi]
  3d:	02 38                	add    bh,BYTE PTR [eax]
  3f:	00 01                	add    BYTE PTR [ecx],al
  41:	01                   	.byte 0x1

Disassembly of section .debug_str:

00000000 <.debug_str>:
program add_reals
   0:	61                   	popa   
   1:	64 64 5f             	fs fs pop edi
   4:	72 65                	jb     6b <.debug_str+0x6b>
   6:	61                   	popa   
   7:	6c                   	ins    BYTE PTR es:[edi],dx
   8:	73 00                	jae    a <.debug_str+0xa>
   a:	61                   	popa   
   b:	72 67                	jb     74 <.debug_str+0x74>
   d:	76 00                	jbe    f <.debug_str+0xf>
   f:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
        a = 10.0
  12:	72 61                	jb     75 <.debug_str+0x75>
  14:	63 74 65 72          	arpl   WORD PTR [ebp+eiz*2+0x72],si
  18:	28 6b 69             	sub    BYTE PTR [ebx+0x69],ch
        b = 2.0
  1b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  1c:	64 3d 31 29 00 61    	fs cmp eax,0x61002931
        c = b + a
  22:	72 67                	jb     8b <.debug_str+0x8b>
  24:	63 00                	arpl   WORD PTR [eax],ax
  26:	69 6e 74 65 67 65 72 	imul   ebp,DWORD PTR [esi+0x74],0x72656765
end program add_reals
  2d:	28 6b 69             	sub    BYTE PTR [ebx+0x69],ch
  30:	6e                   	outs   dx,BYTE PTR ds:[esi]
  31:	64 3d 34 29 00 2f    	fs cmp eax,0x2f002934
  37:	68 6f 6d 65 2f       	push   0x2f656d6f
  3c:	75 62                	jne    a0 <.debug_str+0xa0>
  3e:	75 6e                	jne    ae <.debug_str+0xae>
  40:	74 75                	je     b7 <.debug_str+0xb7>
  42:	2f                   	das    
  43:	45                   	inc    ebp
  44:	6e                   	outs   dx,BYTE PTR ds:[esi]
  45:	67 69 6e 65 65 72 69 	imul   ebp,DWORD PTR [bp+0x65],0x6e697265
  4c:	6e 
  4d:	67 2f                	addr16 das 
  4f:	50                   	push   eax
  50:	72 6f                	jb     c1 <.debug_str+0xc1>
  52:	67 72 61             	addr16 jb b6 <.debug_str+0xb6>
  55:	6d                   	ins    DWORD PTR es:[edi],dx
  56:	6d                   	ins    DWORD PTR es:[edi],dx
  57:	69 6e 67 2f 44 69 73 	imul   ebp,DWORD PTR [esi+0x67],0x7369442f
  5e:	61                   	popa   
  5f:	73 73                	jae    d4 <.debug_str+0xd4>
  61:	65 6d                	gs ins DWORD PTR es:[edi],dx
  63:	62 6c 69 6e          	bound  ebp,QWORD PTR [ecx+ebp*2+0x6e]
  67:	67 2d 42 69 6e 61    	addr16 sub eax,0x616e6942
  6d:	72 69                	jb     d8 <.debug_str+0xd8>
  6f:	65 73 2f             	gs jae a1 <.debug_str+0xa1>
  72:	46                   	inc    esi
  73:	6f                   	outs   dx,DWORD PTR ds:[esi]
  74:	72 74                	jb     ea <.debug_str+0xea>
  76:	72 61                	jb     d9 <.debug_str+0xd9>
  78:	6e                   	outs   dx,BYTE PTR ds:[esi]
  79:	2f                   	das    
  7a:	49                   	dec    ecx
  7b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  7c:	74 65                	je     e3 <.debug_str+0xe3>
  7e:	6c                   	ins    BYTE PTR es:[edi],dx
  7f:	5f                   	pop    edi
  80:	61                   	popa   
  81:	72 63                	jb     e6 <.debug_str+0xe6>
  83:	68 69 74 65 63       	push   0x63657469
  88:	74 75                	je     ff <.debug_str+0xff>
  8a:	72 65                	jb     f1 <.debug_str+0xf1>
  8c:	2f                   	das    
  8d:	69 33 38 36 2f 52    	imul   esi,DWORD PTR [ebx],0x522f3638
  93:	65 61                	gs popa 
  95:	6c                   	ins    BYTE PTR es:[edi],dx
  96:	5f                   	pop    edi
  97:	4f                   	dec    edi
  98:	70 65                	jo     ff <.debug_str+0xff>
  9a:	72 61                	jb     fd <.debug_str+0xfd>
  9c:	74 69                	je     107 <.debug_str+0x107>
  9e:	6f                   	outs   dx,DWORD PTR ds:[esi]
  9f:	6e                   	outs   dx,BYTE PTR ds:[esi]
  a0:	73 2f                	jae    d1 <.debug_str+0xd1>
  a2:	41                   	inc    ecx
  a3:	64 64 5f             	fs fs pop edi
  a6:	52                   	push   edx
  a7:	65 61                	gs popa 
  a9:	6c                   	ins    BYTE PTR es:[edi],dx
  aa:	73 2f                	jae    db <.debug_str+0xdb>
  ac:	57                   	push   edi
  ad:	69 74 68 5f 44 65 62 	imul   esi,DWORD PTR [eax+ebp*2+0x5f],0x75626544
  b4:	75 
  b5:	67 5f                	addr16 pop edi
  b7:	49                   	dec    ecx
  b8:	6e                   	outs   dx,BYTE PTR ds:[esi]
  b9:	66 6f                	outs   dx,WORD PTR ds:[esi]
  bb:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
  be:	69 6e 00 47 4e 55 20 	imul   ebp,DWORD PTR [esi+0x0],0x20554e47
  c5:	46                   	inc    esi
  c6:	6f                   	outs   dx,DWORD PTR ds:[esi]
  c7:	72 74                	jb     13d <.debug_str+0x13d>
  c9:	72 61                	jb     12c <.debug_str+0x12c>
  cb:	6e                   	outs   dx,BYTE PTR ds:[esi]
  cc:	32 30                	xor    dh,BYTE PTR [eax]
  ce:	30 38                	xor    BYTE PTR [eax],bh
  d0:	20 37                	and    BYTE PTR [edi],dh
  d2:	2e 33 2e             	xor    ebp,DWORD PTR cs:[esi]
  d5:	30 20                	xor    BYTE PTR [eax],ah
  d7:	2d 6d 33 32 20       	sub    eax,0x2032336d
  dc:	2d 6d 74 75 6e       	sub    eax,0x6e75746d
  e1:	65 3d 67 65 6e 65    	gs cmp eax,0x656e6567
  e7:	72 69                	jb     152 <.debug_str+0x152>
  e9:	63 20                	arpl   WORD PTR [eax],sp
  eb:	2d 6d 61 72 63       	sub    eax,0x6372616d
  f0:	68 3d 69 36 38       	push   0x3836693d
  f5:	36 20 2d 67 67 64 62 	and    BYTE PTR ss:0x62646767,ch
  fc:	33 20                	xor    esp,DWORD PTR [eax]
  fe:	2d 66 69 6e 74       	sub    eax,0x746e6966
 103:	72 69                	jb     16e <main+0x140>
 105:	6e                   	outs   dx,BYTE PTR ds:[esi]
 106:	73 69                	jae    171 <main+0x143>
 108:	63 2d 6d 6f 64 75    	arpl   WORD PTR ds:0x75646f6d,bp
 10e:	6c                   	ins    BYTE PTR es:[edi],dx
 10f:	65 73 2d             	gs jae 13f <.debug_str+0x13f>
 112:	70 61                	jo     175 <main+0x147>
 114:	74 68                	je     17e <main+0x150>
 116:	20 2f                	and    BYTE PTR [edi],ch
 118:	75 73                	jne    18d <main+0x15f>
 11a:	72 2f                	jb     14b <.debug_str+0x14b>
 11c:	6c                   	ins    BYTE PTR es:[edi],dx
 11d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
 124:	78 38                	js     15e <main+0x130>
 126:	36 5f                	ss pop edi
 128:	36 34 2d             	ss xor al,0x2d
 12b:	6c                   	ins    BYTE PTR es:[edi],dx
 12c:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
 133:	75 2f                	jne    164 <main+0x136>
 135:	37                   	aaa    
 136:	2f                   	das    
 137:	66 69 6e 63 6c 75    	imul   bp,WORD PTR [esi+0x63],0x756c
 13d:	64 65 00 72 65       	fs add BYTE PTR gs:[edx+0x65],dh
 142:	61                   	popa   
 143:	6c                   	ins    BYTE PTR es:[edi],dx
 144:	28 6b 69             	sub    BYTE PTR [ebx+0x69],ch
 147:	6e                   	outs   dx,BYTE PTR ds:[esi]
 148:	64 3d 34 29 00 61    	fs cmp eax,0x61002934
 14e:	64 64 5f             	fs fs pop edi
 151:	72 65                	jb     1b8 <main+0x18a>
 153:	61                   	popa   
 154:	6c                   	ins    BYTE PTR es:[edi],dx
 155:	73 2e                	jae    185 <main+0x157>
 157:	66 30 38             	data16 xor BYTE PTR [eax],bh
	...

Disassembly of section .comment:

00000000 <.comment>:
program add_reals
   0:	00 47 43             	add    BYTE PTR [edi+0x43],al
   3:	43                   	inc    ebx
   4:	3a 20                	cmp    ah,BYTE PTR [eax]
   6:	28 55 62             	sub    BYTE PTR [ebp+0x62],dl
   9:	75 6e                	jne    79 <main+0x4b>
   b:	74 75                	je     82 <main+0x54>
   d:	20 37                	and    BYTE PTR [edi],dh
   f:	2e 33 2e             	xor    ebp,DWORD PTR cs:[esi]
        a = 10.0
  12:	30 2d 32 37 75 62    	xor    BYTE PTR ds:0x62753732,ch
  18:	75 6e                	jne    88 <main+0x5a>
        b = 2.0
  1a:	74 75                	je     91 <main+0x63>
  1c:	31 7e 31             	xor    DWORD PTR [esi+0x31],edi
  1f:	38 2e                	cmp    BYTE PTR [esi],ch
  21:	30 34 29             	xor    BYTE PTR [ecx+ebp*1],dh
        c = b + a
  24:	20 37                	and    BYTE PTR [edi],dh
  26:	2e 33 2e             	xor    ebp,DWORD PTR cs:[esi]
  29:	30 00                	xor    BYTE PTR [eax],al

Disassembly of section .eh_frame:

00000000 <.eh_frame>:
   0:	14 00                	adc    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	00 00                	add    BYTE PTR [eax],al
   6:	00 00                	add    BYTE PTR [eax],al
   8:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
   b:	00 01                	add    BYTE PTR [ecx],al
   d:	7c 08                	jl     17 <.eh_frame+0x17>
   f:	01 1b                	add    DWORD PTR [ebx],ebx
  11:	0c 04                	or     al,0x4
  13:	04 88                	add    al,0x88
  15:	01 00                	add    DWORD PTR [eax],eax
  17:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  1a:	00 00                	add    BYTE PTR [eax],al
  1c:	1c 00                	sbb    al,0x0
  1e:	00 00                	add    BYTE PTR [eax],al
  20:	00 00                	add    BYTE PTR [eax],al
			20: R_386_PC32	.text
  22:	00 00                	add    BYTE PTR [eax],al
  24:	2e 00 00             	add    BYTE PTR cs:[eax],al
  27:	00 00                	add    BYTE PTR [eax],al
  29:	41                   	inc    ecx
  2a:	0e                   	push   cs
  2b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
  31:	6a c5                	push   0xffffffc5
  33:	0c 04                	or     al,0x4
  35:	04 00                	add    al,0x0
  37:	00 30                	add    BYTE PTR [eax],dh
  39:	00 00                	add    BYTE PTR [eax],al
  3b:	00 3c 00             	add    BYTE PTR [eax+eax*1],bh
  3e:	00 00                	add    BYTE PTR [eax],al
  40:	2e 00 00             	add    BYTE PTR cs:[eax],al
			40: R_386_PC32	.text
  43:	00 54 00 00          	add    BYTE PTR [eax+eax*1+0x0],dl
  47:	00 00                	add    BYTE PTR [eax],al
  49:	44                   	inc    esp
  4a:	0c 01                	or     al,0x1
  4c:	00 47 10             	add    BYTE PTR [edi+0x10],al
  4f:	05 02 75 00 44       	add    eax,0x44007502
  54:	0f 03 75 78          	lsl    esi,WORD PTR [ebp+0x78]
  58:	06                   	push   es
  59:	10 03                	adc    BYTE PTR [ebx],al
  5b:	02 75 7c             	add    dh,BYTE PTR [ebp+0x7c]
  5e:	7f c1                	jg     21 <.eh_frame+0x21>
  60:	0c 01                	or     al,0x1
  62:	00 41 c3             	add    BYTE PTR [ecx-0x3d],al
  65:	41                   	inc    ecx
  66:	c5 43 0c             	lds    eax,FWORD PTR [ebx+0xc]
  69:	04 04                	add    al,0x4
  6b:	00 10                	add    BYTE PTR [eax],dl
  6d:	00 00                	add    BYTE PTR [eax],al
  6f:	00 70 00             	add    BYTE PTR [eax+0x0],dh
  72:	00 00                	add    BYTE PTR [eax],al
  74:	00 00                	add    BYTE PTR [eax],al
			74: R_386_PC32	.text.__x86.get_pc_thunk.ax
  76:	00 00                	add    BYTE PTR [eax],al
  78:	04 00                	add    al,0x0
  7a:	00 00                	add    BYTE PTR [eax],al
  7c:	00 00                	add    BYTE PTR [eax],al
  7e:	00 00                	add    BYTE PTR [eax],al
  80:	10 00                	adc    BYTE PTR [eax],al
  82:	00 00                	add    BYTE PTR [eax],al
  84:	84 00                	test   BYTE PTR [eax],al
  86:	00 00                	add    BYTE PTR [eax],al
  88:	00 00                	add    BYTE PTR [eax],al
			88: R_386_PC32	.text.__x86.get_pc_thunk.bx
  8a:	00 00                	add    BYTE PTR [eax],al
  8c:	04 00                	add    al,0x0
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	00 00                	add    BYTE PTR [eax],al
	...
Contents of the .debug_info section:

  Compilation Unit @ offset 0x0:
   Length:        0xb9 (32-bit)
   Version:       4
   Abbrev Offset: 0x0
   Pointer Size:  4
 <0><b>: Abbrev Number: 1 (DW_TAG_compile_unit)
    <c>   DW_AT_producer    : (indirect string, offset: 0xc1): GNU Fortran2008 7.3.0 -m32 -mtune=generic -march=i686 -ggdb3 -fintrinsic-modules-path /usr/lib/gcc/x86_64-linux-gnu/7/finclude
    <10>   DW_AT_language    : 14	(Fortran 95)
    <11>   DW_AT_identifier_case: 2	(down_case)
    <12>   DW_AT_name        : (indirect string, offset: 0x14d): add_reals.f08
    <16>   DW_AT_comp_dir    : (indirect string, offset: 0x36): /home/ubuntu/Engineering/Programming/Disassembling-Binaries/Fortran/Intel_architecture/i386/Real_Operations/Add_Reals/With_Debug_Info
    <1a>   DW_AT_low_pc      : 0x0
    <1e>   DW_AT_high_pc     : 0x82
    <22>   DW_AT_stmt_list   : 0x0
    <26>   DW_AT_GNU_macros  : 0x0
 <1><2a>: Abbrev Number: 2 (DW_TAG_subprogram)
    <2b>   DW_AT_external    : 1
    <2b>   DW_AT_name        : (indirect string, offset: 0xbc): main
    <2f>   DW_AT_decl_file   : 1
    <30>   DW_AT_decl_line   : 13
    <31>   DW_AT_type        : <0x61>
    <35>   DW_AT_low_pc      : 0x2e
    <39>   DW_AT_high_pc     : 0x54
    <3d>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <3f>   DW_AT_GNU_all_tail_call_sites: 1
    <3f>   DW_AT_sibling     : <0x61>
 <2><43>: Abbrev Number: 3 (DW_TAG_formal_parameter)
    <44>   DW_AT_name        : (indirect string, offset: 0x21): argc
    <48>   DW_AT_decl_file   : 1
    <49>   DW_AT_decl_line   : 13
    <4a>   DW_AT_type        : <0x68>
    <4e>   DW_AT_location    : 2 byte block: 91 0 	(DW_OP_fbreg: 0)
 <2><51>: Abbrev Number: 3 (DW_TAG_formal_parameter)
    <52>   DW_AT_name        : (indirect string, offset: 0xa): argv
    <56>   DW_AT_decl_file   : 1
    <57>   DW_AT_decl_line   : 13
    <58>   DW_AT_type        : <0x6d>
    <5c>   DW_AT_location    : 3 byte block: 91 4 6 	(DW_OP_fbreg: 4; DW_OP_deref)
 <2><60>: Abbrev Number: 0
 <1><61>: Abbrev Number: 4 (DW_TAG_base_type)
    <62>   DW_AT_byte_size   : 4
    <63>   DW_AT_encoding    : 5	(signed)
    <64>   DW_AT_name        : (indirect string, offset: 0x26): integer(kind=4)
 <1><68>: Abbrev Number: 5 (DW_TAG_const_type)
    <69>   DW_AT_type        : <0x61>
 <1><6d>: Abbrev Number: 6 (DW_TAG_pointer_type)
    <6e>   DW_AT_byte_size   : 4
    <6f>   DW_AT_type        : <0x73>
 <1><73>: Abbrev Number: 4 (DW_TAG_base_type)
    <74>   DW_AT_byte_size   : 1
    <75>   DW_AT_encoding    : 8	(unsigned char)
    <76>   DW_AT_name        : (indirect string, offset: 0xf): character(kind=1)
 <1><7a>: Abbrev Number: 7 (DW_TAG_subprogram)
    <7b>   DW_AT_name        : (indirect string, offset: 0x0): add_reals
    <7f>   DW_AT_decl_file   : 1
    <80>   DW_AT_decl_line   : 1
    <81>   DW_AT_main_subprogram: 1
    <81>   DW_AT_calling_convention: 2	(program)
    <82>   DW_AT_low_pc      : 0x0
    <86>   DW_AT_high_pc     : 0x2e
    <8a>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <8c>   DW_AT_GNU_all_call_sites: 1
    <8c>   DW_AT_sibling     : <0xb5>
 <2><90>: Abbrev Number: 8 (DW_TAG_variable)
    <91>   DW_AT_name        : a
    <93>   DW_AT_decl_file   : 1
    <94>   DW_AT_decl_line   : 5
    <95>   DW_AT_type        : <0xb5>
    <99>   DW_AT_location    : 2 byte block: 91 74 	(DW_OP_fbreg: -12)
 <2><9c>: Abbrev Number: 8 (DW_TAG_variable)
    <9d>   DW_AT_name        : b
    <9f>   DW_AT_decl_file   : 1
    <a0>   DW_AT_decl_line   : 5
    <a1>   DW_AT_type        : <0xb5>
    <a5>   DW_AT_location    : 2 byte block: 91 70 	(DW_OP_fbreg: -16)
 <2><a8>: Abbrev Number: 8 (DW_TAG_variable)
    <a9>   DW_AT_name        : c
    <ab>   DW_AT_decl_file   : 1
    <ac>   DW_AT_decl_line   : 5
    <ad>   DW_AT_type        : <0xb5>
    <b1>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><b4>: Abbrev Number: 0
 <1><b5>: Abbrev Number: 4 (DW_TAG_base_type)
    <b6>   DW_AT_byte_size   : 4
    <b7>   DW_AT_encoding    : 4	(float)
    <b8>   DW_AT_name        : (indirect string, offset: 0x140): real(kind=4)
 <1><bc>: Abbrev Number: 0

Contents of the .debug_abbrev section:

  Number TAG (0x0)
   1      DW_TAG_compile_unit    [has children]
    DW_AT_producer     DW_FORM_strp
    DW_AT_language     DW_FORM_data1
    DW_AT_identifier_case DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT_comp_dir     DW_FORM_strp
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data4
    DW_AT_stmt_list    DW_FORM_sec_offset
    DW_AT_GNU_macros   DW_FORM_sec_offset
    DW_AT value: 0     DW_FORM value: 0
   2      DW_TAG_subprogram    [has children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data4
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   3      DW_TAG_formal_parameter    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   4      DW_TAG_base_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_encoding     DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT value: 0     DW_FORM value: 0
   5      DW_TAG_const_type    [no children]
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   6      DW_TAG_pointer_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   7      DW_TAG_subprogram    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_main_subprogram DW_FORM_flag_present
    DW_AT_calling_convention DW_FORM_data1
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data4
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   8      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0

Contents of the .debug_aranges section:

  Length:                   28
  Version:                  2
  Offset into .debug_info:  0x0
  Pointer Size:             4
  Segment Size:             0

    Address    Length
    00000000 00000082 
    00000000 00000000 

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4
  Offset into .debug_line:     0x0

 DW_MACRO_start_file - lineno: 0 filenum: 1 filename: add_reals.f08
 DW_MACRO_end_file

Raw dump of debug contents of section .debug_line:

  Offset:                      0x0
  Length:                      62
  DWARF Version:               2
  Prologue Length:             36
  Minimum Instruction Length:  1
  Initial value of 'is_stmt':  1
  Line Base:                   -5
  Line Range:                  14
  Opcode Base:                 13

 Opcodes:
  Opcode 1 has 0 args
  Opcode 2 has 1 arg
  Opcode 3 has 1 arg
  Opcode 4 has 1 arg
  Opcode 5 has 1 arg
  Opcode 6 has 0 args
  Opcode 7 has 0 args
  Opcode 8 has 0 args
  Opcode 9 has 1 arg
  Opcode 10 has 0 args
  Opcode 11 has 0 args
  Opcode 12 has 1 arg

 The Directory Table is empty.

 The File Name Table (offset 0x1c):
  Entry	Dir	Time	Size	Name
  1	0	0	0	add_reals.f08

 Line Number Statements:
  [0x0000002e]  Extended opcode 2: set Address to 0x0
  [0x00000035]  Copy
  [0x00000036]  Special opcode 235: advance Address by 16 to 0x10 and Line by 6 to 7
  [0x00000037]  Special opcode 133: advance Address by 9 to 0x19 and Line by 2 to 9
  [0x00000038]  Special opcode 133: advance Address by 9 to 0x22 and Line by 2 to 11
  [0x00000039]  Special opcode 133: advance Address by 9 to 0x2b and Line by 2 to 13
  [0x0000003a]  Special opcode 47: advance Address by 3 to 0x2e and Line by 0 to 13
  [0x0000003b]  Advance PC by constant 17 to 0x3f
  [0x0000003c]  Special opcode 159: advance Address by 11 to 0x4a and Line by 0 to 13
  [0x0000003d]  Advance PC by 56 to 0x82
  [0x0000003f]  Extended opcode 1: End of Sequence


Contents of the .debug_str section:

  0x00000000 6164645f 7265616c 73006172 67760063 add_reals.argv.c
  0x00000010 68617261 63746572 286b696e 643d3129 haracter(kind=1)
  0x00000020 00617267 6300696e 74656765 72286b69 .argc.integer(ki
  0x00000030 6e643d34 29002f68 6f6d652f 7562756e nd=4)./home/ubun
  0x00000040 74752f45 6e67696e 65657269 6e672f50 tu/Engineering/P
  0x00000050 726f6772 616d6d69 6e672f44 69736173 rogramming/Disas
  0x00000060 73656d62 6c696e67 2d42696e 61726965 sembling-Binarie
  0x00000070 732f466f 72747261 6e2f496e 74656c5f s/Fortran/Intel_
  0x00000080 61726368 69746563 74757265 2f693338 architecture/i38
  0x00000090 362f5265 616c5f4f 70657261 74696f6e 6/Real_Operation
  0x000000a0 732f4164 645f5265 616c732f 57697468 s/Add_Reals/With
  0x000000b0 5f446562 75675f49 6e666f00 6d61696e _Debug_Info.main
  0x000000c0 00474e55 20466f72 7472616e 32303038 .GNU Fortran2008
  0x000000d0 20372e33 2e30202d 6d333220 2d6d7475  7.3.0 -m32 -mtu
  0x000000e0 6e653d67 656e6572 6963202d 6d617263 ne=generic -marc
  0x000000f0 683d6936 3836202d 67676462 33202d66 h=i686 -ggdb3 -f
  0x00000100 696e7472 696e7369 632d6d6f 64756c65 intrinsic-module
  0x00000110 732d7061 7468202f 7573722f 6c69622f s-path /usr/lib/
  0x00000120 6763632f 7838365f 36342d6c 696e7578 gcc/x86_64-linux
  0x00000130 2d676e75 2f372f66 696e636c 75646500 -gnu/7/finclude.
  0x00000140 7265616c 286b696e 643d3429 00616464 real(kind=4).add
  0x00000150 5f726561 6c732e66 303800            _reals.f08.

Contents of the .eh_frame section:


00000000 00000014 00000000 CIE
  Version:               1
  Augmentation:          "zR"
  Code alignment factor: 1
  Data alignment factor: -4
  Return address column: 8
  Augmentation data:     1b
  DW_CFA_def_cfa: r4 (esp) ofs 4
  DW_CFA_offset: r8 (eip) at cfa-4
  DW_CFA_nop
  DW_CFA_nop

00000018 0000001c 0000001c FDE cie=00000000 pc=00000000..0000002e
  DW_CFA_advance_loc: 1 to 00000001
  DW_CFA_def_cfa_offset: 8
  DW_CFA_offset: r5 (ebp) at cfa-8
  DW_CFA_advance_loc: 2 to 00000003
  DW_CFA_def_cfa_register: r5 (ebp)
  DW_CFA_advance_loc: 42 to 0000002d
  DW_CFA_restore: r5 (ebp)
  DW_CFA_def_cfa: r4 (esp) ofs 4
  DW_CFA_nop
  DW_CFA_nop

00000038 00000030 0000003c FDE cie=00000000 pc=0000002e..00000082
  DW_CFA_advance_loc: 4 to 00000032
  DW_CFA_def_cfa: r1 (ecx) ofs 0
  DW_CFA_advance_loc: 7 to 00000039
  DW_CFA_expression: r5 (ebp) (DW_OP_breg5 (ebp): 0)
  DW_CFA_advance_loc: 4 to 0000003d
  DW_CFA_def_cfa_expression (DW_OP_breg5 (ebp): -8; DW_OP_deref)
  DW_CFA_expression: r3 (ebx) (DW_OP_breg5 (ebp): -4)
  DW_CFA_advance_loc: 63 to 0000007c
  DW_CFA_restore: r1 (ecx)
  DW_CFA_def_cfa: r1 (ecx) ofs 0
  DW_CFA_advance_loc: 1 to 0000007d
  DW_CFA_restore: r3 (ebx)
  DW_CFA_advance_loc: 1 to 0000007e
  DW_CFA_restore: r5 (ebp)
  DW_CFA_advance_loc: 3 to 00000081
  DW_CFA_def_cfa: r4 (esp) ofs 4
  DW_CFA_nop

0000006c 00000010 00000070 FDE cie=00000000 pc=00000000..00000004
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000080 00000010 00000084 FDE cie=00000000 pc=00000000..00000004
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

