
if_then.o:     file format elf64-x86-64
if_then.o
architecture: i386:x86-64, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x0000000000000000

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         00000182  0000000000000000  0000000000000000  00000040  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  0000000000000000  0000000000000000  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  0000000000000000  0000000000000000  000001c2  2**0
                  ALLOC
  3 .rodata       0000007c  0000000000000000  0000000000000000  000001d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .debug_info   000000f7  0000000000000000  0000000000000000  0000024c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_abbrev 0000009c  0000000000000000  0000000000000000  00000343  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000030  0000000000000000  0000000000000000  000003df  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  7 .debug_macro  0000000c  0000000000000000  0000000000000000  0000040f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  8 .debug_line   0000004a  0000000000000000  0000000000000000  0000041b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_str    00000145  0000000000000000  0000000000000000  00000465  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      0000002b  0000000000000000  0000000000000000  000005aa  2**0
                  CONTENTS, READONLY
 11 .note.GNU-stack 00000000  0000000000000000  0000000000000000  000005d5  2**0
                  CONTENTS, READONLY
 12 .eh_frame     00000058  0000000000000000  0000000000000000  000005d8  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 if_then.f08
0000000000000000 l    d  .text	0000000000000000 .text
0000000000000000 l    d  .data	0000000000000000 .data
0000000000000000 l    d  .bss	0000000000000000 .bss
0000000000000000 l    d  .rodata	0000000000000000 .rodata
0000000000000000 l     F .text	0000000000000145 MAIN__
0000000000000060 l     O .rodata	000000000000001c options.3.3507
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .note.GNU-stack	0000000000000000 .note.GNU-stack
0000000000000000 l    d  .eh_frame	0000000000000000 .eh_frame
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000         *UND*	0000000000000000 _GLOBAL_OFFSET_TABLE_
0000000000000000         *UND*	0000000000000000 _gfortran_st_write
0000000000000000         *UND*	0000000000000000 _gfortran_transfer_character_write
0000000000000000         *UND*	0000000000000000 _gfortran_st_write_done
0000000000000000         *UND*	0000000000000000 _gfortran_st_read
0000000000000000         *UND*	0000000000000000 _gfortran_transfer_integer
0000000000000000         *UND*	0000000000000000 _gfortran_st_read_done
0000000000000145 g     F .text	000000000000003d main
0000000000000000         *UND*	0000000000000000 _gfortran_set_args
0000000000000000         *UND*	0000000000000000 _gfortran_set_options


Contents of section .text:
 0000 554889e5 4881ecf0 01000048 8d050000  UH..H......H....
 0010 00004889 8518feff ffc78520 feffff08  ..H........ ....
 0020 000000c7 8510feff ff800000 00c78514  ................
 0030 feffff06 00000048 8d8510fe ffff4889  .......H......H.
 0040 c7e80000 0000488d 8510feff ffba2300  ......H.......#.
 0050 0000488d 35000000 004889c7 e8000000  ..H.5....H......
 0060 00488d85 10feffff 4889c7e8 00000000  .H......H.......
 0070 488d0500 00000048 898518fe ffffc785  H......H........
 0080 20feffff 09000000 c78510fe ffff8000   ...............
 0090 0000c785 14feffff 05000000 488d8510  ............H...
 00a0 feffff48 89c7e800 00000048 8d4dfc48  ...H.......H.M.H
 00b0 8d8510fe ffffba04 00000048 89ce4889  ...........H..H.
 00c0 c7e80000 0000488d 8510feff ff4889c7  ......H......H..
 00d0 e8000000 008b45fc 83f8057e 65488d05  ......E....~eH..
 00e0 00000000 48898518 feffffc7 8520feff  ....H........ ..
 00f0 ff0c0000 00c78510 feffff80 000000c7  ................
 0100 8514feff ff060000 00488d85 10feffff  .........H......
 0110 4889c7e8 00000000 488d8510 feffffba  H.......H.......
 0120 1e000000 488d3500 00000048 89c7e800  ....H.5....H....
 0130 00000048 8d8510fe ffff4889 c7e80000  ...H......H.....
 0140 000090c9 c3554889 e54883ec 10897dfc  .....UH..H....}.
 0150 488975f0 488b55f0 8b45fc48 89d689c7  H.u.H.U..E.H....
 0160 e8000000 00488d35 00000000 bf070000  .....H.5........
 0170 00e80000 0000e885 feffffb8 00000000  ................
 0180 c9c3                                 ..              
Contents of section .rodata:
 0000 69665f74 68656e2e 66303800 00000000  if_then.f08.....
 0010 456e7465 72206120 6e756d62 65722062  Enter a number b
 0020 65747765 656e2031 20616e64 20313020  etween 1 and 10 
 0030 2d3e204e 756d6265 7220656e 74657265  -> Number entere
 0040 64206772 65617465 72207468 616e2035  d greater than 5
 0050 21000000 00000000 00000000 00000000  !...............
 0060 44000000 ff030000 00000000 01000000  D...............
 0070 01000000 00000000 1f000000           ............    
Contents of section .debug_info:
 0000 f3000000 04000000 00000801 00000000  ................
 0010 0e020000 00000000 00000000 00000000  ................
 0020 00008201 00000000 00000000 00000000  ................
 0030 00000204 05000000 00033200 00000400  ..........2.....
 0040 00000001 0f320000 00000000 00000000  .....2..........
 0050 003d0000 00000000 00019c7d 00000005  .=.........}....
 0060 00000000 010f3900 00000291 6c050000  ......9.....l...
 0070 0000010f 7d000000 03916006 00060883  ....}.....`.....
 0080 00000002 01080000 00000700 00000001  ................
 0090 01020000 00000000 00004501 00000000  ..........E.....
 00a0 0000019c 08000000 00010532 00000002  ...........2....
 00b0 916c0900 00000000 00000065 00000000  .l.........e....
 00c0 00000009 00000000 00000000 65000000  ............e...
 00d0 00000000 09000000 00000000 00650000  .............e..
 00e0 00000000 000a0000 00000106 39000000  ............9...
 00f0 04050000 000000                      .......         
Contents of section .debug_abbrev:
 0000 01110125 0e130b42 0b030e1b 0e110112  ...%...B........
 0010 07101799 42170000 0224000b 0b3e0b03  ....B....$...>..
 0020 0e000003 26004913 0000042e 013f1903  ....&.I......?..
 0030 0e3a0b3b 0b491311 01120740 18964219  .:.;.I.....@..B.
 0040 01130000 05050003 0e3a0b3b 0b491302  .........:.;.I..
 0050 18000006 0f000b0b 49130000 072e0103  ........I.......
 0060 0e3a0b3b 0b6a1936 0b110112 07401896  .:.;.j.6.....@..
 0070 42190000 08340003 0e3a0b3b 0b491302  B....4...:.;.I..
 0080 18000009 0b001101 12070000 0a270003  .............'..
 0090 0e3a0b3b 0b49131c 0a000000           .:.;.I......    
Contents of section .debug_aranges:
 0000 2c000000 02000000 00000800 00000000  ,...............
 0010 00000000 00000000 82010000 00000000  ................
 0020 00000000 00000000 00000000 00000000  ................
Contents of section .debug_macro:
 0000 04000200 00000003 00010400           ............    
Contents of section .debug_line:
 0000 46000000 02002200 00000101 fb0e0d00  F.....".........
 0010 01010101 00000001 00000100 69665f74  ............if_t
 0020 68656e2e 66303800 00000000 00090200  hen.f08.........
 0030 00000000 00000001 b3026513 02651483  ..........e..e..
 0040 0265153c e4022e00 0101               .e.<......      
Contents of section .debug_str:
 0000 69665f74 68656e00 69665f74 68656e2e  if_then.if_then.
 0010 66303800 63686172 61637465 72286b69  f08.character(ki
 0020 6e643d31 29002f68 6f6d652f 7562756e  nd=1)./home/ubun
 0030 74752f45 6e67696e 65657269 6e672f50  tu/Engineering/P
 0040 726f6772 616d6d69 6e672f44 69736173  rogramming/Disas
 0050 73656d62 6c696e67 2d42696e 61726965  sembling-Binarie
 0060 732f466f 72747261 6e2f496e 74656c5f  s/Fortran/Intel_
 0070 61726368 69746563 74757265 2f414d44  architecture/AMD
 0080 36342f43 6f6e6469 74696f6e 616c732f  64/Conditionals/
 0090 57697468 5f446562 75675f49 6e666f00  With_Debug_Info.
 00a0 474e5520 466f7274 72616e32 30303820  GNU Fortran2008 
 00b0 372e332e 30202d6d 74756e65 3d67656e  7.3.0 -mtune=gen
 00c0 65726963 202d6d61 7263683d 7838362d  eric -march=x86-
 00d0 3634202d 67676462 33202d66 696e7472  64 -ggdb3 -fintr
 00e0 696e7369 632d6d6f 64756c65 732d7061  insic-modules-pa
 00f0 7468202f 7573722f 6c69622f 6763632f  th /usr/lib/gcc/
 0100 7838365f 36342d6c 696e7578 2d676e75  x86_64-linux-gnu
 0110 2f372f66 696e636c 75646500 6e756d31  /7/finclude.num1
 0120 006e756d 3200696e 74656765 72286b69  .num2.integer(ki
 0130 6e643d34 29006d61 696e0061 72676300  nd=4).main.argc.
 0140 61726776 00                          argv.           
Contents of section .comment:
 0000 00474343 3a202855 62756e74 7520372e  .GCC: (Ubuntu 7.
 0010 332e302d 32377562 756e7475 317e3138  3.0-27ubuntu1~18
 0020 2e303429 20372e33 2e3000             .04) 7.3.0.     
Contents of section .eh_frame:
 0000 14000000 00000000 017a5200 01781001  .........zR..x..
 0010 1b0c0708 90010000 1c000000 1c000000  ................
 0020 00000000 45010000 00410e10 8602430d  ....E....A....C.
 0030 06034001 0c070800 1c000000 3c000000  ..@.........<...
 0040 00000000 3d000000 00410e10 8602430d  ....=....A....C.
 0050 06780c07 08000000                    .x......        

Disassembly of section .text:

0000000000000000 <MAIN__>:
program if_then
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp
   4:	48 81 ec f0 01 00 00 	sub    rsp,0x1f0
      implicit none

      integer                   ::      num1
      integer, parameter        ::      num2 = 5

      print *, "Enter a number between 1 and 10 -> "
   b:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 12 <MAIN__+0x12>
			e: R_X86_64_PC32	.rodata-0x4
  12:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
  19:	c7 85 20 fe ff ff 08 	mov    DWORD PTR [rbp-0x1e0],0x8
  20:	00 00 00 
  23:	c7 85 10 fe ff ff 80 	mov    DWORD PTR [rbp-0x1f0],0x80
  2a:	00 00 00 
  2d:	c7 85 14 fe ff ff 06 	mov    DWORD PTR [rbp-0x1ec],0x6
  34:	00 00 00 
  37:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
  3e:	48 89 c7             	mov    rdi,rax
  41:	e8 00 00 00 00       	call   46 <MAIN__+0x46>
			42: R_X86_64_PLT32	_gfortran_st_write-0x4
  46:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
  4d:	ba 23 00 00 00       	mov    edx,0x23
  52:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 59 <MAIN__+0x59>
			55: R_X86_64_PC32	.rodata+0xc
  59:	48 89 c7             	mov    rdi,rax
  5c:	e8 00 00 00 00       	call   61 <MAIN__+0x61>
			5d: R_X86_64_PLT32	_gfortran_transfer_character_write-0x4
  61:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
  68:	48 89 c7             	mov    rdi,rax
  6b:	e8 00 00 00 00       	call   70 <MAIN__+0x70>
			6c: R_X86_64_PLT32	_gfortran_st_write_done-0x4
      read *, num1
  70:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 77 <MAIN__+0x77>
			73: R_X86_64_PC32	.rodata-0x4
  77:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
  7e:	c7 85 20 fe ff ff 09 	mov    DWORD PTR [rbp-0x1e0],0x9
  85:	00 00 00 
  88:	c7 85 10 fe ff ff 80 	mov    DWORD PTR [rbp-0x1f0],0x80
  8f:	00 00 00 
  92:	c7 85 14 fe ff ff 05 	mov    DWORD PTR [rbp-0x1ec],0x5
  99:	00 00 00 
  9c:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
  a3:	48 89 c7             	mov    rdi,rax
  a6:	e8 00 00 00 00       	call   ab <MAIN__+0xab>
			a7: R_X86_64_PLT32	_gfortran_st_read-0x4
  ab:	48 8d 4d fc          	lea    rcx,[rbp-0x4]
  af:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
  b6:	ba 04 00 00 00       	mov    edx,0x4
  bb:	48 89 ce             	mov    rsi,rcx
  be:	48 89 c7             	mov    rdi,rax
  c1:	e8 00 00 00 00       	call   c6 <MAIN__+0xc6>
			c2: R_X86_64_PLT32	_gfortran_transfer_integer-0x4
  c6:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
  cd:	48 89 c7             	mov    rdi,rax
  d0:	e8 00 00 00 00       	call   d5 <MAIN__+0xd5>
			d1: R_X86_64_PLT32	_gfortran_st_read_done-0x4

      if (num1 > num2) then
  d5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  d8:	83 f8 05             	cmp    eax,0x5
  db:	7e 65                	jle    142 <MAIN__+0x142>
              print *, "Number entered greater than 5!"
  dd:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # e4 <MAIN__+0xe4>
			e0: R_X86_64_PC32	.rodata-0x4
  e4:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
  eb:	c7 85 20 fe ff ff 0c 	mov    DWORD PTR [rbp-0x1e0],0xc
  f2:	00 00 00 
  f5:	c7 85 10 fe ff ff 80 	mov    DWORD PTR [rbp-0x1f0],0x80
  fc:	00 00 00 
  ff:	c7 85 14 fe ff ff 06 	mov    DWORD PTR [rbp-0x1ec],0x6
 106:	00 00 00 
 109:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
 110:	48 89 c7             	mov    rdi,rax
 113:	e8 00 00 00 00       	call   118 <MAIN__+0x118>
			114: R_X86_64_PLT32	_gfortran_st_write-0x4
 118:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
 11f:	ba 1e 00 00 00       	mov    edx,0x1e
 124:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 12b <MAIN__+0x12b>
			127: R_X86_64_PC32	.rodata+0x2f
 12b:	48 89 c7             	mov    rdi,rax
 12e:	e8 00 00 00 00       	call   133 <MAIN__+0x133>
			12f: R_X86_64_PLT32	_gfortran_transfer_character_write-0x4
 133:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
 13a:	48 89 c7             	mov    rdi,rax
 13d:	e8 00 00 00 00       	call   142 <MAIN__+0x142>
			13e: R_X86_64_PLT32	_gfortran_st_write_done-0x4
      end if

end program if_then
 142:	90                   	nop
 143:	c9                   	leave  
 144:	c3                   	ret    

0000000000000145 <main>:
 145:	55                   	push   rbp
 146:	48 89 e5             	mov    rbp,rsp
 149:	48 83 ec 10          	sub    rsp,0x10
 14d:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
 150:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
 154:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
 158:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
 15b:	48 89 d6             	mov    rsi,rdx
 15e:	89 c7                	mov    edi,eax
 160:	e8 00 00 00 00       	call   165 <main+0x20>
			161: R_X86_64_PLT32	_gfortran_set_args-0x4
 165:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 16c <main+0x27>
			168: R_X86_64_PC32	.rodata+0x5c
 16c:	bf 07 00 00 00       	mov    edi,0x7
 171:	e8 00 00 00 00       	call   176 <main+0x31>
			172: R_X86_64_PLT32	_gfortran_set_options-0x4
 176:	e8 85 fe ff ff       	call   0 <MAIN__>
 17b:	b8 00 00 00 00       	mov    eax,0x0
 180:	c9                   	leave  
 181:	c3                   	ret    

Disassembly of section .rodata:

0000000000000000 <options.3.3507-0x60>:
   0:	69 66 5f 74 68 65 6e 	imul   esp,DWORD PTR [rsi+0x5f],0x6e656874
   7:	2e 66 30 38          	data16 xor BYTE PTR cs:[rax],bh
   b:	00 00                	add    BYTE PTR [rax],al
   d:	00 00                	add    BYTE PTR [rax],al
   f:	00 45 6e             	add    BYTE PTR [rbp+0x6e],al
  12:	74 65                	je     79 <options.3.3507+0x19>
  14:	72 20                	jb     36 <options.3.3507-0x2a>
  16:	61                   	(bad)  
  17:	20 6e 75             	and    BYTE PTR [rsi+0x75],ch
  1a:	6d                   	ins    DWORD PTR es:[rdi],dx
  1b:	62                   	(bad)  
  1c:	65 72 20             	gs jb  3f <options.3.3507-0x21>
  1f:	62                   	(bad)  
  20:	65 74 77             	gs je  9a <options.3.3507+0x3a>
  23:	65 65 6e             	gs outs dx,BYTE PTR gs:[rsi]
  26:	20 31                	and    BYTE PTR [rcx],dh
  28:	20 61 6e             	and    BYTE PTR [rcx+0x6e],ah
  2b:	64 20 31             	and    BYTE PTR fs:[rcx],dh
  2e:	30 20                	xor    BYTE PTR [rax],ah
  30:	2d 3e 20 4e 75       	sub    eax,0x754e203e
  35:	6d                   	ins    DWORD PTR es:[rdi],dx
  36:	62                   	(bad)  
  37:	65 72 20             	gs jb  5a <options.3.3507-0x6>
  3a:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
  3c:	74 65                	je     a3 <options.3.3507+0x43>
  3e:	72 65                	jb     a5 <options.3.3507+0x45>
  40:	64 20 67 72          	and    BYTE PTR fs:[rdi+0x72],ah
  44:	65 61                	gs (bad) 
  46:	74 65                	je     ad <options.3.3507+0x4d>
  48:	72 20                	jb     6a <options.3.3507+0xa>
  4a:	74 68                	je     b4 <options.3.3507+0x54>
  4c:	61                   	(bad)  
  4d:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  4e:	20 35 21 00 00 00    	and    BYTE PTR [rip+0x21],dh        # 75 <options.3.3507+0x15>
	...

0000000000000060 <options.3.3507>:
  60:	44 00 00             	add    BYTE PTR [rax],r8b
  63:	00 ff                	add    bh,bh
  65:	03 00                	add    eax,DWORD PTR [rax]
  67:	00 00                	add    BYTE PTR [rax],al
  69:	00 00                	add    BYTE PTR [rax],al
  6b:	00 01                	add    BYTE PTR [rcx],al
  6d:	00 00                	add    BYTE PTR [rax],al
  6f:	00 01                	add    BYTE PTR [rcx],al
  71:	00 00                	add    BYTE PTR [rax],al
  73:	00 00                	add    BYTE PTR [rax],al
  75:	00 00                	add    BYTE PTR [rax],al
  77:	00 1f                	add    BYTE PTR [rdi],bl
  79:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
program if_then
   0:	f3 00 00             	repz add BYTE PTR [rax],al
   3:	00 04 00             	add    BYTE PTR [rax+rax*1],al
   6:	00 00                	add    BYTE PTR [rax],al
			6: R_X86_64_32	.debug_abbrev
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 01                	or     BYTE PTR [rcx],al
      print *, "Enter a number between 1 and 10 -> "
   c:	00 00                	add    BYTE PTR [rax],al
			c: R_X86_64_32	.debug_str+0xa0
   e:	00 00                	add    BYTE PTR [rax],al
  10:	0e                   	(bad)  
  11:	02 00                	add    al,BYTE PTR [rax]
			12: R_X86_64_32	.debug_str+0x8
	...
			16: R_X86_64_32	.debug_str+0x26
			1a: R_X86_64_64	.text
  1f:	00 00                	add    BYTE PTR [rax],al
  21:	00 82 01 00 00 00    	add    BYTE PTR [rdx+0x1],al
	...
			2a: R_X86_64_32	.debug_line
			2e: R_X86_64_32	.debug_macro
  2f:	00 00                	add    BYTE PTR [rax],al
  31:	00 02                	add    BYTE PTR [rdx],al
  33:	04 05                	add    al,0x5
  35:	00 00                	add    BYTE PTR [rax],al
			35: R_X86_64_32	.debug_str+0x126
  37:	00 00                	add    BYTE PTR [rax],al
  39:	03 32                	add    esi,DWORD PTR [rdx]
  3b:	00 00                	add    BYTE PTR [rax],al
  3d:	00 04 00             	add    BYTE PTR [rax+rax*1],al
			3f: R_X86_64_32	.debug_str+0x136
  40:	00 00                	add    BYTE PTR [rax],al
  42:	00 01                	add    BYTE PTR [rcx],al
  44:	0f 32                	rdmsr  
	...
			49: R_X86_64_64	.text+0x145
  4e:	00 00                	add    BYTE PTR [rax],al
  50:	00 3d 00 00 00 00    	add    BYTE PTR [rip+0x0],bh        # 56 <.debug_info+0x56>
  56:	00 00                	add    BYTE PTR [rax],al
  58:	00 01                	add    BYTE PTR [rcx],al
  5a:	9c                   	pushf  
  5b:	7d 00                	jge    5d <.debug_info+0x5d>
  5d:	00 00                	add    BYTE PTR [rax],al
  5f:	05 00 00 00 00       	add    eax,0x0
			60: R_X86_64_32	.debug_str+0x13b
  64:	01 0f                	add    DWORD PTR [rdi],ecx
  66:	39 00                	cmp    DWORD PTR [rax],eax
  68:	00 00                	add    BYTE PTR [rax],al
  6a:	02 91 6c 05 00 00    	add    dl,BYTE PTR [rcx+0x56c]
			6e: R_X86_64_32	.debug_str+0x140
      read *, num1
  70:	00 00                	add    BYTE PTR [rax],al
  72:	01 0f                	add    DWORD PTR [rdi],ecx
  74:	7d 00                	jge    76 <.debug_info+0x76>
  76:	00 00                	add    BYTE PTR [rax],al
  78:	03 91 60 06 00 06    	add    edx,DWORD PTR [rcx+0x6000660]
  7e:	08 83 00 00 00 02    	or     BYTE PTR [rbx+0x2000000],al
  84:	01 08                	add    DWORD PTR [rax],ecx
  86:	00 00                	add    BYTE PTR [rax],al
			86: R_X86_64_32	.debug_str+0x14
  88:	00 00                	add    BYTE PTR [rax],al
  8a:	07                   	(bad)  
  8b:	00 00                	add    BYTE PTR [rax],al
			8b: R_X86_64_32	.debug_str
  8d:	00 00                	add    BYTE PTR [rax],al
  8f:	01 01                	add    DWORD PTR [rcx],eax
  91:	02 00                	add    al,BYTE PTR [rax]
			92: R_X86_64_64	.text
  93:	00 00                	add    BYTE PTR [rax],al
  95:	00 00                	add    BYTE PTR [rax],al
  97:	00 00                	add    BYTE PTR [rax],al
  99:	00 45 01             	add    BYTE PTR [rbp+0x1],al
  9c:	00 00                	add    BYTE PTR [rax],al
  9e:	00 00                	add    BYTE PTR [rax],al
  a0:	00 00                	add    BYTE PTR [rax],al
  a2:	01 9c 08 00 00 00 00 	add    DWORD PTR [rax+rcx*1+0x0],ebx
			a5: R_X86_64_32	.debug_str+0x11c
  a9:	01 05 32 00 00 00    	add    DWORD PTR [rip+0x32],eax        # e1 <.debug_info+0xe1>
  af:	02 91 6c 09 00 00    	add    dl,BYTE PTR [rcx+0x96c]
			b3: R_X86_64_64	.text+0xb
  b5:	00 00                	add    BYTE PTR [rax],al
  b7:	00 00                	add    BYTE PTR [rax],al
  b9:	00 00                	add    BYTE PTR [rax],al
  bb:	65 00 00             	add    BYTE PTR gs:[rax],al
  be:	00 00                	add    BYTE PTR [rax],al
  c0:	00 00                	add    BYTE PTR [rax],al
  c2:	00 09                	add    BYTE PTR [rcx],cl
	...
			c4: R_X86_64_64	.text+0x70
  cc:	65 00 00             	add    BYTE PTR gs:[rax],al
  cf:	00 00                	add    BYTE PTR [rax],al
  d1:	00 00                	add    BYTE PTR [rax],al
  d3:	00 09                	add    BYTE PTR [rcx],cl
	...
			d5: R_X86_64_64	.text+0xdd
              print *, "Number entered greater than 5!"
  dd:	65 00 00             	add    BYTE PTR gs:[rax],al
  e0:	00 00                	add    BYTE PTR [rax],al
  e2:	00 00                	add    BYTE PTR [rax],al
  e4:	00 0a                	add    BYTE PTR [rdx],cl
  e6:	00 00                	add    BYTE PTR [rax],al
			e6: R_X86_64_32	.debug_str+0x121
  e8:	00 00                	add    BYTE PTR [rax],al
  ea:	01 06                	add    DWORD PTR [rsi],eax
  ec:	39 00                	cmp    DWORD PTR [rax],eax
  ee:	00 00                	add    BYTE PTR [rax],al
  f0:	04 05                	add    al,0x5
  f2:	00 00                	add    BYTE PTR [rax],al
  f4:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
program if_then
   0:	01 11                	add    DWORD PTR [rcx],edx
   2:	01 25 0e 13 0b 42    	add    DWORD PTR [rip+0x420b130e],esp        # 420b1316 <main+0x420b11d1>
   8:	0b 03                	or     eax,DWORD PTR [rbx]
   a:	0e                   	(bad)  
      print *, "Enter a number between 1 and 10 -> "
   b:	1b 0e                	sbb    ecx,DWORD PTR [rsi]
   d:	11 01                	adc    DWORD PTR [rcx],eax
   f:	12 07                	adc    al,BYTE PTR [rdi]
  11:	10 17                	adc    BYTE PTR [rdi],dl
  13:	99                   	cdq    
  14:	42 17                	rex.X (bad) 
  16:	00 00                	add    BYTE PTR [rax],al
  18:	02 24 00             	add    ah,BYTE PTR [rax+rax*1]
  1b:	0b 0b                	or     ecx,DWORD PTR [rbx]
  1d:	3e 0b 03             	or     eax,DWORD PTR ds:[rbx]
  20:	0e                   	(bad)  
  21:	00 00                	add    BYTE PTR [rax],al
  23:	03 26                	add    esp,DWORD PTR [rsi]
  25:	00 49 13             	add    BYTE PTR [rcx+0x13],cl
  28:	00 00                	add    BYTE PTR [rax],al
  2a:	04 2e                	add    al,0x2e
  2c:	01 3f                	add    DWORD PTR [rdi],edi
  2e:	19 03                	sbb    DWORD PTR [rbx],eax
  30:	0e                   	(bad)  
  31:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  33:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  35:	49 13 11             	adc    rdx,QWORD PTR [r9]
  38:	01 12                	add    DWORD PTR [rdx],edx
  3a:	07                   	(bad)  
  3b:	40 18 96 42 19 01 13 	sbb    BYTE PTR [rsi+0x13011942],dl
  42:	00 00                	add    BYTE PTR [rax],al
  44:	05 05 00 03 0e       	add    eax,0xe030005
  49:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  4b:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  4d:	49 13 02             	adc    rax,QWORD PTR [r10]
  50:	18 00                	sbb    BYTE PTR [rax],al
  52:	00 06                	add    BYTE PTR [rsi],al
  54:	0f 00 0b             	str    WORD PTR [rbx]
  57:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  5a:	00 00                	add    BYTE PTR [rax],al
  5c:	07                   	(bad)  
  5d:	2e 01 03             	add    DWORD PTR cs:[rbx],eax
  60:	0e                   	(bad)  
  61:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  63:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  65:	6a 19                	push   0x19
  67:	36 0b 11             	or     edx,DWORD PTR ss:[rcx]
  6a:	01 12                	add    DWORD PTR [rdx],edx
  6c:	07                   	(bad)  
  6d:	40 18 96 42 19 00 00 	sbb    BYTE PTR [rsi+0x1942],dl
      read *, num1
  74:	08 34 00             	or     BYTE PTR [rax+rax*1],dh
  77:	03 0e                	add    ecx,DWORD PTR [rsi]
  79:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  7b:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  7d:	49 13 02             	adc    rax,QWORD PTR [r10]
  80:	18 00                	sbb    BYTE PTR [rax],al
  82:	00 09                	add    BYTE PTR [rcx],cl
  84:	0b 00                	or     eax,DWORD PTR [rax]
  86:	11 01                	adc    DWORD PTR [rcx],eax
  88:	12 07                	adc    al,BYTE PTR [rdi]
  8a:	00 00                	add    BYTE PTR [rax],al
  8c:	0a 27                	or     ah,BYTE PTR [rdi]
  8e:	00 03                	add    BYTE PTR [rbx],al
  90:	0e                   	(bad)  
  91:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  93:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  95:	49 13 1c 0a          	adc    rbx,QWORD PTR [r10+rcx*1]
  99:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
program if_then
   0:	2c 00                	sub    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   4:	02 00                	add    al,BYTE PTR [rax]
   6:	00 00                	add    BYTE PTR [rax],al
			6: R_X86_64_32	.debug_info
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 00                	or     BYTE PTR [rax],al
	...
			10: R_X86_64_64	.text
      print *, "Enter a number between 1 and 10 -> "
  18:	82                   	(bad)  
  19:	01 00                	add    DWORD PTR [rax],eax
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
program if_then
   0:	04 00                	add    al,0x0
   2:	02 00                	add    al,BYTE PTR [rax]
			3: R_X86_64_32	.debug_line
   4:	00 00                	add    BYTE PTR [rax],al
   6:	00 03                	add    BYTE PTR [rbx],al
   8:	00 01                	add    BYTE PTR [rcx],al
   a:	04 00                	add    al,0x0

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
   0:	46 00 00             	rex.RX add BYTE PTR [rax],r8b
   3:	00 02                	add    BYTE PTR [rdx],al
   5:	00 22                	add    BYTE PTR [rdx],ah
   7:	00 00                	add    BYTE PTR [rax],al
   9:	00 01                	add    BYTE PTR [rcx],al
      print *, "Enter a number between 1 and 10 -> "
   b:	01 fb                	add    ebx,edi
   d:	0e                   	(bad)  
   e:	0d 00 01 01 01       	or     eax,0x1010100
  13:	01 00                	add    DWORD PTR [rax],eax
  15:	00 00                	add    BYTE PTR [rax],al
  17:	01 00                	add    DWORD PTR [rax],eax
  19:	00 01                	add    BYTE PTR [rcx],al
  1b:	00 69 66             	add    BYTE PTR [rcx+0x66],ch
  1e:	5f                   	pop    rdi
  1f:	74 68                	je     89 <options.3.3507+0x29>
  21:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
  23:	2e 66 30 38          	data16 xor BYTE PTR cs:[rax],bh
  27:	00 00                	add    BYTE PTR [rax],al
  29:	00 00                	add    BYTE PTR [rax],al
  2b:	00 00                	add    BYTE PTR [rax],al
  2d:	09 02                	or     DWORD PTR [rdx],eax
	...
			2f: R_X86_64_64	.text
  37:	01 b3 02 65 13 02    	add    DWORD PTR [rbx+0x2136502],esi
  3d:	65 14 83             	gs adc al,0x83
  40:	02 65 15             	add    ah,BYTE PTR [rbp+0x15]
  43:	3c e4                	cmp    al,0xe4
  45:	02 2e                	add    ch,BYTE PTR [rsi]
  47:	00 01                	add    BYTE PTR [rcx],al
  49:	01                   	.byte 0x1

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
program if_then
   0:	69 66 5f 74 68 65 6e 	imul   esp,DWORD PTR [rsi+0x5f],0x6e656874
   7:	00 69 66             	add    BYTE PTR [rcx+0x66],ch
   a:	5f                   	pop    rdi
      print *, "Enter a number between 1 and 10 -> "
   b:	74 68                	je     75 <.debug_str+0x75>
   d:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
   f:	2e 66 30 38          	data16 xor BYTE PTR cs:[rax],bh
  13:	00 63 68             	add    BYTE PTR [rbx+0x68],ah
  16:	61                   	(bad)  
  17:	72 61                	jb     7a <.debug_str+0x7a>
  19:	63 74 65 72          	movsxd esi,DWORD PTR [rbp+riz*2+0x72]
  1d:	28 6b 69             	sub    BYTE PTR [rbx+0x69],ch
  20:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  21:	64 3d 31 29 00 2f    	fs cmp eax,0x2f002931
  27:	68 6f 6d 65 2f       	push   0x2f656d6f
  2c:	75 62                	jne    90 <.debug_str+0x90>
  2e:	75 6e                	jne    9e <.debug_str+0x9e>
  30:	74 75                	je     a7 <.debug_str+0xa7>
  32:	2f                   	(bad)  
  33:	45 6e                	rex.RB outs dx,BYTE PTR ds:[rsi]
  35:	67 69 6e 65 65 72 69 	imul   ebp,DWORD PTR [esi+0x65],0x6e697265
  3c:	6e 
  3d:	67 2f                	addr32 (bad) 
  3f:	50                   	push   rax
  40:	72 6f                	jb     b1 <.debug_str+0xb1>
  42:	67 72 61             	addr32 jb a6 <.debug_str+0xa6>
  45:	6d                   	ins    DWORD PTR es:[rdi],dx
  46:	6d                   	ins    DWORD PTR es:[rdi],dx
  47:	69 6e 67 2f 44 69 73 	imul   ebp,DWORD PTR [rsi+0x67],0x7369442f
  4e:	61                   	(bad)  
  4f:	73 73                	jae    c4 <.debug_str+0xc4>
  51:	65 6d                	gs ins DWORD PTR es:[rdi],dx
  53:	62                   	(bad)  
  54:	6c                   	ins    BYTE PTR es:[rdi],dx
  55:	69 6e 67 2d 42 69 6e 	imul   ebp,DWORD PTR [rsi+0x67],0x6e69422d
  5c:	61                   	(bad)  
  5d:	72 69                	jb     c8 <.debug_str+0xc8>
  5f:	65 73 2f             	gs jae 91 <.debug_str+0x91>
  62:	46 6f                	rex.RX outs dx,DWORD PTR ds:[rsi]
  64:	72 74                	jb     da <.debug_str+0xda>
  66:	72 61                	jb     c9 <.debug_str+0xc9>
  68:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  69:	2f                   	(bad)  
  6a:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  6c:	74 65                	je     d3 <.debug_str+0xd3>
  6e:	6c                   	ins    BYTE PTR es:[rdi],dx
  6f:	5f                   	pop    rdi
      read *, num1
  70:	61                   	(bad)  
  71:	72 63                	jb     d6 <.debug_str+0xd6>
  73:	68 69 74 65 63       	push   0x63657469
  78:	74 75                	je     ef <.debug_str+0xef>
  7a:	72 65                	jb     e1 <.debug_str+0xe1>
  7c:	2f                   	(bad)  
  7d:	41                   	rex.B
  7e:	4d                   	rex.WRB
  7f:	44                   	rex.R
  80:	36 34 2f             	ss xor al,0x2f
  83:	43 6f                	rex.XB outs dx,DWORD PTR ds:[rsi]
  85:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  86:	64 69 74 69 6f 6e 61 	imul   esi,DWORD PTR fs:[rcx+rbp*2+0x6f],0x736c616e
  8d:	6c 73 
  8f:	2f                   	(bad)  
  90:	57                   	push   rdi
  91:	69 74 68 5f 44 65 62 	imul   esi,DWORD PTR [rax+rbp*2+0x5f],0x75626544
  98:	75 
  99:	67 5f                	addr32 pop rdi
  9b:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  9d:	66 6f                	outs   dx,WORD PTR ds:[rsi]
  9f:	00 47 4e             	add    BYTE PTR [rdi+0x4e],al
  a2:	55                   	push   rbp
  a3:	20 46 6f             	and    BYTE PTR [rsi+0x6f],al
  a6:	72 74                	jb     11c <.debug_str+0x11c>
  a8:	72 61                	jb     10b <.debug_str+0x10b>
  aa:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  ab:	32 30                	xor    dh,BYTE PTR [rax]
  ad:	30 38                	xor    BYTE PTR [rax],bh
  af:	20 37                	and    BYTE PTR [rdi],dh
  b1:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  b4:	30 20                	xor    BYTE PTR [rax],ah
  b6:	2d 6d 74 75 6e       	sub    eax,0x6e75746d
  bb:	65 3d 67 65 6e 65    	gs cmp eax,0x656e6567
  c1:	72 69                	jb     12c <.debug_str+0x12c>
  c3:	63 20                	movsxd esp,DWORD PTR [rax]
  c5:	2d 6d 61 72 63       	sub    eax,0x6372616d
  ca:	68 3d 78 38 36       	push   0x3638783d
  cf:	2d 36 34 20 2d       	sub    eax,0x2d203436
  d4:	67 67 64 62 33       	addr32 addr32 fs (bad) 
      if (num1 > num2) then
  d9:	20 2d 66 69 6e 74    	and    BYTE PTR [rip+0x746e6966],ch        # 746e6a45 <main+0x746e6900>
              print *, "Number entered greater than 5!"
  df:	72 69                	jb     14a <main+0x5>
  e1:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  e2:	73 69                	jae    14d <main+0x8>
  e4:	63 2d 6d 6f 64 75    	movsxd ebp,DWORD PTR [rip+0x75646f6d]        # 75647057 <main+0x75646f12>
  ea:	6c                   	ins    BYTE PTR es:[rdi],dx
  eb:	65 73 2d             	gs jae 11b <.debug_str+0x11b>
  ee:	70 61                	jo     151 <main+0xc>
  f0:	74 68                	je     15a <main+0x15>
  f2:	20 2f                	and    BYTE PTR [rdi],ch
  f4:	75 73                	jne    169 <main+0x24>
  f6:	72 2f                	jb     127 <.debug_str+0x127>
  f8:	6c                   	ins    BYTE PTR es:[rdi],dx
  f9:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [rdx+0x2f],0x2f636367
 100:	78 38                	js     13a <.debug_str+0x13a>
 102:	36 5f                	ss pop rdi
 104:	36 34 2d             	ss xor al,0x2d
 107:	6c                   	ins    BYTE PTR es:[rdi],dx
 108:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [rsi+0x75],0x6e672d78
 10f:	75 2f                	jne    140 <.debug_str+0x140>
 111:	37                   	(bad)  
 112:	2f                   	(bad)  
 113:	66 69 6e 63 6c 75    	imul   bp,WORD PTR [rsi+0x63],0x756c
 119:	64 65 00 6e 75       	fs add BYTE PTR gs:[rsi+0x75],ch
 11e:	6d                   	ins    DWORD PTR es:[rdi],dx
 11f:	31 00                	xor    DWORD PTR [rax],eax
 121:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 122:	75 6d                	jne    191 <main+0x4c>
 124:	32 00                	xor    al,BYTE PTR [rax]
 126:	69 6e 74 65 67 65 72 	imul   ebp,DWORD PTR [rsi+0x74],0x72656765
 12d:	28 6b 69             	sub    BYTE PTR [rbx+0x69],ch
 130:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 131:	64 3d 34 29 00 6d    	fs cmp eax,0x6d002934
 137:	61                   	(bad)  
 138:	69 6e 00 61 72 67 63 	imul   ebp,DWORD PTR [rsi+0x0],0x63677261
 13f:	00 61 72             	add    BYTE PTR [rcx+0x72],ah
end program if_then
 142:	67 76 00             	addr32 jbe 145 <main>

Disassembly of section .comment:

0000000000000000 <.comment>:
program if_then
   0:	00 47 43             	add    BYTE PTR [rdi+0x43],al
   3:	43 3a 20             	rex.XB cmp spl,BYTE PTR [r8]
   6:	28 55 62             	sub    BYTE PTR [rbp+0x62],dl
   9:	75 6e                	jne    79 <options.3.3507+0x19>
      print *, "Enter a number between 1 and 10 -> "
   b:	74 75                	je     82 <options.3.3507+0x22>
   d:	20 37                	and    BYTE PTR [rdi],dh
   f:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  12:	30 2d 32 37 75 62    	xor    BYTE PTR [rip+0x62753732],ch        # 6275374a <main+0x62753605>
  18:	75 6e                	jne    88 <options.3.3507+0x28>
  1a:	74 75                	je     91 <options.3.3507+0x31>
  1c:	31 7e 31             	xor    DWORD PTR [rsi+0x31],edi
  1f:	38 2e                	cmp    BYTE PTR [rsi],ch
  21:	30 34 29             	xor    BYTE PTR [rcx+rbp*1],dh
  24:	20 37                	and    BYTE PTR [rdi],dh
  26:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  29:	30 00                	xor    BYTE PTR [rax],al

Disassembly of section .eh_frame:

0000000000000000 <.eh_frame>:
   0:	14 00                	adc    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   4:	00 00                	add    BYTE PTR [rax],al
   6:	00 00                	add    BYTE PTR [rax],al
   8:	01 7a 52             	add    DWORD PTR [rdx+0x52],edi
   b:	00 01                	add    BYTE PTR [rcx],al
   d:	78 10                	js     1f <.eh_frame+0x1f>
   f:	01 1b                	add    DWORD PTR [rbx],ebx
  11:	0c 07                	or     al,0x7
  13:	08 90 01 00 00 1c    	or     BYTE PTR [rax+0x1c000001],dl
  19:	00 00                	add    BYTE PTR [rax],al
  1b:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  1e:	00 00                	add    BYTE PTR [rax],al
  20:	00 00                	add    BYTE PTR [rax],al
			20: R_X86_64_PC32	.text
  22:	00 00                	add    BYTE PTR [rax],al
  24:	45 01 00             	add    DWORD PTR [r8],r8d
  27:	00 00                	add    BYTE PTR [rax],al
  29:	41 0e                	rex.B (bad) 
  2b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  31:	03 40 01             	add    eax,DWORD PTR [rax+0x1]
  34:	0c 07                	or     al,0x7
  36:	08 00                	or     BYTE PTR [rax],al
  38:	1c 00                	sbb    al,0x0
  3a:	00 00                	add    BYTE PTR [rax],al
  3c:	3c 00                	cmp    al,0x0
  3e:	00 00                	add    BYTE PTR [rax],al
  40:	00 00                	add    BYTE PTR [rax],al
			40: R_X86_64_PC32	.text+0x145
  42:	00 00                	add    BYTE PTR [rax],al
  44:	3d 00 00 00 00       	cmp    eax,0x0
  49:	41 0e                	rex.B (bad) 
  4b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  51:	78 0c                	js     5f <MAIN__+0x5f>
  53:	07                   	(bad)  
  54:	08 00                	or     BYTE PTR [rax],al
	...
Contents of the .debug_info section:

  Compilation Unit @ offset 0x0:
   Length:        0xf3 (32-bit)
   Version:       4
   Abbrev Offset: 0x0
   Pointer Size:  8
 <0><b>: Abbrev Number: 1 (DW_TAG_compile_unit)
    <c>   DW_AT_producer    : (indirect string, offset: 0xa0): GNU Fortran2008 7.3.0 -mtune=generic -march=x86-64 -ggdb3 -fintrinsic-modules-path /usr/lib/gcc/x86_64-linux-gnu/7/finclude
    <10>   DW_AT_language    : 14	(Fortran 95)
    <11>   DW_AT_identifier_case: 2	(down_case)
    <12>   DW_AT_name        : (indirect string, offset: 0x8): if_then.f08
    <16>   DW_AT_comp_dir    : (indirect string, offset: 0x26): /home/ubuntu/Engineering/Programming/Disassembling-Binaries/Fortran/Intel_architecture/AMD64/Conditionals/With_Debug_Info
    <1a>   DW_AT_low_pc      : 0x0
    <22>   DW_AT_high_pc     : 0x182
    <2a>   DW_AT_stmt_list   : 0x0
    <2e>   DW_AT_GNU_macros  : 0x0
 <1><32>: Abbrev Number: 2 (DW_TAG_base_type)
    <33>   DW_AT_byte_size   : 4
    <34>   DW_AT_encoding    : 5	(signed)
    <35>   DW_AT_name        : (indirect string, offset: 0x126): integer(kind=4)
 <1><39>: Abbrev Number: 3 (DW_TAG_const_type)
    <3a>   DW_AT_type        : <0x32>
 <1><3e>: Abbrev Number: 4 (DW_TAG_subprogram)
    <3f>   DW_AT_external    : 1
    <3f>   DW_AT_name        : (indirect string, offset: 0x136): main
    <43>   DW_AT_decl_file   : 1
    <44>   DW_AT_decl_line   : 15
    <45>   DW_AT_type        : <0x32>
    <49>   DW_AT_low_pc      : 0x145
    <51>   DW_AT_high_pc     : 0x3d
    <59>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <5b>   DW_AT_GNU_all_tail_call_sites: 1
    <5b>   DW_AT_sibling     : <0x7d>
 <2><5f>: Abbrev Number: 5 (DW_TAG_formal_parameter)
    <60>   DW_AT_name        : (indirect string, offset: 0x13b): argc
    <64>   DW_AT_decl_file   : 1
    <65>   DW_AT_decl_line   : 15
    <66>   DW_AT_type        : <0x39>
    <6a>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><6d>: Abbrev Number: 5 (DW_TAG_formal_parameter)
    <6e>   DW_AT_name        : (indirect string, offset: 0x140): argv
    <72>   DW_AT_decl_file   : 1
    <73>   DW_AT_decl_line   : 15
    <74>   DW_AT_type        : <0x7d>
    <78>   DW_AT_location    : 3 byte block: 91 60 6 	(DW_OP_fbreg: -32; DW_OP_deref)
 <2><7c>: Abbrev Number: 0
 <1><7d>: Abbrev Number: 6 (DW_TAG_pointer_type)
    <7e>   DW_AT_byte_size   : 8
    <7f>   DW_AT_type        : <0x83>
 <1><83>: Abbrev Number: 2 (DW_TAG_base_type)
    <84>   DW_AT_byte_size   : 1
    <85>   DW_AT_encoding    : 8	(unsigned char)
    <86>   DW_AT_name        : (indirect string, offset: 0x14): character(kind=1)
 <1><8a>: Abbrev Number: 7 (DW_TAG_subprogram)
    <8b>   DW_AT_name        : (indirect string, offset: 0x0): if_then
    <8f>   DW_AT_decl_file   : 1
    <90>   DW_AT_decl_line   : 1
    <91>   DW_AT_main_subprogram: 1
    <91>   DW_AT_calling_convention: 2	(program)
    <92>   DW_AT_low_pc      : 0x0
    <9a>   DW_AT_high_pc     : 0x145
    <a2>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <a4>   DW_AT_GNU_all_tail_call_sites: 1
 <2><a4>: Abbrev Number: 8 (DW_TAG_variable)
    <a5>   DW_AT_name        : (indirect string, offset: 0x11c): num1
    <a9>   DW_AT_decl_file   : 1
    <aa>   DW_AT_decl_line   : 5
    <ab>   DW_AT_type        : <0x32>
    <af>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><b2>: Abbrev Number: 9 (DW_TAG_lexical_block)
    <b3>   DW_AT_low_pc      : 0xb
    <bb>   DW_AT_high_pc     : 0x65
 <2><c3>: Abbrev Number: 9 (DW_TAG_lexical_block)
    <c4>   DW_AT_low_pc      : 0x70
    <cc>   DW_AT_high_pc     : 0x65
 <2><d4>: Abbrev Number: 9 (DW_TAG_lexical_block)
    <d5>   DW_AT_low_pc      : 0xdd
    <dd>   DW_AT_high_pc     : 0x65
 <2><e5>: Abbrev Number: 10 (DW_TAG_constant)
    <e6>   DW_AT_name        : (indirect string, offset: 0x121): num2
    <ea>   DW_AT_decl_file   : 1
    <eb>   DW_AT_decl_line   : 6
    <ec>   DW_AT_type        : <0x39>
    <f0>   DW_AT_const_value : 4 byte block: 5 0 0 0 
 <2><f5>: Abbrev Number: 0
 <1><f6>: Abbrev Number: 0

Contents of the .debug_abbrev section:

  Number TAG (0x0)
   1      DW_TAG_compile_unit    [has children]
    DW_AT_producer     DW_FORM_strp
    DW_AT_language     DW_FORM_data1
    DW_AT_identifier_case DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT_comp_dir     DW_FORM_strp
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_stmt_list    DW_FORM_sec_offset
    DW_AT_GNU_macros   DW_FORM_sec_offset
    DW_AT value: 0     DW_FORM value: 0
   2      DW_TAG_base_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_encoding     DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT value: 0     DW_FORM value: 0
   3      DW_TAG_const_type    [no children]
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   4      DW_TAG_subprogram    [has children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   5      DW_TAG_formal_parameter    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   6      DW_TAG_pointer_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   7      DW_TAG_subprogram    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_main_subprogram DW_FORM_flag_present
    DW_AT_calling_convention DW_FORM_data1
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   8      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   9      DW_TAG_lexical_block    [no children]
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT value: 0     DW_FORM value: 0
   10      DW_TAG_constant    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_const_value  DW_FORM_block1
    DW_AT value: 0     DW_FORM value: 0

Contents of the .debug_aranges section:

  Length:                   44
  Version:                  2
  Offset into .debug_info:  0x0
  Pointer Size:             8
  Segment Size:             0

    Address            Length
    0000000000000000 0000000000000182 
    0000000000000000 0000000000000000 

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4
  Offset into .debug_line:     0x0

 DW_MACRO_start_file - lineno: 0 filenum: 1 filename: if_then.f08
 DW_MACRO_end_file

Raw dump of debug contents of section .debug_line:

  Offset:                      0x0
  Length:                      70
  DWARF Version:               2
  Prologue Length:             34
  Minimum Instruction Length:  1
  Initial value of 'is_stmt':  1
  Line Base:                   -5
  Line Range:                  14
  Opcode Base:                 13

 Opcodes:
  Opcode 1 has 0 args
  Opcode 2 has 1 arg
  Opcode 3 has 1 arg
  Opcode 4 has 1 arg
  Opcode 5 has 1 arg
  Opcode 6 has 0 args
  Opcode 7 has 0 args
  Opcode 8 has 0 args
  Opcode 9 has 1 arg
  Opcode 10 has 0 args
  Opcode 11 has 0 args
  Opcode 12 has 1 arg

 The Directory Table is empty.

 The File Name Table (offset 0x1c):
  Entry	Dir	Time	Size	Name
  1	0	0	0	if_then.f08

 Line Number Statements:
  [0x0000002c]  Extended opcode 2: set Address to 0x0
  [0x00000037]  Copy
  [0x00000038]  Special opcode 166: advance Address by 11 to 0xb and Line by 7 to 8
  [0x00000039]  Advance PC by 101 to 0x70
  [0x0000003b]  Special opcode 6: advance Address by 0 to 0x70 and Line by 1 to 9
  [0x0000003c]  Advance PC by 101 to 0xd5
  [0x0000003e]  Special opcode 7: advance Address by 0 to 0xd5 and Line by 2 to 11
  [0x0000003f]  Special opcode 118: advance Address by 8 to 0xdd and Line by 1 to 12
  [0x00000040]  Advance PC by 101 to 0x142
  [0x00000042]  Special opcode 8: advance Address by 0 to 0x142 and Line by 3 to 15
  [0x00000043]  Special opcode 47: advance Address by 3 to 0x145 and Line by 0 to 15
  [0x00000044]  Special opcode 215: advance Address by 15 to 0x154 and Line by 0 to 15
  [0x00000045]  Advance PC by 46 to 0x182
  [0x00000047]  Extended opcode 1: End of Sequence


Contents of the .debug_str section:

  0x00000000 69665f74 68656e00 69665f74 68656e2e if_then.if_then.
  0x00000010 66303800 63686172 61637465 72286b69 f08.character(ki
  0x00000020 6e643d31 29002f68 6f6d652f 7562756e nd=1)./home/ubun
  0x00000030 74752f45 6e67696e 65657269 6e672f50 tu/Engineering/P
  0x00000040 726f6772 616d6d69 6e672f44 69736173 rogramming/Disas
  0x00000050 73656d62 6c696e67 2d42696e 61726965 sembling-Binarie
  0x00000060 732f466f 72747261 6e2f496e 74656c5f s/Fortran/Intel_
  0x00000070 61726368 69746563 74757265 2f414d44 architecture/AMD
  0x00000080 36342f43 6f6e6469 74696f6e 616c732f 64/Conditionals/
  0x00000090 57697468 5f446562 75675f49 6e666f00 With_Debug_Info.
  0x000000a0 474e5520 466f7274 72616e32 30303820 GNU Fortran2008 
  0x000000b0 372e332e 30202d6d 74756e65 3d67656e 7.3.0 -mtune=gen
  0x000000c0 65726963 202d6d61 7263683d 7838362d eric -march=x86-
  0x000000d0 3634202d 67676462 33202d66 696e7472 64 -ggdb3 -fintr
  0x000000e0 696e7369 632d6d6f 64756c65 732d7061 insic-modules-pa
  0x000000f0 7468202f 7573722f 6c69622f 6763632f th /usr/lib/gcc/
  0x00000100 7838365f 36342d6c 696e7578 2d676e75 x86_64-linux-gnu
  0x00000110 2f372f66 696e636c 75646500 6e756d31 /7/finclude.num1
  0x00000120 006e756d 3200696e 74656765 72286b69 .num2.integer(ki
  0x00000130 6e643d34 29006d61 696e0061 72676300 nd=4).main.argc.
  0x00000140 61726776 00                         argv.

Contents of the .eh_frame section:


00000000 0000000000000014 00000000 CIE
  Version:               1
  Augmentation:          "zR"
  Code alignment factor: 1
  Data alignment factor: -8
  Return address column: 16
  Augmentation data:     1b
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_offset: r16 (rip) at cfa-8
  DW_CFA_nop
  DW_CFA_nop

00000018 000000000000001c 0000001c FDE cie=00000000 pc=0000000000000000..0000000000000145
  DW_CFA_advance_loc: 1 to 0000000000000001
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000004
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc2: 320 to 0000000000000144
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop

00000038 000000000000001c 0000003c FDE cie=00000000 pc=0000000000000145..0000000000000182
  DW_CFA_advance_loc: 1 to 0000000000000146
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000149
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 56 to 0000000000000181
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

