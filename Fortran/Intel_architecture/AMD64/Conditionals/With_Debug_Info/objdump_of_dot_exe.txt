
if_then_Fortran_AMD64_ggdb3:     file format elf64-x86-64
if_then_Fortran_AMD64_ggdb3
architecture: i386:x86-64, flags 0x00000150:
HAS_SYMS, DYNAMIC, D_PAGED
start address 0x00000000000007f0

Program Header:
    PHDR off    0x0000000000000040 vaddr 0x0000000000000040 paddr 0x0000000000000040 align 2**3
         filesz 0x00000000000001f8 memsz 0x00000000000001f8 flags r--
  INTERP off    0x0000000000000238 vaddr 0x0000000000000238 paddr 0x0000000000000238 align 2**0
         filesz 0x000000000000001c memsz 0x000000000000001c flags r--
    LOAD off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**21
         filesz 0x0000000000000cf8 memsz 0x0000000000000cf8 flags r-x
    LOAD off    0x0000000000000d70 vaddr 0x0000000000200d70 paddr 0x0000000000200d70 align 2**21
         filesz 0x00000000000002a0 memsz 0x00000000000002a8 flags rw-
 DYNAMIC off    0x0000000000000d80 vaddr 0x0000000000200d80 paddr 0x0000000000200d80 align 2**3
         filesz 0x0000000000000200 memsz 0x0000000000000200 flags rw-
    NOTE off    0x0000000000000254 vaddr 0x0000000000000254 paddr 0x0000000000000254 align 2**2
         filesz 0x0000000000000044 memsz 0x0000000000000044 flags r--
EH_FRAME off    0x0000000000000b8c vaddr 0x0000000000000b8c paddr 0x0000000000000b8c align 2**2
         filesz 0x0000000000000044 memsz 0x0000000000000044 flags r--
   STACK off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**4
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-
   RELRO off    0x0000000000000d70 vaddr 0x0000000000200d70 paddr 0x0000000000200d70 align 2**0
         filesz 0x0000000000000290 memsz 0x0000000000000290 flags r--

Dynamic Section:
  NEEDED               libgfortran.so.4
  NEEDED               libc.so.6
  INIT                 0x0000000000000738
  FINI                 0x0000000000000af4
  INIT_ARRAY           0x0000000000200d70
  INIT_ARRAYSZ         0x0000000000000008
  FINI_ARRAY           0x0000000000200d78
  FINI_ARRAYSZ         0x0000000000000008
  GNU_HASH             0x0000000000000298
  STRTAB               0x0000000000000408
  SYMTAB               0x00000000000002b8
  STRSZ                0x0000000000000154
  SYMENT               0x0000000000000018
  DEBUG                0x0000000000000000
  PLTGOT               0x0000000000200f80
  PLTRELSZ             0x00000000000000c0
  PLTREL               0x0000000000000007
  JMPREL               0x0000000000000678
  RELA                 0x00000000000005b8
  RELASZ               0x00000000000000c0
  RELAENT              0x0000000000000018
  FLAGS                0x0000000000000008
  FLAGS_1              0x0000000008000001
  VERNEED              0x0000000000000578
  VERNEEDNUM           0x0000000000000002
  VERSYM               0x000000000000055c
  RELACOUNT            0x0000000000000003

Version References:
  required from libc.so.6:
    0x09691a75 0x00 03 GLIBC_2.2.5
  required from libgfortran.so.4:
    0x0792f967 0x00 02 GFORTRAN_7

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000000238  0000000000000238  00000238  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.ABI-tag 00000020  0000000000000254  0000000000000254  00000254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000000274  0000000000000274  00000274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .gnu.hash     0000001c  0000000000000298  0000000000000298  00000298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dynsym       00000150  00000000000002b8  00000000000002b8  000002b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynstr       00000154  0000000000000408  0000000000000408  00000408  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .gnu.version  0000001c  000000000000055c  000000000000055c  0000055c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version_r 00000040  0000000000000578  0000000000000578  00000578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rela.dyn     000000c0  00000000000005b8  00000000000005b8  000005b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.plt     000000c0  0000000000000678  0000000000000678  00000678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .init         00000017  0000000000000738  0000000000000738  00000738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .plt          00000090  0000000000000750  0000000000000750  00000750  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt.got      00000008  00000000000007e0  00000000000007e0  000007e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text         00000302  00000000000007f0  00000000000007f0  000007f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .fini         00000009  0000000000000af4  0000000000000af4  00000af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       0000008c  0000000000000b00  0000000000000b00  00000b00  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame_hdr 00000044  0000000000000b8c  0000000000000b8c  00000b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .eh_frame     00000128  0000000000000bd0  0000000000000bd0  00000bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .init_array   00000008  0000000000200d70  0000000000200d70  00000d70  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 19 .fini_array   00000008  0000000000200d78  0000000000200d78  00000d78  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 20 .dynamic      00000200  0000000000200d80  0000000000200d80  00000d80  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 21 .got          00000080  0000000000200f80  0000000000200f80  00000f80  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 22 .data         00000010  0000000000201000  0000000000201000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .bss          00000008  0000000000201010  0000000000201010  00001010  2**0
                  ALLOC
 24 .comment      0000002a  0000000000000000  0000000000000000  00001010  2**0
                  CONTENTS, READONLY
 25 .debug_aranges 00000030  0000000000000000  0000000000000000  0000103a  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_info   000000f7  0000000000000000  0000000000000000  0000106a  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_abbrev 0000009c  0000000000000000  0000000000000000  00001161  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_line   0000004a  0000000000000000  0000000000000000  000011fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_str    00000145  0000000000000000  0000000000000000  00001247  2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .debug_macro  0000000c  0000000000000000  0000000000000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000000000000238 l    d  .interp	0000000000000000              .interp
0000000000000254 l    d  .note.ABI-tag	0000000000000000              .note.ABI-tag
0000000000000274 l    d  .note.gnu.build-id	0000000000000000              .note.gnu.build-id
0000000000000298 l    d  .gnu.hash	0000000000000000              .gnu.hash
00000000000002b8 l    d  .dynsym	0000000000000000              .dynsym
0000000000000408 l    d  .dynstr	0000000000000000              .dynstr
000000000000055c l    d  .gnu.version	0000000000000000              .gnu.version
0000000000000578 l    d  .gnu.version_r	0000000000000000              .gnu.version_r
00000000000005b8 l    d  .rela.dyn	0000000000000000              .rela.dyn
0000000000000678 l    d  .rela.plt	0000000000000000              .rela.plt
0000000000000738 l    d  .init	0000000000000000              .init
0000000000000750 l    d  .plt	0000000000000000              .plt
00000000000007e0 l    d  .plt.got	0000000000000000              .plt.got
00000000000007f0 l    d  .text	0000000000000000              .text
0000000000000af4 l    d  .fini	0000000000000000              .fini
0000000000000b00 l    d  .rodata	0000000000000000              .rodata
0000000000000b8c l    d  .eh_frame_hdr	0000000000000000              .eh_frame_hdr
0000000000000bd0 l    d  .eh_frame	0000000000000000              .eh_frame
0000000000200d70 l    d  .init_array	0000000000000000              .init_array
0000000000200d78 l    d  .fini_array	0000000000000000              .fini_array
0000000000200d80 l    d  .dynamic	0000000000000000              .dynamic
0000000000200f80 l    d  .got	0000000000000000              .got
0000000000201000 l    d  .data	0000000000000000              .data
0000000000201010 l    d  .bss	0000000000000000              .bss
0000000000000000 l    d  .comment	0000000000000000              .comment
0000000000000000 l    d  .debug_aranges	0000000000000000              .debug_aranges
0000000000000000 l    d  .debug_info	0000000000000000              .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000              .debug_abbrev
0000000000000000 l    d  .debug_line	0000000000000000              .debug_line
0000000000000000 l    d  .debug_str	0000000000000000              .debug_str
0000000000000000 l    d  .debug_macro	0000000000000000              .debug_macro
0000000000000000 l    df *ABS*	0000000000000000              crtstuff.c
0000000000000820 l     F .text	0000000000000000              deregister_tm_clones
0000000000000860 l     F .text	0000000000000000              register_tm_clones
00000000000008b0 l     F .text	0000000000000000              __do_global_dtors_aux
0000000000201010 l     O .bss	0000000000000001              completed.7696
0000000000200d78 l     O .fini_array	0000000000000000              __do_global_dtors_aux_fini_array_entry
00000000000008f0 l     F .text	0000000000000000              frame_dummy
0000000000200d70 l     O .init_array	0000000000000000              __frame_dummy_init_array_entry
0000000000000000 l    df *ABS*	0000000000000000              if_then.f08
00000000000008fa l     F .text	0000000000000145              MAIN__
0000000000000b70 l     O .rodata	000000000000001c              options.3.3507
0000000000000000 l    df *ABS*	0000000000000000              crtstuff.c
0000000000000cf4 l     O .eh_frame	0000000000000000              __FRAME_END__
0000000000000000 l    df *ABS*	0000000000000000              
0000000000000b8c l       .eh_frame_hdr	0000000000000000              __GNU_EH_FRAME_HDR
0000000000200f80 l     O .got	0000000000000000              _GLOBAL_OFFSET_TABLE_
0000000000200d78 l       .init_array	0000000000000000              __init_array_end
0000000000200d70 l       .init_array	0000000000000000              __init_array_start
0000000000200d80 l     O .dynamic	0000000000000000              _DYNAMIC
0000000000201000  w      .data	0000000000000000              data_start
0000000000000af0 g     F .text	0000000000000002              __libc_csu_fini
0000000000000000       F *UND*	0000000000000000              _gfortran_set_args@@GFORTRAN_7
00000000000007f0 g     F .text	000000000000002b              _start
0000000000000000  w      *UND*	0000000000000000              __gmon_start__
0000000000000000       F *UND*	0000000000000000              _gfortran_st_write@@GFORTRAN_7
0000000000000af4 g     F .fini	0000000000000000              _fini
0000000000000000       F *UND*	0000000000000000              __libc_start_main@@GLIBC_2.2.5
0000000000000000  w      *UND*	0000000000000000              _ITM_deregisterTMCloneTable
0000000000000b00 g     O .rodata	0000000000000004              _IO_stdin_used
0000000000000000  w      *UND*	0000000000000000              _ITM_registerTMCloneTable
0000000000201000 g       .data	0000000000000000              __data_start
0000000000000000       F *UND*	0000000000000000              _gfortran_st_write_done@@GFORTRAN_7
0000000000000000  w    F *UND*	0000000000000000              __cxa_finalize@@GLIBC_2.2.5
0000000000201010 g     O .data	0000000000000000              .hidden __TMC_END__
0000000000201008 g     O .data	0000000000000000              .hidden __dso_handle
0000000000000000       F *UND*	0000000000000000              _gfortran_set_options@@GFORTRAN_7
0000000000000a80 g     F .text	0000000000000065              __libc_csu_init
0000000000000000       F *UND*	0000000000000000              _gfortran_transfer_integer@@GFORTRAN_7
0000000000000000       F *UND*	0000000000000000              _gfortran_transfer_character_write@@GFORTRAN_7
0000000000201010 g       .bss	0000000000000000              __bss_start
0000000000000000       F *UND*	0000000000000000              _gfortran_st_read@@GFORTRAN_7
0000000000201018 g       .bss	0000000000000000              _end
0000000000000000       F *UND*	0000000000000000              _gfortran_st_read_done@@GFORTRAN_7
0000000000201010 g       .data	0000000000000000              _edata
0000000000000a3f g     F .text	000000000000003d              main
0000000000000738 g     F .init	0000000000000000              _init


Contents of section .interp:
 0238 2f6c6962 36342f6c 642d6c69 6e75782d  /lib64/ld-linux-
 0248 7838362d 36342e73 6f2e3200           x86-64.so.2.    
Contents of section .note.ABI-tag:
 0254 04000000 10000000 01000000 474e5500  ............GNU.
 0264 00000000 03000000 02000000 00000000  ................
Contents of section .note.gnu.build-id:
 0274 04000000 14000000 03000000 474e5500  ............GNU.
 0284 ad40d20d ef134515 9e65219f 7d2e9670  .@....E..e!.}..p
 0294 f41e834f                             ...O            
Contents of section .gnu.hash:
 0298 01000000 01000000 01000000 00000000  ................
 02a8 00000000 00000000 00000000           ............    
Contents of section .dynsym:
 02b8 00000000 00000000 00000000 00000000  ................
 02c8 00000000 00000000 ff000000 12000000  ................
 02d8 00000000 00000000 00000000 00000000  ................
 02e8 2e000000 20000000 00000000 00000000  .... ...........
 02f8 00000000 00000000 d1000000 12000000  ................
 0308 00000000 00000000 00000000 00000000  ................
 0318 2b010000 12000000 00000000 00000000  +...............
 0328 00000000 00000000 12000000 20000000  ............ ...
 0338 00000000 00000000 00000000 00000000  ................
 0348 3d000000 20000000 00000000 00000000  =... ...........
 0358 00000000 00000000 80000000 12000000  ................
 0368 00000000 00000000 00000000 00000000  ................
 0378 1c010000 22000000 00000000 00000000  ...."...........
 0388 00000000 00000000 bb000000 12000000  ................
 0398 00000000 00000000 00000000 00000000  ................
 03a8 e4000000 12000000 00000000 00000000  ................
 03b8 00000000 00000000 98000000 12000000  ................
 03c8 00000000 00000000 00000000 00000000  ................
 03d8 57000000 12000000 00000000 00000000  W...............
 03e8 00000000 00000000 69000000 12000000  ........i.......
 03f8 00000000 00000000 00000000 00000000  ................
Contents of section .dynstr:
 0408 006c6962 67666f72 7472616e 2e736f2e  .libgfortran.so.
 0418 34005f49 544d5f64 65726567 69737465  4._ITM_deregiste
 0428 72544d43 6c6f6e65 5461626c 65005f5f  rTMCloneTable.__
 0438 676d6f6e 5f737461 72745f5f 005f4954  gmon_start__._IT
 0448 4d5f7265 67697374 6572544d 436c6f6e  M_registerTMClon
 0458 65546162 6c65005f 67666f72 7472616e  eTable._gfortran
 0468 5f73745f 72656164 005f6766 6f727472  _st_read._gfortr
 0478 616e5f73 745f7265 61645f64 6f6e6500  an_st_read_done.
 0488 5f67666f 72747261 6e5f7374 5f777269  _gfortran_st_wri
 0498 74655f64 6f6e6500 5f67666f 72747261  te_done._gfortra
 04a8 6e5f7472 616e7366 65725f63 68617261  n_transfer_chara
 04b8 63746572 5f777269 7465005f 67666f72  cter_write._gfor
 04c8 7472616e 5f736574 5f6f7074 696f6e73  tran_set_options
 04d8 005f6766 6f727472 616e5f73 745f7772  ._gfortran_st_wr
 04e8 69746500 5f67666f 72747261 6e5f7472  ite._gfortran_tr
 04f8 616e7366 65725f69 6e746567 6572005f  ansfer_integer._
 0508 67666f72 7472616e 5f736574 5f617267  gfortran_set_arg
 0518 73006c69 62632e73 6f2e3600 5f5f6378  s.libc.so.6.__cx
 0528 615f6669 6e616c69 7a65005f 5f6c6962  a_finalize.__lib
 0538 635f7374 6172745f 6d61696e 00474c49  c_start_main.GLI
 0548 42435f32 2e322e35 0047464f 52545241  BC_2.2.5.GFORTRA
 0558 4e5f3700                             N_7.            
Contents of section .gnu.version:
 055c 00000200 00000200 03000000 00000200  ................
 056c 03000200 02000200 02000200           ............    
Contents of section .gnu.version_r:
 0578 01000100 12010000 10000000 20000000  ............ ...
 0588 751a6909 00000300 3d010000 00000000  u.i.....=.......
 0598 01000100 01000000 10000000 00000000  ................
 05a8 67f99207 00000200 49010000 00000000  g.......I.......
Contents of section .rela.dyn:
 05b8 700d2000 00000000 08000000 00000000  p. .............
 05c8 f0080000 00000000 780d2000 00000000  ........x. .....
 05d8 08000000 00000000 b0080000 00000000  ................
 05e8 08102000 00000000 08000000 00000000  .. .............
 05f8 08102000 00000000 d80f2000 00000000  .. ....... .....
 0608 06000000 02000000 00000000 00000000  ................
 0618 e00f2000 00000000 06000000 04000000  .. .............
 0628 00000000 00000000 e80f2000 00000000  .......... .....
 0638 06000000 05000000 00000000 00000000  ................
 0648 f00f2000 00000000 06000000 06000000  .. .............
 0658 00000000 00000000 f80f2000 00000000  .......... .....
 0668 06000000 08000000 00000000 00000000  ................
Contents of section .rela.plt:
 0678 980f2000 00000000 07000000 01000000  .. .............
 0688 00000000 00000000 a00f2000 00000000  .......... .....
 0698 07000000 03000000 00000000 00000000  ................
 06a8 a80f2000 00000000 07000000 07000000  .. .............
 06b8 00000000 00000000 b00f2000 00000000  .......... .....
 06c8 07000000 09000000 00000000 00000000  ................
 06d8 b80f2000 00000000 07000000 0a000000  .. .............
 06e8 00000000 00000000 c00f2000 00000000  .......... .....
 06f8 07000000 0b000000 00000000 00000000  ................
 0708 c80f2000 00000000 07000000 0c000000  .. .............
 0718 00000000 00000000 d00f2000 00000000  .......... .....
 0728 07000000 0d000000 00000000 00000000  ................
Contents of section .init:
 0738 4883ec08 488b0595 08200048 85c07402  H...H.... .H..t.
 0748 ffd04883 c408c3                      ..H....         
Contents of section .plt:
 0750 ff353208 2000ff25 34082000 0f1f4000  .52. ..%4. ...@.
 0760 ff253208 20006800 000000e9 e0ffffff  .%2. .h.........
 0770 ff252a08 20006801 000000e9 d0ffffff  .%*. .h.........
 0780 ff252208 20006802 000000e9 c0ffffff  .%". .h.........
 0790 ff251a08 20006803 000000e9 b0ffffff  .%.. .h.........
 07a0 ff251208 20006804 000000e9 a0ffffff  .%.. .h.........
 07b0 ff250a08 20006805 000000e9 90ffffff  .%.. .h.........
 07c0 ff250208 20006806 000000e9 80ffffff  .%.. .h.........
 07d0 ff25fa07 20006807 000000e9 70ffffff  .%.. .h.....p...
Contents of section .plt.got:
 07e0 ff251208 20006690                    .%.. .f.        
Contents of section .text:
 07f0 31ed4989 d15e4889 e24883e4 f050544c  1.I..^H..H...PTL
 0800 8d05ea02 0000488d 0d730200 00488d3d  ......H..s...H.=
 0810 2b020000 ff15c607 2000f40f 1f440000  +....... ....D..
 0820 488d3de9 07200055 488d05e1 07200048  H.=.. .UH.... .H
 0830 39f84889 e5741948 8b05aa07 20004885  9.H..t.H.... .H.
 0840 c0740d5d ffe0662e 0f1f8400 00000000  .t.]..f.........
 0850 5dc30f1f 4000662e 0f1f8400 00000000  ]...@.f.........
 0860 488d3da9 07200048 8d35a207 20005548  H.=.. .H.5.. .UH
 0870 29fe4889 e548c1fe 034889f0 48c1e83f  ).H..H...H..H..?
 0880 4801c648 d1fe7418 488b0561 07200048  H..H..t.H..a. .H
 0890 85c0740c 5dffe066 0f1f8400 00000000  ..t.]..f........
 08a0 5dc30f1f 4000662e 0f1f8400 00000000  ]...@.f.........
 08b0 803d5907 20000075 2f48833d 37072000  .=Y. ..u/H.=7. .
 08c0 00554889 e5740c48 8b3d3a07 2000e80d  .UH..t.H.=:. ...
 08d0 ffffffe8 48ffffff c6053107 2000015d  ....H.....1. ..]
 08e0 c30f1f80 00000000 f3c3660f 1f440000  ..........f..D..
 08f0 554889e5 5de966ff ffff5548 89e54881  UH..].f...UH..H.
 0900 ecf00100 00488d05 04020000 48898518  .....H......H...
 0910 feffffc7 8520feff ff080000 00c78510  ..... ..........
 0920 feffff80 000000c7 8514feff ff060000  ................
 0930 00488d85 10feffff 4889c7e8 30feffff  .H......H...0...
 0940 488d8510 feffffba 23000000 488d35cd  H.......#...H.5.
 0950 01000048 89c7e855 feffff48 8d8510fe  ...H...U...H....
 0960 ffff4889 c7e816fe ffff488d 059f0100  ..H.......H.....
 0970 00488985 18feffff c78520fe ffff0900  .H........ .....
 0980 0000c785 10feffff 80000000 c78514fe  ................
 0990 ffff0500 0000488d 8510feff ff4889c7  ......H......H..
 09a0 e81bfeff ff488d4d fc488d85 10feffff  .....H.M.H......
 09b0 ba040000 004889ce 4889c7e8 e0fdffff  .....H..H.......
 09c0 488d8510 feffff48 89c7e801 feffff8b  H......H........
 09d0 45fc83f8 057e6548 8d053201 00004889  E....~eH..2...H.
 09e0 8518feff ffc78520 feffff0c 000000c7  ....... ........
 09f0 8510feff ff800000 00c78514 feffff06  ................
 0a00 00000048 8d8510fe ffff4889 c7e85efd  ...H......H...^.
 0a10 ffff488d 8510feff ffba1e00 0000488d  ..H...........H.
 0a20 351e0100 004889c7 e883fdff ff488d85  5....H.......H..
 0a30 10feffff 4889c7e8 44fdffff 90c9c355  ....H...D......U
 0a40 4889e548 83ec1089 7dfc4889 75f0488b  H..H....}.H.u.H.
 0a50 55f08b45 fc4889d6 89c7e801 fdffff48  U..E.H.........H
 0a60 8d350a01 0000bf07 000000e8 20fdffff  .5.......... ...
 0a70 e885feff ffb80000 0000c9c3 0f1f4000  ..............@.
 0a80 41574156 4989d741 5541544c 8d25de02  AWAVI..AUATL.%..
 0a90 20005548 8d2dde02 20005341 89fd4989   .UH.-.. .SA..I.
 0aa0 f64c29e5 4883ec08 48c1fd03 e887fcff  .L).H...H.......
 0ab0 ff4885ed 742031db 0f1f8400 00000000  .H..t 1.........
 0ac0 4c89fa4c 89f64489 ef41ff14 dc4883c3  L..L..D..A...H..
 0ad0 014839dd 75ea4883 c4085b5d 415c415d  .H9.u.H...[]A\A]
 0ae0 415e415f c390662e 0f1f8400 00000000  A^A_..f.........
 0af0 f3c3                                 ..              
Contents of section .fini:
 0af4 4883ec08 4883c408 c3                 H...H....       
Contents of section .rodata:
 0b00 01000200 00000000 00000000 00000000  ................
 0b10 69665f74 68656e2e 66303800 00000000  if_then.f08.....
 0b20 456e7465 72206120 6e756d62 65722062  Enter a number b
 0b30 65747765 656e2031 20616e64 20313020  etween 1 and 10 
 0b40 2d3e204e 756d6265 7220656e 74657265  -> Number entere
 0b50 64206772 65617465 72207468 616e2035  d greater than 5
 0b60 21000000 00000000 00000000 00000000  !...............
 0b70 44000000 ff030000 00000000 01000000  D...............
 0b80 01000000 00000000 1f000000           ............    
Contents of section .eh_frame_hdr:
 0b8c 011b033b 40000000 07000000 c4fbffff  ...;@...........
 0b9c 8c000000 54fcffff b4000000 64fcffff  ....T.......d...
 0bac 5c000000 6efdffff cc000000 b3feffff  \...n...........
 0bbc ec000000 f4feffff 0c010000 64ffffff  ............d...
 0bcc 54010000                             T...            
Contents of section .eh_frame:
 0bd0 14000000 00000000 017a5200 01781001  .........zR..x..
 0be0 1b0c0708 90010710 14000000 1c000000  ................
 0bf0 00fcffff 2b000000 00000000 00000000  ....+...........
 0c00 14000000 00000000 017a5200 01781001  .........zR..x..
 0c10 1b0c0708 90010000 24000000 1c000000  ........$.......
 0c20 30fbffff 90000000 000e1046 0e184a0f  0..........F..J.
 0c30 0b770880 003f1a3b 2a332422 00000000  .w...?.;*3$"....
 0c40 14000000 44000000 98fbffff 08000000  ....D...........
 0c50 00000000 00000000 1c000000 5c000000  ............\...
 0c60 9afcffff 45010000 00410e10 8602430d  ....E....A....C.
 0c70 06034001 0c070800 1c000000 7c000000  ..@.........|...
 0c80 bffdffff 3d000000 00410e10 8602430d  ....=....A....C.
 0c90 06780c07 08000000 44000000 9c000000  .x......D.......
 0ca0 e0fdffff 65000000 00420e10 8f02420e  ....e....B....B.
 0cb0 188e0345 0e208d04 420e288c 05480e30  ...E. ..B.(..H.0
 0cc0 8606480e 3883074d 0e40720e 38410e30  ..H.8..M.@r.8A.0
 0cd0 410e2842 0e20420e 18420e10 420e0800  A.(B. B..B..B...
 0ce0 10000000 e4000000 08feffff 02000000  ................
 0cf0 00000000 00000000                    ........        
Contents of section .init_array:
 200d70 f0080000 00000000                    ........        
Contents of section .fini_array:
 200d78 b0080000 00000000                    ........        
Contents of section .dynamic:
 200d80 01000000 00000000 01000000 00000000  ................
 200d90 01000000 00000000 12010000 00000000  ................
 200da0 0c000000 00000000 38070000 00000000  ........8.......
 200db0 0d000000 00000000 f40a0000 00000000  ................
 200dc0 19000000 00000000 700d2000 00000000  ........p. .....
 200dd0 1b000000 00000000 08000000 00000000  ................
 200de0 1a000000 00000000 780d2000 00000000  ........x. .....
 200df0 1c000000 00000000 08000000 00000000  ................
 200e00 f5feff6f 00000000 98020000 00000000  ...o............
 200e10 05000000 00000000 08040000 00000000  ................
 200e20 06000000 00000000 b8020000 00000000  ................
 200e30 0a000000 00000000 54010000 00000000  ........T.......
 200e40 0b000000 00000000 18000000 00000000  ................
 200e50 15000000 00000000 00000000 00000000  ................
 200e60 03000000 00000000 800f2000 00000000  .......... .....
 200e70 02000000 00000000 c0000000 00000000  ................
 200e80 14000000 00000000 07000000 00000000  ................
 200e90 17000000 00000000 78060000 00000000  ........x.......
 200ea0 07000000 00000000 b8050000 00000000  ................
 200eb0 08000000 00000000 c0000000 00000000  ................
 200ec0 09000000 00000000 18000000 00000000  ................
 200ed0 1e000000 00000000 08000000 00000000  ................
 200ee0 fbffff6f 00000000 01000008 00000000  ...o............
 200ef0 feffff6f 00000000 78050000 00000000  ...o....x.......
 200f00 ffffff6f 00000000 02000000 00000000  ...o............
 200f10 f0ffff6f 00000000 5c050000 00000000  ...o....\.......
 200f20 f9ffff6f 00000000 03000000 00000000  ...o............
 200f30 00000000 00000000 00000000 00000000  ................
 200f40 00000000 00000000 00000000 00000000  ................
 200f50 00000000 00000000 00000000 00000000  ................
 200f60 00000000 00000000 00000000 00000000  ................
 200f70 00000000 00000000 00000000 00000000  ................
Contents of section .got:
 200f80 800d2000 00000000 00000000 00000000  .. .............
 200f90 00000000 00000000 66070000 00000000  ........f.......
 200fa0 76070000 00000000 86070000 00000000  v...............
 200fb0 96070000 00000000 a6070000 00000000  ................
 200fc0 b6070000 00000000 c6070000 00000000  ................
 200fd0 d6070000 00000000 00000000 00000000  ................
 200fe0 00000000 00000000 00000000 00000000  ................
 200ff0 00000000 00000000 00000000 00000000  ................
Contents of section .data:
 201000 00000000 00000000 08102000 00000000  .......... .....
Contents of section .comment:
 0000 4743433a 20285562 756e7475 20372e33  GCC: (Ubuntu 7.3
 0010 2e302d32 37756275 6e747531 7e31382e  .0-27ubuntu1~18.
 0020 30342920 372e332e 3000               04) 7.3.0.      
Contents of section .debug_aranges:
 0000 2c000000 02000000 00000800 00000000  ,...............
 0010 fa080000 00000000 82010000 00000000  ................
 0020 00000000 00000000 00000000 00000000  ................
Contents of section .debug_info:
 0000 f3000000 04000000 00000801 a0000000  ................
 0010 0e020800 00002600 0000fa08 00000000  ......&.........
 0020 00008201 00000000 00000000 00000000  ................
 0030 00000204 05260100 00033200 00000436  .....&....2....6
 0040 01000001 0f320000 003f0a00 00000000  .....2...?......
 0050 003d0000 00000000 00019c7d 00000005  .=.........}....
 0060 3b010000 010f3900 00000291 6c054001  ;.....9.....l.@.
 0070 0000010f 7d000000 03916006 00060883  ....}.....`.....
 0080 00000002 01081400 00000700 00000001  ................
 0090 0102fa08 00000000 00004501 00000000  ..........E.....
 00a0 0000019c 081c0100 00010532 00000002  ...........2....
 00b0 916c0905 09000000 00000065 00000000  .l.........e....
 00c0 00000009 6a090000 00000000 65000000  ....j.......e...
 00d0 00000000 09d70900 00000000 00650000  .............e..
 00e0 00000000 000a2101 00000106 39000000  ......!.....9...
 00f0 04050000 000000                      .......         
Contents of section .debug_abbrev:
 0000 01110125 0e130b42 0b030e1b 0e110112  ...%...B........
 0010 07101799 42170000 0224000b 0b3e0b03  ....B....$...>..
 0020 0e000003 26004913 0000042e 013f1903  ....&.I......?..
 0030 0e3a0b3b 0b491311 01120740 18964219  .:.;.I.....@..B.
 0040 01130000 05050003 0e3a0b3b 0b491302  .........:.;.I..
 0050 18000006 0f000b0b 49130000 072e0103  ........I.......
 0060 0e3a0b3b 0b6a1936 0b110112 07401896  .:.;.j.6.....@..
 0070 42190000 08340003 0e3a0b3b 0b491302  B....4...:.;.I..
 0080 18000009 0b001101 12070000 0a270003  .............'..
 0090 0e3a0b3b 0b49131c 0a000000           .:.;.I......    
Contents of section .debug_line:
 0000 46000000 02002200 00000101 fb0e0d00  F.....".........
 0010 01010101 00000001 00000100 69665f74  ............if_t
 0020 68656e2e 66303800 00000000 000902fa  hen.f08.........
 0030 08000000 00000001 b3026513 02651483  ..........e..e..
 0040 0265153c e4022e00 0101               .e.<......      
Contents of section .debug_str:
 0000 69665f74 68656e00 69665f74 68656e2e  if_then.if_then.
 0010 66303800 63686172 61637465 72286b69  f08.character(ki
 0020 6e643d31 29002f68 6f6d652f 7562756e  nd=1)./home/ubun
 0030 74752f45 6e67696e 65657269 6e672f50  tu/Engineering/P
 0040 726f6772 616d6d69 6e672f44 69736173  rogramming/Disas
 0050 73656d62 6c696e67 2d42696e 61726965  sembling-Binarie
 0060 732f466f 72747261 6e2f496e 74656c5f  s/Fortran/Intel_
 0070 61726368 69746563 74757265 2f414d44  architecture/AMD
 0080 36342f43 6f6e6469 74696f6e 616c732f  64/Conditionals/
 0090 57697468 5f446562 75675f49 6e666f00  With_Debug_Info.
 00a0 474e5520 466f7274 72616e32 30303820  GNU Fortran2008 
 00b0 372e332e 30202d6d 74756e65 3d67656e  7.3.0 -mtune=gen
 00c0 65726963 202d6d61 7263683d 7838362d  eric -march=x86-
 00d0 3634202d 67676462 33202d66 696e7472  64 -ggdb3 -fintr
 00e0 696e7369 632d6d6f 64756c65 732d7061  insic-modules-pa
 00f0 7468202f 7573722f 6c69622f 6763632f  th /usr/lib/gcc/
 0100 7838365f 36342d6c 696e7578 2d676e75  x86_64-linux-gnu
 0110 2f372f66 696e636c 75646500 6e756d31  /7/finclude.num1
 0120 006e756d 3200696e 74656765 72286b69  .num2.integer(ki
 0130 6e643d34 29006d61 696e0061 72676300  nd=4).main.argc.
 0140 61726776 00                          argv.           
Contents of section .debug_macro:
 0000 04000200 00000003 00010400           ............    

Disassembly of section .interp:

0000000000000238 <.interp>:
 238:	2f                   	(bad)  
 239:	6c                   	ins    BYTE PTR es:[rdi],dx
 23a:	69 62 36 34 2f 6c 64 	imul   esp,DWORD PTR [rdx+0x36],0x646c2f34
 241:	2d 6c 69 6e 75       	sub    eax,0x756e696c
 246:	78 2d                	js     275 <_init-0x4c3>
 248:	78 38                	js     282 <_init-0x4b6>
 24a:	36 2d 36 34 2e 73    	ss sub eax,0x732e3436
 250:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 251:	2e 32 00             	xor    al,BYTE PTR cs:[rax]

Disassembly of section .note.ABI-tag:

0000000000000254 <.note.ABI-tag>:
 254:	04 00                	add    al,0x0
 256:	00 00                	add    BYTE PTR [rax],al
 258:	10 00                	adc    BYTE PTR [rax],al
 25a:	00 00                	add    BYTE PTR [rax],al
 25c:	01 00                	add    DWORD PTR [rax],eax
 25e:	00 00                	add    BYTE PTR [rax],al
 260:	47                   	rex.RXB
 261:	4e 55                	rex.WRX push rbp
 263:	00 00                	add    BYTE PTR [rax],al
 265:	00 00                	add    BYTE PTR [rax],al
 267:	00 03                	add    BYTE PTR [rbx],al
 269:	00 00                	add    BYTE PTR [rax],al
 26b:	00 02                	add    BYTE PTR [rdx],al
 26d:	00 00                	add    BYTE PTR [rax],al
 26f:	00 00                	add    BYTE PTR [rax],al
 271:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .note.gnu.build-id:

0000000000000274 <.note.gnu.build-id>:
 274:	04 00                	add    al,0x0
 276:	00 00                	add    BYTE PTR [rax],al
 278:	14 00                	adc    al,0x0
 27a:	00 00                	add    BYTE PTR [rax],al
 27c:	03 00                	add    eax,DWORD PTR [rax]
 27e:	00 00                	add    BYTE PTR [rax],al
 280:	47                   	rex.RXB
 281:	4e 55                	rex.WRX push rbp
 283:	00 ad 40 d2 0d ef    	add    BYTE PTR [rbp-0x10f22dc0],ch
 289:	13 45 15             	adc    eax,DWORD PTR [rbp+0x15]
 28c:	9e                   	sahf   
 28d:	65 21 9f 7d 2e 96 70 	and    DWORD PTR gs:[rdi+0x70962e7d],ebx
 294:	f4                   	hlt    
 295:	1e                   	(bad)  
 296:	83                   	.byte 0x83
 297:	4f                   	rex.WRXB

Disassembly of section .gnu.hash:

0000000000000298 <.gnu.hash>:
 298:	01 00                	add    DWORD PTR [rax],eax
 29a:	00 00                	add    BYTE PTR [rax],al
 29c:	01 00                	add    DWORD PTR [rax],eax
 29e:	00 00                	add    BYTE PTR [rax],al
 2a0:	01 00                	add    DWORD PTR [rax],eax
	...

Disassembly of section .dynsym:

00000000000002b8 <.dynsym>:
	...
 2d0:	ff 00                	inc    DWORD PTR [rax]
 2d2:	00 00                	add    BYTE PTR [rax],al
 2d4:	12 00                	adc    al,BYTE PTR [rax]
	...
 2e6:	00 00                	add    BYTE PTR [rax],al
 2e8:	2e 00 00             	add    BYTE PTR cs:[rax],al
 2eb:	00 20                	add    BYTE PTR [rax],ah
	...
 2fd:	00 00                	add    BYTE PTR [rax],al
 2ff:	00 d1                	add    cl,dl
 301:	00 00                	add    BYTE PTR [rax],al
 303:	00 12                	add    BYTE PTR [rdx],dl
	...
 315:	00 00                	add    BYTE PTR [rax],al
 317:	00 2b                	add    BYTE PTR [rbx],ch
 319:	01 00                	add    DWORD PTR [rax],eax
 31b:	00 12                	add    BYTE PTR [rdx],dl
	...
 32d:	00 00                	add    BYTE PTR [rax],al
 32f:	00 12                	add    BYTE PTR [rdx],dl
 331:	00 00                	add    BYTE PTR [rax],al
 333:	00 20                	add    BYTE PTR [rax],ah
	...
 345:	00 00                	add    BYTE PTR [rax],al
 347:	00 3d 00 00 00 20    	add    BYTE PTR [rip+0x20000000],bh        # 2000034d <_end+0x1fdff335>
	...
 35d:	00 00                	add    BYTE PTR [rax],al
 35f:	00 80 00 00 00 12    	add    BYTE PTR [rax+0x12000000],al
	...
 375:	00 00                	add    BYTE PTR [rax],al
 377:	00 1c 01             	add    BYTE PTR [rcx+rax*1],bl
 37a:	00 00                	add    BYTE PTR [rax],al
 37c:	22 00                	and    al,BYTE PTR [rax]
	...
 38e:	00 00                	add    BYTE PTR [rax],al
 390:	bb 00 00 00 12       	mov    ebx,0x12000000
	...
 3a5:	00 00                	add    BYTE PTR [rax],al
 3a7:	00 e4                	add    ah,ah
 3a9:	00 00                	add    BYTE PTR [rax],al
 3ab:	00 12                	add    BYTE PTR [rdx],dl
	...
 3bd:	00 00                	add    BYTE PTR [rax],al
 3bf:	00 98 00 00 00 12    	add    BYTE PTR [rax+0x12000000],bl
	...
 3d5:	00 00                	add    BYTE PTR [rax],al
 3d7:	00 57 00             	add    BYTE PTR [rdi+0x0],dl
 3da:	00 00                	add    BYTE PTR [rax],al
 3dc:	12 00                	adc    al,BYTE PTR [rax]
	...
 3ee:	00 00                	add    BYTE PTR [rax],al
 3f0:	69 00 00 00 12 00    	imul   eax,DWORD PTR [rax],0x120000
	...

Disassembly of section .dynstr:

0000000000000408 <.dynstr>:
 408:	00 6c 69 62          	add    BYTE PTR [rcx+rbp*2+0x62],ch
 40c:	67 66 6f             	outs   dx,WORD PTR ds:[esi]
 40f:	72 74                	jb     485 <_init-0x2b3>
 411:	72 61                	jb     474 <_init-0x2c4>
 413:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 414:	2e 73 6f             	cs jae 486 <_init-0x2b2>
 417:	2e 34 00             	cs xor al,0x0
 41a:	5f                   	pop    rdi
 41b:	49 54                	rex.WB push r12
 41d:	4d 5f                	rex.WRB pop r15
 41f:	64 65 72 65          	fs gs jb 488 <_init-0x2b0>
 423:	67 69 73 74 65 72 54 	imul   esi,DWORD PTR [ebx+0x74],0x4d547265
 42a:	4d 
 42b:	43 6c                	rex.XB ins BYTE PTR es:[rdi],dx
 42d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 42e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 42f:	65 54                	gs push rsp
 431:	61                   	(bad)  
 432:	62                   	(bad)  
 433:	6c                   	ins    BYTE PTR es:[rdi],dx
 434:	65 00 5f 5f          	add    BYTE PTR gs:[rdi+0x5f],bl
 438:	67 6d                	ins    DWORD PTR es:[edi],dx
 43a:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 43b:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 43c:	5f                   	pop    rdi
 43d:	73 74                	jae    4b3 <_init-0x285>
 43f:	61                   	(bad)  
 440:	72 74                	jb     4b6 <_init-0x282>
 442:	5f                   	pop    rdi
 443:	5f                   	pop    rdi
 444:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
 447:	54                   	push   rsp
 448:	4d 5f                	rex.WRB pop r15
 44a:	72 65                	jb     4b1 <_init-0x287>
 44c:	67 69 73 74 65 72 54 	imul   esi,DWORD PTR [ebx+0x74],0x4d547265
 453:	4d 
 454:	43 6c                	rex.XB ins BYTE PTR es:[rdi],dx
 456:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 457:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 458:	65 54                	gs push rsp
 45a:	61                   	(bad)  
 45b:	62                   	(bad)  
 45c:	6c                   	ins    BYTE PTR es:[rdi],dx
 45d:	65 00 5f 67          	add    BYTE PTR gs:[rdi+0x67],bl
 461:	66 6f                	outs   dx,WORD PTR ds:[rsi]
 463:	72 74                	jb     4d9 <_init-0x25f>
 465:	72 61                	jb     4c8 <_init-0x270>
 467:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 468:	5f                   	pop    rdi
 469:	73 74                	jae    4df <_init-0x259>
 46b:	5f                   	pop    rdi
 46c:	72 65                	jb     4d3 <_init-0x265>
 46e:	61                   	(bad)  
 46f:	64 00 5f 67          	add    BYTE PTR fs:[rdi+0x67],bl
 473:	66 6f                	outs   dx,WORD PTR ds:[rsi]
 475:	72 74                	jb     4eb <_init-0x24d>
 477:	72 61                	jb     4da <_init-0x25e>
 479:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 47a:	5f                   	pop    rdi
 47b:	73 74                	jae    4f1 <_init-0x247>
 47d:	5f                   	pop    rdi
 47e:	72 65                	jb     4e5 <_init-0x253>
 480:	61                   	(bad)  
 481:	64 5f                	fs pop rdi
 483:	64 6f                	outs   dx,DWORD PTR fs:[rsi]
 485:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 486:	65 00 5f 67          	add    BYTE PTR gs:[rdi+0x67],bl
 48a:	66 6f                	outs   dx,WORD PTR ds:[rsi]
 48c:	72 74                	jb     502 <_init-0x236>
 48e:	72 61                	jb     4f1 <_init-0x247>
 490:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 491:	5f                   	pop    rdi
 492:	73 74                	jae    508 <_init-0x230>
 494:	5f                   	pop    rdi
 495:	77 72                	ja     509 <_init-0x22f>
 497:	69 74 65 5f 64 6f 6e 	imul   esi,DWORD PTR [rbp+riz*2+0x5f],0x656e6f64
 49e:	65 
 49f:	00 5f 67             	add    BYTE PTR [rdi+0x67],bl
 4a2:	66 6f                	outs   dx,WORD PTR ds:[rsi]
 4a4:	72 74                	jb     51a <_init-0x21e>
 4a6:	72 61                	jb     509 <_init-0x22f>
 4a8:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 4a9:	5f                   	pop    rdi
 4aa:	74 72                	je     51e <_init-0x21a>
 4ac:	61                   	(bad)  
 4ad:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 4ae:	73 66                	jae    516 <_init-0x222>
 4b0:	65 72 5f             	gs jb  512 <_init-0x226>
 4b3:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
 4b6:	72 61                	jb     519 <_init-0x21f>
 4b8:	63 74 65 72          	movsxd esi,DWORD PTR [rbp+riz*2+0x72]
 4bc:	5f                   	pop    rdi
 4bd:	77 72                	ja     531 <_init-0x207>
 4bf:	69 74 65 00 5f 67 66 	imul   esi,DWORD PTR [rbp+riz*2+0x0],0x6f66675f
 4c6:	6f 
 4c7:	72 74                	jb     53d <_init-0x1fb>
 4c9:	72 61                	jb     52c <_init-0x20c>
 4cb:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 4cc:	5f                   	pop    rdi
 4cd:	73 65                	jae    534 <_init-0x204>
 4cf:	74 5f                	je     530 <_init-0x208>
 4d1:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 4d2:	70 74                	jo     548 <_init-0x1f0>
 4d4:	69 6f 6e 73 00 5f 67 	imul   ebp,DWORD PTR [rdi+0x6e],0x675f0073
 4db:	66 6f                	outs   dx,WORD PTR ds:[rsi]
 4dd:	72 74                	jb     553 <_init-0x1e5>
 4df:	72 61                	jb     542 <_init-0x1f6>
 4e1:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 4e2:	5f                   	pop    rdi
 4e3:	73 74                	jae    559 <_init-0x1df>
 4e5:	5f                   	pop    rdi
 4e6:	77 72                	ja     55a <_init-0x1de>
 4e8:	69 74 65 00 5f 67 66 	imul   esi,DWORD PTR [rbp+riz*2+0x0],0x6f66675f
 4ef:	6f 
 4f0:	72 74                	jb     566 <_init-0x1d2>
 4f2:	72 61                	jb     555 <_init-0x1e3>
 4f4:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 4f5:	5f                   	pop    rdi
 4f6:	74 72                	je     56a <_init-0x1ce>
 4f8:	61                   	(bad)  
 4f9:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 4fa:	73 66                	jae    562 <_init-0x1d6>
 4fc:	65 72 5f             	gs jb  55e <_init-0x1da>
 4ff:	69 6e 74 65 67 65 72 	imul   ebp,DWORD PTR [rsi+0x74],0x72656765
 506:	00 5f 67             	add    BYTE PTR [rdi+0x67],bl
 509:	66 6f                	outs   dx,WORD PTR ds:[rsi]
 50b:	72 74                	jb     581 <_init-0x1b7>
 50d:	72 61                	jb     570 <_init-0x1c8>
 50f:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 510:	5f                   	pop    rdi
 511:	73 65                	jae    578 <_init-0x1c0>
 513:	74 5f                	je     574 <_init-0x1c4>
 515:	61                   	(bad)  
 516:	72 67                	jb     57f <_init-0x1b9>
 518:	73 00                	jae    51a <_init-0x21e>
 51a:	6c                   	ins    BYTE PTR es:[rdi],dx
 51b:	69 62 63 2e 73 6f 2e 	imul   esp,DWORD PTR [rdx+0x63],0x2e6f732e
 522:	36 00 5f 5f          	add    BYTE PTR ss:[rdi+0x5f],bl
 526:	63 78 61             	movsxd edi,DWORD PTR [rax+0x61]
 529:	5f                   	pop    rdi
 52a:	66 69 6e 61 6c 69    	imul   bp,WORD PTR [rsi+0x61],0x696c
 530:	7a 65                	jp     597 <_init-0x1a1>
 532:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
 535:	6c                   	ins    BYTE PTR es:[rdi],dx
 536:	69 62 63 5f 73 74 61 	imul   esp,DWORD PTR [rdx+0x63],0x6174735f
 53d:	72 74                	jb     5b3 <_init-0x185>
 53f:	5f                   	pop    rdi
 540:	6d                   	ins    DWORD PTR es:[rdi],dx
 541:	61                   	(bad)  
 542:	69 6e 00 47 4c 49 42 	imul   ebp,DWORD PTR [rsi+0x0],0x42494c47
 549:	43 5f                	rex.XB pop r15
 54b:	32 2e                	xor    ch,BYTE PTR [rsi]
 54d:	32 2e                	xor    ch,BYTE PTR [rsi]
 54f:	35 00 47 46 4f       	xor    eax,0x4f464700
 554:	52                   	push   rdx
 555:	54                   	push   rsp
 556:	52                   	push   rdx
 557:	41                   	rex.B
 558:	4e 5f                	rex.WRX pop rdi
 55a:	37                   	(bad)  
	...

Disassembly of section .gnu.version:

000000000000055c <.gnu.version>:
 55c:	00 00                	add    BYTE PTR [rax],al
 55e:	02 00                	add    al,BYTE PTR [rax]
 560:	00 00                	add    BYTE PTR [rax],al
 562:	02 00                	add    al,BYTE PTR [rax]
 564:	03 00                	add    eax,DWORD PTR [rax]
 566:	00 00                	add    BYTE PTR [rax],al
 568:	00 00                	add    BYTE PTR [rax],al
 56a:	02 00                	add    al,BYTE PTR [rax]
 56c:	03 00                	add    eax,DWORD PTR [rax]
 56e:	02 00                	add    al,BYTE PTR [rax]
 570:	02 00                	add    al,BYTE PTR [rax]
 572:	02 00                	add    al,BYTE PTR [rax]
 574:	02 00                	add    al,BYTE PTR [rax]
 576:	02 00                	add    al,BYTE PTR [rax]

Disassembly of section .gnu.version_r:

0000000000000578 <.gnu.version_r>:
 578:	01 00                	add    DWORD PTR [rax],eax
 57a:	01 00                	add    DWORD PTR [rax],eax
 57c:	12 01                	adc    al,BYTE PTR [rcx]
 57e:	00 00                	add    BYTE PTR [rax],al
 580:	10 00                	adc    BYTE PTR [rax],al
 582:	00 00                	add    BYTE PTR [rax],al
 584:	20 00                	and    BYTE PTR [rax],al
 586:	00 00                	add    BYTE PTR [rax],al
 588:	75 1a                	jne    5a4 <_init-0x194>
 58a:	69 09 00 00 03 00    	imul   ecx,DWORD PTR [rcx],0x30000
 590:	3d 01 00 00 00       	cmp    eax,0x1
 595:	00 00                	add    BYTE PTR [rax],al
 597:	00 01                	add    BYTE PTR [rcx],al
 599:	00 01                	add    BYTE PTR [rcx],al
 59b:	00 01                	add    BYTE PTR [rcx],al
 59d:	00 00                	add    BYTE PTR [rax],al
 59f:	00 10                	add    BYTE PTR [rax],dl
 5a1:	00 00                	add    BYTE PTR [rax],al
 5a3:	00 00                	add    BYTE PTR [rax],al
 5a5:	00 00                	add    BYTE PTR [rax],al
 5a7:	00 67 f9             	add    BYTE PTR [rdi-0x7],ah
 5aa:	92                   	xchg   edx,eax
 5ab:	07                   	(bad)  
 5ac:	00 00                	add    BYTE PTR [rax],al
 5ae:	02 00                	add    al,BYTE PTR [rax]
 5b0:	49 01 00             	add    QWORD PTR [r8],rax
 5b3:	00 00                	add    BYTE PTR [rax],al
 5b5:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .rela.dyn:

00000000000005b8 <.rela.dyn>:
 5b8:	70 0d                	jo     5c7 <_init-0x171>
 5ba:	20 00                	and    BYTE PTR [rax],al
 5bc:	00 00                	add    BYTE PTR [rax],al
 5be:	00 00                	add    BYTE PTR [rax],al
 5c0:	08 00                	or     BYTE PTR [rax],al
 5c2:	00 00                	add    BYTE PTR [rax],al
 5c4:	00 00                	add    BYTE PTR [rax],al
 5c6:	00 00                	add    BYTE PTR [rax],al
 5c8:	f0 08 00             	lock or BYTE PTR [rax],al
 5cb:	00 00                	add    BYTE PTR [rax],al
 5cd:	00 00                	add    BYTE PTR [rax],al
 5cf:	00 78 0d             	add    BYTE PTR [rax+0xd],bh
 5d2:	20 00                	and    BYTE PTR [rax],al
 5d4:	00 00                	add    BYTE PTR [rax],al
 5d6:	00 00                	add    BYTE PTR [rax],al
 5d8:	08 00                	or     BYTE PTR [rax],al
 5da:	00 00                	add    BYTE PTR [rax],al
 5dc:	00 00                	add    BYTE PTR [rax],al
 5de:	00 00                	add    BYTE PTR [rax],al
 5e0:	b0 08                	mov    al,0x8
 5e2:	00 00                	add    BYTE PTR [rax],al
 5e4:	00 00                	add    BYTE PTR [rax],al
 5e6:	00 00                	add    BYTE PTR [rax],al
 5e8:	08 10                	or     BYTE PTR [rax],dl
 5ea:	20 00                	and    BYTE PTR [rax],al
 5ec:	00 00                	add    BYTE PTR [rax],al
 5ee:	00 00                	add    BYTE PTR [rax],al
 5f0:	08 00                	or     BYTE PTR [rax],al
 5f2:	00 00                	add    BYTE PTR [rax],al
 5f4:	00 00                	add    BYTE PTR [rax],al
 5f6:	00 00                	add    BYTE PTR [rax],al
 5f8:	08 10                	or     BYTE PTR [rax],dl
 5fa:	20 00                	and    BYTE PTR [rax],al
 5fc:	00 00                	add    BYTE PTR [rax],al
 5fe:	00 00                	add    BYTE PTR [rax],al
 600:	d8 0f                	fmul   DWORD PTR [rdi]
 602:	20 00                	and    BYTE PTR [rax],al
 604:	00 00                	add    BYTE PTR [rax],al
 606:	00 00                	add    BYTE PTR [rax],al
 608:	06                   	(bad)  
 609:	00 00                	add    BYTE PTR [rax],al
 60b:	00 02                	add    BYTE PTR [rdx],al
	...
 615:	00 00                	add    BYTE PTR [rax],al
 617:	00 e0                	add    al,ah
 619:	0f 20 00             	mov    rax,cr0
 61c:	00 00                	add    BYTE PTR [rax],al
 61e:	00 00                	add    BYTE PTR [rax],al
 620:	06                   	(bad)  
 621:	00 00                	add    BYTE PTR [rax],al
 623:	00 04 00             	add    BYTE PTR [rax+rax*1],al
	...
 62e:	00 00                	add    BYTE PTR [rax],al
 630:	e8 0f 20 00 00       	call   2644 <__FRAME_END__+0x1950>
 635:	00 00                	add    BYTE PTR [rax],al
 637:	00 06                	add    BYTE PTR [rsi],al
 639:	00 00                	add    BYTE PTR [rax],al
 63b:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 641 <_init-0xf7>
 641:	00 00                	add    BYTE PTR [rax],al
 643:	00 00                	add    BYTE PTR [rax],al
 645:	00 00                	add    BYTE PTR [rax],al
 647:	00 f0                	add    al,dh
 649:	0f 20 00             	mov    rax,cr0
 64c:	00 00                	add    BYTE PTR [rax],al
 64e:	00 00                	add    BYTE PTR [rax],al
 650:	06                   	(bad)  
 651:	00 00                	add    BYTE PTR [rax],al
 653:	00 06                	add    BYTE PTR [rsi],al
	...
 65d:	00 00                	add    BYTE PTR [rax],al
 65f:	00 f8                	add    al,bh
 661:	0f 20 00             	mov    rax,cr0
 664:	00 00                	add    BYTE PTR [rax],al
 666:	00 00                	add    BYTE PTR [rax],al
 668:	06                   	(bad)  
 669:	00 00                	add    BYTE PTR [rax],al
 66b:	00 08                	add    BYTE PTR [rax],cl
	...

Disassembly of section .rela.plt:

0000000000000678 <.rela.plt>:
 678:	98                   	cwde   
 679:	0f 20 00             	mov    rax,cr0
 67c:	00 00                	add    BYTE PTR [rax],al
 67e:	00 00                	add    BYTE PTR [rax],al
 680:	07                   	(bad)  
 681:	00 00                	add    BYTE PTR [rax],al
 683:	00 01                	add    BYTE PTR [rcx],al
	...
 68d:	00 00                	add    BYTE PTR [rax],al
 68f:	00 a0 0f 20 00 00    	add    BYTE PTR [rax+0x200f],ah
 695:	00 00                	add    BYTE PTR [rax],al
 697:	00 07                	add    BYTE PTR [rdi],al
 699:	00 00                	add    BYTE PTR [rax],al
 69b:	00 03                	add    BYTE PTR [rbx],al
	...
 6a5:	00 00                	add    BYTE PTR [rax],al
 6a7:	00 a8 0f 20 00 00    	add    BYTE PTR [rax+0x200f],ch
 6ad:	00 00                	add    BYTE PTR [rax],al
 6af:	00 07                	add    BYTE PTR [rdi],al
 6b1:	00 00                	add    BYTE PTR [rax],al
 6b3:	00 07                	add    BYTE PTR [rdi],al
	...
 6bd:	00 00                	add    BYTE PTR [rax],al
 6bf:	00 b0 0f 20 00 00    	add    BYTE PTR [rax+0x200f],dh
 6c5:	00 00                	add    BYTE PTR [rax],al
 6c7:	00 07                	add    BYTE PTR [rdi],al
 6c9:	00 00                	add    BYTE PTR [rax],al
 6cb:	00 09                	add    BYTE PTR [rcx],cl
	...
 6d5:	00 00                	add    BYTE PTR [rax],al
 6d7:	00 b8 0f 20 00 00    	add    BYTE PTR [rax+0x200f],bh
 6dd:	00 00                	add    BYTE PTR [rax],al
 6df:	00 07                	add    BYTE PTR [rdi],al
 6e1:	00 00                	add    BYTE PTR [rax],al
 6e3:	00 0a                	add    BYTE PTR [rdx],cl
	...
 6ed:	00 00                	add    BYTE PTR [rax],al
 6ef:	00 c0                	add    al,al
 6f1:	0f 20 00             	mov    rax,cr0
 6f4:	00 00                	add    BYTE PTR [rax],al
 6f6:	00 00                	add    BYTE PTR [rax],al
 6f8:	07                   	(bad)  
 6f9:	00 00                	add    BYTE PTR [rax],al
 6fb:	00 0b                	add    BYTE PTR [rbx],cl
	...
 705:	00 00                	add    BYTE PTR [rax],al
 707:	00 c8                	add    al,cl
 709:	0f 20 00             	mov    rax,cr0
 70c:	00 00                	add    BYTE PTR [rax],al
 70e:	00 00                	add    BYTE PTR [rax],al
 710:	07                   	(bad)  
 711:	00 00                	add    BYTE PTR [rax],al
 713:	00 0c 00             	add    BYTE PTR [rax+rax*1],cl
	...
 71e:	00 00                	add    BYTE PTR [rax],al
 720:	d0 0f                	ror    BYTE PTR [rdi],1
 722:	20 00                	and    BYTE PTR [rax],al
 724:	00 00                	add    BYTE PTR [rax],al
 726:	00 00                	add    BYTE PTR [rax],al
 728:	07                   	(bad)  
 729:	00 00                	add    BYTE PTR [rax],al
 72b:	00 0d 00 00 00 00    	add    BYTE PTR [rip+0x0],cl        # 731 <_init-0x7>
 731:	00 00                	add    BYTE PTR [rax],al
 733:	00 00                	add    BYTE PTR [rax],al
 735:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .init:

0000000000000738 <_init>:
 738:	48 83 ec 08          	sub    rsp,0x8
 73c:	48 8b 05 95 08 20 00 	mov    rax,QWORD PTR [rip+0x200895]        # 200fd8 <__gmon_start__>
 743:	48 85 c0             	test   rax,rax
 746:	74 02                	je     74a <_init+0x12>
 748:	ff d0                	call   rax
 74a:	48 83 c4 08          	add    rsp,0x8
 74e:	c3                   	ret    

Disassembly of section .plt:

0000000000000750 <.plt>:
 750:	ff 35 32 08 20 00    	push   QWORD PTR [rip+0x200832]        # 200f88 <_GLOBAL_OFFSET_TABLE_+0x8>
 756:	ff 25 34 08 20 00    	jmp    QWORD PTR [rip+0x200834]        # 200f90 <_GLOBAL_OFFSET_TABLE_+0x10>
 75c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000000760 <_gfortran_set_args@plt>:
 760:	ff 25 32 08 20 00    	jmp    QWORD PTR [rip+0x200832]        # 200f98 <_gfortran_set_args@GFORTRAN_7>
 766:	68 00 00 00 00       	push   0x0
 76b:	e9 e0 ff ff ff       	jmp    750 <.plt>

0000000000000770 <_gfortran_st_write@plt>:
 770:	ff 25 2a 08 20 00    	jmp    QWORD PTR [rip+0x20082a]        # 200fa0 <_gfortran_st_write@GFORTRAN_7>
 776:	68 01 00 00 00       	push   0x1
 77b:	e9 d0 ff ff ff       	jmp    750 <.plt>

0000000000000780 <_gfortran_st_write_done@plt>:
 780:	ff 25 22 08 20 00    	jmp    QWORD PTR [rip+0x200822]        # 200fa8 <_gfortran_st_write_done@GFORTRAN_7>
 786:	68 02 00 00 00       	push   0x2
 78b:	e9 c0 ff ff ff       	jmp    750 <.plt>

0000000000000790 <_gfortran_set_options@plt>:
 790:	ff 25 1a 08 20 00    	jmp    QWORD PTR [rip+0x20081a]        # 200fb0 <_gfortran_set_options@GFORTRAN_7>
 796:	68 03 00 00 00       	push   0x3
 79b:	e9 b0 ff ff ff       	jmp    750 <.plt>

00000000000007a0 <_gfortran_transfer_integer@plt>:
 7a0:	ff 25 12 08 20 00    	jmp    QWORD PTR [rip+0x200812]        # 200fb8 <_gfortran_transfer_integer@GFORTRAN_7>
 7a6:	68 04 00 00 00       	push   0x4
 7ab:	e9 a0 ff ff ff       	jmp    750 <.plt>

00000000000007b0 <_gfortran_transfer_character_write@plt>:
 7b0:	ff 25 0a 08 20 00    	jmp    QWORD PTR [rip+0x20080a]        # 200fc0 <_gfortran_transfer_character_write@GFORTRAN_7>
 7b6:	68 05 00 00 00       	push   0x5
 7bb:	e9 90 ff ff ff       	jmp    750 <.plt>

00000000000007c0 <_gfortran_st_read@plt>:
 7c0:	ff 25 02 08 20 00    	jmp    QWORD PTR [rip+0x200802]        # 200fc8 <_gfortran_st_read@GFORTRAN_7>
 7c6:	68 06 00 00 00       	push   0x6
 7cb:	e9 80 ff ff ff       	jmp    750 <.plt>

00000000000007d0 <_gfortran_st_read_done@plt>:
 7d0:	ff 25 fa 07 20 00    	jmp    QWORD PTR [rip+0x2007fa]        # 200fd0 <_gfortran_st_read_done@GFORTRAN_7>
 7d6:	68 07 00 00 00       	push   0x7
 7db:	e9 70 ff ff ff       	jmp    750 <.plt>

Disassembly of section .plt.got:

00000000000007e0 <__cxa_finalize@plt>:
 7e0:	ff 25 12 08 20 00    	jmp    QWORD PTR [rip+0x200812]        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 7e6:	66 90                	xchg   ax,ax

Disassembly of section .text:

00000000000007f0 <_start>:
 7f0:	31 ed                	xor    ebp,ebp
 7f2:	49 89 d1             	mov    r9,rdx
 7f5:	5e                   	pop    rsi
 7f6:	48 89 e2             	mov    rdx,rsp
 7f9:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
 7fd:	50                   	push   rax
 7fe:	54                   	push   rsp
 7ff:	4c 8d 05 ea 02 00 00 	lea    r8,[rip+0x2ea]        # af0 <__libc_csu_fini>
 806:	48 8d 0d 73 02 00 00 	lea    rcx,[rip+0x273]        # a80 <__libc_csu_init>
 80d:	48 8d 3d 2b 02 00 00 	lea    rdi,[rip+0x22b]        # a3f <main>
 814:	ff 15 c6 07 20 00    	call   QWORD PTR [rip+0x2007c6]        # 200fe0 <__libc_start_main@GLIBC_2.2.5>
 81a:	f4                   	hlt    
 81b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000000820 <deregister_tm_clones>:
 820:	48 8d 3d e9 07 20 00 	lea    rdi,[rip+0x2007e9]        # 201010 <__TMC_END__>
 827:	55                   	push   rbp
 828:	48 8d 05 e1 07 20 00 	lea    rax,[rip+0x2007e1]        # 201010 <__TMC_END__>
 82f:	48 39 f8             	cmp    rax,rdi
 832:	48 89 e5             	mov    rbp,rsp
 835:	74 19                	je     850 <deregister_tm_clones+0x30>
 837:	48 8b 05 aa 07 20 00 	mov    rax,QWORD PTR [rip+0x2007aa]        # 200fe8 <_ITM_deregisterTMCloneTable>
 83e:	48 85 c0             	test   rax,rax
 841:	74 0d                	je     850 <deregister_tm_clones+0x30>
 843:	5d                   	pop    rbp
 844:	ff e0                	jmp    rax
 846:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 84d:	00 00 00 
 850:	5d                   	pop    rbp
 851:	c3                   	ret    
 852:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
 856:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 85d:	00 00 00 

0000000000000860 <register_tm_clones>:
 860:	48 8d 3d a9 07 20 00 	lea    rdi,[rip+0x2007a9]        # 201010 <__TMC_END__>
 867:	48 8d 35 a2 07 20 00 	lea    rsi,[rip+0x2007a2]        # 201010 <__TMC_END__>
 86e:	55                   	push   rbp
 86f:	48 29 fe             	sub    rsi,rdi
 872:	48 89 e5             	mov    rbp,rsp
 875:	48 c1 fe 03          	sar    rsi,0x3
 879:	48 89 f0             	mov    rax,rsi
 87c:	48 c1 e8 3f          	shr    rax,0x3f
 880:	48 01 c6             	add    rsi,rax
 883:	48 d1 fe             	sar    rsi,1
 886:	74 18                	je     8a0 <register_tm_clones+0x40>
 888:	48 8b 05 61 07 20 00 	mov    rax,QWORD PTR [rip+0x200761]        # 200ff0 <_ITM_registerTMCloneTable>
 88f:	48 85 c0             	test   rax,rax
 892:	74 0c                	je     8a0 <register_tm_clones+0x40>
 894:	5d                   	pop    rbp
 895:	ff e0                	jmp    rax
 897:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
 89e:	00 00 
 8a0:	5d                   	pop    rbp
 8a1:	c3                   	ret    
 8a2:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
 8a6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 8ad:	00 00 00 

00000000000008b0 <__do_global_dtors_aux>:
 8b0:	80 3d 59 07 20 00 00 	cmp    BYTE PTR [rip+0x200759],0x0        # 201010 <__TMC_END__>
 8b7:	75 2f                	jne    8e8 <__do_global_dtors_aux+0x38>
 8b9:	48 83 3d 37 07 20 00 	cmp    QWORD PTR [rip+0x200737],0x0        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 8c0:	00 
 8c1:	55                   	push   rbp
 8c2:	48 89 e5             	mov    rbp,rsp
 8c5:	74 0c                	je     8d3 <__do_global_dtors_aux+0x23>
 8c7:	48 8b 3d 3a 07 20 00 	mov    rdi,QWORD PTR [rip+0x20073a]        # 201008 <__dso_handle>
 8ce:	e8 0d ff ff ff       	call   7e0 <__cxa_finalize@plt>
 8d3:	e8 48 ff ff ff       	call   820 <deregister_tm_clones>
 8d8:	c6 05 31 07 20 00 01 	mov    BYTE PTR [rip+0x200731],0x1        # 201010 <__TMC_END__>
 8df:	5d                   	pop    rbp
 8e0:	c3                   	ret    
 8e1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
 8e8:	f3 c3                	repz ret 
 8ea:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000000008f0 <frame_dummy>:
 8f0:	55                   	push   rbp
 8f1:	48 89 e5             	mov    rbp,rsp
 8f4:	5d                   	pop    rbp
 8f5:	e9 66 ff ff ff       	jmp    860 <register_tm_clones>

00000000000008fa <MAIN__>:
program if_then
 8fa:	55                   	push   rbp
 8fb:	48 89 e5             	mov    rbp,rsp
 8fe:	48 81 ec f0 01 00 00 	sub    rsp,0x1f0
      implicit none

      integer                   ::      num1
      integer, parameter        ::      num2 = 5

      print *, "Enter a number between 1 and 10 -> "
 905:	48 8d 05 04 02 00 00 	lea    rax,[rip+0x204]        # b10 <_IO_stdin_used+0x10>
 90c:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
 913:	c7 85 20 fe ff ff 08 	mov    DWORD PTR [rbp-0x1e0],0x8
 91a:	00 00 00 
 91d:	c7 85 10 fe ff ff 80 	mov    DWORD PTR [rbp-0x1f0],0x80
 924:	00 00 00 
 927:	c7 85 14 fe ff ff 06 	mov    DWORD PTR [rbp-0x1ec],0x6
 92e:	00 00 00 
 931:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
 938:	48 89 c7             	mov    rdi,rax
 93b:	e8 30 fe ff ff       	call   770 <_gfortran_st_write@plt>
 940:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
 947:	ba 23 00 00 00       	mov    edx,0x23
 94c:	48 8d 35 cd 01 00 00 	lea    rsi,[rip+0x1cd]        # b20 <_IO_stdin_used+0x20>
 953:	48 89 c7             	mov    rdi,rax
 956:	e8 55 fe ff ff       	call   7b0 <_gfortran_transfer_character_write@plt>
 95b:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
 962:	48 89 c7             	mov    rdi,rax
 965:	e8 16 fe ff ff       	call   780 <_gfortran_st_write_done@plt>
      read *, num1
 96a:	48 8d 05 9f 01 00 00 	lea    rax,[rip+0x19f]        # b10 <_IO_stdin_used+0x10>
 971:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
 978:	c7 85 20 fe ff ff 09 	mov    DWORD PTR [rbp-0x1e0],0x9
 97f:	00 00 00 
 982:	c7 85 10 fe ff ff 80 	mov    DWORD PTR [rbp-0x1f0],0x80
 989:	00 00 00 
 98c:	c7 85 14 fe ff ff 05 	mov    DWORD PTR [rbp-0x1ec],0x5
 993:	00 00 00 
 996:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
 99d:	48 89 c7             	mov    rdi,rax
 9a0:	e8 1b fe ff ff       	call   7c0 <_gfortran_st_read@plt>
 9a5:	48 8d 4d fc          	lea    rcx,[rbp-0x4]
 9a9:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
 9b0:	ba 04 00 00 00       	mov    edx,0x4
 9b5:	48 89 ce             	mov    rsi,rcx
 9b8:	48 89 c7             	mov    rdi,rax
 9bb:	e8 e0 fd ff ff       	call   7a0 <_gfortran_transfer_integer@plt>
 9c0:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
 9c7:	48 89 c7             	mov    rdi,rax
 9ca:	e8 01 fe ff ff       	call   7d0 <_gfortran_st_read_done@plt>

      if (num1 > num2) then
 9cf:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
 9d2:	83 f8 05             	cmp    eax,0x5
 9d5:	7e 65                	jle    a3c <MAIN__+0x142>
              print *, "Number entered greater than 5!"
 9d7:	48 8d 05 32 01 00 00 	lea    rax,[rip+0x132]        # b10 <_IO_stdin_used+0x10>
 9de:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
 9e5:	c7 85 20 fe ff ff 0c 	mov    DWORD PTR [rbp-0x1e0],0xc
 9ec:	00 00 00 
 9ef:	c7 85 10 fe ff ff 80 	mov    DWORD PTR [rbp-0x1f0],0x80
 9f6:	00 00 00 
 9f9:	c7 85 14 fe ff ff 06 	mov    DWORD PTR [rbp-0x1ec],0x6
 a00:	00 00 00 
 a03:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
 a0a:	48 89 c7             	mov    rdi,rax
 a0d:	e8 5e fd ff ff       	call   770 <_gfortran_st_write@plt>
 a12:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
 a19:	ba 1e 00 00 00       	mov    edx,0x1e
 a1e:	48 8d 35 1e 01 00 00 	lea    rsi,[rip+0x11e]        # b43 <_IO_stdin_used+0x43>
 a25:	48 89 c7             	mov    rdi,rax
 a28:	e8 83 fd ff ff       	call   7b0 <_gfortran_transfer_character_write@plt>
 a2d:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
 a34:	48 89 c7             	mov    rdi,rax
 a37:	e8 44 fd ff ff       	call   780 <_gfortran_st_write_done@plt>
      end if

end program if_then
 a3c:	90                   	nop
 a3d:	c9                   	leave  
 a3e:	c3                   	ret    

0000000000000a3f <main>:
 a3f:	55                   	push   rbp
 a40:	48 89 e5             	mov    rbp,rsp
 a43:	48 83 ec 10          	sub    rsp,0x10
 a47:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
 a4a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
 a4e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
 a52:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
 a55:	48 89 d6             	mov    rsi,rdx
 a58:	89 c7                	mov    edi,eax
 a5a:	e8 01 fd ff ff       	call   760 <_gfortran_set_args@plt>
 a5f:	48 8d 35 0a 01 00 00 	lea    rsi,[rip+0x10a]        # b70 <options.3.3507>
 a66:	bf 07 00 00 00       	mov    edi,0x7
 a6b:	e8 20 fd ff ff       	call   790 <_gfortran_set_options@plt>
 a70:	e8 85 fe ff ff       	call   8fa <MAIN__>
 a75:	b8 00 00 00 00       	mov    eax,0x0
 a7a:	c9                   	leave  
 a7b:	c3                   	ret    
 a7c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000000a80 <__libc_csu_init>:
 a80:	41 57                	push   r15
 a82:	41 56                	push   r14
 a84:	49 89 d7             	mov    r15,rdx
 a87:	41 55                	push   r13
 a89:	41 54                	push   r12
 a8b:	4c 8d 25 de 02 20 00 	lea    r12,[rip+0x2002de]        # 200d70 <__frame_dummy_init_array_entry>
 a92:	55                   	push   rbp
 a93:	48 8d 2d de 02 20 00 	lea    rbp,[rip+0x2002de]        # 200d78 <__init_array_end>
 a9a:	53                   	push   rbx
 a9b:	41 89 fd             	mov    r13d,edi
 a9e:	49 89 f6             	mov    r14,rsi
 aa1:	4c 29 e5             	sub    rbp,r12
 aa4:	48 83 ec 08          	sub    rsp,0x8
 aa8:	48 c1 fd 03          	sar    rbp,0x3
 aac:	e8 87 fc ff ff       	call   738 <_init>
 ab1:	48 85 ed             	test   rbp,rbp
 ab4:	74 20                	je     ad6 <__libc_csu_init+0x56>
 ab6:	31 db                	xor    ebx,ebx
 ab8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
 abf:	00 
 ac0:	4c 89 fa             	mov    rdx,r15
 ac3:	4c 89 f6             	mov    rsi,r14
 ac6:	44 89 ef             	mov    edi,r13d
 ac9:	41 ff 14 dc          	call   QWORD PTR [r12+rbx*8]
 acd:	48 83 c3 01          	add    rbx,0x1
 ad1:	48 39 dd             	cmp    rbp,rbx
 ad4:	75 ea                	jne    ac0 <__libc_csu_init+0x40>
 ad6:	48 83 c4 08          	add    rsp,0x8
 ada:	5b                   	pop    rbx
 adb:	5d                   	pop    rbp
 adc:	41 5c                	pop    r12
 ade:	41 5d                	pop    r13
 ae0:	41 5e                	pop    r14
 ae2:	41 5f                	pop    r15
 ae4:	c3                   	ret    
 ae5:	90                   	nop
 ae6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 aed:	00 00 00 

0000000000000af0 <__libc_csu_fini>:
 af0:	f3 c3                	repz ret 

Disassembly of section .fini:

0000000000000af4 <_fini>:
 af4:	48 83 ec 08          	sub    rsp,0x8
 af8:	48 83 c4 08          	add    rsp,0x8
 afc:	c3                   	ret    

Disassembly of section .rodata:

0000000000000b00 <_IO_stdin_used>:
 b00:	01 00                	add    DWORD PTR [rax],eax
 b02:	02 00                	add    al,BYTE PTR [rax]
	...
 b10:	69 66 5f 74 68 65 6e 	imul   esp,DWORD PTR [rsi+0x5f],0x6e656874
 b17:	2e 66 30 38          	data16 xor BYTE PTR cs:[rax],bh
 b1b:	00 00                	add    BYTE PTR [rax],al
 b1d:	00 00                	add    BYTE PTR [rax],al
 b1f:	00 45 6e             	add    BYTE PTR [rbp+0x6e],al
 b22:	74 65                	je     b89 <options.3.3507+0x19>
 b24:	72 20                	jb     b46 <_IO_stdin_used+0x46>
 b26:	61                   	(bad)  
 b27:	20 6e 75             	and    BYTE PTR [rsi+0x75],ch
 b2a:	6d                   	ins    DWORD PTR es:[rdi],dx
 b2b:	62                   	(bad)  
 b2c:	65 72 20             	gs jb  b4f <_IO_stdin_used+0x4f>
 b2f:	62                   	(bad)  
 b30:	65 74 77             	gs je  baa <__GNU_EH_FRAME_HDR+0x1e>
 b33:	65 65 6e             	gs outs dx,BYTE PTR gs:[rsi]
 b36:	20 31                	and    BYTE PTR [rcx],dh
 b38:	20 61 6e             	and    BYTE PTR [rcx+0x6e],ah
 b3b:	64 20 31             	and    BYTE PTR fs:[rcx],dh
 b3e:	30 20                	xor    BYTE PTR [rax],ah
 b40:	2d 3e 20 4e 75       	sub    eax,0x754e203e
 b45:	6d                   	ins    DWORD PTR es:[rdi],dx
 b46:	62                   	(bad)  
 b47:	65 72 20             	gs jb  b6a <_IO_stdin_used+0x6a>
 b4a:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
 b4c:	74 65                	je     bb3 <__GNU_EH_FRAME_HDR+0x27>
 b4e:	72 65                	jb     bb5 <__GNU_EH_FRAME_HDR+0x29>
 b50:	64 20 67 72          	and    BYTE PTR fs:[rdi+0x72],ah
 b54:	65 61                	gs (bad) 
 b56:	74 65                	je     bbd <__GNU_EH_FRAME_HDR+0x31>
 b58:	72 20                	jb     b7a <options.3.3507+0xa>
 b5a:	74 68                	je     bc4 <__GNU_EH_FRAME_HDR+0x38>
 b5c:	61                   	(bad)  
 b5d:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 b5e:	20 35 21 00 00 00    	and    BYTE PTR [rip+0x21],dh        # b85 <options.3.3507+0x15>
	...

0000000000000b70 <options.3.3507>:
 b70:	44 00 00             	add    BYTE PTR [rax],r8b
 b73:	00 ff                	add    bh,bh
 b75:	03 00                	add    eax,DWORD PTR [rax]
 b77:	00 00                	add    BYTE PTR [rax],al
 b79:	00 00                	add    BYTE PTR [rax],al
 b7b:	00 01                	add    BYTE PTR [rcx],al
 b7d:	00 00                	add    BYTE PTR [rax],al
 b7f:	00 01                	add    BYTE PTR [rcx],al
 b81:	00 00                	add    BYTE PTR [rax],al
 b83:	00 00                	add    BYTE PTR [rax],al
 b85:	00 00                	add    BYTE PTR [rax],al
 b87:	00 1f                	add    BYTE PTR [rdi],bl
 b89:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .eh_frame_hdr:

0000000000000b8c <__GNU_EH_FRAME_HDR>:
 b8c:	01 1b                	add    DWORD PTR [rbx],ebx
 b8e:	03 3b                	add    edi,DWORD PTR [rbx]
 b90:	40 00 00             	add    BYTE PTR [rax],al
 b93:	00 07                	add    BYTE PTR [rdi],al
 b95:	00 00                	add    BYTE PTR [rax],al
 b97:	00 c4                	add    ah,al
 b99:	fb                   	sti    
 b9a:	ff                   	(bad)  
 b9b:	ff 8c 00 00 00 54 fc 	dec    DWORD PTR [rax+rax*1-0x3ac0000]
 ba2:	ff                   	(bad)  
 ba3:	ff b4 00 00 00 64 fc 	push   QWORD PTR [rax+rax*1-0x39c0000]
 baa:	ff                   	(bad)  
 bab:	ff 5c 00 00          	call   FWORD PTR [rax+rax*1+0x0]
 baf:	00 6e fd             	add    BYTE PTR [rsi-0x3],ch
 bb2:	ff                   	(bad)  
 bb3:	ff cc                	dec    esp
 bb5:	00 00                	add    BYTE PTR [rax],al
 bb7:	00 b3 fe ff ff ec    	add    BYTE PTR [rbx-0x13000002],dh
 bbd:	00 00                	add    BYTE PTR [rax],al
 bbf:	00 f4                	add    ah,dh
 bc1:	fe                   	(bad)  
 bc2:	ff                   	(bad)  
 bc3:	ff 0c 01             	dec    DWORD PTR [rcx+rax*1]
 bc6:	00 00                	add    BYTE PTR [rax],al
 bc8:	64 ff                	fs (bad) 
 bca:	ff                   	(bad)  
 bcb:	ff 54 01 00          	call   QWORD PTR [rcx+rax*1+0x0]
	...

Disassembly of section .eh_frame:

0000000000000bd0 <__FRAME_END__-0x124>:
 bd0:	14 00                	adc    al,0x0
 bd2:	00 00                	add    BYTE PTR [rax],al
 bd4:	00 00                	add    BYTE PTR [rax],al
 bd6:	00 00                	add    BYTE PTR [rax],al
 bd8:	01 7a 52             	add    DWORD PTR [rdx+0x52],edi
 bdb:	00 01                	add    BYTE PTR [rcx],al
 bdd:	78 10                	js     bef <__GNU_EH_FRAME_HDR+0x63>
 bdf:	01 1b                	add    DWORD PTR [rbx],ebx
 be1:	0c 07                	or     al,0x7
 be3:	08 90 01 07 10 14    	or     BYTE PTR [rax+0x14100701],dl
 be9:	00 00                	add    BYTE PTR [rax],al
 beb:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
 bee:	00 00                	add    BYTE PTR [rax],al
 bf0:	00 fc                	add    ah,bh
 bf2:	ff                   	(bad)  
 bf3:	ff 2b                	jmp    FWORD PTR [rbx]
	...
 bfd:	00 00                	add    BYTE PTR [rax],al
 bff:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
 c02:	00 00                	add    BYTE PTR [rax],al
 c04:	00 00                	add    BYTE PTR [rax],al
 c06:	00 00                	add    BYTE PTR [rax],al
 c08:	01 7a 52             	add    DWORD PTR [rdx+0x52],edi
 c0b:	00 01                	add    BYTE PTR [rcx],al
 c0d:	78 10                	js     c1f <__GNU_EH_FRAME_HDR+0x93>
 c0f:	01 1b                	add    DWORD PTR [rbx],ebx
 c11:	0c 07                	or     al,0x7
 c13:	08 90 01 00 00 24    	or     BYTE PTR [rax+0x24000001],dl
 c19:	00 00                	add    BYTE PTR [rax],al
 c1b:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
 c1e:	00 00                	add    BYTE PTR [rax],al
 c20:	30 fb                	xor    bl,bh
 c22:	ff                   	(bad)  
 c23:	ff 90 00 00 00 00    	call   QWORD PTR [rax+0x0]
 c29:	0e                   	(bad)  
 c2a:	10 46 0e             	adc    BYTE PTR [rsi+0xe],al
 c2d:	18 4a 0f             	sbb    BYTE PTR [rdx+0xf],cl
 c30:	0b 77 08             	or     esi,DWORD PTR [rdi+0x8]
 c33:	80 00 3f             	add    BYTE PTR [rax],0x3f
 c36:	1a 3b                	sbb    bh,BYTE PTR [rbx]
 c38:	2a 33                	sub    dh,BYTE PTR [rbx]
 c3a:	24 22                	and    al,0x22
 c3c:	00 00                	add    BYTE PTR [rax],al
 c3e:	00 00                	add    BYTE PTR [rax],al
 c40:	14 00                	adc    al,0x0
 c42:	00 00                	add    BYTE PTR [rax],al
 c44:	44 00 00             	add    BYTE PTR [rax],r8b
 c47:	00 98 fb ff ff 08    	add    BYTE PTR [rax+0x8fffffb],bl
	...
 c55:	00 00                	add    BYTE PTR [rax],al
 c57:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
 c5a:	00 00                	add    BYTE PTR [rax],al
 c5c:	5c                   	pop    rsp
 c5d:	00 00                	add    BYTE PTR [rax],al
 c5f:	00 9a fc ff ff 45    	add    BYTE PTR [rdx+0x45fffffc],bl
 c65:	01 00                	add    DWORD PTR [rax],eax
 c67:	00 00                	add    BYTE PTR [rax],al
 c69:	41 0e                	rex.B (bad) 
 c6b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 c71:	03 40 01             	add    eax,DWORD PTR [rax+0x1]
 c74:	0c 07                	or     al,0x7
 c76:	08 00                	or     BYTE PTR [rax],al
 c78:	1c 00                	sbb    al,0x0
 c7a:	00 00                	add    BYTE PTR [rax],al
 c7c:	7c 00                	jl     c7e <__GNU_EH_FRAME_HDR+0xf2>
 c7e:	00 00                	add    BYTE PTR [rax],al
 c80:	bf fd ff ff 3d       	mov    edi,0x3dfffffd
 c85:	00 00                	add    BYTE PTR [rax],al
 c87:	00 00                	add    BYTE PTR [rax],al
 c89:	41 0e                	rex.B (bad) 
 c8b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 c91:	78 0c                	js     c9f <__GNU_EH_FRAME_HDR+0x113>
 c93:	07                   	(bad)  
 c94:	08 00                	or     BYTE PTR [rax],al
 c96:	00 00                	add    BYTE PTR [rax],al
 c98:	44 00 00             	add    BYTE PTR [rax],r8b
 c9b:	00 9c 00 00 00 e0 fd 	add    BYTE PTR [rax+rax*1-0x2200000],bl
 ca2:	ff                   	(bad)  
 ca3:	ff 65 00             	jmp    QWORD PTR [rbp+0x0]
 ca6:	00 00                	add    BYTE PTR [rax],al
 ca8:	00 42 0e             	add    BYTE PTR [rdx+0xe],al
 cab:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
 cb1:	8e 03                	mov    es,WORD PTR [rbx]
 cb3:	45 0e                	rex.RB (bad) 
 cb5:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
 cbb:	8c 05 48 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e48],es        # ffffffff86301b09 <_end+0xffffffff86100af1>
 cc1:	06                   	(bad)  
 cc2:	48 0e                	rex.W (bad) 
 cc4:	38 83 07 4d 0e 40    	cmp    BYTE PTR [rbx+0x400e4d07],al
 cca:	72 0e                	jb     cda <__GNU_EH_FRAME_HDR+0x14e>
 ccc:	38 41 0e             	cmp    BYTE PTR [rcx+0xe],al
 ccf:	30 41 0e             	xor    BYTE PTR [rcx+0xe],al
 cd2:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
 cd5:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
 cd8:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
 cdb:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
 cde:	08 00                	or     BYTE PTR [rax],al
 ce0:	10 00                	adc    BYTE PTR [rax],al
 ce2:	00 00                	add    BYTE PTR [rax],al
 ce4:	e4 00                	in     al,0x0
 ce6:	00 00                	add    BYTE PTR [rax],al
 ce8:	08 fe                	or     dh,bh
 cea:	ff                   	(bad)  
 ceb:	ff 02                	inc    DWORD PTR [rdx]
 ced:	00 00                	add    BYTE PTR [rax],al
 cef:	00 00                	add    BYTE PTR [rax],al
 cf1:	00 00                	add    BYTE PTR [rax],al
	...

0000000000000cf4 <__FRAME_END__>:
 cf4:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .init_array:

0000000000200d70 <__frame_dummy_init_array_entry>:
  200d70:	f0 08 00             	lock or BYTE PTR [rax],al
  200d73:	00 00                	add    BYTE PTR [rax],al
  200d75:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .fini_array:

0000000000200d78 <__do_global_dtors_aux_fini_array_entry>:
  200d78:	b0 08                	mov    al,0x8
  200d7a:	00 00                	add    BYTE PTR [rax],al
  200d7c:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .dynamic:

0000000000200d80 <_DYNAMIC>:
  200d80:	01 00                	add    DWORD PTR [rax],eax
  200d82:	00 00                	add    BYTE PTR [rax],al
  200d84:	00 00                	add    BYTE PTR [rax],al
  200d86:	00 00                	add    BYTE PTR [rax],al
  200d88:	01 00                	add    DWORD PTR [rax],eax
  200d8a:	00 00                	add    BYTE PTR [rax],al
  200d8c:	00 00                	add    BYTE PTR [rax],al
  200d8e:	00 00                	add    BYTE PTR [rax],al
  200d90:	01 00                	add    DWORD PTR [rax],eax
  200d92:	00 00                	add    BYTE PTR [rax],al
  200d94:	00 00                	add    BYTE PTR [rax],al
  200d96:	00 00                	add    BYTE PTR [rax],al
  200d98:	12 01                	adc    al,BYTE PTR [rcx]
  200d9a:	00 00                	add    BYTE PTR [rax],al
  200d9c:	00 00                	add    BYTE PTR [rax],al
  200d9e:	00 00                	add    BYTE PTR [rax],al
  200da0:	0c 00                	or     al,0x0
  200da2:	00 00                	add    BYTE PTR [rax],al
  200da4:	00 00                	add    BYTE PTR [rax],al
  200da6:	00 00                	add    BYTE PTR [rax],al
  200da8:	38 07                	cmp    BYTE PTR [rdi],al
  200daa:	00 00                	add    BYTE PTR [rax],al
  200dac:	00 00                	add    BYTE PTR [rax],al
  200dae:	00 00                	add    BYTE PTR [rax],al
  200db0:	0d 00 00 00 00       	or     eax,0x0
  200db5:	00 00                	add    BYTE PTR [rax],al
  200db7:	00 f4                	add    ah,dh
  200db9:	0a 00                	or     al,BYTE PTR [rax]
  200dbb:	00 00                	add    BYTE PTR [rax],al
  200dbd:	00 00                	add    BYTE PTR [rax],al
  200dbf:	00 19                	add    BYTE PTR [rcx],bl
  200dc1:	00 00                	add    BYTE PTR [rax],al
  200dc3:	00 00                	add    BYTE PTR [rax],al
  200dc5:	00 00                	add    BYTE PTR [rax],al
  200dc7:	00 70 0d             	add    BYTE PTR [rax+0xd],dh
  200dca:	20 00                	and    BYTE PTR [rax],al
  200dcc:	00 00                	add    BYTE PTR [rax],al
  200dce:	00 00                	add    BYTE PTR [rax],al
  200dd0:	1b 00                	sbb    eax,DWORD PTR [rax]
  200dd2:	00 00                	add    BYTE PTR [rax],al
  200dd4:	00 00                	add    BYTE PTR [rax],al
  200dd6:	00 00                	add    BYTE PTR [rax],al
  200dd8:	08 00                	or     BYTE PTR [rax],al
  200dda:	00 00                	add    BYTE PTR [rax],al
  200ddc:	00 00                	add    BYTE PTR [rax],al
  200dde:	00 00                	add    BYTE PTR [rax],al
  200de0:	1a 00                	sbb    al,BYTE PTR [rax]
  200de2:	00 00                	add    BYTE PTR [rax],al
  200de4:	00 00                	add    BYTE PTR [rax],al
  200de6:	00 00                	add    BYTE PTR [rax],al
  200de8:	78 0d                	js     200df7 <_DYNAMIC+0x77>
  200dea:	20 00                	and    BYTE PTR [rax],al
  200dec:	00 00                	add    BYTE PTR [rax],al
  200dee:	00 00                	add    BYTE PTR [rax],al
  200df0:	1c 00                	sbb    al,0x0
  200df2:	00 00                	add    BYTE PTR [rax],al
  200df4:	00 00                	add    BYTE PTR [rax],al
  200df6:	00 00                	add    BYTE PTR [rax],al
  200df8:	08 00                	or     BYTE PTR [rax],al
  200dfa:	00 00                	add    BYTE PTR [rax],al
  200dfc:	00 00                	add    BYTE PTR [rax],al
  200dfe:	00 00                	add    BYTE PTR [rax],al
  200e00:	f5                   	cmc    
  200e01:	fe                   	(bad)  
  200e02:	ff 6f 00             	jmp    FWORD PTR [rdi+0x0]
  200e05:	00 00                	add    BYTE PTR [rax],al
  200e07:	00 98 02 00 00 00    	add    BYTE PTR [rax+0x2],bl
  200e0d:	00 00                	add    BYTE PTR [rax],al
  200e0f:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 200e15 <_DYNAMIC+0x95>
  200e15:	00 00                	add    BYTE PTR [rax],al
  200e17:	00 08                	add    BYTE PTR [rax],cl
  200e19:	04 00                	add    al,0x0
  200e1b:	00 00                	add    BYTE PTR [rax],al
  200e1d:	00 00                	add    BYTE PTR [rax],al
  200e1f:	00 06                	add    BYTE PTR [rsi],al
  200e21:	00 00                	add    BYTE PTR [rax],al
  200e23:	00 00                	add    BYTE PTR [rax],al
  200e25:	00 00                	add    BYTE PTR [rax],al
  200e27:	00 b8 02 00 00 00    	add    BYTE PTR [rax+0x2],bh
  200e2d:	00 00                	add    BYTE PTR [rax],al
  200e2f:	00 0a                	add    BYTE PTR [rdx],cl
  200e31:	00 00                	add    BYTE PTR [rax],al
  200e33:	00 00                	add    BYTE PTR [rax],al
  200e35:	00 00                	add    BYTE PTR [rax],al
  200e37:	00 54 01 00          	add    BYTE PTR [rcx+rax*1+0x0],dl
  200e3b:	00 00                	add    BYTE PTR [rax],al
  200e3d:	00 00                	add    BYTE PTR [rax],al
  200e3f:	00 0b                	add    BYTE PTR [rbx],cl
  200e41:	00 00                	add    BYTE PTR [rax],al
  200e43:	00 00                	add    BYTE PTR [rax],al
  200e45:	00 00                	add    BYTE PTR [rax],al
  200e47:	00 18                	add    BYTE PTR [rax],bl
  200e49:	00 00                	add    BYTE PTR [rax],al
  200e4b:	00 00                	add    BYTE PTR [rax],al
  200e4d:	00 00                	add    BYTE PTR [rax],al
  200e4f:	00 15 00 00 00 00    	add    BYTE PTR [rip+0x0],dl        # 200e55 <_DYNAMIC+0xd5>
	...
  200e5d:	00 00                	add    BYTE PTR [rax],al
  200e5f:	00 03                	add    BYTE PTR [rbx],al
  200e61:	00 00                	add    BYTE PTR [rax],al
  200e63:	00 00                	add    BYTE PTR [rax],al
  200e65:	00 00                	add    BYTE PTR [rax],al
  200e67:	00 80 0f 20 00 00    	add    BYTE PTR [rax+0x200f],al
  200e6d:	00 00                	add    BYTE PTR [rax],al
  200e6f:	00 02                	add    BYTE PTR [rdx],al
  200e71:	00 00                	add    BYTE PTR [rax],al
  200e73:	00 00                	add    BYTE PTR [rax],al
  200e75:	00 00                	add    BYTE PTR [rax],al
  200e77:	00 c0                	add    al,al
  200e79:	00 00                	add    BYTE PTR [rax],al
  200e7b:	00 00                	add    BYTE PTR [rax],al
  200e7d:	00 00                	add    BYTE PTR [rax],al
  200e7f:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  200e82:	00 00                	add    BYTE PTR [rax],al
  200e84:	00 00                	add    BYTE PTR [rax],al
  200e86:	00 00                	add    BYTE PTR [rax],al
  200e88:	07                   	(bad)  
  200e89:	00 00                	add    BYTE PTR [rax],al
  200e8b:	00 00                	add    BYTE PTR [rax],al
  200e8d:	00 00                	add    BYTE PTR [rax],al
  200e8f:	00 17                	add    BYTE PTR [rdi],dl
  200e91:	00 00                	add    BYTE PTR [rax],al
  200e93:	00 00                	add    BYTE PTR [rax],al
  200e95:	00 00                	add    BYTE PTR [rax],al
  200e97:	00 78 06             	add    BYTE PTR [rax+0x6],bh
  200e9a:	00 00                	add    BYTE PTR [rax],al
  200e9c:	00 00                	add    BYTE PTR [rax],al
  200e9e:	00 00                	add    BYTE PTR [rax],al
  200ea0:	07                   	(bad)  
  200ea1:	00 00                	add    BYTE PTR [rax],al
  200ea3:	00 00                	add    BYTE PTR [rax],al
  200ea5:	00 00                	add    BYTE PTR [rax],al
  200ea7:	00 b8 05 00 00 00    	add    BYTE PTR [rax+0x5],bh
  200ead:	00 00                	add    BYTE PTR [rax],al
  200eaf:	00 08                	add    BYTE PTR [rax],cl
  200eb1:	00 00                	add    BYTE PTR [rax],al
  200eb3:	00 00                	add    BYTE PTR [rax],al
  200eb5:	00 00                	add    BYTE PTR [rax],al
  200eb7:	00 c0                	add    al,al
  200eb9:	00 00                	add    BYTE PTR [rax],al
  200ebb:	00 00                	add    BYTE PTR [rax],al
  200ebd:	00 00                	add    BYTE PTR [rax],al
  200ebf:	00 09                	add    BYTE PTR [rcx],cl
  200ec1:	00 00                	add    BYTE PTR [rax],al
  200ec3:	00 00                	add    BYTE PTR [rax],al
  200ec5:	00 00                	add    BYTE PTR [rax],al
  200ec7:	00 18                	add    BYTE PTR [rax],bl
  200ec9:	00 00                	add    BYTE PTR [rax],al
  200ecb:	00 00                	add    BYTE PTR [rax],al
  200ecd:	00 00                	add    BYTE PTR [rax],al
  200ecf:	00 1e                	add    BYTE PTR [rsi],bl
  200ed1:	00 00                	add    BYTE PTR [rax],al
  200ed3:	00 00                	add    BYTE PTR [rax],al
  200ed5:	00 00                	add    BYTE PTR [rax],al
  200ed7:	00 08                	add    BYTE PTR [rax],cl
  200ed9:	00 00                	add    BYTE PTR [rax],al
  200edb:	00 00                	add    BYTE PTR [rax],al
  200edd:	00 00                	add    BYTE PTR [rax],al
  200edf:	00 fb                	add    bl,bh
  200ee1:	ff                   	(bad)  
  200ee2:	ff 6f 00             	jmp    FWORD PTR [rdi+0x0]
  200ee5:	00 00                	add    BYTE PTR [rax],al
  200ee7:	00 01                	add    BYTE PTR [rcx],al
  200ee9:	00 00                	add    BYTE PTR [rax],al
  200eeb:	08 00                	or     BYTE PTR [rax],al
  200eed:	00 00                	add    BYTE PTR [rax],al
  200eef:	00 fe                	add    dh,bh
  200ef1:	ff                   	(bad)  
  200ef2:	ff 6f 00             	jmp    FWORD PTR [rdi+0x0]
  200ef5:	00 00                	add    BYTE PTR [rax],al
  200ef7:	00 78 05             	add    BYTE PTR [rax+0x5],bh
  200efa:	00 00                	add    BYTE PTR [rax],al
  200efc:	00 00                	add    BYTE PTR [rax],al
  200efe:	00 00                	add    BYTE PTR [rax],al
  200f00:	ff                   	(bad)  
  200f01:	ff                   	(bad)  
  200f02:	ff 6f 00             	jmp    FWORD PTR [rdi+0x0]
  200f05:	00 00                	add    BYTE PTR [rax],al
  200f07:	00 02                	add    BYTE PTR [rdx],al
  200f09:	00 00                	add    BYTE PTR [rax],al
  200f0b:	00 00                	add    BYTE PTR [rax],al
  200f0d:	00 00                	add    BYTE PTR [rax],al
  200f0f:	00 f0                	add    al,dh
  200f11:	ff                   	(bad)  
  200f12:	ff 6f 00             	jmp    FWORD PTR [rdi+0x0]
  200f15:	00 00                	add    BYTE PTR [rax],al
  200f17:	00 5c 05 00          	add    BYTE PTR [rbp+rax*1+0x0],bl
  200f1b:	00 00                	add    BYTE PTR [rax],al
  200f1d:	00 00                	add    BYTE PTR [rax],al
  200f1f:	00 f9                	add    cl,bh
  200f21:	ff                   	(bad)  
  200f22:	ff 6f 00             	jmp    FWORD PTR [rdi+0x0]
  200f25:	00 00                	add    BYTE PTR [rax],al
  200f27:	00 03                	add    BYTE PTR [rbx],al
	...

Disassembly of section .got:

0000000000200f80 <_GLOBAL_OFFSET_TABLE_>:
  200f80:	80 0d 20 00 00 00 00 	or     BYTE PTR [rip+0x20],0x0        # 200fa7 <_GLOBAL_OFFSET_TABLE_+0x27>
	...
  200f97:	00 66 07             	add    BYTE PTR [rsi+0x7],ah
  200f9a:	00 00                	add    BYTE PTR [rax],al
  200f9c:	00 00                	add    BYTE PTR [rax],al
  200f9e:	00 00                	add    BYTE PTR [rax],al
  200fa0:	76 07                	jbe    200fa9 <_GLOBAL_OFFSET_TABLE_+0x29>
  200fa2:	00 00                	add    BYTE PTR [rax],al
  200fa4:	00 00                	add    BYTE PTR [rax],al
  200fa6:	00 00                	add    BYTE PTR [rax],al
  200fa8:	86 07                	xchg   BYTE PTR [rdi],al
  200faa:	00 00                	add    BYTE PTR [rax],al
  200fac:	00 00                	add    BYTE PTR [rax],al
  200fae:	00 00                	add    BYTE PTR [rax],al
  200fb0:	96                   	xchg   esi,eax
  200fb1:	07                   	(bad)  
  200fb2:	00 00                	add    BYTE PTR [rax],al
  200fb4:	00 00                	add    BYTE PTR [rax],al
  200fb6:	00 00                	add    BYTE PTR [rax],al
  200fb8:	a6                   	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  200fb9:	07                   	(bad)  
  200fba:	00 00                	add    BYTE PTR [rax],al
  200fbc:	00 00                	add    BYTE PTR [rax],al
  200fbe:	00 00                	add    BYTE PTR [rax],al
  200fc0:	b6 07                	mov    dh,0x7
  200fc2:	00 00                	add    BYTE PTR [rax],al
  200fc4:	00 00                	add    BYTE PTR [rax],al
  200fc6:	00 00                	add    BYTE PTR [rax],al
  200fc8:	c6 07 00             	mov    BYTE PTR [rdi],0x0
  200fcb:	00 00                	add    BYTE PTR [rax],al
  200fcd:	00 00                	add    BYTE PTR [rax],al
  200fcf:	00 d6                	add    dh,dl
  200fd1:	07                   	(bad)  
	...

Disassembly of section .data:

0000000000201000 <__data_start>:
	...

0000000000201008 <__dso_handle>:
  201008:	08 10                	or     BYTE PTR [rax],dl
  20100a:	20 00                	and    BYTE PTR [rax],al
  20100c:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .bss:

0000000000201010 <__bss_start>:
	...

Disassembly of section .comment:

0000000000000000 <.comment>:
   0:	47                   	rex.RXB
   1:	43                   	rex.XB
   2:	43 3a 20             	rex.XB cmp spl,BYTE PTR [r8]
   5:	28 55 62             	sub    BYTE PTR [rbp+0x62],dl
   8:	75 6e                	jne    78 <_init-0x6c0>
   a:	74 75                	je     81 <_init-0x6b7>
   c:	20 37                	and    BYTE PTR [rdi],dh
   e:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  11:	30 2d 32 37 75 62    	xor    BYTE PTR [rip+0x62753732],ch        # 62753749 <_end+0x62552731>
  17:	75 6e                	jne    87 <_init-0x6b1>
  19:	74 75                	je     90 <_init-0x6a8>
  1b:	31 7e 31             	xor    DWORD PTR [rsi+0x31],edi
  1e:	38 2e                	cmp    BYTE PTR [rsi],ch
  20:	30 34 29             	xor    BYTE PTR [rcx+rbp*1],dh
  23:	20 37                	and    BYTE PTR [rdi],dh
  25:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  28:	30 00                	xor    BYTE PTR [rax],al

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
   0:	2c 00                	sub    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   4:	02 00                	add    al,BYTE PTR [rax]
   6:	00 00                	add    BYTE PTR [rax],al
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 00                	or     BYTE PTR [rax],al
   c:	00 00                	add    BYTE PTR [rax],al
   e:	00 00                	add    BYTE PTR [rax],al
  10:	fa                   	cli    
  11:	08 00                	or     BYTE PTR [rax],al
  13:	00 00                	add    BYTE PTR [rax],al
  15:	00 00                	add    BYTE PTR [rax],al
  17:	00 82 01 00 00 00    	add    BYTE PTR [rdx+0x1],al
	...

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
   0:	f3 00 00             	repz add BYTE PTR [rax],al
   3:	00 04 00             	add    BYTE PTR [rax+rax*1],al
   6:	00 00                	add    BYTE PTR [rax],al
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 01                	or     BYTE PTR [rcx],al
   c:	a0 00 00 00 0e 02 08 	movabs al,ds:0x8020e000000
  13:	00 00 
  15:	00 26                	add    BYTE PTR [rsi],ah
  17:	00 00                	add    BYTE PTR [rax],al
  19:	00 fa                	add    dl,bh
  1b:	08 00                	or     BYTE PTR [rax],al
  1d:	00 00                	add    BYTE PTR [rax],al
  1f:	00 00                	add    BYTE PTR [rax],al
  21:	00 82 01 00 00 00    	add    BYTE PTR [rdx+0x1],al
	...
  2f:	00 00                	add    BYTE PTR [rax],al
  31:	00 02                	add    BYTE PTR [rdx],al
  33:	04 05                	add    al,0x5
  35:	26 01 00             	add    DWORD PTR es:[rax],eax
  38:	00 03                	add    BYTE PTR [rbx],al
  3a:	32 00                	xor    al,BYTE PTR [rax]
  3c:	00 00                	add    BYTE PTR [rax],al
  3e:	04 36                	add    al,0x36
  40:	01 00                	add    DWORD PTR [rax],eax
  42:	00 01                	add    BYTE PTR [rcx],al
  44:	0f 32                	rdmsr  
  46:	00 00                	add    BYTE PTR [rax],al
  48:	00 3f                	add    BYTE PTR [rdi],bh
  4a:	0a 00                	or     al,BYTE PTR [rax]
  4c:	00 00                	add    BYTE PTR [rax],al
  4e:	00 00                	add    BYTE PTR [rax],al
  50:	00 3d 00 00 00 00    	add    BYTE PTR [rip+0x0],bh        # 56 <_init-0x6e2>
  56:	00 00                	add    BYTE PTR [rax],al
  58:	00 01                	add    BYTE PTR [rcx],al
  5a:	9c                   	pushf  
  5b:	7d 00                	jge    5d <_init-0x6db>
  5d:	00 00                	add    BYTE PTR [rax],al
  5f:	05 3b 01 00 00       	add    eax,0x13b
  64:	01 0f                	add    DWORD PTR [rdi],ecx
  66:	39 00                	cmp    DWORD PTR [rax],eax
  68:	00 00                	add    BYTE PTR [rax],al
  6a:	02 91 6c 05 40 01    	add    dl,BYTE PTR [rcx+0x140056c]
  70:	00 00                	add    BYTE PTR [rax],al
  72:	01 0f                	add    DWORD PTR [rdi],ecx
  74:	7d 00                	jge    76 <_init-0x6c2>
  76:	00 00                	add    BYTE PTR [rax],al
  78:	03 91 60 06 00 06    	add    edx,DWORD PTR [rcx+0x6000660]
  7e:	08 83 00 00 00 02    	or     BYTE PTR [rbx+0x2000000],al
  84:	01 08                	add    DWORD PTR [rax],ecx
  86:	14 00                	adc    al,0x0
  88:	00 00                	add    BYTE PTR [rax],al
  8a:	07                   	(bad)  
  8b:	00 00                	add    BYTE PTR [rax],al
  8d:	00 00                	add    BYTE PTR [rax],al
  8f:	01 01                	add    DWORD PTR [rcx],eax
  91:	02 fa                	add    bh,dl
  93:	08 00                	or     BYTE PTR [rax],al
  95:	00 00                	add    BYTE PTR [rax],al
  97:	00 00                	add    BYTE PTR [rax],al
  99:	00 45 01             	add    BYTE PTR [rbp+0x1],al
  9c:	00 00                	add    BYTE PTR [rax],al
  9e:	00 00                	add    BYTE PTR [rax],al
  a0:	00 00                	add    BYTE PTR [rax],al
  a2:	01 9c 08 1c 01 00 00 	add    DWORD PTR [rax+rcx*1+0x11c],ebx
  a9:	01 05 32 00 00 00    	add    DWORD PTR [rip+0x32],eax        # e1 <_init-0x657>
  af:	02 91 6c 09 05 09    	add    dl,BYTE PTR [rcx+0x905096c]
  b5:	00 00                	add    BYTE PTR [rax],al
  b7:	00 00                	add    BYTE PTR [rax],al
  b9:	00 00                	add    BYTE PTR [rax],al
  bb:	65 00 00             	add    BYTE PTR gs:[rax],al
  be:	00 00                	add    BYTE PTR [rax],al
  c0:	00 00                	add    BYTE PTR [rax],al
  c2:	00 09                	add    BYTE PTR [rcx],cl
  c4:	6a 09                	push   0x9
  c6:	00 00                	add    BYTE PTR [rax],al
  c8:	00 00                	add    BYTE PTR [rax],al
  ca:	00 00                	add    BYTE PTR [rax],al
  cc:	65 00 00             	add    BYTE PTR gs:[rax],al
  cf:	00 00                	add    BYTE PTR [rax],al
  d1:	00 00                	add    BYTE PTR [rax],al
  d3:	00 09                	add    BYTE PTR [rcx],cl
  d5:	d7                   	xlat   BYTE PTR ds:[rbx]
  d6:	09 00                	or     DWORD PTR [rax],eax
  d8:	00 00                	add    BYTE PTR [rax],al
  da:	00 00                	add    BYTE PTR [rax],al
  dc:	00 65 00             	add    BYTE PTR [rbp+0x0],ah
  df:	00 00                	add    BYTE PTR [rax],al
  e1:	00 00                	add    BYTE PTR [rax],al
  e3:	00 00                	add    BYTE PTR [rax],al
  e5:	0a 21                	or     ah,BYTE PTR [rcx]
  e7:	01 00                	add    DWORD PTR [rax],eax
  e9:	00 01                	add    BYTE PTR [rcx],al
  eb:	06                   	(bad)  
  ec:	39 00                	cmp    DWORD PTR [rax],eax
  ee:	00 00                	add    BYTE PTR [rax],al
  f0:	04 05                	add    al,0x5
  f2:	00 00                	add    BYTE PTR [rax],al
  f4:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
   0:	01 11                	add    DWORD PTR [rcx],edx
   2:	01 25 0e 13 0b 42    	add    DWORD PTR [rip+0x420b130e],esp        # 420b1316 <_end+0x41eb02fe>
   8:	0b 03                	or     eax,DWORD PTR [rbx]
   a:	0e                   	(bad)  
   b:	1b 0e                	sbb    ecx,DWORD PTR [rsi]
   d:	11 01                	adc    DWORD PTR [rcx],eax
   f:	12 07                	adc    al,BYTE PTR [rdi]
  11:	10 17                	adc    BYTE PTR [rdi],dl
  13:	99                   	cdq    
  14:	42 17                	rex.X (bad) 
  16:	00 00                	add    BYTE PTR [rax],al
  18:	02 24 00             	add    ah,BYTE PTR [rax+rax*1]
  1b:	0b 0b                	or     ecx,DWORD PTR [rbx]
  1d:	3e 0b 03             	or     eax,DWORD PTR ds:[rbx]
  20:	0e                   	(bad)  
  21:	00 00                	add    BYTE PTR [rax],al
  23:	03 26                	add    esp,DWORD PTR [rsi]
  25:	00 49 13             	add    BYTE PTR [rcx+0x13],cl
  28:	00 00                	add    BYTE PTR [rax],al
  2a:	04 2e                	add    al,0x2e
  2c:	01 3f                	add    DWORD PTR [rdi],edi
  2e:	19 03                	sbb    DWORD PTR [rbx],eax
  30:	0e                   	(bad)  
  31:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  33:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  35:	49 13 11             	adc    rdx,QWORD PTR [r9]
  38:	01 12                	add    DWORD PTR [rdx],edx
  3a:	07                   	(bad)  
  3b:	40 18 96 42 19 01 13 	sbb    BYTE PTR [rsi+0x13011942],dl
  42:	00 00                	add    BYTE PTR [rax],al
  44:	05 05 00 03 0e       	add    eax,0xe030005
  49:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  4b:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  4d:	49 13 02             	adc    rax,QWORD PTR [r10]
  50:	18 00                	sbb    BYTE PTR [rax],al
  52:	00 06                	add    BYTE PTR [rsi],al
  54:	0f 00 0b             	str    WORD PTR [rbx]
  57:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  5a:	00 00                	add    BYTE PTR [rax],al
  5c:	07                   	(bad)  
  5d:	2e 01 03             	add    DWORD PTR cs:[rbx],eax
  60:	0e                   	(bad)  
  61:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  63:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  65:	6a 19                	push   0x19
  67:	36 0b 11             	or     edx,DWORD PTR ss:[rcx]
  6a:	01 12                	add    DWORD PTR [rdx],edx
  6c:	07                   	(bad)  
  6d:	40 18 96 42 19 00 00 	sbb    BYTE PTR [rsi+0x1942],dl
  74:	08 34 00             	or     BYTE PTR [rax+rax*1],dh
  77:	03 0e                	add    ecx,DWORD PTR [rsi]
  79:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  7b:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  7d:	49 13 02             	adc    rax,QWORD PTR [r10]
  80:	18 00                	sbb    BYTE PTR [rax],al
  82:	00 09                	add    BYTE PTR [rcx],cl
  84:	0b 00                	or     eax,DWORD PTR [rax]
  86:	11 01                	adc    DWORD PTR [rcx],eax
  88:	12 07                	adc    al,BYTE PTR [rdi]
  8a:	00 00                	add    BYTE PTR [rax],al
  8c:	0a 27                	or     ah,BYTE PTR [rdi]
  8e:	00 03                	add    BYTE PTR [rbx],al
  90:	0e                   	(bad)  
  91:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  93:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  95:	49 13 1c 0a          	adc    rbx,QWORD PTR [r10+rcx*1]
  99:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
   0:	46 00 00             	rex.RX add BYTE PTR [rax],r8b
   3:	00 02                	add    BYTE PTR [rdx],al
   5:	00 22                	add    BYTE PTR [rdx],ah
   7:	00 00                	add    BYTE PTR [rax],al
   9:	00 01                	add    BYTE PTR [rcx],al
   b:	01 fb                	add    ebx,edi
   d:	0e                   	(bad)  
   e:	0d 00 01 01 01       	or     eax,0x1010100
  13:	01 00                	add    DWORD PTR [rax],eax
  15:	00 00                	add    BYTE PTR [rax],al
  17:	01 00                	add    DWORD PTR [rax],eax
  19:	00 01                	add    BYTE PTR [rcx],al
  1b:	00 69 66             	add    BYTE PTR [rcx+0x66],ch
  1e:	5f                   	pop    rdi
  1f:	74 68                	je     89 <_init-0x6af>
  21:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
  23:	2e 66 30 38          	data16 xor BYTE PTR cs:[rax],bh
  27:	00 00                	add    BYTE PTR [rax],al
  29:	00 00                	add    BYTE PTR [rax],al
  2b:	00 00                	add    BYTE PTR [rax],al
  2d:	09 02                	or     DWORD PTR [rdx],eax
  2f:	fa                   	cli    
  30:	08 00                	or     BYTE PTR [rax],al
  32:	00 00                	add    BYTE PTR [rax],al
  34:	00 00                	add    BYTE PTR [rax],al
  36:	00 01                	add    BYTE PTR [rcx],al
  38:	b3 02                	mov    bl,0x2
  3a:	65 13 02             	adc    eax,DWORD PTR gs:[rdx]
  3d:	65 14 83             	gs adc al,0x83
  40:	02 65 15             	add    ah,BYTE PTR [rbp+0x15]
  43:	3c e4                	cmp    al,0xe4
  45:	02 2e                	add    ch,BYTE PTR [rsi]
  47:	00 01                	add    BYTE PTR [rcx],al
  49:	01                   	.byte 0x1

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
   0:	69 66 5f 74 68 65 6e 	imul   esp,DWORD PTR [rsi+0x5f],0x6e656874
   7:	00 69 66             	add    BYTE PTR [rcx+0x66],ch
   a:	5f                   	pop    rdi
   b:	74 68                	je     75 <_init-0x6c3>
   d:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
   f:	2e 66 30 38          	data16 xor BYTE PTR cs:[rax],bh
  13:	00 63 68             	add    BYTE PTR [rbx+0x68],ah
  16:	61                   	(bad)  
  17:	72 61                	jb     7a <_init-0x6be>
  19:	63 74 65 72          	movsxd esi,DWORD PTR [rbp+riz*2+0x72]
  1d:	28 6b 69             	sub    BYTE PTR [rbx+0x69],ch
  20:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  21:	64 3d 31 29 00 2f    	fs cmp eax,0x2f002931
  27:	68 6f 6d 65 2f       	push   0x2f656d6f
  2c:	75 62                	jne    90 <_init-0x6a8>
  2e:	75 6e                	jne    9e <_init-0x69a>
  30:	74 75                	je     a7 <_init-0x691>
  32:	2f                   	(bad)  
  33:	45 6e                	rex.RB outs dx,BYTE PTR ds:[rsi]
  35:	67 69 6e 65 65 72 69 	imul   ebp,DWORD PTR [esi+0x65],0x6e697265
  3c:	6e 
  3d:	67 2f                	addr32 (bad) 
  3f:	50                   	push   rax
  40:	72 6f                	jb     b1 <_init-0x687>
  42:	67 72 61             	addr32 jb a6 <_init-0x692>
  45:	6d                   	ins    DWORD PTR es:[rdi],dx
  46:	6d                   	ins    DWORD PTR es:[rdi],dx
  47:	69 6e 67 2f 44 69 73 	imul   ebp,DWORD PTR [rsi+0x67],0x7369442f
  4e:	61                   	(bad)  
  4f:	73 73                	jae    c4 <_init-0x674>
  51:	65 6d                	gs ins DWORD PTR es:[rdi],dx
  53:	62                   	(bad)  
  54:	6c                   	ins    BYTE PTR es:[rdi],dx
  55:	69 6e 67 2d 42 69 6e 	imul   ebp,DWORD PTR [rsi+0x67],0x6e69422d
  5c:	61                   	(bad)  
  5d:	72 69                	jb     c8 <_init-0x670>
  5f:	65 73 2f             	gs jae 91 <_init-0x6a7>
  62:	46 6f                	rex.RX outs dx,DWORD PTR ds:[rsi]
  64:	72 74                	jb     da <_init-0x65e>
  66:	72 61                	jb     c9 <_init-0x66f>
  68:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  69:	2f                   	(bad)  
  6a:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  6c:	74 65                	je     d3 <_init-0x665>
  6e:	6c                   	ins    BYTE PTR es:[rdi],dx
  6f:	5f                   	pop    rdi
  70:	61                   	(bad)  
  71:	72 63                	jb     d6 <_init-0x662>
  73:	68 69 74 65 63       	push   0x63657469
  78:	74 75                	je     ef <_init-0x649>
  7a:	72 65                	jb     e1 <_init-0x657>
  7c:	2f                   	(bad)  
  7d:	41                   	rex.B
  7e:	4d                   	rex.WRB
  7f:	44                   	rex.R
  80:	36 34 2f             	ss xor al,0x2f
  83:	43 6f                	rex.XB outs dx,DWORD PTR ds:[rsi]
  85:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  86:	64 69 74 69 6f 6e 61 	imul   esi,DWORD PTR fs:[rcx+rbp*2+0x6f],0x736c616e
  8d:	6c 73 
  8f:	2f                   	(bad)  
  90:	57                   	push   rdi
  91:	69 74 68 5f 44 65 62 	imul   esi,DWORD PTR [rax+rbp*2+0x5f],0x75626544
  98:	75 
  99:	67 5f                	addr32 pop rdi
  9b:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  9d:	66 6f                	outs   dx,WORD PTR ds:[rsi]
  9f:	00 47 4e             	add    BYTE PTR [rdi+0x4e],al
  a2:	55                   	push   rbp
  a3:	20 46 6f             	and    BYTE PTR [rsi+0x6f],al
  a6:	72 74                	jb     11c <_init-0x61c>
  a8:	72 61                	jb     10b <_init-0x62d>
  aa:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  ab:	32 30                	xor    dh,BYTE PTR [rax]
  ad:	30 38                	xor    BYTE PTR [rax],bh
  af:	20 37                	and    BYTE PTR [rdi],dh
  b1:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  b4:	30 20                	xor    BYTE PTR [rax],ah
  b6:	2d 6d 74 75 6e       	sub    eax,0x6e75746d
  bb:	65 3d 67 65 6e 65    	gs cmp eax,0x656e6567
  c1:	72 69                	jb     12c <_init-0x60c>
  c3:	63 20                	movsxd esp,DWORD PTR [rax]
  c5:	2d 6d 61 72 63       	sub    eax,0x6372616d
  ca:	68 3d 78 38 36       	push   0x3638783d
  cf:	2d 36 34 20 2d       	sub    eax,0x2d203436
  d4:	67 67 64 62 33       	addr32 addr32 fs (bad) 
  d9:	20 2d 66 69 6e 74    	and    BYTE PTR [rip+0x746e6966],ch        # 746e6a45 <_end+0x744e5a2d>
  df:	72 69                	jb     14a <_init-0x5ee>
  e1:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  e2:	73 69                	jae    14d <_init-0x5eb>
  e4:	63 2d 6d 6f 64 75    	movsxd ebp,DWORD PTR [rip+0x75646f6d]        # 75647057 <_end+0x7544603f>
  ea:	6c                   	ins    BYTE PTR es:[rdi],dx
  eb:	65 73 2d             	gs jae 11b <_init-0x61d>
  ee:	70 61                	jo     151 <_init-0x5e7>
  f0:	74 68                	je     15a <_init-0x5de>
  f2:	20 2f                	and    BYTE PTR [rdi],ch
  f4:	75 73                	jne    169 <_init-0x5cf>
  f6:	72 2f                	jb     127 <_init-0x611>
  f8:	6c                   	ins    BYTE PTR es:[rdi],dx
  f9:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [rdx+0x2f],0x2f636367
 100:	78 38                	js     13a <_init-0x5fe>
 102:	36 5f                	ss pop rdi
 104:	36 34 2d             	ss xor al,0x2d
 107:	6c                   	ins    BYTE PTR es:[rdi],dx
 108:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [rsi+0x75],0x6e672d78
 10f:	75 2f                	jne    140 <_init-0x5f8>
 111:	37                   	(bad)  
 112:	2f                   	(bad)  
 113:	66 69 6e 63 6c 75    	imul   bp,WORD PTR [rsi+0x63],0x756c
 119:	64 65 00 6e 75       	fs add BYTE PTR gs:[rsi+0x75],ch
 11e:	6d                   	ins    DWORD PTR es:[rdi],dx
 11f:	31 00                	xor    DWORD PTR [rax],eax
 121:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 122:	75 6d                	jne    191 <_init-0x5a7>
 124:	32 00                	xor    al,BYTE PTR [rax]
 126:	69 6e 74 65 67 65 72 	imul   ebp,DWORD PTR [rsi+0x74],0x72656765
 12d:	28 6b 69             	sub    BYTE PTR [rbx+0x69],ch
 130:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 131:	64 3d 34 29 00 6d    	fs cmp eax,0x6d002934
 137:	61                   	(bad)  
 138:	69 6e 00 61 72 67 63 	imul   ebp,DWORD PTR [rsi+0x0],0x63677261
 13f:	00 61 72             	add    BYTE PTR [rcx+0x72],ah
 142:	67 76 00             	addr32 jbe 145 <_init-0x5f3>

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
   0:	04 00                	add    al,0x0
   2:	02 00                	add    al,BYTE PTR [rax]
   4:	00 00                	add    BYTE PTR [rax],al
   6:	00 03                	add    BYTE PTR [rbx],al
   8:	00 01                	add    BYTE PTR [rcx],al
   a:	04 00                	add    al,0x0
Contents of the .eh_frame section:


00000000 0000000000000014 00000000 CIE
  Version:               1
  Augmentation:          "zR"
  Code alignment factor: 1
  Data alignment factor: -8
  Return address column: 16
  Augmentation data:     1b
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_offset: r16 (rip) at cfa-8
  DW_CFA_undefined: r16 (rip)

00000018 0000000000000014 0000001c FDE cie=00000000 pc=00000000000007f0..000000000000081b
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000030 0000000000000014 00000000 CIE
  Version:               1
  Augmentation:          "zR"
  Code alignment factor: 1
  Data alignment factor: -8
  Return address column: 16
  Augmentation data:     1b
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_offset: r16 (rip) at cfa-8
  DW_CFA_nop
  DW_CFA_nop

00000048 0000000000000024 0000001c FDE cie=00000030 pc=0000000000000750..00000000000007e0
  DW_CFA_def_cfa_offset: 16
  DW_CFA_advance_loc: 6 to 0000000000000756
  DW_CFA_def_cfa_offset: 24
  DW_CFA_advance_loc: 10 to 0000000000000760
  DW_CFA_def_cfa_expression (DW_OP_breg7 (rsp): 8; DW_OP_breg16 (rip): 0; DW_OP_lit15; DW_OP_and; DW_OP_lit11; DW_OP_ge; DW_OP_lit3; DW_OP_shl; DW_OP_plus)
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000070 0000000000000014 00000044 FDE cie=00000030 pc=00000000000007e0..00000000000007e8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000088 000000000000001c 0000005c FDE cie=00000030 pc=00000000000008fa..0000000000000a3f
  DW_CFA_advance_loc: 1 to 00000000000008fb
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 00000000000008fe
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc2: 320 to 0000000000000a3e
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop

000000a8 000000000000001c 0000007c FDE cie=00000030 pc=0000000000000a3f..0000000000000a7c
  DW_CFA_advance_loc: 1 to 0000000000000a40
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000a43
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 56 to 0000000000000a7b
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

000000c8 0000000000000044 0000009c FDE cie=00000030 pc=0000000000000a80..0000000000000ae5
  DW_CFA_advance_loc: 2 to 0000000000000a82
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r15 (r15) at cfa-16
  DW_CFA_advance_loc: 2 to 0000000000000a84
  DW_CFA_def_cfa_offset: 24
  DW_CFA_offset: r14 (r14) at cfa-24
  DW_CFA_advance_loc: 5 to 0000000000000a89
  DW_CFA_def_cfa_offset: 32
  DW_CFA_offset: r13 (r13) at cfa-32
  DW_CFA_advance_loc: 2 to 0000000000000a8b
  DW_CFA_def_cfa_offset: 40
  DW_CFA_offset: r12 (r12) at cfa-40
  DW_CFA_advance_loc: 8 to 0000000000000a93
  DW_CFA_def_cfa_offset: 48
  DW_CFA_offset: r6 (rbp) at cfa-48
  DW_CFA_advance_loc: 8 to 0000000000000a9b
  DW_CFA_def_cfa_offset: 56
  DW_CFA_offset: r3 (rbx) at cfa-56
  DW_CFA_advance_loc: 13 to 0000000000000aa8
  DW_CFA_def_cfa_offset: 64
  DW_CFA_advance_loc: 50 to 0000000000000ada
  DW_CFA_def_cfa_offset: 56
  DW_CFA_advance_loc: 1 to 0000000000000adb
  DW_CFA_def_cfa_offset: 48
  DW_CFA_advance_loc: 1 to 0000000000000adc
  DW_CFA_def_cfa_offset: 40
  DW_CFA_advance_loc: 2 to 0000000000000ade
  DW_CFA_def_cfa_offset: 32
  DW_CFA_advance_loc: 2 to 0000000000000ae0
  DW_CFA_def_cfa_offset: 24
  DW_CFA_advance_loc: 2 to 0000000000000ae2
  DW_CFA_def_cfa_offset: 16
  DW_CFA_advance_loc: 2 to 0000000000000ae4
  DW_CFA_def_cfa_offset: 8
  DW_CFA_nop

00000110 0000000000000010 000000e4 FDE cie=00000030 pc=0000000000000af0..0000000000000af2
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000124 ZERO terminator


Contents of the .debug_aranges section:

  Length:                   44
  Version:                  2
  Offset into .debug_info:  0x0
  Pointer Size:             8
  Segment Size:             0

    Address            Length
    00000000000008fa 0000000000000182 
    0000000000000000 0000000000000000 

Contents of the .debug_info section:

  Compilation Unit @ offset 0x0:
   Length:        0xf3 (32-bit)
   Version:       4
   Abbrev Offset: 0x0
   Pointer Size:  8
 <0><b>: Abbrev Number: 1 (DW_TAG_compile_unit)
    <c>   DW_AT_producer    : (indirect string, offset: 0xa0): GNU Fortran2008 7.3.0 -mtune=generic -march=x86-64 -ggdb3 -fintrinsic-modules-path /usr/lib/gcc/x86_64-linux-gnu/7/finclude
    <10>   DW_AT_language    : 14	(Fortran 95)
    <11>   DW_AT_identifier_case: 2	(down_case)
    <12>   DW_AT_name        : (indirect string, offset: 0x8): if_then.f08
    <16>   DW_AT_comp_dir    : (indirect string, offset: 0x26): /home/ubuntu/Engineering/Programming/Disassembling-Binaries/Fortran/Intel_architecture/AMD64/Conditionals/With_Debug_Info
    <1a>   DW_AT_low_pc      : 0x8fa
    <22>   DW_AT_high_pc     : 0x182
    <2a>   DW_AT_stmt_list   : 0x0
    <2e>   DW_AT_GNU_macros  : 0x0
 <1><32>: Abbrev Number: 2 (DW_TAG_base_type)
    <33>   DW_AT_byte_size   : 4
    <34>   DW_AT_encoding    : 5	(signed)
    <35>   DW_AT_name        : (indirect string, offset: 0x126): integer(kind=4)
 <1><39>: Abbrev Number: 3 (DW_TAG_const_type)
    <3a>   DW_AT_type        : <0x32>
 <1><3e>: Abbrev Number: 4 (DW_TAG_subprogram)
    <3f>   DW_AT_external    : 1
    <3f>   DW_AT_name        : (indirect string, offset: 0x136): main
    <43>   DW_AT_decl_file   : 1
    <44>   DW_AT_decl_line   : 15
    <45>   DW_AT_type        : <0x32>
    <49>   DW_AT_low_pc      : 0xa3f
    <51>   DW_AT_high_pc     : 0x3d
    <59>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <5b>   DW_AT_GNU_all_tail_call_sites: 1
    <5b>   DW_AT_sibling     : <0x7d>
 <2><5f>: Abbrev Number: 5 (DW_TAG_formal_parameter)
    <60>   DW_AT_name        : (indirect string, offset: 0x13b): argc
    <64>   DW_AT_decl_file   : 1
    <65>   DW_AT_decl_line   : 15
    <66>   DW_AT_type        : <0x39>
    <6a>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><6d>: Abbrev Number: 5 (DW_TAG_formal_parameter)
    <6e>   DW_AT_name        : (indirect string, offset: 0x140): argv
    <72>   DW_AT_decl_file   : 1
    <73>   DW_AT_decl_line   : 15
    <74>   DW_AT_type        : <0x7d>
    <78>   DW_AT_location    : 3 byte block: 91 60 6 	(DW_OP_fbreg: -32; DW_OP_deref)
 <2><7c>: Abbrev Number: 0
 <1><7d>: Abbrev Number: 6 (DW_TAG_pointer_type)
    <7e>   DW_AT_byte_size   : 8
    <7f>   DW_AT_type        : <0x83>
 <1><83>: Abbrev Number: 2 (DW_TAG_base_type)
    <84>   DW_AT_byte_size   : 1
    <85>   DW_AT_encoding    : 8	(unsigned char)
    <86>   DW_AT_name        : (indirect string, offset: 0x14): character(kind=1)
 <1><8a>: Abbrev Number: 7 (DW_TAG_subprogram)
    <8b>   DW_AT_name        : (indirect string, offset: 0x0): if_then
    <8f>   DW_AT_decl_file   : 1
    <90>   DW_AT_decl_line   : 1
    <91>   DW_AT_main_subprogram: 1
    <91>   DW_AT_calling_convention: 2	(program)
    <92>   DW_AT_low_pc      : 0x8fa
    <9a>   DW_AT_high_pc     : 0x145
    <a2>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <a4>   DW_AT_GNU_all_tail_call_sites: 1
 <2><a4>: Abbrev Number: 8 (DW_TAG_variable)
    <a5>   DW_AT_name        : (indirect string, offset: 0x11c): num1
    <a9>   DW_AT_decl_file   : 1
    <aa>   DW_AT_decl_line   : 5
    <ab>   DW_AT_type        : <0x32>
    <af>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><b2>: Abbrev Number: 9 (DW_TAG_lexical_block)
    <b3>   DW_AT_low_pc      : 0x905
    <bb>   DW_AT_high_pc     : 0x65
 <2><c3>: Abbrev Number: 9 (DW_TAG_lexical_block)
    <c4>   DW_AT_low_pc      : 0x96a
    <cc>   DW_AT_high_pc     : 0x65
 <2><d4>: Abbrev Number: 9 (DW_TAG_lexical_block)
    <d5>   DW_AT_low_pc      : 0x9d7
    <dd>   DW_AT_high_pc     : 0x65
 <2><e5>: Abbrev Number: 10 (DW_TAG_constant)
    <e6>   DW_AT_name        : (indirect string, offset: 0x121): num2
    <ea>   DW_AT_decl_file   : 1
    <eb>   DW_AT_decl_line   : 6
    <ec>   DW_AT_type        : <0x39>
    <f0>   DW_AT_const_value : 4 byte block: 5 0 0 0 
 <2><f5>: Abbrev Number: 0
 <1><f6>: Abbrev Number: 0

Contents of the .debug_abbrev section:

  Number TAG (0x0)
   1      DW_TAG_compile_unit    [has children]
    DW_AT_producer     DW_FORM_strp
    DW_AT_language     DW_FORM_data1
    DW_AT_identifier_case DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT_comp_dir     DW_FORM_strp
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_stmt_list    DW_FORM_sec_offset
    DW_AT_GNU_macros   DW_FORM_sec_offset
    DW_AT value: 0     DW_FORM value: 0
   2      DW_TAG_base_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_encoding     DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT value: 0     DW_FORM value: 0
   3      DW_TAG_const_type    [no children]
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   4      DW_TAG_subprogram    [has children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   5      DW_TAG_formal_parameter    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   6      DW_TAG_pointer_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   7      DW_TAG_subprogram    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_main_subprogram DW_FORM_flag_present
    DW_AT_calling_convention DW_FORM_data1
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   8      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   9      DW_TAG_lexical_block    [no children]
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT value: 0     DW_FORM value: 0
   10      DW_TAG_constant    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_const_value  DW_FORM_block1
    DW_AT value: 0     DW_FORM value: 0

Raw dump of debug contents of section .debug_line:

  Offset:                      0x0
  Length:                      70
  DWARF Version:               2
  Prologue Length:             34
  Minimum Instruction Length:  1
  Initial value of 'is_stmt':  1
  Line Base:                   -5
  Line Range:                  14
  Opcode Base:                 13

 Opcodes:
  Opcode 1 has 0 args
  Opcode 2 has 1 arg
  Opcode 3 has 1 arg
  Opcode 4 has 1 arg
  Opcode 5 has 1 arg
  Opcode 6 has 0 args
  Opcode 7 has 0 args
  Opcode 8 has 0 args
  Opcode 9 has 1 arg
  Opcode 10 has 0 args
  Opcode 11 has 0 args
  Opcode 12 has 1 arg

 The Directory Table is empty.

 The File Name Table (offset 0x1c):
  Entry	Dir	Time	Size	Name
  1	0	0	0	if_then.f08

 Line Number Statements:
  [0x0000002c]  Extended opcode 2: set Address to 0x8fa
  [0x00000037]  Copy
  [0x00000038]  Special opcode 166: advance Address by 11 to 0x905 and Line by 7 to 8
  [0x00000039]  Advance PC by 101 to 0x96a
  [0x0000003b]  Special opcode 6: advance Address by 0 to 0x96a and Line by 1 to 9
  [0x0000003c]  Advance PC by 101 to 0x9cf
  [0x0000003e]  Special opcode 7: advance Address by 0 to 0x9cf and Line by 2 to 11
  [0x0000003f]  Special opcode 118: advance Address by 8 to 0x9d7 and Line by 1 to 12
  [0x00000040]  Advance PC by 101 to 0xa3c
  [0x00000042]  Special opcode 8: advance Address by 0 to 0xa3c and Line by 3 to 15
  [0x00000043]  Special opcode 47: advance Address by 3 to 0xa3f and Line by 0 to 15
  [0x00000044]  Special opcode 215: advance Address by 15 to 0xa4e and Line by 0 to 15
  [0x00000045]  Advance PC by 46 to 0xa7c
  [0x00000047]  Extended opcode 1: End of Sequence


Contents of the .debug_str section:

  0x00000000 69665f74 68656e00 69665f74 68656e2e if_then.if_then.
  0x00000010 66303800 63686172 61637465 72286b69 f08.character(ki
  0x00000020 6e643d31 29002f68 6f6d652f 7562756e nd=1)./home/ubun
  0x00000030 74752f45 6e67696e 65657269 6e672f50 tu/Engineering/P
  0x00000040 726f6772 616d6d69 6e672f44 69736173 rogramming/Disas
  0x00000050 73656d62 6c696e67 2d42696e 61726965 sembling-Binarie
  0x00000060 732f466f 72747261 6e2f496e 74656c5f s/Fortran/Intel_
  0x00000070 61726368 69746563 74757265 2f414d44 architecture/AMD
  0x00000080 36342f43 6f6e6469 74696f6e 616c732f 64/Conditionals/
  0x00000090 57697468 5f446562 75675f49 6e666f00 With_Debug_Info.
  0x000000a0 474e5520 466f7274 72616e32 30303820 GNU Fortran2008 
  0x000000b0 372e332e 30202d6d 74756e65 3d67656e 7.3.0 -mtune=gen
  0x000000c0 65726963 202d6d61 7263683d 7838362d eric -march=x86-
  0x000000d0 3634202d 67676462 33202d66 696e7472 64 -ggdb3 -fintr
  0x000000e0 696e7369 632d6d6f 64756c65 732d7061 insic-modules-pa
  0x000000f0 7468202f 7573722f 6c69622f 6763632f th /usr/lib/gcc/
  0x00000100 7838365f 36342d6c 696e7578 2d676e75 x86_64-linux-gnu
  0x00000110 2f372f66 696e636c 75646500 6e756d31 /7/finclude.num1
  0x00000120 006e756d 3200696e 74656765 72286b69 .num2.integer(ki
  0x00000130 6e643d34 29006d61 696e0061 72676300 nd=4).main.argc.
  0x00000140 61726776 00                         argv.

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4
  Offset into .debug_line:     0x0

 DW_MACRO_start_file - lineno: 0 filenum: 1 filename: if_then.f08
 DW_MACRO_end_file

