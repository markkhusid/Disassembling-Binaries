
print.o:     file format elf64-x86-64
print.o
architecture: i386:x86-64, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x0000000000000000

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         000000b0  0000000000000000  0000000000000000  00000040  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  0000000000000000  0000000000000000  000000f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  0000000000000000  0000000000000000  000000f0  2**0
                  ALLOC
  3 .rodata       0000003c  0000000000000000  0000000000000000  000000f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .debug_info   000000b7  0000000000000000  0000000000000000  0000012c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_abbrev 0000007e  0000000000000000  0000000000000000  000001e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000030  0000000000000000  0000000000000000  00000261  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  7 .debug_macro  0000000c  0000000000000000  0000000000000000  00000291  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  8 .debug_line   00000041  0000000000000000  0000000000000000  0000029d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_str    0000013d  0000000000000000  0000000000000000  000002de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      0000002b  0000000000000000  0000000000000000  0000041b  2**0
                  CONTENTS, READONLY
 11 .note.GNU-stack 00000000  0000000000000000  0000000000000000  00000446  2**0
                  CONTENTS, READONLY
 12 .eh_frame     00000058  0000000000000000  0000000000000000  00000448  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 print.f08
0000000000000000 l    d  .text	0000000000000000 .text
0000000000000000 l    d  .data	0000000000000000 .data
0000000000000000 l    d  .bss	0000000000000000 .bss
0000000000000000 l    d  .rodata	0000000000000000 .rodata
0000000000000000 l     F .text	0000000000000073 MAIN__
0000000000000020 l     O .rodata	000000000000001c options.1.3502
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .note.GNU-stack	0000000000000000 .note.GNU-stack
0000000000000000 l    d  .eh_frame	0000000000000000 .eh_frame
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000         *UND*	0000000000000000 _GLOBAL_OFFSET_TABLE_
0000000000000000         *UND*	0000000000000000 _gfortran_st_write
0000000000000000         *UND*	0000000000000000 _gfortran_transfer_character_write
0000000000000000         *UND*	0000000000000000 _gfortran_st_write_done
0000000000000073 g     F .text	000000000000003d main
0000000000000000         *UND*	0000000000000000 _gfortran_set_args
0000000000000000         *UND*	0000000000000000 _gfortran_set_options



Disassembly of section .text:

0000000000000000 <MAIN__>:
program print_program
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp
   4:	48 81 ec e0 01 00 00 	sub    rsp,0x1e0

      print *, "Hello World!"
   b:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 12 <MAIN__+0x12>
			e: R_X86_64_PC32	.rodata-0x4
  12:	48 89 85 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rax
  19:	c7 85 30 fe ff ff 03 	mov    DWORD PTR [rbp-0x1d0],0x3
  20:	00 00 00 
  23:	c7 85 20 fe ff ff 80 	mov    DWORD PTR [rbp-0x1e0],0x80
  2a:	00 00 00 
  2d:	c7 85 24 fe ff ff 06 	mov    DWORD PTR [rbp-0x1dc],0x6
  34:	00 00 00 
  37:	48 8d 85 20 fe ff ff 	lea    rax,[rbp-0x1e0]
  3e:	48 89 c7             	mov    rdi,rax
  41:	e8 00 00 00 00       	call   46 <MAIN__+0x46>
			42: R_X86_64_PLT32	_gfortran_st_write-0x4
  46:	48 8d 85 20 fe ff ff 	lea    rax,[rbp-0x1e0]
  4d:	ba 0c 00 00 00       	mov    edx,0xc
  52:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 59 <MAIN__+0x59>
			55: R_X86_64_PC32	.rodata+0x6
  59:	48 89 c7             	mov    rdi,rax
  5c:	e8 00 00 00 00       	call   61 <MAIN__+0x61>
			5d: R_X86_64_PLT32	_gfortran_transfer_character_write-0x4
  61:	48 8d 85 20 fe ff ff 	lea    rax,[rbp-0x1e0]
  68:	48 89 c7             	mov    rdi,rax
  6b:	e8 00 00 00 00       	call   70 <MAIN__+0x70>
			6c: R_X86_64_PLT32	_gfortran_st_write_done-0x4

end program print_program
  70:	90                   	nop
  71:	c9                   	leave  
  72:	c3                   	ret    

0000000000000073 <main>:
  73:	55                   	push   rbp
  74:	48 89 e5             	mov    rbp,rsp
  77:	48 83 ec 10          	sub    rsp,0x10
  7b:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  7e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  82:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  86:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  89:	48 89 d6             	mov    rsi,rdx
  8c:	89 c7                	mov    edi,eax
  8e:	e8 00 00 00 00       	call   93 <main+0x20>
			8f: R_X86_64_PLT32	_gfortran_set_args-0x4
  93:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 9a <main+0x27>
			96: R_X86_64_PC32	.rodata+0x1c
  9a:	bf 07 00 00 00       	mov    edi,0x7
  9f:	e8 00 00 00 00       	call   a4 <main+0x31>
			a0: R_X86_64_PLT32	_gfortran_set_options-0x4
  a4:	e8 57 ff ff ff       	call   0 <MAIN__>
  a9:	b8 00 00 00 00       	mov    eax,0x0
  ae:	c9                   	leave  
  af:	c3                   	ret    

Disassembly of section .rodata:

0000000000000000 <options.1.3502-0x20>:
   0:	70 72                	jo     74 <main+0x1>
   2:	69 6e 74 2e 66 30 38 	imul   ebp,DWORD PTR [rsi+0x74],0x3830662e
   9:	00 48 65             	add    BYTE PTR [rax+0x65],cl
   c:	6c                   	ins    BYTE PTR es:[rdi],dx
   d:	6c                   	ins    BYTE PTR es:[rdi],dx
   e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
   f:	20 57 6f             	and    BYTE PTR [rdi+0x6f],dl
  12:	72 6c                	jb     80 <main+0xd>
  14:	64 21 00             	and    DWORD PTR fs:[rax],eax
	...

0000000000000020 <options.1.3502>:
  20:	44 00 00             	add    BYTE PTR [rax],r8b
  23:	00 ff                	add    bh,bh
  25:	03 00                	add    eax,DWORD PTR [rax]
  27:	00 00                	add    BYTE PTR [rax],al
  29:	00 00                	add    BYTE PTR [rax],al
  2b:	00 01                	add    BYTE PTR [rcx],al
  2d:	00 00                	add    BYTE PTR [rax],al
  2f:	00 01                	add    BYTE PTR [rcx],al
  31:	00 00                	add    BYTE PTR [rax],al
  33:	00 00                	add    BYTE PTR [rax],al
  35:	00 00                	add    BYTE PTR [rax],al
  37:	00 1f                	add    BYTE PTR [rdi],bl
  39:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
program print_program
   0:	b3 00                	mov    bl,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   4:	04 00                	add    al,0x0
   6:	00 00                	add    BYTE PTR [rax],al
			6: R_X86_64_32	.debug_abbrev
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 01                	or     BYTE PTR [rcx],al
      print *, "Hello World!"
   c:	00 00                	add    BYTE PTR [rax],al
			c: R_X86_64_32	.debug_str+0xf
   e:	00 00                	add    BYTE PTR [rax],al
  10:	0e                   	(bad)  
  11:	02 00                	add    al,BYTE PTR [rax]
			12: R_X86_64_32	.debug_str+0x5
	...
			16: R_X86_64_32	.debug_str+0x9b
			1a: R_X86_64_64	.text
  1f:	00 00                	add    BYTE PTR [rax],al
  21:	00 b0 00 00 00 00    	add    BYTE PTR [rax+0x0],dh
	...
			2a: R_X86_64_32	.debug_line
			2e: R_X86_64_32	.debug_macro
  2f:	00 00                	add    BYTE PTR [rax],al
  31:	00 02                	add    BYTE PTR [rdx],al
  33:	00 00                	add    BYTE PTR [rax],al
			33: R_X86_64_32	.debug_str+0x12a
  35:	00 00                	add    BYTE PTR [rax],al
  37:	01 05 71 00 00 00    	add    DWORD PTR [rip+0x71],eax        # ae <.debug_info+0xae>
	...
			3d: R_X86_64_64	.text+0x73
  45:	3d 00 00 00 00       	cmp    eax,0x0
  4a:	00 00                	add    BYTE PTR [rax],al
  4c:	00 01                	add    BYTE PTR [rcx],al
  4e:	9c                   	pushf  
  4f:	71 00                	jno    51 <.debug_info+0x51>
  51:	00 00                	add    BYTE PTR [rax],al
  53:	03 00                	add    eax,DWORD PTR [rax]
			54: R_X86_64_32	.debug_str+0x113
  55:	00 00                	add    BYTE PTR [rax],al
  57:	00 01                	add    BYTE PTR [rcx],al
  59:	05 78 00 00 00       	add    eax,0x78
  5e:	02 91 6c 03 00 00    	add    dl,BYTE PTR [rcx+0x36c]
			62: R_X86_64_32	.debug_str
  64:	00 00                	add    BYTE PTR [rax],al
  66:	01 05 7d 00 00 00    	add    DWORD PTR [rip+0x7d],eax        # e9 <main+0x76>
  6c:	03 91 60 06 00 04    	add    edx,DWORD PTR [rcx+0x4000660]
end program print_program
  72:	04 05                	add    al,0x5
  74:	00 00                	add    BYTE PTR [rax],al
			74: R_X86_64_32	.debug_str+0x8b
  76:	00 00                	add    BYTE PTR [rax],al
  78:	05 71 00 00 00       	add    eax,0x71
  7d:	06                   	(bad)  
  7e:	08 83 00 00 00 04    	or     BYTE PTR [rbx+0x4000000],al
  84:	01 08                	add    DWORD PTR [rax],ecx
  86:	00 00                	add    BYTE PTR [rax],al
			86: R_X86_64_32	.debug_str+0x118
  88:	00 00                	add    BYTE PTR [rax],al
  8a:	07                   	(bad)  
  8b:	00 00                	add    BYTE PTR [rax],al
			8b: R_X86_64_32	.debug_str+0x12f
  8d:	00 00                	add    BYTE PTR [rax],al
  8f:	01 01                	add    DWORD PTR [rcx],eax
  91:	02 00                	add    al,BYTE PTR [rax]
			92: R_X86_64_64	.text
  93:	00 00                	add    BYTE PTR [rax],al
  95:	00 00                	add    BYTE PTR [rax],al
  97:	00 00                	add    BYTE PTR [rax],al
  99:	00 73 00             	add    BYTE PTR [rbx+0x0],dh
  9c:	00 00                	add    BYTE PTR [rax],al
  9e:	00 00                	add    BYTE PTR [rax],al
  a0:	00 00                	add    BYTE PTR [rax],al
  a2:	01 9c 08 00 00 00 00 	add    DWORD PTR [rax+rcx*1+0x0],ebx
			a5: R_X86_64_64	.text+0xb
  a9:	00 00                	add    BYTE PTR [rax],al
  ab:	00 00                	add    BYTE PTR [rax],al
  ad:	65 00 00             	add    BYTE PTR gs:[rax],al
  b0:	00 00                	add    BYTE PTR [rax],al
  b2:	00 00                	add    BYTE PTR [rax],al
  b4:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
program print_program
   0:	01 11                	add    DWORD PTR [rcx],edx
   2:	01 25 0e 13 0b 42    	add    DWORD PTR [rip+0x420b130e],esp        # 420b1316 <main+0x420b12a3>
   8:	0b 03                	or     eax,DWORD PTR [rbx]
   a:	0e                   	(bad)  
      print *, "Hello World!"
   b:	1b 0e                	sbb    ecx,DWORD PTR [rsi]
   d:	11 01                	adc    DWORD PTR [rcx],eax
   f:	12 07                	adc    al,BYTE PTR [rdi]
  11:	10 17                	adc    BYTE PTR [rdi],dl
  13:	99                   	cdq    
  14:	42 17                	rex.X (bad) 
  16:	00 00                	add    BYTE PTR [rax],al
  18:	02 2e                	add    ch,BYTE PTR [rsi]
  1a:	01 3f                	add    DWORD PTR [rdi],edi
  1c:	19 03                	sbb    DWORD PTR [rbx],eax
  1e:	0e                   	(bad)  
  1f:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  21:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  23:	49 13 11             	adc    rdx,QWORD PTR [r9]
  26:	01 12                	add    DWORD PTR [rdx],edx
  28:	07                   	(bad)  
  29:	40 18 96 42 19 01 13 	sbb    BYTE PTR [rsi+0x13011942],dl
  30:	00 00                	add    BYTE PTR [rax],al
  32:	03 05 00 03 0e 3a    	add    eax,DWORD PTR [rip+0x3a0e0300]        # 3a0e0338 <main+0x3a0e02c5>
  38:	0b 3b                	or     edi,DWORD PTR [rbx]
  3a:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  3d:	02 18                	add    bl,BYTE PTR [rax]
  3f:	00 00                	add    BYTE PTR [rax],al
  41:	04 24                	add    al,0x24
  43:	00 0b                	add    BYTE PTR [rbx],cl
  45:	0b 3e                	or     edi,DWORD PTR [rsi]
  47:	0b 03                	or     eax,DWORD PTR [rbx]
  49:	0e                   	(bad)  
  4a:	00 00                	add    BYTE PTR [rax],al
  4c:	05 26 00 49 13       	add    eax,0x13490026
  51:	00 00                	add    BYTE PTR [rax],al
  53:	06                   	(bad)  
  54:	0f 00 0b             	str    WORD PTR [rbx]
  57:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  5a:	00 00                	add    BYTE PTR [rax],al
  5c:	07                   	(bad)  
  5d:	2e 01 03             	add    DWORD PTR cs:[rbx],eax
  60:	0e                   	(bad)  
  61:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  63:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  65:	6a 19                	push   0x19
  67:	36 0b 11             	or     edx,DWORD PTR ss:[rcx]
  6a:	01 12                	add    DWORD PTR [rdx],edx
  6c:	07                   	(bad)  
  6d:	40 18 96 42 19 00 00 	sbb    BYTE PTR [rsi+0x1942],dl
end program print_program
  74:	08 0b                	or     BYTE PTR [rbx],cl
  76:	00 11                	add    BYTE PTR [rcx],dl
  78:	01 12                	add    DWORD PTR [rdx],edx
  7a:	07                   	(bad)  
  7b:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
program print_program
   0:	2c 00                	sub    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   4:	02 00                	add    al,BYTE PTR [rax]
   6:	00 00                	add    BYTE PTR [rax],al
			6: R_X86_64_32	.debug_info
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 00                	or     BYTE PTR [rax],al
	...
			10: R_X86_64_64	.text
      print *, "Hello World!"
  18:	b0 00                	mov    al,0x0
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
program print_program
   0:	04 00                	add    al,0x0
   2:	02 00                	add    al,BYTE PTR [rax]
			3: R_X86_64_32	.debug_line
   4:	00 00                	add    BYTE PTR [rax],al
   6:	00 03                	add    BYTE PTR [rbx],al
   8:	00 01                	add    BYTE PTR [rcx],al
   a:	04 00                	add    al,0x0

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
   0:	3d 00 00 00 02       	cmp    eax,0x2000000
   5:	00 20                	add    BYTE PTR [rax],ah
   7:	00 00                	add    BYTE PTR [rax],al
   9:	00 01                	add    BYTE PTR [rcx],al
      print *, "Hello World!"
   b:	01 fb                	add    ebx,edi
   d:	0e                   	(bad)  
   e:	0d 00 01 01 01       	or     eax,0x1010100
  13:	01 00                	add    DWORD PTR [rax],eax
  15:	00 00                	add    BYTE PTR [rax],al
  17:	01 00                	add    DWORD PTR [rax],eax
  19:	00 01                	add    BYTE PTR [rcx],al
  1b:	00 70 72             	add    BYTE PTR [rax+0x72],dh
  1e:	69 6e 74 2e 66 30 38 	imul   ebp,DWORD PTR [rsi+0x74],0x3830662e
  25:	00 00                	add    BYTE PTR [rax],al
  27:	00 00                	add    BYTE PTR [rax],al
  29:	00 00                	add    BYTE PTR [rax],al
  2b:	09 02                	or     DWORD PTR [rdx],eax
	...
			2d: R_X86_64_64	.text
  35:	01 ae 02 65 14 3c    	add    DWORD PTR [rsi+0x3c146502],ebp
  3b:	e4 02                	in     al,0x2
  3d:	2e 00 01             	add    BYTE PTR cs:[rcx],al
  40:	01                   	.byte 0x1

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
program print_program
   0:	61                   	(bad)  
   1:	72 67                	jb     6a <.debug_str+0x6a>
   3:	76 00                	jbe    5 <.debug_str+0x5>
   5:	70 72                	jo     79 <.debug_str+0x79>
   7:	69 6e 74 2e 66 30 38 	imul   ebp,DWORD PTR [rsi+0x74],0x3830662e
      print *, "Hello World!"
   e:	00 47 4e             	add    BYTE PTR [rdi+0x4e],al
  11:	55                   	push   rbp
  12:	20 46 6f             	and    BYTE PTR [rsi+0x6f],al
  15:	72 74                	jb     8b <.debug_str+0x8b>
  17:	72 61                	jb     7a <.debug_str+0x7a>
  19:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  1a:	32 30                	xor    dh,BYTE PTR [rax]
  1c:	30 38                	xor    BYTE PTR [rax],bh
  1e:	20 37                	and    BYTE PTR [rdi],dh
  20:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  23:	30 20                	xor    BYTE PTR [rax],ah
  25:	2d 6d 74 75 6e       	sub    eax,0x6e75746d
  2a:	65 3d 67 65 6e 65    	gs cmp eax,0x656e6567
  30:	72 69                	jb     9b <.debug_str+0x9b>
  32:	63 20                	movsxd esp,DWORD PTR [rax]
  34:	2d 6d 61 72 63       	sub    eax,0x6372616d
  39:	68 3d 78 38 36       	push   0x3638783d
  3e:	2d 36 34 20 2d       	sub    eax,0x2d203436
  43:	67 67 64 62 33       	addr32 addr32 fs (bad) 
  48:	20 2d 66 69 6e 74    	and    BYTE PTR [rip+0x746e6966],ch        # 746e69b4 <main+0x746e6941>
  4e:	72 69                	jb     b9 <.debug_str+0xb9>
  50:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  51:	73 69                	jae    bc <.debug_str+0xbc>
  53:	63 2d 6d 6f 64 75    	movsxd ebp,DWORD PTR [rip+0x75646f6d]        # 75646fc6 <main+0x75646f53>
  59:	6c                   	ins    BYTE PTR es:[rdi],dx
  5a:	65 73 2d             	gs jae 8a <.debug_str+0x8a>
  5d:	70 61                	jo     c0 <.debug_str+0xc0>
  5f:	74 68                	je     c9 <.debug_str+0xc9>
  61:	20 2f                	and    BYTE PTR [rdi],ch
  63:	75 73                	jne    d8 <.debug_str+0xd8>
  65:	72 2f                	jb     96 <.debug_str+0x96>
  67:	6c                   	ins    BYTE PTR es:[rdi],dx
  68:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [rdx+0x2f],0x2f636367
  6f:	78 38                	js     a9 <.debug_str+0xa9>
end program print_program
  71:	36 5f                	ss pop rdi
  73:	36 34 2d             	ss xor al,0x2d
  76:	6c                   	ins    BYTE PTR es:[rdi],dx
  77:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [rsi+0x75],0x6e672d78
  7e:	75 2f                	jne    af <.debug_str+0xaf>
  80:	37                   	(bad)  
  81:	2f                   	(bad)  
  82:	66 69 6e 63 6c 75    	imul   bp,WORD PTR [rsi+0x63],0x756c
  88:	64 65 00 69 6e       	fs add BYTE PTR gs:[rcx+0x6e],ch
  8d:	74 65                	je     f4 <.debug_str+0xf4>
  8f:	67 65 72 28          	addr32 gs jb bb <.debug_str+0xbb>
  93:	6b 69 6e 64          	imul   ebp,DWORD PTR [rcx+0x6e],0x64
  97:	3d 34 29 00 2f       	cmp    eax,0x2f002934
  9c:	68 6f 6d 65 2f       	push   0x2f656d6f
  a1:	75 62                	jne    105 <.debug_str+0x105>
  a3:	75 6e                	jne    113 <.debug_str+0x113>
  a5:	74 75                	je     11c <.debug_str+0x11c>
  a7:	2f                   	(bad)  
  a8:	45 6e                	rex.RB outs dx,BYTE PTR ds:[rsi]
  aa:	67 69 6e 65 65 72 69 	imul   ebp,DWORD PTR [esi+0x65],0x6e697265
  b1:	6e 
  b2:	67 2f                	addr32 (bad) 
  b4:	50                   	push   rax
  b5:	72 6f                	jb     126 <.debug_str+0x126>
  b7:	67 72 61             	addr32 jb 11b <.debug_str+0x11b>
  ba:	6d                   	ins    DWORD PTR es:[rdi],dx
  bb:	6d                   	ins    DWORD PTR es:[rdi],dx
  bc:	69 6e 67 2f 44 69 73 	imul   ebp,DWORD PTR [rsi+0x67],0x7369442f
  c3:	61                   	(bad)  
  c4:	73 73                	jae    139 <.debug_str+0x139>
  c6:	65 6d                	gs ins DWORD PTR es:[rdi],dx
  c8:	62                   	(bad)  
  c9:	6c                   	ins    BYTE PTR es:[rdi],dx
  ca:	69 6e 67 2d 42 69 6e 	imul   ebp,DWORD PTR [rsi+0x67],0x6e69422d
  d1:	61                   	(bad)  
  d2:	72 69                	jb     13d <main+0xca>
  d4:	65 73 2f             	gs jae 106 <.debug_str+0x106>
  d7:	46 6f                	rex.RX outs dx,DWORD PTR ds:[rsi]
  d9:	72 74                	jb     14f <main+0xdc>
  db:	72 61                	jb     13e <main+0xcb>
  dd:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  de:	2f                   	(bad)  
  df:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  e1:	74 65                	je     148 <main+0xd5>
  e3:	6c                   	ins    BYTE PTR es:[rdi],dx
  e4:	5f                   	pop    rdi
  e5:	61                   	(bad)  
  e6:	72 63                	jb     14b <main+0xd8>
  e8:	68 69 74 65 63       	push   0x63657469
  ed:	74 75                	je     164 <main+0xf1>
  ef:	72 65                	jb     156 <main+0xe3>
  f1:	2f                   	(bad)  
  f2:	41                   	rex.B
  f3:	4d                   	rex.WRB
  f4:	44                   	rex.R
  f5:	36 34 2f             	ss xor al,0x2f
  f8:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  fa:	70 75                	jo     171 <main+0xfe>
  fc:	74 4f                	je     14d <main+0xda>
  fe:	75 74                	jne    174 <main+0x101>
 100:	70 75                	jo     177 <main+0x104>
 102:	74 2f                	je     133 <.debug_str+0x133>
 104:	57                   	push   rdi
 105:	69 74 68 44 65 62 75 	imul   esi,DWORD PTR [rax+rbp*2+0x44],0x67756265
 10c:	67 
 10d:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
 10f:	70 75                	jo     186 <main+0x113>
 111:	74 00                	je     113 <.debug_str+0x113>
 113:	61                   	(bad)  
 114:	72 67                	jb     17d <main+0x10a>
 116:	63 00                	movsxd eax,DWORD PTR [rax]
 118:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
 11b:	72 61                	jb     17e <main+0x10b>
 11d:	63 74 65 72          	movsxd esi,DWORD PTR [rbp+riz*2+0x72]
 121:	28 6b 69             	sub    BYTE PTR [rbx+0x69],ch
 124:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 125:	64 3d 31 29 00 6d    	fs cmp eax,0x6d002931
 12b:	61                   	(bad)  
 12c:	69 6e 00 70 72 69 6e 	imul   ebp,DWORD PTR [rsi+0x0],0x6e697270
 133:	74 5f                	je     194 <main+0x121>
 135:	70 72                	jo     1a9 <main+0x136>
 137:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 138:	67 72 61             	addr32 jb 19c <main+0x129>
 13b:	6d                   	ins    DWORD PTR es:[rdi],dx
	...

Disassembly of section .comment:

0000000000000000 <.comment>:
program print_program
   0:	00 47 43             	add    BYTE PTR [rdi+0x43],al
   3:	43 3a 20             	rex.XB cmp spl,BYTE PTR [r8]
   6:	28 55 62             	sub    BYTE PTR [rbp+0x62],dl
   9:	75 6e                	jne    79 <main+0x6>
      print *, "Hello World!"
   b:	74 75                	je     82 <main+0xf>
   d:	20 37                	and    BYTE PTR [rdi],dh
   f:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  12:	30 2d 32 37 75 62    	xor    BYTE PTR [rip+0x62753732],ch        # 6275374a <main+0x627536d7>
  18:	75 6e                	jne    88 <main+0x15>
  1a:	74 75                	je     91 <main+0x1e>
  1c:	31 7e 31             	xor    DWORD PTR [rsi+0x31],edi
  1f:	38 2e                	cmp    BYTE PTR [rsi],ch
  21:	30 34 29             	xor    BYTE PTR [rcx+rbp*1],dh
  24:	20 37                	and    BYTE PTR [rdi],dh
  26:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  29:	30 00                	xor    BYTE PTR [rax],al

Disassembly of section .eh_frame:

0000000000000000 <.eh_frame>:
   0:	14 00                	adc    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   4:	00 00                	add    BYTE PTR [rax],al
   6:	00 00                	add    BYTE PTR [rax],al
   8:	01 7a 52             	add    DWORD PTR [rdx+0x52],edi
   b:	00 01                	add    BYTE PTR [rcx],al
   d:	78 10                	js     1f <.eh_frame+0x1f>
   f:	01 1b                	add    DWORD PTR [rbx],ebx
  11:	0c 07                	or     al,0x7
  13:	08 90 01 00 00 1c    	or     BYTE PTR [rax+0x1c000001],dl
  19:	00 00                	add    BYTE PTR [rax],al
  1b:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  1e:	00 00                	add    BYTE PTR [rax],al
  20:	00 00                	add    BYTE PTR [rax],al
			20: R_X86_64_PC32	.text
  22:	00 00                	add    BYTE PTR [rax],al
  24:	73 00                	jae    26 <.eh_frame+0x26>
  26:	00 00                	add    BYTE PTR [rax],al
  28:	00 41 0e             	add    BYTE PTR [rcx+0xe],al
  2b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  31:	02 6e 0c             	add    ch,BYTE PTR [rsi+0xc]
  34:	07                   	(bad)  
  35:	08 00                	or     BYTE PTR [rax],al
  37:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  3a:	00 00                	add    BYTE PTR [rax],al
  3c:	3c 00                	cmp    al,0x0
  3e:	00 00                	add    BYTE PTR [rax],al
  40:	00 00                	add    BYTE PTR [rax],al
			40: R_X86_64_PC32	.text+0x73
  42:	00 00                	add    BYTE PTR [rax],al
  44:	3d 00 00 00 00       	cmp    eax,0x0
  49:	41 0e                	rex.B (bad) 
  4b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  51:	78 0c                	js     5f <options.1.3502+0x3f>
  53:	07                   	(bad)  
  54:	08 00                	or     BYTE PTR [rax],al
	...
Contents of the .debug_info section:

  Compilation Unit @ offset 0x0:
   Length:        0xb3 (32-bit)
   Version:       4
   Abbrev Offset: 0x0
   Pointer Size:  8
 <0><b>: Abbrev Number: 1 (DW_TAG_compile_unit)
    <c>   DW_AT_producer    : (indirect string, offset: 0xf): GNU Fortran2008 7.3.0 -mtune=generic -march=x86-64 -ggdb3 -fintrinsic-modules-path /usr/lib/gcc/x86_64-linux-gnu/7/finclude
    <10>   DW_AT_language    : 14	(Fortran 95)
    <11>   DW_AT_identifier_case: 2	(down_case)
    <12>   DW_AT_name        : (indirect string, offset: 0x5): print.f08
    <16>   DW_AT_comp_dir    : (indirect string, offset: 0x9b): /home/ubuntu/Engineering/Programming/Disassembling-Binaries/Fortran/Intel_architecture/AMD64/InputOutput/WithDebugInput
    <1a>   DW_AT_low_pc      : 0x0
    <22>   DW_AT_high_pc     : 0xb0
    <2a>   DW_AT_stmt_list   : 0x0
    <2e>   DW_AT_GNU_macros  : 0x0
 <1><32>: Abbrev Number: 2 (DW_TAG_subprogram)
    <33>   DW_AT_external    : 1
    <33>   DW_AT_name        : (indirect string, offset: 0x12a): main
    <37>   DW_AT_decl_file   : 1
    <38>   DW_AT_decl_line   : 5
    <39>   DW_AT_type        : <0x71>
    <3d>   DW_AT_low_pc      : 0x73
    <45>   DW_AT_high_pc     : 0x3d
    <4d>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <4f>   DW_AT_GNU_all_tail_call_sites: 1
    <4f>   DW_AT_sibling     : <0x71>
 <2><53>: Abbrev Number: 3 (DW_TAG_formal_parameter)
    <54>   DW_AT_name        : (indirect string, offset: 0x113): argc
    <58>   DW_AT_decl_file   : 1
    <59>   DW_AT_decl_line   : 5
    <5a>   DW_AT_type        : <0x78>
    <5e>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><61>: Abbrev Number: 3 (DW_TAG_formal_parameter)
    <62>   DW_AT_name        : (indirect string, offset: 0x0): argv
    <66>   DW_AT_decl_file   : 1
    <67>   DW_AT_decl_line   : 5
    <68>   DW_AT_type        : <0x7d>
    <6c>   DW_AT_location    : 3 byte block: 91 60 6 	(DW_OP_fbreg: -32; DW_OP_deref)
 <2><70>: Abbrev Number: 0
 <1><71>: Abbrev Number: 4 (DW_TAG_base_type)
    <72>   DW_AT_byte_size   : 4
    <73>   DW_AT_encoding    : 5	(signed)
    <74>   DW_AT_name        : (indirect string, offset: 0x8b): integer(kind=4)
 <1><78>: Abbrev Number: 5 (DW_TAG_const_type)
    <79>   DW_AT_type        : <0x71>
 <1><7d>: Abbrev Number: 6 (DW_TAG_pointer_type)
    <7e>   DW_AT_byte_size   : 8
    <7f>   DW_AT_type        : <0x83>
 <1><83>: Abbrev Number: 4 (DW_TAG_base_type)
    <84>   DW_AT_byte_size   : 1
    <85>   DW_AT_encoding    : 8	(unsigned char)
    <86>   DW_AT_name        : (indirect string, offset: 0x118): character(kind=1)
 <1><8a>: Abbrev Number: 7 (DW_TAG_subprogram)
    <8b>   DW_AT_name        : (indirect string, offset: 0x12f): print_program
    <8f>   DW_AT_decl_file   : 1
    <90>   DW_AT_decl_line   : 1
    <91>   DW_AT_main_subprogram: 1
    <91>   DW_AT_calling_convention: 2	(program)
    <92>   DW_AT_low_pc      : 0x0
    <9a>   DW_AT_high_pc     : 0x73
    <a2>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <a4>   DW_AT_GNU_all_tail_call_sites: 1
 <2><a4>: Abbrev Number: 8 (DW_TAG_lexical_block)
    <a5>   DW_AT_low_pc      : 0xb
    <ad>   DW_AT_high_pc     : 0x65
 <2><b5>: Abbrev Number: 0
 <1><b6>: Abbrev Number: 0

Contents of the .debug_abbrev section:

  Number TAG (0x0)
   1      DW_TAG_compile_unit    [has children]
    DW_AT_producer     DW_FORM_strp
    DW_AT_language     DW_FORM_data1
    DW_AT_identifier_case DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT_comp_dir     DW_FORM_strp
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_stmt_list    DW_FORM_sec_offset
    DW_AT_GNU_macros   DW_FORM_sec_offset
    DW_AT value: 0     DW_FORM value: 0
   2      DW_TAG_subprogram    [has children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   3      DW_TAG_formal_parameter    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   4      DW_TAG_base_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_encoding     DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT value: 0     DW_FORM value: 0
   5      DW_TAG_const_type    [no children]
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   6      DW_TAG_pointer_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   7      DW_TAG_subprogram    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_main_subprogram DW_FORM_flag_present
    DW_AT_calling_convention DW_FORM_data1
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   8      DW_TAG_lexical_block    [no children]
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT value: 0     DW_FORM value: 0

Contents of the .debug_aranges section:

  Length:                   44
  Version:                  2
  Offset into .debug_info:  0x0
  Pointer Size:             8
  Segment Size:             0

    Address            Length
    0000000000000000 00000000000000b0 
    0000000000000000 0000000000000000 

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4
  Offset into .debug_line:     0x0

 DW_MACRO_start_file - lineno: 0 filenum: 1 filename: print.f08
 DW_MACRO_end_file

Raw dump of debug contents of section .debug_line:

  Offset:                      0x0
  Length:                      61
  DWARF Version:               2
  Prologue Length:             32
  Minimum Instruction Length:  1
  Initial value of 'is_stmt':  1
  Line Base:                   -5
  Line Range:                  14
  Opcode Base:                 13

 Opcodes:
  Opcode 1 has 0 args
  Opcode 2 has 1 arg
  Opcode 3 has 1 arg
  Opcode 4 has 1 arg
  Opcode 5 has 1 arg
  Opcode 6 has 0 args
  Opcode 7 has 0 args
  Opcode 8 has 0 args
  Opcode 9 has 1 arg
  Opcode 10 has 0 args
  Opcode 11 has 0 args
  Opcode 12 has 1 arg

 The Directory Table is empty.

 The File Name Table (offset 0x1c):
  Entry	Dir	Time	Size	Name
  1	0	0	0	print.f08

 Line Number Statements:
  [0x0000002a]  Extended opcode 2: set Address to 0x0
  [0x00000035]  Copy
  [0x00000036]  Special opcode 161: advance Address by 11 to 0xb and Line by 2 to 3
  [0x00000037]  Advance PC by 101 to 0x70
  [0x00000039]  Special opcode 7: advance Address by 0 to 0x70 and Line by 2 to 5
  [0x0000003a]  Special opcode 47: advance Address by 3 to 0x73 and Line by 0 to 5
  [0x0000003b]  Special opcode 215: advance Address by 15 to 0x82 and Line by 0 to 5
  [0x0000003c]  Advance PC by 46 to 0xb0
  [0x0000003e]  Extended opcode 1: End of Sequence


Contents of the .debug_str section:

  0x00000000 61726776 00707269 6e742e66 30380047 argv.print.f08.G
  0x00000010 4e552046 6f727472 616e3230 30382037 NU Fortran2008 7
  0x00000020 2e332e30 202d6d74 756e653d 67656e65 .3.0 -mtune=gene
  0x00000030 72696320 2d6d6172 63683d78 38362d36 ric -march=x86-6
  0x00000040 34202d67 67646233 202d6669 6e747269 4 -ggdb3 -fintri
  0x00000050 6e736963 2d6d6f64 756c6573 2d706174 nsic-modules-pat
  0x00000060 68202f75 73722f6c 69622f67 63632f78 h /usr/lib/gcc/x
  0x00000070 38365f36 342d6c69 6e75782d 676e752f 86_64-linux-gnu/
  0x00000080 372f6669 6e636c75 64650069 6e746567 7/finclude.integ
  0x00000090 6572286b 696e643d 3429002f 686f6d65 er(kind=4)./home
  0x000000a0 2f756275 6e74752f 456e6769 6e656572 /ubuntu/Engineer
  0x000000b0 696e672f 50726f67 72616d6d 696e672f ing/Programming/
  0x000000c0 44697361 7373656d 626c696e 672d4269 Disassembling-Bi
  0x000000d0 6e617269 65732f46 6f727472 616e2f49 naries/Fortran/I
  0x000000e0 6e74656c 5f617263 68697465 63747572 ntel_architectur
  0x000000f0 652f414d 4436342f 496e7075 744f7574 e/AMD64/InputOut
  0x00000100 7075742f 57697468 44656275 67496e70 put/WithDebugInp
  0x00000110 75740061 72676300 63686172 61637465 ut.argc.characte
  0x00000120 72286b69 6e643d31 29006d61 696e0070 r(kind=1).main.p
  0x00000130 72696e74 5f70726f 6772616d 00       rint_program.

Contents of the .eh_frame section:


00000000 0000000000000014 00000000 CIE
  Version:               1
  Augmentation:          "zR"
  Code alignment factor: 1
  Data alignment factor: -8
  Return address column: 16
  Augmentation data:     1b
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_offset: r16 (rip) at cfa-8
  DW_CFA_nop
  DW_CFA_nop

00000018 000000000000001c 0000001c FDE cie=00000000 pc=0000000000000000..0000000000000073
  DW_CFA_advance_loc: 1 to 0000000000000001
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000004
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc1: 110 to 0000000000000072
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop

00000038 000000000000001c 0000003c FDE cie=00000000 pc=0000000000000073..00000000000000b0
  DW_CFA_advance_loc: 1 to 0000000000000074
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000077
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 56 to 00000000000000af
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

