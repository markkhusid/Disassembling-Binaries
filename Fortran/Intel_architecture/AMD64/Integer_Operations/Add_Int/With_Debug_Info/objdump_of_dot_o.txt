
add_int.o:     file format elf64-x86-64
add_int.o
architecture: i386:x86-64, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x0000000000000000

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         0000005d  0000000000000000  0000000000000000  00000040  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  0000000000000000  0000000000000000  0000009d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  0000000000000000  0000000000000000  0000009d  2**0
                  ALLOC
  3 .rodata       0000001c  0000000000000000  0000000000000000  000000a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .debug_info   000000ca  0000000000000000  0000000000000000  000000bc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_abbrev 00000084  0000000000000000  0000000000000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000030  0000000000000000  0000000000000000  0000020a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  7 .debug_macro  0000000c  0000000000000000  0000000000000000  0000023a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  8 .debug_line   00000043  0000000000000000  0000000000000000  00000246  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_str    00000149  0000000000000000  0000000000000000  00000289  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      0000002b  0000000000000000  0000000000000000  000003d2  2**0
                  CONTENTS, READONLY
 11 .note.GNU-stack 00000000  0000000000000000  0000000000000000  000003fd  2**0
                  CONTENTS, READONLY
 12 .eh_frame     00000058  0000000000000000  0000000000000000  00000400  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 add_int.f08
0000000000000000 l    d  .text	0000000000000000 .text
0000000000000000 l    d  .data	0000000000000000 .data
0000000000000000 l    d  .bss	0000000000000000 .bss
0000000000000000 l     F .text	0000000000000020 MAIN__
0000000000000000 l     O .rodata	000000000000001c options.0.3504
0000000000000000 l    d  .rodata	0000000000000000 .rodata
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .note.GNU-stack	0000000000000000 .note.GNU-stack
0000000000000000 l    d  .eh_frame	0000000000000000 .eh_frame
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000020 g     F .text	000000000000003d main
0000000000000000         *UND*	0000000000000000 _GLOBAL_OFFSET_TABLE_
0000000000000000         *UND*	0000000000000000 _gfortran_set_args
0000000000000000         *UND*	0000000000000000 _gfortran_set_options


Contents of section .text:
 0000 554889e5 c745fc01 000000c7 45f80900  UH...E......E...
 0010 00008b55 fc8b45f8 01d08945 f4905dc3  ...U..E....E..].
 0020 554889e5 4883ec10 897dfc48 8975f048  UH..H....}.H.u.H
 0030 8b55f08b 45fc4889 d689c7e8 00000000  .U..E.H.........
 0040 488d3500 000000bf 07000000 e8000000  H.5.............
 0050 00e8aaff ffffb800 000000c9 c3        .............   
Contents of section .rodata:
 0000 44000000 ff030000 00000000 01000000  D...............
 0010 01000000 00000000 1f000000           ............    
Contents of section .debug_info:
 0000 c6000000 04000000 00000801 00000000  ................
 0010 0e020000 00000000 00000000 00000000  ................
 0020 00005d00 00000000 00000000 00000000  ..].............
 0030 00000200 00000001 0c710000 00000000  .........q......
 0040 00000000 003d0000 00000000 00019c71  .....=.........q
 0050 00000003 00000000 010c7800 00000291  ..........x.....
 0060 6c030000 0000010c 7d000000 03916006  l.......}.....`.
 0070 00040405 00000000 05710000 00060883  .........q......
 0080 00000004 01080000 00000700 00000001  ................
 0090 01020000 00000000 00002000 00000000  .......... .....
 00a0 0000019c 08610001 05710000 0002916c  .....a...q.....l
 00b0 08620001 05710000 00029168 08630001  .b...q.....h.c..
 00c0 05710000 00029164 0000               .q.....d..      
Contents of section .debug_abbrev:
 0000 01110125 0e130b42 0b030e1b 0e110112  ...%...B........
 0010 07101799 42170000 022e013f 19030e3a  ....B......?...:
 0020 0b3b0b49 13110112 07401896 42190113  .;.I.....@..B...
 0030 00000305 00030e3a 0b3b0b49 13021800  .......:.;.I....
 0040 00042400 0b0b3e0b 030e0000 05260049  ..$...>......&.I
 0050 13000006 0f000b0b 49130000 072e0103  ........I.......
 0060 0e3a0b3b 0b6a1936 0b110112 07401897  .:.;.j.6.....@..
 0070 42190000 08340003 083a0b3b 0b491302  B....4...:.;.I..
 0080 18000000                             ....            
Contents of section .debug_aranges:
 0000 2c000000 02000000 00000800 00000000  ,...............
 0010 00000000 00000000 5d000000 00000000  ........].......
 0020 00000000 00000000 00000000 00000000  ................
Contents of section .debug_macro:
 0000 04000200 00000003 00010400           ............    
Contents of section .debug_line:
 0000 3f000000 02002200 00000101 fb0e0d00  ?.....".........
 0010 01010101 00000001 00000100 6164645f  ............add_
 0020 696e742e 66303800 00000000 00090200  int.f08.........
 0030 00000000 00000001 507576ae 3ce4022e  ........Puv.<...
 0040 000101                               ...             
Contents of section .debug_str:
 0000 6164645f 696e742e 66303800 63686172  add_int.f08.char
 0010 61637465 72286b69 6e643d31 29006172  acter(kind=1).ar
 0020 67630047 4e552046 6f727472 616e3230  gc.GNU Fortran20
 0030 30382037 2e332e30 202d6d74 756e653d  08 7.3.0 -mtune=
 0040 67656e65 72696320 2d6d6172 63683d78  generic -march=x
 0050 38362d36 34202d67 67646233 202d6669  86-64 -ggdb3 -fi
 0060 6e747269 6e736963 2d6d6f64 756c6573  ntrinsic-modules
 0070 2d706174 68202f75 73722f6c 69622f67  -path /usr/lib/g
 0080 63632f78 38365f36 342d6c69 6e75782d  cc/x86_64-linux-
 0090 676e752f 372f6669 6e636c75 6465002f  gnu/7/finclude./
 00a0 686f6d65 2f756275 6e74752f 456e6769  home/ubuntu/Engi
 00b0 6e656572 696e672f 50726f67 72616d6d  neering/Programm
 00c0 696e672f 44697361 7373656d 626c696e  ing/Disassemblin
 00d0 672d4269 6e617269 65732f46 6f727472  g-Binaries/Fortr
 00e0 616e2f49 6e74656c 5f617263 68697465  an/Intel_archite
 00f0 63747572 652f414d 4436342f 496e7465  cture/AMD64/Inte
 0100 6765725f 4f706572 6174696f 6e732f41  ger_Operations/A
 0110 64645f49 6e742f57 6974685f 44656275  dd_Int/With_Debu
 0120 675f496e 666f0061 64645f69 6e740069  g_Info.add_int.i
 0130 6e746567 6572286b 696e643d 3429006d  nteger(kind=4).m
 0140 61696e00 61726776 00                 ain.argv.       
Contents of section .comment:
 0000 00474343 3a202855 62756e74 7520372e  .GCC: (Ubuntu 7.
 0010 332e302d 32377562 756e7475 317e3138  3.0-27ubuntu1~18
 0020 2e303429 20372e33 2e3000             .04) 7.3.0.     
Contents of section .eh_frame:
 0000 14000000 00000000 017a5200 01781001  .........zR..x..
 0010 1b0c0708 90010000 1c000000 1c000000  ................
 0020 00000000 20000000 00410e10 8602430d  .... ....A....C.
 0030 065b0c07 08000000 1c000000 3c000000  .[..........<...
 0040 00000000 3d000000 00410e10 8602430d  ....=....A....C.
 0050 06780c07 08000000                    .x......        

Disassembly of section .text:

0000000000000000 <MAIN__>:
program add_int
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp

	implicit none

	integer		:: a, b, c

	a = 1
   4:	c7 45 fc 01 00 00 00 	mov    DWORD PTR [rbp-0x4],0x1
	b = 9
   b:	c7 45 f8 09 00 00 00 	mov    DWORD PTR [rbp-0x8],0x9

	c = a + b
  12:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  15:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  18:	01 d0                	add    eax,edx
  1a:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax

end program add_int
  1d:	90                   	nop
  1e:	5d                   	pop    rbp
  1f:	c3                   	ret    

0000000000000020 <main>:
  20:	55                   	push   rbp
  21:	48 89 e5             	mov    rbp,rsp
  24:	48 83 ec 10          	sub    rsp,0x10
  28:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  2b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  33:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  36:	48 89 d6             	mov    rsi,rdx
  39:	89 c7                	mov    edi,eax
  3b:	e8 00 00 00 00       	call   40 <main+0x20>
			3c: R_X86_64_PLT32	_gfortran_set_args-0x4
  40:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 47 <main+0x27>
			43: R_X86_64_PC32	.rodata-0x4
  47:	bf 07 00 00 00       	mov    edi,0x7
  4c:	e8 00 00 00 00       	call   51 <main+0x31>
			4d: R_X86_64_PLT32	_gfortran_set_options-0x4
  51:	e8 aa ff ff ff       	call   0 <MAIN__>
  56:	b8 00 00 00 00       	mov    eax,0x0
  5b:	c9                   	leave  
  5c:	c3                   	ret    

Disassembly of section .rodata:

0000000000000000 <options.0.3504>:
   0:	44 00 00             	add    BYTE PTR [rax],r8b
   3:	00 ff                	add    bh,bh
   5:	03 00                	add    eax,DWORD PTR [rax]
   7:	00 00                	add    BYTE PTR [rax],al
   9:	00 00                	add    BYTE PTR [rax],al
   b:	00 01                	add    BYTE PTR [rcx],al
   d:	00 00                	add    BYTE PTR [rax],al
   f:	00 01                	add    BYTE PTR [rcx],al
  11:	00 00                	add    BYTE PTR [rax],al
  13:	00 00                	add    BYTE PTR [rax],al
  15:	00 00                	add    BYTE PTR [rax],al
  17:	00 1f                	add    BYTE PTR [rdi],bl
  19:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
program add_int
   0:	c6 00 00             	mov    BYTE PTR [rax],0x0
   3:	00 04 00             	add    BYTE PTR [rax+rax*1],al
	a = 1
   6:	00 00                	add    BYTE PTR [rax],al
			6: R_X86_64_32	.debug_abbrev
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 01                	or     BYTE PTR [rcx],al
	b = 9
   c:	00 00                	add    BYTE PTR [rax],al
			c: R_X86_64_32	.debug_str+0x23
   e:	00 00                	add    BYTE PTR [rax],al
  10:	0e                   	(bad)  
  11:	02 00                	add    al,BYTE PTR [rax]
			12: R_X86_64_32	.debug_str
	...
			16: R_X86_64_32	.debug_str+0x9f
			1a: R_X86_64_64	.text
end program add_int
  1f:	00 00                	add    BYTE PTR [rax],al
  21:	00 5d 00             	add    BYTE PTR [rbp+0x0],bl
	...
			2a: R_X86_64_32	.debug_line
			2e: R_X86_64_32	.debug_macro
  30:	00 00                	add    BYTE PTR [rax],al
  32:	02 00                	add    al,BYTE PTR [rax]
			33: R_X86_64_32	.debug_str+0x13f
  34:	00 00                	add    BYTE PTR [rax],al
  36:	00 01                	add    BYTE PTR [rcx],al
  38:	0c 71                	or     al,0x71
	...
			3d: R_X86_64_64	.text+0x20
  42:	00 00                	add    BYTE PTR [rax],al
  44:	00 3d 00 00 00 00    	add    BYTE PTR [rip+0x0],bh        # 4a <.debug_info+0x4a>
  4a:	00 00                	add    BYTE PTR [rax],al
  4c:	00 01                	add    BYTE PTR [rcx],al
  4e:	9c                   	pushf  
  4f:	71 00                	jno    51 <.debug_info+0x51>
  51:	00 00                	add    BYTE PTR [rax],al
  53:	03 00                	add    eax,DWORD PTR [rax]
			54: R_X86_64_32	.debug_str+0x1e
  55:	00 00                	add    BYTE PTR [rax],al
  57:	00 01                	add    BYTE PTR [rcx],al
  59:	0c 78                	or     al,0x78
  5b:	00 00                	add    BYTE PTR [rax],al
  5d:	00 02                	add    BYTE PTR [rdx],al
  5f:	91                   	xchg   ecx,eax
  60:	6c                   	ins    BYTE PTR es:[rdi],dx
  61:	03 00                	add    eax,DWORD PTR [rax]
			62: R_X86_64_32	.debug_str+0x144
  63:	00 00                	add    BYTE PTR [rax],al
  65:	00 01                	add    BYTE PTR [rcx],al
  67:	0c 7d                	or     al,0x7d
  69:	00 00                	add    BYTE PTR [rax],al
  6b:	00 03                	add    BYTE PTR [rbx],al
  6d:	91                   	xchg   ecx,eax
  6e:	60                   	(bad)  
  6f:	06                   	(bad)  
  70:	00 04 04             	add    BYTE PTR [rsp+rax*1],al
  73:	05 00 00 00 00       	add    eax,0x0
			74: R_X86_64_32	.debug_str+0x12f
  78:	05 71 00 00 00       	add    eax,0x71
  7d:	06                   	(bad)  
  7e:	08 83 00 00 00 04    	or     BYTE PTR [rbx+0x4000000],al
  84:	01 08                	add    DWORD PTR [rax],ecx
  86:	00 00                	add    BYTE PTR [rax],al
			86: R_X86_64_32	.debug_str+0xc
  88:	00 00                	add    BYTE PTR [rax],al
  8a:	07                   	(bad)  
  8b:	00 00                	add    BYTE PTR [rax],al
			8b: R_X86_64_32	.debug_str+0x127
  8d:	00 00                	add    BYTE PTR [rax],al
  8f:	01 01                	add    DWORD PTR [rcx],eax
  91:	02 00                	add    al,BYTE PTR [rax]
			92: R_X86_64_64	.text
  93:	00 00                	add    BYTE PTR [rax],al
  95:	00 00                	add    BYTE PTR [rax],al
  97:	00 00                	add    BYTE PTR [rax],al
  99:	00 20                	add    BYTE PTR [rax],ah
  9b:	00 00                	add    BYTE PTR [rax],al
  9d:	00 00                	add    BYTE PTR [rax],al
  9f:	00 00                	add    BYTE PTR [rax],al
  a1:	00 01                	add    BYTE PTR [rcx],al
  a3:	9c                   	pushf  
  a4:	08 61 00             	or     BYTE PTR [rcx+0x0],ah
  a7:	01 05 71 00 00 00    	add    DWORD PTR [rip+0x71],eax        # 11e <main+0xfe>
  ad:	02 91 6c 08 62 00    	add    dl,BYTE PTR [rcx+0x62086c]
  b3:	01 05 71 00 00 00    	add    DWORD PTR [rip+0x71],eax        # 12a <main+0x10a>
  b9:	02 91 68 08 63 00    	add    dl,BYTE PTR [rcx+0x630868]
  bf:	01 05 71 00 00 00    	add    DWORD PTR [rip+0x71],eax        # 136 <main+0x116>
  c5:	02                   	.byte 0x2
  c6:	91                   	xchg   ecx,eax
  c7:	64 00 00             	add    BYTE PTR fs:[rax],al

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
program add_int
   0:	01 11                	add    DWORD PTR [rcx],edx
   2:	01 25 0e 13 0b 42    	add    DWORD PTR [rip+0x420b130e],esp        # 420b1316 <main+0x420b12f6>
	a = 1
   8:	0b 03                	or     eax,DWORD PTR [rbx]
   a:	0e                   	(bad)  
	b = 9
   b:	1b 0e                	sbb    ecx,DWORD PTR [rsi]
   d:	11 01                	adc    DWORD PTR [rcx],eax
   f:	12 07                	adc    al,BYTE PTR [rdi]
  11:	10 17                	adc    BYTE PTR [rdi],dl
	c = a + b
  13:	99                   	cdq    
  14:	42 17                	rex.X (bad) 
  16:	00 00                	add    BYTE PTR [rax],al
  18:	02 2e                	add    ch,BYTE PTR [rsi]
  1a:	01 3f                	add    DWORD PTR [rdi],edi
  1c:	19 03                	sbb    DWORD PTR [rbx],eax
end program add_int
  1e:	0e                   	(bad)  
  1f:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  21:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  23:	49 13 11             	adc    rdx,QWORD PTR [r9]
  26:	01 12                	add    DWORD PTR [rdx],edx
  28:	07                   	(bad)  
  29:	40 18 96 42 19 01 13 	sbb    BYTE PTR [rsi+0x13011942],dl
  30:	00 00                	add    BYTE PTR [rax],al
  32:	03 05 00 03 0e 3a    	add    eax,DWORD PTR [rip+0x3a0e0300]        # 3a0e0338 <main+0x3a0e0318>
  38:	0b 3b                	or     edi,DWORD PTR [rbx]
  3a:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  3d:	02 18                	add    bl,BYTE PTR [rax]
  3f:	00 00                	add    BYTE PTR [rax],al
  41:	04 24                	add    al,0x24
  43:	00 0b                	add    BYTE PTR [rbx],cl
  45:	0b 3e                	or     edi,DWORD PTR [rsi]
  47:	0b 03                	or     eax,DWORD PTR [rbx]
  49:	0e                   	(bad)  
  4a:	00 00                	add    BYTE PTR [rax],al
  4c:	05 26 00 49 13       	add    eax,0x13490026
  51:	00 00                	add    BYTE PTR [rax],al
  53:	06                   	(bad)  
  54:	0f 00 0b             	str    WORD PTR [rbx]
  57:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  5a:	00 00                	add    BYTE PTR [rax],al
  5c:	07                   	(bad)  
  5d:	2e 01 03             	add    DWORD PTR cs:[rbx],eax
  60:	0e                   	(bad)  
  61:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  63:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  65:	6a 19                	push   0x19
  67:	36 0b 11             	or     edx,DWORD PTR ss:[rcx]
  6a:	01 12                	add    DWORD PTR [rdx],edx
  6c:	07                   	(bad)  
  6d:	40 18 97 42 19 00 00 	sbb    BYTE PTR [rdi+0x1942],dl
  74:	08 34 00             	or     BYTE PTR [rax+rax*1],dh
  77:	03 08                	add    ecx,DWORD PTR [rax]
  79:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  7b:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  7d:	49 13 02             	adc    rax,QWORD PTR [r10]
  80:	18 00                	sbb    BYTE PTR [rax],al
	...

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
program add_int
   0:	2c 00                	sub    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
	a = 1
   4:	02 00                	add    al,BYTE PTR [rax]
   6:	00 00                	add    BYTE PTR [rax],al
			6: R_X86_64_32	.debug_info
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 00                	or     BYTE PTR [rax],al
	...
			10: R_X86_64_64	.text
	c = a + b
  18:	5d                   	pop    rbp
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
program add_int
   0:	04 00                	add    al,0x0
   2:	02 00                	add    al,BYTE PTR [rax]
			3: R_X86_64_32	.debug_line
	a = 1
   4:	00 00                	add    BYTE PTR [rax],al
   6:	00 03                	add    BYTE PTR [rbx],al
   8:	00 01                	add    BYTE PTR [rcx],al
   a:	04 00                	add    al,0x0

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
program add_int
   0:	3f                   	(bad)  
   1:	00 00                	add    BYTE PTR [rax],al
   3:	00 02                	add    BYTE PTR [rdx],al
	a = 1
   5:	00 22                	add    BYTE PTR [rdx],ah
   7:	00 00                	add    BYTE PTR [rax],al
   9:	00 01                	add    BYTE PTR [rcx],al
	b = 9
   b:	01 fb                	add    ebx,edi
   d:	0e                   	(bad)  
   e:	0d 00 01 01 01       	or     eax,0x1010100
	c = a + b
  13:	01 00                	add    DWORD PTR [rax],eax
  15:	00 00                	add    BYTE PTR [rax],al
  17:	01 00                	add    DWORD PTR [rax],eax
  19:	00 01                	add    BYTE PTR [rcx],al
  1b:	00 61 64             	add    BYTE PTR [rcx+0x64],ah
end program add_int
  1e:	64 5f                	fs pop rdi
  20:	69 6e 74 2e 66 30 38 	imul   ebp,DWORD PTR [rsi+0x74],0x3830662e
  27:	00 00                	add    BYTE PTR [rax],al
  29:	00 00                	add    BYTE PTR [rax],al
  2b:	00 00                	add    BYTE PTR [rax],al
  2d:	09 02                	or     DWORD PTR [rdx],eax
	...
			2f: R_X86_64_64	.text
  37:	01 50 75             	add    DWORD PTR [rax+0x75],edx
  3a:	76 ae                	jbe    ffffffffffffffea <main+0xffffffffffffffca>
  3c:	3c e4                	cmp    al,0xe4
  3e:	02 2e                	add    ch,BYTE PTR [rsi]
  40:	00 01                	add    BYTE PTR [rcx],al
  42:	01                   	.byte 0x1

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
program add_int
   0:	61                   	(bad)  
   1:	64 64 5f             	fs fs pop rdi
	a = 1
   4:	69 6e 74 2e 66 30 38 	imul   ebp,DWORD PTR [rsi+0x74],0x3830662e
	b = 9
   b:	00 63 68             	add    BYTE PTR [rbx+0x68],ah
   e:	61                   	(bad)  
   f:	72 61                	jb     72 <.debug_str+0x72>
  11:	63 74 65 72          	movsxd esi,DWORD PTR [rbp+riz*2+0x72]
	c = a + b
  15:	28 6b 69             	sub    BYTE PTR [rbx+0x69],ch
  18:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  19:	64 3d 31 29 00 61    	fs cmp eax,0x61002931
end program add_int
  1f:	72 67                	jb     88 <.debug_str+0x88>
  21:	63 00                	movsxd eax,DWORD PTR [rax]
  23:	47                   	rex.RXB
  24:	4e 55                	rex.WRX push rbp
  26:	20 46 6f             	and    BYTE PTR [rsi+0x6f],al
  29:	72 74                	jb     9f <.debug_str+0x9f>
  2b:	72 61                	jb     8e <.debug_str+0x8e>
  2d:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  2e:	32 30                	xor    dh,BYTE PTR [rax]
  30:	30 38                	xor    BYTE PTR [rax],bh
  32:	20 37                	and    BYTE PTR [rdi],dh
  34:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  37:	30 20                	xor    BYTE PTR [rax],ah
  39:	2d 6d 74 75 6e       	sub    eax,0x6e75746d
  3e:	65 3d 67 65 6e 65    	gs cmp eax,0x656e6567
  44:	72 69                	jb     af <.debug_str+0xaf>
  46:	63 20                	movsxd esp,DWORD PTR [rax]
  48:	2d 6d 61 72 63       	sub    eax,0x6372616d
  4d:	68 3d 78 38 36       	push   0x3638783d
  52:	2d 36 34 20 2d       	sub    eax,0x2d203436
  57:	67 67 64 62 33       	addr32 addr32 fs (bad) 
  5c:	20 2d 66 69 6e 74    	and    BYTE PTR [rip+0x746e6966],ch        # 746e69c8 <main+0x746e69a8>
  62:	72 69                	jb     cd <.debug_str+0xcd>
  64:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  65:	73 69                	jae    d0 <.debug_str+0xd0>
  67:	63 2d 6d 6f 64 75    	movsxd ebp,DWORD PTR [rip+0x75646f6d]        # 75646fda <main+0x75646fba>
  6d:	6c                   	ins    BYTE PTR es:[rdi],dx
  6e:	65 73 2d             	gs jae 9e <.debug_str+0x9e>
  71:	70 61                	jo     d4 <.debug_str+0xd4>
  73:	74 68                	je     dd <.debug_str+0xdd>
  75:	20 2f                	and    BYTE PTR [rdi],ch
  77:	75 73                	jne    ec <.debug_str+0xec>
  79:	72 2f                	jb     aa <.debug_str+0xaa>
  7b:	6c                   	ins    BYTE PTR es:[rdi],dx
  7c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [rdx+0x2f],0x2f636367
  83:	78 38                	js     bd <.debug_str+0xbd>
  85:	36 5f                	ss pop rdi
  87:	36 34 2d             	ss xor al,0x2d
  8a:	6c                   	ins    BYTE PTR es:[rdi],dx
  8b:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [rsi+0x75],0x6e672d78
  92:	75 2f                	jne    c3 <.debug_str+0xc3>
  94:	37                   	(bad)  
  95:	2f                   	(bad)  
  96:	66 69 6e 63 6c 75    	imul   bp,WORD PTR [rsi+0x63],0x756c
  9c:	64 65 00 2f          	fs add BYTE PTR gs:[rdi],ch
  a0:	68 6f 6d 65 2f       	push   0x2f656d6f
  a5:	75 62                	jne    109 <.debug_str+0x109>
  a7:	75 6e                	jne    117 <.debug_str+0x117>
  a9:	74 75                	je     120 <.debug_str+0x120>
  ab:	2f                   	(bad)  
  ac:	45 6e                	rex.RB outs dx,BYTE PTR ds:[rsi]
  ae:	67 69 6e 65 65 72 69 	imul   ebp,DWORD PTR [esi+0x65],0x6e697265
  b5:	6e 
  b6:	67 2f                	addr32 (bad) 
  b8:	50                   	push   rax
  b9:	72 6f                	jb     12a <.debug_str+0x12a>
  bb:	67 72 61             	addr32 jb 11f <.debug_str+0x11f>
  be:	6d                   	ins    DWORD PTR es:[rdi],dx
  bf:	6d                   	ins    DWORD PTR es:[rdi],dx
  c0:	69 6e 67 2f 44 69 73 	imul   ebp,DWORD PTR [rsi+0x67],0x7369442f
  c7:	61                   	(bad)  
  c8:	73 73                	jae    13d <.debug_str+0x13d>
  ca:	65 6d                	gs ins DWORD PTR es:[rdi],dx
  cc:	62                   	(bad)  
  cd:	6c                   	ins    BYTE PTR es:[rdi],dx
  ce:	69 6e 67 2d 42 69 6e 	imul   ebp,DWORD PTR [rsi+0x67],0x6e69422d
  d5:	61                   	(bad)  
  d6:	72 69                	jb     141 <.debug_str+0x141>
  d8:	65 73 2f             	gs jae 10a <.debug_str+0x10a>
  db:	46 6f                	rex.RX outs dx,DWORD PTR ds:[rsi]
  dd:	72 74                	jb     153 <main+0x133>
  df:	72 61                	jb     142 <.debug_str+0x142>
  e1:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  e2:	2f                   	(bad)  
  e3:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  e5:	74 65                	je     14c <main+0x12c>
  e7:	6c                   	ins    BYTE PTR es:[rdi],dx
  e8:	5f                   	pop    rdi
  e9:	61                   	(bad)  
  ea:	72 63                	jb     14f <main+0x12f>
  ec:	68 69 74 65 63       	push   0x63657469
  f1:	74 75                	je     168 <main+0x148>
  f3:	72 65                	jb     15a <main+0x13a>
  f5:	2f                   	(bad)  
  f6:	41                   	rex.B
  f7:	4d                   	rex.WRB
  f8:	44                   	rex.R
  f9:	36 34 2f             	ss xor al,0x2f
  fc:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  fe:	74 65                	je     165 <main+0x145>
 100:	67 65 72 5f          	addr32 gs jb 163 <main+0x143>
 104:	4f 70 65             	rex.WRXB jo 16c <main+0x14c>
 107:	72 61                	jb     16a <main+0x14a>
 109:	74 69                	je     174 <main+0x154>
 10b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 10c:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 10d:	73 2f                	jae    13e <.debug_str+0x13e>
 10f:	41                   	rex.B
 110:	64 64 5f             	fs fs pop rdi
 113:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
 115:	74 2f                	je     146 <.debug_str+0x146>
 117:	57                   	push   rdi
 118:	69 74 68 5f 44 65 62 	imul   esi,DWORD PTR [rax+rbp*2+0x5f],0x75626544
 11f:	75 
 120:	67 5f                	addr32 pop rdi
 122:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
 124:	66 6f                	outs   dx,WORD PTR ds:[rsi]
 126:	00 61 64             	add    BYTE PTR [rcx+0x64],ah
 129:	64 5f                	fs pop rdi
 12b:	69 6e 74 00 69 6e 74 	imul   ebp,DWORD PTR [rsi+0x74],0x746e6900
 132:	65 67 65 72 28       	gs addr32 gs jb 15f <main+0x13f>
 137:	6b 69 6e 64          	imul   ebp,DWORD PTR [rcx+0x6e],0x64
 13b:	3d 34 29 00 6d       	cmp    eax,0x6d002934
 140:	61                   	(bad)  
 141:	69 6e 00 61 72 67 76 	imul   ebp,DWORD PTR [rsi+0x0],0x76677261
	...

Disassembly of section .comment:

0000000000000000 <.comment>:
program add_int
   0:	00 47 43             	add    BYTE PTR [rdi+0x43],al
   3:	43 3a 20             	rex.XB cmp spl,BYTE PTR [r8]
	a = 1
   6:	28 55 62             	sub    BYTE PTR [rbp+0x62],dl
   9:	75 6e                	jne    79 <main+0x59>
	b = 9
   b:	74 75                	je     82 <main+0x62>
   d:	20 37                	and    BYTE PTR [rdi],dh
   f:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
	c = a + b
  12:	30 2d 32 37 75 62    	xor    BYTE PTR [rip+0x62753732],ch        # 6275374a <main+0x6275372a>
  18:	75 6e                	jne    88 <main+0x68>
  1a:	74 75                	je     91 <main+0x71>
  1c:	31 7e 31             	xor    DWORD PTR [rsi+0x31],edi
end program add_int
  1f:	38 2e                	cmp    BYTE PTR [rsi],ch
  21:	30 34 29             	xor    BYTE PTR [rcx+rbp*1],dh
  24:	20 37                	and    BYTE PTR [rdi],dh
  26:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  29:	30 00                	xor    BYTE PTR [rax],al

Disassembly of section .eh_frame:

0000000000000000 <.eh_frame>:
   0:	14 00                	adc    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   4:	00 00                	add    BYTE PTR [rax],al
   6:	00 00                	add    BYTE PTR [rax],al
   8:	01 7a 52             	add    DWORD PTR [rdx+0x52],edi
   b:	00 01                	add    BYTE PTR [rcx],al
   d:	78 10                	js     1f <.eh_frame+0x1f>
   f:	01 1b                	add    DWORD PTR [rbx],ebx
  11:	0c 07                	or     al,0x7
  13:	08 90 01 00 00 1c    	or     BYTE PTR [rax+0x1c000001],dl
  19:	00 00                	add    BYTE PTR [rax],al
  1b:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  1e:	00 00                	add    BYTE PTR [rax],al
  20:	00 00                	add    BYTE PTR [rax],al
			20: R_X86_64_PC32	.text
  22:	00 00                	add    BYTE PTR [rax],al
  24:	20 00                	and    BYTE PTR [rax],al
  26:	00 00                	add    BYTE PTR [rax],al
  28:	00 41 0e             	add    BYTE PTR [rcx+0xe],al
  2b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  31:	5b                   	pop    rbx
  32:	0c 07                	or     al,0x7
  34:	08 00                	or     BYTE PTR [rax],al
  36:	00 00                	add    BYTE PTR [rax],al
  38:	1c 00                	sbb    al,0x0
  3a:	00 00                	add    BYTE PTR [rax],al
  3c:	3c 00                	cmp    al,0x0
  3e:	00 00                	add    BYTE PTR [rax],al
  40:	00 00                	add    BYTE PTR [rax],al
			40: R_X86_64_PC32	.text+0x20
  42:	00 00                	add    BYTE PTR [rax],al
  44:	3d 00 00 00 00       	cmp    eax,0x0
  49:	41 0e                	rex.B (bad) 
  4b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  51:	78 0c                	js     5f <main+0x3f>
  53:	07                   	(bad)  
  54:	08 00                	or     BYTE PTR [rax],al
	...
Contents of the .debug_info section:

  Compilation Unit @ offset 0x0:
   Length:        0xc6 (32-bit)
   Version:       4
   Abbrev Offset: 0x0
   Pointer Size:  8
 <0><b>: Abbrev Number: 1 (DW_TAG_compile_unit)
    <c>   DW_AT_producer    : (indirect string, offset: 0x23): GNU Fortran2008 7.3.0 -mtune=generic -march=x86-64 -ggdb3 -fintrinsic-modules-path /usr/lib/gcc/x86_64-linux-gnu/7/finclude
    <10>   DW_AT_language    : 14	(Fortran 95)
    <11>   DW_AT_identifier_case: 2	(down_case)
    <12>   DW_AT_name        : (indirect string, offset: 0x0): add_int.f08
    <16>   DW_AT_comp_dir    : (indirect string, offset: 0x9f): /home/ubuntu/Engineering/Programming/Disassembling-Binaries/Fortran/Intel_architecture/AMD64/Integer_Operations/Add_Int/With_Debug_Info
    <1a>   DW_AT_low_pc      : 0x0
    <22>   DW_AT_high_pc     : 0x5d
    <2a>   DW_AT_stmt_list   : 0x0
    <2e>   DW_AT_GNU_macros  : 0x0
 <1><32>: Abbrev Number: 2 (DW_TAG_subprogram)
    <33>   DW_AT_external    : 1
    <33>   DW_AT_name        : (indirect string, offset: 0x13f): main
    <37>   DW_AT_decl_file   : 1
    <38>   DW_AT_decl_line   : 12
    <39>   DW_AT_type        : <0x71>
    <3d>   DW_AT_low_pc      : 0x20
    <45>   DW_AT_high_pc     : 0x3d
    <4d>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <4f>   DW_AT_GNU_all_tail_call_sites: 1
    <4f>   DW_AT_sibling     : <0x71>
 <2><53>: Abbrev Number: 3 (DW_TAG_formal_parameter)
    <54>   DW_AT_name        : (indirect string, offset: 0x1e): argc
    <58>   DW_AT_decl_file   : 1
    <59>   DW_AT_decl_line   : 12
    <5a>   DW_AT_type        : <0x78>
    <5e>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><61>: Abbrev Number: 3 (DW_TAG_formal_parameter)
    <62>   DW_AT_name        : (indirect string, offset: 0x144): argv
    <66>   DW_AT_decl_file   : 1
    <67>   DW_AT_decl_line   : 12
    <68>   DW_AT_type        : <0x7d>
    <6c>   DW_AT_location    : 3 byte block: 91 60 6 	(DW_OP_fbreg: -32; DW_OP_deref)
 <2><70>: Abbrev Number: 0
 <1><71>: Abbrev Number: 4 (DW_TAG_base_type)
    <72>   DW_AT_byte_size   : 4
    <73>   DW_AT_encoding    : 5	(signed)
    <74>   DW_AT_name        : (indirect string, offset: 0x12f): integer(kind=4)
 <1><78>: Abbrev Number: 5 (DW_TAG_const_type)
    <79>   DW_AT_type        : <0x71>
 <1><7d>: Abbrev Number: 6 (DW_TAG_pointer_type)
    <7e>   DW_AT_byte_size   : 8
    <7f>   DW_AT_type        : <0x83>
 <1><83>: Abbrev Number: 4 (DW_TAG_base_type)
    <84>   DW_AT_byte_size   : 1
    <85>   DW_AT_encoding    : 8	(unsigned char)
    <86>   DW_AT_name        : (indirect string, offset: 0xc): character(kind=1)
 <1><8a>: Abbrev Number: 7 (DW_TAG_subprogram)
    <8b>   DW_AT_name        : (indirect string, offset: 0x127): add_int
    <8f>   DW_AT_decl_file   : 1
    <90>   DW_AT_decl_line   : 1
    <91>   DW_AT_main_subprogram: 1
    <91>   DW_AT_calling_convention: 2	(program)
    <92>   DW_AT_low_pc      : 0x0
    <9a>   DW_AT_high_pc     : 0x20
    <a2>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <a4>   DW_AT_GNU_all_call_sites: 1
 <2><a4>: Abbrev Number: 8 (DW_TAG_variable)
    <a5>   DW_AT_name        : a
    <a7>   DW_AT_decl_file   : 1
    <a8>   DW_AT_decl_line   : 5
    <a9>   DW_AT_type        : <0x71>
    <ad>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><b0>: Abbrev Number: 8 (DW_TAG_variable)
    <b1>   DW_AT_name        : b
    <b3>   DW_AT_decl_file   : 1
    <b4>   DW_AT_decl_line   : 5
    <b5>   DW_AT_type        : <0x71>
    <b9>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><bc>: Abbrev Number: 8 (DW_TAG_variable)
    <bd>   DW_AT_name        : c
    <bf>   DW_AT_decl_file   : 1
    <c0>   DW_AT_decl_line   : 5
    <c1>   DW_AT_type        : <0x71>
    <c5>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><c8>: Abbrev Number: 0
 <1><c9>: Abbrev Number: 0

Contents of the .debug_abbrev section:

  Number TAG (0x0)
   1      DW_TAG_compile_unit    [has children]
    DW_AT_producer     DW_FORM_strp
    DW_AT_language     DW_FORM_data1
    DW_AT_identifier_case DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT_comp_dir     DW_FORM_strp
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_stmt_list    DW_FORM_sec_offset
    DW_AT_GNU_macros   DW_FORM_sec_offset
    DW_AT value: 0     DW_FORM value: 0
   2      DW_TAG_subprogram    [has children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   3      DW_TAG_formal_parameter    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   4      DW_TAG_base_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_encoding     DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT value: 0     DW_FORM value: 0
   5      DW_TAG_const_type    [no children]
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   6      DW_TAG_pointer_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   7      DW_TAG_subprogram    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_main_subprogram DW_FORM_flag_present
    DW_AT_calling_convention DW_FORM_data1
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_call_sites DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   8      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0

Contents of the .debug_aranges section:

  Length:                   44
  Version:                  2
  Offset into .debug_info:  0x0
  Pointer Size:             8
  Segment Size:             0

    Address            Length
    0000000000000000 000000000000005d 
    0000000000000000 0000000000000000 

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4
  Offset into .debug_line:     0x0

 DW_MACRO_start_file - lineno: 0 filenum: 1 filename: add_int.f08
 DW_MACRO_end_file

Raw dump of debug contents of section .debug_line:

  Offset:                      0x0
  Length:                      63
  DWARF Version:               2
  Prologue Length:             34
  Minimum Instruction Length:  1
  Initial value of 'is_stmt':  1
  Line Base:                   -5
  Line Range:                  14
  Opcode Base:                 13

 Opcodes:
  Opcode 1 has 0 args
  Opcode 2 has 1 arg
  Opcode 3 has 1 arg
  Opcode 4 has 1 arg
  Opcode 5 has 1 arg
  Opcode 6 has 0 args
  Opcode 7 has 0 args
  Opcode 8 has 0 args
  Opcode 9 has 1 arg
  Opcode 10 has 0 args
  Opcode 11 has 0 args
  Opcode 12 has 1 arg

 The Directory Table is empty.

 The File Name Table (offset 0x1c):
  Entry	Dir	Time	Size	Name
  1	0	0	0	add_int.f08

 Line Number Statements:
  [0x0000002c]  Extended opcode 2: set Address to 0x0
  [0x00000037]  Copy
  [0x00000038]  Special opcode 67: advance Address by 4 to 0x4 and Line by 6 to 7
  [0x00000039]  Special opcode 104: advance Address by 7 to 0xb and Line by 1 to 8
  [0x0000003a]  Special opcode 105: advance Address by 7 to 0x12 and Line by 2 to 10
  [0x0000003b]  Special opcode 161: advance Address by 11 to 0x1d and Line by 2 to 12
  [0x0000003c]  Special opcode 47: advance Address by 3 to 0x20 and Line by 0 to 12
  [0x0000003d]  Special opcode 215: advance Address by 15 to 0x2f and Line by 0 to 12
  [0x0000003e]  Advance PC by 46 to 0x5d
  [0x00000040]  Extended opcode 1: End of Sequence


Contents of the .debug_str section:

  0x00000000 6164645f 696e742e 66303800 63686172 add_int.f08.char
  0x00000010 61637465 72286b69 6e643d31 29006172 acter(kind=1).ar
  0x00000020 67630047 4e552046 6f727472 616e3230 gc.GNU Fortran20
  0x00000030 30382037 2e332e30 202d6d74 756e653d 08 7.3.0 -mtune=
  0x00000040 67656e65 72696320 2d6d6172 63683d78 generic -march=x
  0x00000050 38362d36 34202d67 67646233 202d6669 86-64 -ggdb3 -fi
  0x00000060 6e747269 6e736963 2d6d6f64 756c6573 ntrinsic-modules
  0x00000070 2d706174 68202f75 73722f6c 69622f67 -path /usr/lib/g
  0x00000080 63632f78 38365f36 342d6c69 6e75782d cc/x86_64-linux-
  0x00000090 676e752f 372f6669 6e636c75 6465002f gnu/7/finclude./
  0x000000a0 686f6d65 2f756275 6e74752f 456e6769 home/ubuntu/Engi
  0x000000b0 6e656572 696e672f 50726f67 72616d6d neering/Programm
  0x000000c0 696e672f 44697361 7373656d 626c696e ing/Disassemblin
  0x000000d0 672d4269 6e617269 65732f46 6f727472 g-Binaries/Fortr
  0x000000e0 616e2f49 6e74656c 5f617263 68697465 an/Intel_archite
  0x000000f0 63747572 652f414d 4436342f 496e7465 cture/AMD64/Inte
  0x00000100 6765725f 4f706572 6174696f 6e732f41 ger_Operations/A
  0x00000110 64645f49 6e742f57 6974685f 44656275 dd_Int/With_Debu
  0x00000120 675f496e 666f0061 64645f69 6e740069 g_Info.add_int.i
  0x00000130 6e746567 6572286b 696e643d 3429006d nteger(kind=4).m
  0x00000140 61696e00 61726776 00                ain.argv.

Contents of the .eh_frame section:


00000000 0000000000000014 00000000 CIE
  Version:               1
  Augmentation:          "zR"
  Code alignment factor: 1
  Data alignment factor: -8
  Return address column: 16
  Augmentation data:     1b
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_offset: r16 (rip) at cfa-8
  DW_CFA_nop
  DW_CFA_nop

00000018 000000000000001c 0000001c FDE cie=00000000 pc=0000000000000000..0000000000000020
  DW_CFA_advance_loc: 1 to 0000000000000001
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000004
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 27 to 000000000000001f
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000038 000000000000001c 0000003c FDE cie=00000000 pc=0000000000000020..000000000000005d
  DW_CFA_advance_loc: 1 to 0000000000000021
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000024
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 56 to 000000000000005c
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

