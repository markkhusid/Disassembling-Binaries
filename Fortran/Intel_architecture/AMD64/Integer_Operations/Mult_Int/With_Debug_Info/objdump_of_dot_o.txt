
mult.o:     file format elf64-x86-64
mult.o
architecture: i386:x86-64, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x0000000000000000

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         0000005c  0000000000000000  0000000000000000  00000040  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  0000000000000000  0000000000000000  0000009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  0000000000000000  0000000000000000  0000009c  2**0
                  ALLOC
  3 .rodata       0000001c  0000000000000000  0000000000000000  000000a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .debug_info   000000ca  0000000000000000  0000000000000000  000000bc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_abbrev 00000084  0000000000000000  0000000000000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000030  0000000000000000  0000000000000000  0000020a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  7 .debug_macro  0000000c  0000000000000000  0000000000000000  0000023a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  8 .debug_line   00000040  0000000000000000  0000000000000000  00000246  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_str    00000131  0000000000000000  0000000000000000  00000286  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      0000002b  0000000000000000  0000000000000000  000003b7  2**0
                  CONTENTS, READONLY
 11 .note.GNU-stack 00000000  0000000000000000  0000000000000000  000003e2  2**0
                  CONTENTS, READONLY
 12 .eh_frame     00000058  0000000000000000  0000000000000000  000003e8  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 mult.f08
0000000000000000 l    d  .text	0000000000000000 .text
0000000000000000 l    d  .data	0000000000000000 .data
0000000000000000 l    d  .bss	0000000000000000 .bss
0000000000000000 l     F .text	000000000000001f MAIN__
0000000000000000 l     O .rodata	000000000000001c options.0.3504
0000000000000000 l    d  .rodata	0000000000000000 .rodata
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .note.GNU-stack	0000000000000000 .note.GNU-stack
0000000000000000 l    d  .eh_frame	0000000000000000 .eh_frame
0000000000000000 l    d  .comment	0000000000000000 .comment
000000000000001f g     F .text	000000000000003d main
0000000000000000         *UND*	0000000000000000 _GLOBAL_OFFSET_TABLE_
0000000000000000         *UND*	0000000000000000 _gfortran_set_args
0000000000000000         *UND*	0000000000000000 _gfortran_set_options



Disassembly of section .text:

0000000000000000 <MAIN__>:
program mult
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp

	implicit none

	integer		:: a, b, c

	a = 2
   4:	c7 45 fc 02 00 00 00 	mov    DWORD PTR [rbp-0x4],0x2
	b = 3
   b:	c7 45 f8 03 00 00 00 	mov    DWORD PTR [rbp-0x8],0x3

	c = a * b
  12:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  15:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
  19:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax

end program mult
  1c:	90                   	nop
  1d:	5d                   	pop    rbp
  1e:	c3                   	ret    

000000000000001f <main>:
  1f:	55                   	push   rbp
  20:	48 89 e5             	mov    rbp,rsp
  23:	48 83 ec 10          	sub    rsp,0x10
  27:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  2a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  2e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  32:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  35:	48 89 d6             	mov    rsi,rdx
  38:	89 c7                	mov    edi,eax
  3a:	e8 00 00 00 00       	call   3f <main+0x20>
			3b: R_X86_64_PLT32	_gfortran_set_args-0x4
  3f:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 46 <main+0x27>
			42: R_X86_64_PC32	.rodata-0x4
  46:	bf 07 00 00 00       	mov    edi,0x7
  4b:	e8 00 00 00 00       	call   50 <main+0x31>
			4c: R_X86_64_PLT32	_gfortran_set_options-0x4
  50:	e8 ab ff ff ff       	call   0 <MAIN__>
  55:	b8 00 00 00 00       	mov    eax,0x0
  5a:	c9                   	leave  
  5b:	c3                   	ret    

Disassembly of section .rodata:

0000000000000000 <options.0.3504>:
   0:	44 00 00             	add    BYTE PTR [rax],r8b
   3:	00 ff                	add    bh,bh
   5:	03 00                	add    eax,DWORD PTR [rax]
   7:	00 00                	add    BYTE PTR [rax],al
   9:	00 00                	add    BYTE PTR [rax],al
   b:	00 01                	add    BYTE PTR [rcx],al
   d:	00 00                	add    BYTE PTR [rax],al
   f:	00 01                	add    BYTE PTR [rcx],al
  11:	00 00                	add    BYTE PTR [rax],al
  13:	00 00                	add    BYTE PTR [rax],al
  15:	00 00                	add    BYTE PTR [rax],al
  17:	00 1f                	add    BYTE PTR [rdi],bl
  19:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
program mult
   0:	c6 00 00             	mov    BYTE PTR [rax],0x0
   3:	00 04 00             	add    BYTE PTR [rax+rax*1],al
	a = 2
   6:	00 00                	add    BYTE PTR [rax],al
			6: R_X86_64_32	.debug_abbrev
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 01                	or     BYTE PTR [rcx],al
	b = 3
   c:	00 00                	add    BYTE PTR [rax],al
			c: R_X86_64_32	.debug_str+0x20
   e:	00 00                	add    BYTE PTR [rax],al
  10:	0e                   	(bad)  
  11:	02 00                	add    al,BYTE PTR [rax]
			12: R_X86_64_32	.debug_str+0x12
	...
			16: R_X86_64_32	.debug_str+0xb6
			1a: R_X86_64_64	.text
end program mult
  1f:	00 00                	add    BYTE PTR [rax],al
  21:	00 5c 00 00          	add    BYTE PTR [rax+rax*1+0x0],bl
	...
			2a: R_X86_64_32	.debug_line
			2e: R_X86_64_32	.debug_macro
  31:	00 02                	add    BYTE PTR [rdx],al
  33:	00 00                	add    BYTE PTR [rax],al
			33: R_X86_64_32	.debug_str+0xb1
  35:	00 00                	add    BYTE PTR [rax],al
  37:	01 0c 71             	add    DWORD PTR [rcx+rsi*2],ecx
	...
			3d: R_X86_64_64	.text+0x1f
  42:	00 00                	add    BYTE PTR [rax],al
  44:	00 3d 00 00 00 00    	add    BYTE PTR [rip+0x0],bh        # 4a <.debug_info+0x4a>
  4a:	00 00                	add    BYTE PTR [rax],al
  4c:	00 01                	add    BYTE PTR [rcx],al
  4e:	9c                   	pushf  
  4f:	71 00                	jno    51 <.debug_info+0x51>
  51:	00 00                	add    BYTE PTR [rax],al
  53:	03 00                	add    eax,DWORD PTR [rax]
			54: R_X86_64_32	.debug_str+0x1b
  55:	00 00                	add    BYTE PTR [rax],al
  57:	00 01                	add    BYTE PTR [rcx],al
  59:	0c 78                	or     al,0x78
  5b:	00 00                	add    BYTE PTR [rax],al
  5d:	00 02                	add    BYTE PTR [rdx],al
  5f:	91                   	xchg   ecx,eax
  60:	6c                   	ins    BYTE PTR es:[rdi],dx
  61:	03 00                	add    eax,DWORD PTR [rax]
			62: R_X86_64_32	.debug_str+0x12c
  63:	00 00                	add    BYTE PTR [rax],al
  65:	00 01                	add    BYTE PTR [rcx],al
  67:	0c 7d                	or     al,0x7d
  69:	00 00                	add    BYTE PTR [rax],al
  6b:	00 03                	add    BYTE PTR [rbx],al
  6d:	91                   	xchg   ecx,eax
  6e:	60                   	(bad)  
  6f:	06                   	(bad)  
  70:	00 04 04             	add    BYTE PTR [rsp+rax*1],al
  73:	05 00 00 00 00       	add    eax,0x0
			74: R_X86_64_32	.debug_str+0xa1
  78:	05 71 00 00 00       	add    eax,0x71
  7d:	06                   	(bad)  
  7e:	08 83 00 00 00 04    	or     BYTE PTR [rbx+0x4000000],al
  84:	01 08                	add    DWORD PTR [rax],ecx
  86:	00 00                	add    BYTE PTR [rax],al
			86: R_X86_64_32	.debug_str
  88:	00 00                	add    BYTE PTR [rax],al
  8a:	07                   	(bad)  
  8b:	00 00                	add    BYTE PTR [rax],al
			8b: R_X86_64_32	.debug_str+0x9c
  8d:	00 00                	add    BYTE PTR [rax],al
  8f:	01 01                	add    DWORD PTR [rcx],eax
  91:	02 00                	add    al,BYTE PTR [rax]
			92: R_X86_64_64	.text
  93:	00 00                	add    BYTE PTR [rax],al
  95:	00 00                	add    BYTE PTR [rax],al
  97:	00 00                	add    BYTE PTR [rax],al
  99:	00 1f                	add    BYTE PTR [rdi],bl
  9b:	00 00                	add    BYTE PTR [rax],al
  9d:	00 00                	add    BYTE PTR [rax],al
  9f:	00 00                	add    BYTE PTR [rax],al
  a1:	00 01                	add    BYTE PTR [rcx],al
  a3:	9c                   	pushf  
  a4:	08 61 00             	or     BYTE PTR [rcx+0x0],ah
  a7:	01 05 71 00 00 00    	add    DWORD PTR [rip+0x71],eax        # 11e <main+0xff>
  ad:	02 91 6c 08 62 00    	add    dl,BYTE PTR [rcx+0x62086c]
  b3:	01 05 71 00 00 00    	add    DWORD PTR [rip+0x71],eax        # 12a <main+0x10b>
  b9:	02 91 68 08 63 00    	add    dl,BYTE PTR [rcx+0x630868]
  bf:	01 05 71 00 00 00    	add    DWORD PTR [rip+0x71],eax        # 136 <main+0x117>
  c5:	02                   	.byte 0x2
  c6:	91                   	xchg   ecx,eax
  c7:	64 00 00             	add    BYTE PTR fs:[rax],al

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
program mult
   0:	01 11                	add    DWORD PTR [rcx],edx
   2:	01 25 0e 13 0b 42    	add    DWORD PTR [rip+0x420b130e],esp        # 420b1316 <main+0x420b12f7>
	a = 2
   8:	0b 03                	or     eax,DWORD PTR [rbx]
   a:	0e                   	(bad)  
	b = 3
   b:	1b 0e                	sbb    ecx,DWORD PTR [rsi]
   d:	11 01                	adc    DWORD PTR [rcx],eax
   f:	12 07                	adc    al,BYTE PTR [rdi]
  11:	10 17                	adc    BYTE PTR [rdi],dl
	c = a * b
  13:	99                   	cdq    
  14:	42 17                	rex.X (bad) 
  16:	00 00                	add    BYTE PTR [rax],al
  18:	02 2e                	add    ch,BYTE PTR [rsi]
  1a:	01 3f                	add    DWORD PTR [rdi],edi
end program mult
  1c:	19 03                	sbb    DWORD PTR [rbx],eax
  1e:	0e                   	(bad)  
  1f:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  21:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  23:	49 13 11             	adc    rdx,QWORD PTR [r9]
  26:	01 12                	add    DWORD PTR [rdx],edx
  28:	07                   	(bad)  
  29:	40 18 96 42 19 01 13 	sbb    BYTE PTR [rsi+0x13011942],dl
  30:	00 00                	add    BYTE PTR [rax],al
  32:	03 05 00 03 0e 3a    	add    eax,DWORD PTR [rip+0x3a0e0300]        # 3a0e0338 <main+0x3a0e0319>
  38:	0b 3b                	or     edi,DWORD PTR [rbx]
  3a:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  3d:	02 18                	add    bl,BYTE PTR [rax]
  3f:	00 00                	add    BYTE PTR [rax],al
  41:	04 24                	add    al,0x24
  43:	00 0b                	add    BYTE PTR [rbx],cl
  45:	0b 3e                	or     edi,DWORD PTR [rsi]
  47:	0b 03                	or     eax,DWORD PTR [rbx]
  49:	0e                   	(bad)  
  4a:	00 00                	add    BYTE PTR [rax],al
  4c:	05 26 00 49 13       	add    eax,0x13490026
  51:	00 00                	add    BYTE PTR [rax],al
  53:	06                   	(bad)  
  54:	0f 00 0b             	str    WORD PTR [rbx]
  57:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  5a:	00 00                	add    BYTE PTR [rax],al
  5c:	07                   	(bad)  
  5d:	2e 01 03             	add    DWORD PTR cs:[rbx],eax
  60:	0e                   	(bad)  
  61:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  63:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  65:	6a 19                	push   0x19
  67:	36 0b 11             	or     edx,DWORD PTR ss:[rcx]
  6a:	01 12                	add    DWORD PTR [rdx],edx
  6c:	07                   	(bad)  
  6d:	40 18 97 42 19 00 00 	sbb    BYTE PTR [rdi+0x1942],dl
  74:	08 34 00             	or     BYTE PTR [rax+rax*1],dh
  77:	03 08                	add    ecx,DWORD PTR [rax]
  79:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  7b:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  7d:	49 13 02             	adc    rax,QWORD PTR [r10]
  80:	18 00                	sbb    BYTE PTR [rax],al
	...

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
program mult
   0:	2c 00                	sub    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
	a = 2
   4:	02 00                	add    al,BYTE PTR [rax]
   6:	00 00                	add    BYTE PTR [rax],al
			6: R_X86_64_32	.debug_info
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 00                	or     BYTE PTR [rax],al
	...
			10: R_X86_64_64	.text
	c = a * b
  18:	5c                   	pop    rsp
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
program mult
   0:	04 00                	add    al,0x0
   2:	02 00                	add    al,BYTE PTR [rax]
			3: R_X86_64_32	.debug_line
	a = 2
   4:	00 00                	add    BYTE PTR [rax],al
   6:	00 03                	add    BYTE PTR [rbx],al
   8:	00 01                	add    BYTE PTR [rcx],al
   a:	04 00                	add    al,0x0

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
program mult
   0:	3c 00                	cmp    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
	a = 2
   4:	02 00                	add    al,BYTE PTR [rax]
   6:	1f                   	(bad)  
   7:	00 00                	add    BYTE PTR [rax],al
   9:	00 01                	add    BYTE PTR [rcx],al
	b = 3
   b:	01 fb                	add    ebx,edi
   d:	0e                   	(bad)  
   e:	0d 00 01 01 01       	or     eax,0x1010100
	c = a * b
  13:	01 00                	add    DWORD PTR [rax],eax
  15:	00 00                	add    BYTE PTR [rax],al
  17:	01 00                	add    DWORD PTR [rax],eax
  19:	00 01                	add    BYTE PTR [rcx],al
  1b:	00 6d 75             	add    BYTE PTR [rbp+0x75],ch
end program mult
  1e:	6c                   	ins    BYTE PTR es:[rdi],dx
  1f:	74 2e                	je     4f <main+0x30>
  21:	66 30 38             	data16 xor BYTE PTR [rax],bh
  24:	00 00                	add    BYTE PTR [rax],al
  26:	00 00                	add    BYTE PTR [rax],al
  28:	00 00                	add    BYTE PTR [rax],al
  2a:	09 02                	or     DWORD PTR [rdx],eax
	...
			2c: R_X86_64_64	.text
  34:	01 50 75             	add    DWORD PTR [rax+0x75],edx
  37:	76 a0                	jbe    ffffffffffffffd9 <main+0xffffffffffffffba>
  39:	3c e4                	cmp    al,0xe4
  3b:	02 2e                	add    ch,BYTE PTR [rsi]
  3d:	00 01                	add    BYTE PTR [rcx],al
  3f:	01                   	.byte 0x1

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
program mult
   0:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
   3:	72 61                	jb     66 <.debug_str+0x66>
	a = 2
   5:	63 74 65 72          	movsxd esi,DWORD PTR [rbp+riz*2+0x72]
   9:	28 6b 69             	sub    BYTE PTR [rbx+0x69],ch
	b = 3
   c:	6e                   	outs   dx,BYTE PTR ds:[rsi]
   d:	64 3d 31 29 00 6d    	fs cmp eax,0x6d002931
	c = a * b
  13:	75 6c                	jne    81 <.debug_str+0x81>
  15:	74 2e                	je     45 <.debug_str+0x45>
  17:	66 30 38             	data16 xor BYTE PTR [rax],bh
  1a:	00 61 72             	add    BYTE PTR [rcx+0x72],ah
end program mult
  1d:	67 63 00             	movsxd eax,DWORD PTR [eax]
  20:	47                   	rex.RXB
  21:	4e 55                	rex.WRX push rbp
  23:	20 46 6f             	and    BYTE PTR [rsi+0x6f],al
  26:	72 74                	jb     9c <.debug_str+0x9c>
  28:	72 61                	jb     8b <.debug_str+0x8b>
  2a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  2b:	32 30                	xor    dh,BYTE PTR [rax]
  2d:	30 38                	xor    BYTE PTR [rax],bh
  2f:	20 37                	and    BYTE PTR [rdi],dh
  31:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  34:	30 20                	xor    BYTE PTR [rax],ah
  36:	2d 6d 74 75 6e       	sub    eax,0x6e75746d
  3b:	65 3d 67 65 6e 65    	gs cmp eax,0x656e6567
  41:	72 69                	jb     ac <.debug_str+0xac>
  43:	63 20                	movsxd esp,DWORD PTR [rax]
  45:	2d 6d 61 72 63       	sub    eax,0x6372616d
  4a:	68 3d 78 38 36       	push   0x3638783d
  4f:	2d 36 34 20 2d       	sub    eax,0x2d203436
  54:	67 67 64 62 33       	addr32 addr32 fs (bad) 
  59:	20 2d 66 69 6e 74    	and    BYTE PTR [rip+0x746e6966],ch        # 746e69c5 <main+0x746e69a6>
  5f:	72 69                	jb     ca <.debug_str+0xca>
  61:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  62:	73 69                	jae    cd <.debug_str+0xcd>
  64:	63 2d 6d 6f 64 75    	movsxd ebp,DWORD PTR [rip+0x75646f6d]        # 75646fd7 <main+0x75646fb8>
  6a:	6c                   	ins    BYTE PTR es:[rdi],dx
  6b:	65 73 2d             	gs jae 9b <.debug_str+0x9b>
  6e:	70 61                	jo     d1 <.debug_str+0xd1>
  70:	74 68                	je     da <.debug_str+0xda>
  72:	20 2f                	and    BYTE PTR [rdi],ch
  74:	75 73                	jne    e9 <.debug_str+0xe9>
  76:	72 2f                	jb     a7 <.debug_str+0xa7>
  78:	6c                   	ins    BYTE PTR es:[rdi],dx
  79:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [rdx+0x2f],0x2f636367
  80:	78 38                	js     ba <.debug_str+0xba>
  82:	36 5f                	ss pop rdi
  84:	36 34 2d             	ss xor al,0x2d
  87:	6c                   	ins    BYTE PTR es:[rdi],dx
  88:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [rsi+0x75],0x6e672d78
  8f:	75 2f                	jne    c0 <.debug_str+0xc0>
  91:	37                   	(bad)  
  92:	2f                   	(bad)  
  93:	66 69 6e 63 6c 75    	imul   bp,WORD PTR [rsi+0x63],0x756c
  99:	64 65 00 6d 75       	fs add BYTE PTR gs:[rbp+0x75],ch
  9e:	6c                   	ins    BYTE PTR es:[rdi],dx
  9f:	74 00                	je     a1 <.debug_str+0xa1>
  a1:	69 6e 74 65 67 65 72 	imul   ebp,DWORD PTR [rsi+0x74],0x72656765
  a8:	28 6b 69             	sub    BYTE PTR [rbx+0x69],ch
  ab:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  ac:	64 3d 34 29 00 6d    	fs cmp eax,0x6d002934
  b2:	61                   	(bad)  
  b3:	69 6e 00 2f 68 6f 6d 	imul   ebp,DWORD PTR [rsi+0x0],0x6d6f682f
  ba:	65 2f                	gs (bad) 
  bc:	75 62                	jne    120 <.debug_str+0x120>
  be:	75 6e                	jne    12e <.debug_str+0x12e>
  c0:	74 75                	je     137 <main+0x118>
  c2:	2f                   	(bad)  
  c3:	45 6e                	rex.RB outs dx,BYTE PTR ds:[rsi]
  c5:	67 69 6e 65 65 72 69 	imul   ebp,DWORD PTR [esi+0x65],0x6e697265
  cc:	6e 
  cd:	67 2f                	addr32 (bad) 
  cf:	50                   	push   rax
  d0:	72 6f                	jb     141 <main+0x122>
  d2:	67 72 61             	addr32 jb 136 <main+0x117>
  d5:	6d                   	ins    DWORD PTR es:[rdi],dx
  d6:	6d                   	ins    DWORD PTR es:[rdi],dx
  d7:	69 6e 67 2f 44 69 73 	imul   ebp,DWORD PTR [rsi+0x67],0x7369442f
  de:	61                   	(bad)  
  df:	73 73                	jae    154 <main+0x135>
  e1:	65 6d                	gs ins DWORD PTR es:[rdi],dx
  e3:	62                   	(bad)  
  e4:	6c                   	ins    BYTE PTR es:[rdi],dx
  e5:	69 6e 67 2d 42 69 6e 	imul   ebp,DWORD PTR [rsi+0x67],0x6e69422d
  ec:	61                   	(bad)  
  ed:	72 69                	jb     158 <main+0x139>
  ef:	65 73 2f             	gs jae 121 <.debug_str+0x121>
  f2:	46 6f                	rex.RX outs dx,DWORD PTR ds:[rsi]
  f4:	72 74                	jb     16a <main+0x14b>
  f6:	72 61                	jb     159 <main+0x13a>
  f8:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  f9:	2f                   	(bad)  
  fa:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  fc:	74 65                	je     163 <main+0x144>
  fe:	6c                   	ins    BYTE PTR es:[rdi],dx
  ff:	5f                   	pop    rdi
 100:	61                   	(bad)  
 101:	72 63                	jb     166 <main+0x147>
 103:	68 69 74 65 63       	push   0x63657469
 108:	74 75                	je     17f <main+0x160>
 10a:	72 65                	jb     171 <main+0x152>
 10c:	2f                   	(bad)  
 10d:	41                   	rex.B
 10e:	4d                   	rex.WRB
 10f:	44                   	rex.R
 110:	36 34 2f             	ss xor al,0x2f
 113:	4d 75 6c             	rex.WRB jne 182 <main+0x163>
 116:	74 5f                	je     177 <main+0x158>
 118:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
 11a:	74 2f                	je     14b <main+0x12c>
 11c:	57                   	push   rdi
 11d:	69 74 68 5f 44 65 62 	imul   esi,DWORD PTR [rax+rbp*2+0x5f],0x75626544
 124:	75 
 125:	67 5f                	addr32 pop rdi
 127:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
 129:	66 6f                	outs   dx,WORD PTR ds:[rsi]
 12b:	00 61 72             	add    BYTE PTR [rcx+0x72],ah
 12e:	67 76 00             	addr32 jbe 131 <main+0x112>

Disassembly of section .comment:

0000000000000000 <.comment>:
program mult
   0:	00 47 43             	add    BYTE PTR [rdi+0x43],al
   3:	43 3a 20             	rex.XB cmp spl,BYTE PTR [r8]
	a = 2
   6:	28 55 62             	sub    BYTE PTR [rbp+0x62],dl
   9:	75 6e                	jne    79 <main+0x5a>
	b = 3
   b:	74 75                	je     82 <main+0x63>
   d:	20 37                	and    BYTE PTR [rdi],dh
   f:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
	c = a * b
  12:	30 2d 32 37 75 62    	xor    BYTE PTR [rip+0x62753732],ch        # 6275374a <main+0x6275372b>
  18:	75 6e                	jne    88 <main+0x69>
  1a:	74 75                	je     91 <main+0x72>
end program mult
  1c:	31 7e 31             	xor    DWORD PTR [rsi+0x31],edi
  1f:	38 2e                	cmp    BYTE PTR [rsi],ch
  21:	30 34 29             	xor    BYTE PTR [rcx+rbp*1],dh
  24:	20 37                	and    BYTE PTR [rdi],dh
  26:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  29:	30 00                	xor    BYTE PTR [rax],al

Disassembly of section .eh_frame:

0000000000000000 <.eh_frame>:
   0:	14 00                	adc    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   4:	00 00                	add    BYTE PTR [rax],al
   6:	00 00                	add    BYTE PTR [rax],al
   8:	01 7a 52             	add    DWORD PTR [rdx+0x52],edi
   b:	00 01                	add    BYTE PTR [rcx],al
   d:	78 10                	js     1f <.eh_frame+0x1f>
   f:	01 1b                	add    DWORD PTR [rbx],ebx
  11:	0c 07                	or     al,0x7
  13:	08 90 01 00 00 1c    	or     BYTE PTR [rax+0x1c000001],dl
  19:	00 00                	add    BYTE PTR [rax],al
  1b:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  1e:	00 00                	add    BYTE PTR [rax],al
  20:	00 00                	add    BYTE PTR [rax],al
			20: R_X86_64_PC32	.text
  22:	00 00                	add    BYTE PTR [rax],al
  24:	1f                   	(bad)  
  25:	00 00                	add    BYTE PTR [rax],al
  27:	00 00                	add    BYTE PTR [rax],al
  29:	41 0e                	rex.B (bad) 
  2b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  31:	5a                   	pop    rdx
  32:	0c 07                	or     al,0x7
  34:	08 00                	or     BYTE PTR [rax],al
  36:	00 00                	add    BYTE PTR [rax],al
  38:	1c 00                	sbb    al,0x0
  3a:	00 00                	add    BYTE PTR [rax],al
  3c:	3c 00                	cmp    al,0x0
  3e:	00 00                	add    BYTE PTR [rax],al
  40:	00 00                	add    BYTE PTR [rax],al
			40: R_X86_64_PC32	.text+0x1f
  42:	00 00                	add    BYTE PTR [rax],al
  44:	3d 00 00 00 00       	cmp    eax,0x0
  49:	41 0e                	rex.B (bad) 
  4b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  51:	78 0c                	js     5f <main+0x40>
  53:	07                   	(bad)  
  54:	08 00                	or     BYTE PTR [rax],al
	...
Contents of the .debug_info section:

  Compilation Unit @ offset 0x0:
   Length:        0xc6 (32-bit)
   Version:       4
   Abbrev Offset: 0x0
   Pointer Size:  8
 <0><b>: Abbrev Number: 1 (DW_TAG_compile_unit)
    <c>   DW_AT_producer    : (indirect string, offset: 0x20): GNU Fortran2008 7.3.0 -mtune=generic -march=x86-64 -ggdb3 -fintrinsic-modules-path /usr/lib/gcc/x86_64-linux-gnu/7/finclude
    <10>   DW_AT_language    : 14	(Fortran 95)
    <11>   DW_AT_identifier_case: 2	(down_case)
    <12>   DW_AT_name        : (indirect string, offset: 0x12): mult.f08
    <16>   DW_AT_comp_dir    : (indirect string, offset: 0xb6): /home/ubuntu/Engineering/Programming/Disassembling-Binaries/Fortran/Intel_architecture/AMD64/Mult_Int/With_Debug_Info
    <1a>   DW_AT_low_pc      : 0x0
    <22>   DW_AT_high_pc     : 0x5c
    <2a>   DW_AT_stmt_list   : 0x0
    <2e>   DW_AT_GNU_macros  : 0x0
 <1><32>: Abbrev Number: 2 (DW_TAG_subprogram)
    <33>   DW_AT_external    : 1
    <33>   DW_AT_name        : (indirect string, offset: 0xb1): main
    <37>   DW_AT_decl_file   : 1
    <38>   DW_AT_decl_line   : 12
    <39>   DW_AT_type        : <0x71>
    <3d>   DW_AT_low_pc      : 0x1f
    <45>   DW_AT_high_pc     : 0x3d
    <4d>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <4f>   DW_AT_GNU_all_tail_call_sites: 1
    <4f>   DW_AT_sibling     : <0x71>
 <2><53>: Abbrev Number: 3 (DW_TAG_formal_parameter)
    <54>   DW_AT_name        : (indirect string, offset: 0x1b): argc
    <58>   DW_AT_decl_file   : 1
    <59>   DW_AT_decl_line   : 12
    <5a>   DW_AT_type        : <0x78>
    <5e>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><61>: Abbrev Number: 3 (DW_TAG_formal_parameter)
    <62>   DW_AT_name        : (indirect string, offset: 0x12c): argv
    <66>   DW_AT_decl_file   : 1
    <67>   DW_AT_decl_line   : 12
    <68>   DW_AT_type        : <0x7d>
    <6c>   DW_AT_location    : 3 byte block: 91 60 6 	(DW_OP_fbreg: -32; DW_OP_deref)
 <2><70>: Abbrev Number: 0
 <1><71>: Abbrev Number: 4 (DW_TAG_base_type)
    <72>   DW_AT_byte_size   : 4
    <73>   DW_AT_encoding    : 5	(signed)
    <74>   DW_AT_name        : (indirect string, offset: 0xa1): integer(kind=4)
 <1><78>: Abbrev Number: 5 (DW_TAG_const_type)
    <79>   DW_AT_type        : <0x71>
 <1><7d>: Abbrev Number: 6 (DW_TAG_pointer_type)
    <7e>   DW_AT_byte_size   : 8
    <7f>   DW_AT_type        : <0x83>
 <1><83>: Abbrev Number: 4 (DW_TAG_base_type)
    <84>   DW_AT_byte_size   : 1
    <85>   DW_AT_encoding    : 8	(unsigned char)
    <86>   DW_AT_name        : (indirect string, offset: 0x0): character(kind=1)
 <1><8a>: Abbrev Number: 7 (DW_TAG_subprogram)
    <8b>   DW_AT_name        : (indirect string, offset: 0x9c): mult
    <8f>   DW_AT_decl_file   : 1
    <90>   DW_AT_decl_line   : 1
    <91>   DW_AT_main_subprogram: 1
    <91>   DW_AT_calling_convention: 2	(program)
    <92>   DW_AT_low_pc      : 0x0
    <9a>   DW_AT_high_pc     : 0x1f
    <a2>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <a4>   DW_AT_GNU_all_call_sites: 1
 <2><a4>: Abbrev Number: 8 (DW_TAG_variable)
    <a5>   DW_AT_name        : a
    <a7>   DW_AT_decl_file   : 1
    <a8>   DW_AT_decl_line   : 5
    <a9>   DW_AT_type        : <0x71>
    <ad>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><b0>: Abbrev Number: 8 (DW_TAG_variable)
    <b1>   DW_AT_name        : b
    <b3>   DW_AT_decl_file   : 1
    <b4>   DW_AT_decl_line   : 5
    <b5>   DW_AT_type        : <0x71>
    <b9>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><bc>: Abbrev Number: 8 (DW_TAG_variable)
    <bd>   DW_AT_name        : c
    <bf>   DW_AT_decl_file   : 1
    <c0>   DW_AT_decl_line   : 5
    <c1>   DW_AT_type        : <0x71>
    <c5>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><c8>: Abbrev Number: 0
 <1><c9>: Abbrev Number: 0

Contents of the .debug_abbrev section:

  Number TAG (0x0)
   1      DW_TAG_compile_unit    [has children]
    DW_AT_producer     DW_FORM_strp
    DW_AT_language     DW_FORM_data1
    DW_AT_identifier_case DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT_comp_dir     DW_FORM_strp
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_stmt_list    DW_FORM_sec_offset
    DW_AT_GNU_macros   DW_FORM_sec_offset
    DW_AT value: 0     DW_FORM value: 0
   2      DW_TAG_subprogram    [has children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   3      DW_TAG_formal_parameter    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   4      DW_TAG_base_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_encoding     DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT value: 0     DW_FORM value: 0
   5      DW_TAG_const_type    [no children]
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   6      DW_TAG_pointer_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   7      DW_TAG_subprogram    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_main_subprogram DW_FORM_flag_present
    DW_AT_calling_convention DW_FORM_data1
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_call_sites DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   8      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0

Contents of the .debug_aranges section:

  Length:                   44
  Version:                  2
  Offset into .debug_info:  0x0
  Pointer Size:             8
  Segment Size:             0

    Address            Length
    0000000000000000 000000000000005c 
    0000000000000000 0000000000000000 

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4
  Offset into .debug_line:     0x0

 DW_MACRO_start_file - lineno: 0 filenum: 1 filename: mult.f08
 DW_MACRO_end_file

Raw dump of debug contents of section .debug_line:

  Offset:                      0x0
  Length:                      60
  DWARF Version:               2
  Prologue Length:             31
  Minimum Instruction Length:  1
  Initial value of 'is_stmt':  1
  Line Base:                   -5
  Line Range:                  14
  Opcode Base:                 13

 Opcodes:
  Opcode 1 has 0 args
  Opcode 2 has 1 arg
  Opcode 3 has 1 arg
  Opcode 4 has 1 arg
  Opcode 5 has 1 arg
  Opcode 6 has 0 args
  Opcode 7 has 0 args
  Opcode 8 has 0 args
  Opcode 9 has 1 arg
  Opcode 10 has 0 args
  Opcode 11 has 0 args
  Opcode 12 has 1 arg

 The Directory Table is empty.

 The File Name Table (offset 0x1c):
  Entry	Dir	Time	Size	Name
  1	0	0	0	mult.f08

 Line Number Statements:
  [0x00000029]  Extended opcode 2: set Address to 0x0
  [0x00000034]  Copy
  [0x00000035]  Special opcode 67: advance Address by 4 to 0x4 and Line by 6 to 7
  [0x00000036]  Special opcode 104: advance Address by 7 to 0xb and Line by 1 to 8
  [0x00000037]  Special opcode 105: advance Address by 7 to 0x12 and Line by 2 to 10
  [0x00000038]  Special opcode 147: advance Address by 10 to 0x1c and Line by 2 to 12
  [0x00000039]  Special opcode 47: advance Address by 3 to 0x1f and Line by 0 to 12
  [0x0000003a]  Special opcode 215: advance Address by 15 to 0x2e and Line by 0 to 12
  [0x0000003b]  Advance PC by 46 to 0x5c
  [0x0000003d]  Extended opcode 1: End of Sequence


Contents of the .debug_str section:

  0x00000000 63686172 61637465 72286b69 6e643d31 character(kind=1
  0x00000010 29006d75 6c742e66 30380061 72676300 ).mult.f08.argc.
  0x00000020 474e5520 466f7274 72616e32 30303820 GNU Fortran2008 
  0x00000030 372e332e 30202d6d 74756e65 3d67656e 7.3.0 -mtune=gen
  0x00000040 65726963 202d6d61 7263683d 7838362d eric -march=x86-
  0x00000050 3634202d 67676462 33202d66 696e7472 64 -ggdb3 -fintr
  0x00000060 696e7369 632d6d6f 64756c65 732d7061 insic-modules-pa
  0x00000070 7468202f 7573722f 6c69622f 6763632f th /usr/lib/gcc/
  0x00000080 7838365f 36342d6c 696e7578 2d676e75 x86_64-linux-gnu
  0x00000090 2f372f66 696e636c 75646500 6d756c74 /7/finclude.mult
  0x000000a0 00696e74 65676572 286b696e 643d3429 .integer(kind=4)
  0x000000b0 006d6169 6e002f68 6f6d652f 7562756e .main./home/ubun
  0x000000c0 74752f45 6e67696e 65657269 6e672f50 tu/Engineering/P
  0x000000d0 726f6772 616d6d69 6e672f44 69736173 rogramming/Disas
  0x000000e0 73656d62 6c696e67 2d42696e 61726965 sembling-Binarie
  0x000000f0 732f466f 72747261 6e2f496e 74656c5f s/Fortran/Intel_
  0x00000100 61726368 69746563 74757265 2f414d44 architecture/AMD
  0x00000110 36342f4d 756c745f 496e742f 57697468 64/Mult_Int/With
  0x00000120 5f446562 75675f49 6e666f00 61726776 _Debug_Info.argv
  0x00000130 00                                  .

Contents of the .eh_frame section:


00000000 0000000000000014 00000000 CIE
  Version:               1
  Augmentation:          "zR"
  Code alignment factor: 1
  Data alignment factor: -8
  Return address column: 16
  Augmentation data:     1b
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_offset: r16 (rip) at cfa-8
  DW_CFA_nop
  DW_CFA_nop

00000018 000000000000001c 0000001c FDE cie=00000000 pc=0000000000000000..000000000000001f
  DW_CFA_advance_loc: 1 to 0000000000000001
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000004
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 26 to 000000000000001e
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000038 000000000000001c 0000003c FDE cie=00000000 pc=000000000000001f..000000000000005c
  DW_CFA_advance_loc: 1 to 0000000000000020
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000023
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 56 to 000000000000005b
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

