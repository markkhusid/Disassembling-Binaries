
add_function.o:     file format elf64-x86-64
add_function.o
architecture: i386:x86-64, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x0000000000000000

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         0000008e  0000000000000000  0000000000000000  00000040  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  0000000000000000  0000000000000000  000000ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  0000000000000000  0000000000000000  000000ce  2**0
                  ALLOC
  3 .rodata       0000001c  0000000000000000  0000000000000000  000000d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .debug_info   0000012f  0000000000000000  0000000000000000  000000ec  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_abbrev 000000c7  0000000000000000  0000000000000000  0000021b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000030  0000000000000000  0000000000000000  000002e2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  7 .debug_macro  0000000c  0000000000000000  0000000000000000  00000312  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  8 .debug_line   0000004f  0000000000000000  0000000000000000  0000031e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_str    000001a5  0000000000000000  0000000000000000  0000036d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      0000002b  0000000000000000  0000000000000000  00000512  2**0
                  CONTENTS, READONLY
 11 .note.GNU-stack 00000000  0000000000000000  0000000000000000  0000053d  2**0
                  CONTENTS, READONLY
 12 .eh_frame     00000078  0000000000000000  0000000000000000  00000540  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 add_function.f08
0000000000000000 l    d  .text	0000000000000000 .text
0000000000000000 l    d  .data	0000000000000000 .data
0000000000000000 l    d  .bss	0000000000000000 .bss
0000000000000022 l     F .text	000000000000002f MAIN__
0000000000000000 l     O .rodata	000000000000001c options.0.3510
0000000000000000 l    d  .rodata	0000000000000000 .rodata
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .note.GNU-stack	0000000000000000 .note.GNU-stack
0000000000000000 l    d  .eh_frame	0000000000000000 .eh_frame
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 g     F .text	0000000000000022 __function_module_MOD_add_function
0000000000000051 g     F .text	000000000000003d main
0000000000000000         *UND*	0000000000000000 _GLOBAL_OFFSET_TABLE_
0000000000000000         *UND*	0000000000000000 _gfortran_set_args
0000000000000000         *UND*	0000000000000000 _gfortran_set_options



Disassembly of section .text:

0000000000000000 <__function_module_MOD_add_function>:

      implicit none

contains

      function add_function(f_a, f_b) result (f_c)
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp
   4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   8:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
              integer   :: f_a, f_b, f_c

              f_c = f_a + f_b
   c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  10:	8b 10                	mov    edx,DWORD PTR [rax]
  12:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  16:	8b 00                	mov    eax,DWORD PTR [rax]
  18:	01 d0                	add    eax,edx
  1a:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax

      end function add_function
  1d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  20:	5d                   	pop    rbp
  21:	c3                   	ret    

0000000000000022 <MAIN__>:

end module function_module

program use_functions
  22:	55                   	push   rbp
  23:	48 89 e5             	mov    rbp,rsp
  26:	48 83 ec 10          	sub    rsp,0x10
      use function_module
      implicit none

      integer           :: a, b, c

      a = 2
  2a:	c7 45 f8 02 00 00 00 	mov    DWORD PTR [rbp-0x8],0x2

      b = 3
  31:	c7 45 f4 03 00 00 00 	mov    DWORD PTR [rbp-0xc],0x3

      c = add_function(a, b)
  38:	48 8d 55 f4          	lea    rdx,[rbp-0xc]
  3c:	48 8d 45 f8          	lea    rax,[rbp-0x8]
  40:	48 89 d6             	mov    rsi,rdx
  43:	48 89 c7             	mov    rdi,rax
  46:	e8 00 00 00 00       	call   4b <MAIN__+0x29>
			47: R_X86_64_PC32	__function_module_MOD_add_function-0x4
  4b:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax

end program use_functions
  4e:	90                   	nop
  4f:	c9                   	leave  
  50:	c3                   	ret    

0000000000000051 <main>:
      use function_module
  51:	55                   	push   rbp
  52:	48 89 e5             	mov    rbp,rsp
  55:	48 83 ec 10          	sub    rsp,0x10
  59:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  5c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  60:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  64:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  67:	48 89 d6             	mov    rsi,rdx
  6a:	89 c7                	mov    edi,eax
  6c:	e8 00 00 00 00       	call   71 <main+0x20>
			6d: R_X86_64_PLT32	_gfortran_set_args-0x4
  71:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 78 <main+0x27>
			74: R_X86_64_PC32	.rodata-0x4
  78:	bf 07 00 00 00       	mov    edi,0x7
  7d:	e8 00 00 00 00       	call   82 <main+0x31>
			7e: R_X86_64_PLT32	_gfortran_set_options-0x4
  82:	e8 9b ff ff ff       	call   22 <MAIN__>
  87:	b8 00 00 00 00       	mov    eax,0x0
  8c:	c9                   	leave  
  8d:	c3                   	ret    

Disassembly of section .rodata:

0000000000000000 <options.0.3510>:
   0:	44 00 00             	add    BYTE PTR [rax],r8b
   3:	00 ff                	add    bh,bh
   5:	03 00                	add    eax,DWORD PTR [rax]
   7:	00 00                	add    BYTE PTR [rax],al
   9:	00 00                	add    BYTE PTR [rax],al
   b:	00 01                	add    BYTE PTR [rcx],al
   d:	00 00                	add    BYTE PTR [rax],al
   f:	00 01                	add    BYTE PTR [rcx],al
  11:	00 00                	add    BYTE PTR [rax],al
  13:	00 00                	add    BYTE PTR [rax],al
  15:	00 00                	add    BYTE PTR [rax],al
  17:	00 1f                	add    BYTE PTR [rdi],bl
  19:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
      function add_function(f_a, f_b) result (f_c)
   0:	2b 01                	sub    eax,DWORD PTR [rcx]
   2:	00 00                	add    BYTE PTR [rax],al
   4:	04 00                	add    al,0x0
   6:	00 00                	add    BYTE PTR [rax],al
			6: R_X86_64_32	.debug_abbrev
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 01                	or     BYTE PTR [rcx],al
              f_c = f_a + f_b
   c:	00 00                	add    BYTE PTR [rax],al
			c: R_X86_64_32	.debug_str+0xef
   e:	00 00                	add    BYTE PTR [rax],al
  10:	0e                   	(bad)  
  11:	02 00                	add    al,BYTE PTR [rax]
			12: R_X86_64_32	.debug_str+0x22
	...
			16: R_X86_64_32	.debug_str+0x43
			1a: R_X86_64_64	.text
      end function add_function
  1f:	00 00                	add    BYTE PTR [rax],al
  21:	00 8e 00 00 00 00    	add    BYTE PTR [rsi+0x0],cl
	...
			2a: R_X86_64_32	.debug_line
			2e: R_X86_64_32	.debug_macro
      a = 2
  2f:	00 00                	add    BYTE PTR [rax],al
      b = 3
  31:	00 02                	add    BYTE PTR [rdx],al
  33:	00 00                	add    BYTE PTR [rax],al
			33: R_X86_64_32	.debug_str+0xe1
  35:	00 00                	add    BYTE PTR [rax],al
  37:	01 10                	add    DWORD PTR [rax],edx
      c = add_function(a, b)
  39:	02 00                	add    al,BYTE PTR [rax]
			3a: R_X86_64_64	.text+0x22
  3b:	00 00                	add    BYTE PTR [rax],al
  3d:	00 00                	add    BYTE PTR [rax],al
  3f:	00 00                	add    BYTE PTR [rax],al
  41:	00 2f                	add    BYTE PTR [rdi],ch
  43:	00 00                	add    BYTE PTR [rax],al
  45:	00 00                	add    BYTE PTR [rax],al
  47:	00 00                	add    BYTE PTR [rax],al
  49:	00 01                	add    BYTE PTR [rcx],al
  4b:	9c                   	pushf  
  4c:	7c 00                	jl     4e <.debug_info+0x4e>
end program use_functions
  4e:	00 00                	add    BYTE PTR [rax],al
  50:	03 01                	add    eax,DWORD PTR [rcx]
      use function_module
  52:	12 7c 00 00          	adc    bh,BYTE PTR [rax+rax*1+0x0]
  56:	00 04 61             	add    BYTE PTR [rcx+riz*2],al
  59:	00 01                	add    BYTE PTR [rcx],al
  5b:	15 15 01 00 00       	adc    eax,0x115
  60:	02 91 68 04 62 00    	add    dl,BYTE PTR [rcx+0x620468]
  66:	01 15 15 01 00 00    	add    DWORD PTR [rip+0x115],edx        # 181 <main+0x130>
  6c:	02 91 64 04 63 00    	add    dl,BYTE PTR [rcx+0x630464]
  72:	01 15 15 01 00 00    	add    DWORD PTR [rip+0x115],edx        # 18d <main+0x13c>
  78:	02 91 6c 00 05 00    	add    dl,BYTE PTR [rcx+0x5006c]
			7d: R_X86_64_32	.debug_str+0x33
  7e:	00 00                	add    BYTE PTR [rax],al
  80:	00 01                	add    BYTE PTR [rcx],al
  82:	01 d6                	add    esi,edx
  84:	00 00                	add    BYTE PTR [rax],al
  86:	00 06                	add    BYTE PTR [rsi],al
  88:	00 00                	add    BYTE PTR [rax],al
			88: R_X86_64_32	.debug_str+0x193
  8a:	00 00                	add    BYTE PTR [rax],al
  8c:	01 07                	add    DWORD PTR [rdi],eax
  8e:	00 00                	add    BYTE PTR [rax],al
			8e: R_X86_64_32	.debug_str+0x170
  90:	00 00                	add    BYTE PTR [rax],al
  92:	15 01 00 00 00       	adc    eax,0x1
			96: R_X86_64_64	.text
  97:	00 00                	add    BYTE PTR [rax],al
  99:	00 00                	add    BYTE PTR [rax],al
  9b:	00 00                	add    BYTE PTR [rax],al
  9d:	00 22                	add    BYTE PTR [rdx],ah
  9f:	00 00                	add    BYTE PTR [rax],al
  a1:	00 00                	add    BYTE PTR [rax],al
  a3:	00 00                	add    BYTE PTR [rax],al
  a5:	00 01                	add    BYTE PTR [rcx],al
  a7:	9c                   	pushf  
  a8:	07                   	(bad)  
  a9:	66 5f                	pop    di
  ab:	61                   	(bad)  
  ac:	00 01                	add    BYTE PTR [rcx],al
  ae:	07                   	(bad)  
  af:	15 01 00 00 03       	adc    eax,0x3000001
  b4:	91                   	xchg   ecx,eax
  b5:	58                   	pop    rax
  b6:	06                   	(bad)  
  b7:	07                   	(bad)  
  b8:	66 5f                	pop    di
  ba:	62                   	(bad)  
  bb:	00 01                	add    BYTE PTR [rcx],al
  bd:	07                   	(bad)  
  be:	15 01 00 00 03       	adc    eax,0x3000001
  c3:	91                   	xchg   ecx,eax
  c4:	50                   	push   rax
  c5:	06                   	(bad)  
  c6:	04 66                	add    al,0x66
  c8:	5f                   	pop    rdi
  c9:	63 00                	movsxd eax,DWORD PTR [rax]
  cb:	01 07                	add    DWORD PTR [rdi],eax
  cd:	15 01 00 00 02       	adc    eax,0x2000001
  d2:	91                   	xchg   ecx,eax
  d3:	6c                   	ins    BYTE PTR es:[rdi],dx
  d4:	00 00                	add    BYTE PTR [rax],al
  d6:	08 00                	or     BYTE PTR [rax],al
			d7: R_X86_64_32	.debug_str+0x16b
  d8:	00 00                	add    BYTE PTR [rax],al
  da:	00 01                	add    BYTE PTR [rcx],al
  dc:	12 15 01 00 00 00    	adc    dl,BYTE PTR [rip+0x1]        # e3 <.debug_info+0xe3>
			e1: R_X86_64_64	.text+0x51
  e2:	00 00                	add    BYTE PTR [rax],al
  e4:	00 00                	add    BYTE PTR [rax],al
  e6:	00 00                	add    BYTE PTR [rax],al
  e8:	00 3d 00 00 00 00    	add    BYTE PTR [rip+0x0],bh        # ee <.debug_info+0xee>
  ee:	00 00                	add    BYTE PTR [rax],al
  f0:	00 01                	add    BYTE PTR [rcx],al
  f2:	9c                   	pushf  
  f3:	15 01 00 00 09       	adc    eax,0x9000001
  f8:	00 00                	add    BYTE PTR [rax],al
			f8: R_X86_64_32	.debug_str+0xdc
  fa:	00 00                	add    BYTE PTR [rax],al
  fc:	01 12                	add    DWORD PTR [rdx],edx
  fe:	1c 01                	sbb    al,0x1
 100:	00 00                	add    BYTE PTR [rax],al
 102:	02 91 6c 09 00 00    	add    dl,BYTE PTR [rcx+0x96c]
			106: R_X86_64_32	.debug_str+0x1a0
 108:	00 00                	add    BYTE PTR [rax],al
 10a:	01 12                	add    DWORD PTR [rdx],edx
 10c:	21 01                	and    DWORD PTR [rcx],eax
 10e:	00 00                	add    BYTE PTR [rax],al
 110:	03 91 60 06 00 0a    	add    edx,DWORD PTR [rcx+0xa000660]
 116:	04 05                	add    al,0x5
 118:	00 00                	add    BYTE PTR [rax],al
			118: R_X86_64_32	.debug_str
 11a:	00 00                	add    BYTE PTR [rax],al
 11c:	0b 15 01 00 00 0c    	or     edx,DWORD PTR [rip+0xc000001]        # c000123 <main+0xc0000d2>
 122:	08 27                	or     BYTE PTR [rdi],ah
 124:	01 00                	add    DWORD PTR [rax],eax
 126:	00 0a                	add    BYTE PTR [rdx],cl
 128:	01 08                	add    DWORD PTR [rax],ecx
 12a:	00 00                	add    BYTE PTR [rax],al
			12a: R_X86_64_32	.debug_str+0x10
 12c:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
      function add_function(f_a, f_b) result (f_c)
   0:	01 11                	add    DWORD PTR [rcx],edx
   2:	01 25 0e 13 0b 42    	add    DWORD PTR [rip+0x420b130e],esp        # 420b1316 <main+0x420b12c5>
   8:	0b 03                	or     eax,DWORD PTR [rbx]
   a:	0e                   	(bad)  
   b:	1b 0e                	sbb    ecx,DWORD PTR [rsi]
              f_c = f_a + f_b
   d:	11 01                	adc    DWORD PTR [rcx],eax
   f:	12 07                	adc    al,BYTE PTR [rdi]
  11:	10 17                	adc    BYTE PTR [rdi],dl
  13:	99                   	cdq    
  14:	42 17                	rex.X (bad) 
  16:	00 00                	add    BYTE PTR [rax],al
  18:	02 2e                	add    ch,BYTE PTR [rsi]
  1a:	01 03                	add    DWORD PTR [rbx],eax
  1c:	0e                   	(bad)  
      end function add_function
  1d:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  1f:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  21:	6a 19                	push   0x19
program use_functions
  23:	36 0b 11             	or     edx,DWORD PTR ss:[rcx]
  26:	01 12                	add    DWORD PTR [rdx],edx
  28:	07                   	(bad)  
  29:	40 18 96 42 19 01 13 	sbb    BYTE PTR [rsi+0x13011942],dl
      a = 2
  30:	00 00                	add    BYTE PTR [rax],al
      b = 3
  32:	03 3a                	add    edi,DWORD PTR [rdx]
  34:	00 3a                	add    BYTE PTR [rdx],bh
  36:	0b 3b                	or     edi,DWORD PTR [rbx]
      c = add_function(a, b)
  38:	0b 18                	or     ebx,DWORD PTR [rax]
  3a:	13 00                	adc    eax,DWORD PTR [rax]
  3c:	00 04 34             	add    BYTE PTR [rsp+rsi*1],al
  3f:	00 03                	add    BYTE PTR [rbx],al
  41:	08 3a                	or     BYTE PTR [rdx],bh
  43:	0b 3b                	or     edi,DWORD PTR [rbx]
  45:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  48:	02 18                	add    bl,BYTE PTR [rax]
  4a:	00 00                	add    BYTE PTR [rax],al
  4c:	05 1e 01 03 0e       	add    eax,0xe03011e
      use function_module
  51:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  53:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  55:	01 13                	add    DWORD PTR [rbx],edx
  57:	00 00                	add    BYTE PTR [rax],al
  59:	06                   	(bad)  
  5a:	2e 01 3f             	add    DWORD PTR cs:[rdi],edi
  5d:	19 03                	sbb    DWORD PTR [rbx],eax
  5f:	0e                   	(bad)  
  60:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  62:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  64:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  65:	0e                   	(bad)  
  66:	49 13 11             	adc    rdx,QWORD PTR [r9]
  69:	01 12                	add    DWORD PTR [rdx],edx
  6b:	07                   	(bad)  
  6c:	40 18 97 42 19 00 00 	sbb    BYTE PTR [rdi+0x1942],dl
  73:	07                   	(bad)  
  74:	05 00 03 08 3a       	add    eax,0x3a080300
  79:	0b 3b                	or     edi,DWORD PTR [rbx]
  7b:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  7e:	02 18                	add    bl,BYTE PTR [rax]
  80:	00 00                	add    BYTE PTR [rax],al
  82:	08 2e                	or     BYTE PTR [rsi],ch
  84:	01 3f                	add    DWORD PTR [rdi],edi
  86:	19 03                	sbb    DWORD PTR [rbx],eax
  88:	0e                   	(bad)  
  89:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  8b:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  8d:	49 13 11             	adc    rdx,QWORD PTR [r9]
  90:	01 12                	add    DWORD PTR [rdx],edx
  92:	07                   	(bad)  
  93:	40 18 96 42 19 01 13 	sbb    BYTE PTR [rsi+0x13011942],dl
  9a:	00 00                	add    BYTE PTR [rax],al
  9c:	09 05 00 03 0e 3a    	or     DWORD PTR [rip+0x3a0e0300],eax        # 3a0e03a2 <main+0x3a0e0351>
  a2:	0b 3b                	or     edi,DWORD PTR [rbx]
  a4:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  a7:	02 18                	add    bl,BYTE PTR [rax]
  a9:	00 00                	add    BYTE PTR [rax],al
  ab:	0a 24 00             	or     ah,BYTE PTR [rax+rax*1]
  ae:	0b 0b                	or     ecx,DWORD PTR [rbx]
  b0:	3e 0b 03             	or     eax,DWORD PTR ds:[rbx]
  b3:	0e                   	(bad)  
  b4:	00 00                	add    BYTE PTR [rax],al
  b6:	0b 26                	or     esp,DWORD PTR [rsi]
  b8:	00 49 13             	add    BYTE PTR [rcx+0x13],cl
  bb:	00 00                	add    BYTE PTR [rax],al
  bd:	0c 0f                	or     al,0xf
  bf:	00 0b                	add    BYTE PTR [rbx],cl
  c1:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  c4:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
      function add_function(f_a, f_b) result (f_c)
   0:	2c 00                	sub    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   4:	02 00                	add    al,BYTE PTR [rax]
   6:	00 00                	add    BYTE PTR [rax],al
			6: R_X86_64_32	.debug_info
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 00                	or     BYTE PTR [rax],al
	...
			10: R_X86_64_64	.text
              f_c = f_a + f_b
  18:	8e 00                	mov    es,WORD PTR [rax]
	...

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
      function add_function(f_a, f_b) result (f_c)
   0:	04 00                	add    al,0x0
   2:	02 00                	add    al,BYTE PTR [rax]
			3: R_X86_64_32	.debug_line
   4:	00 00                	add    BYTE PTR [rax],al
   6:	00 03                	add    BYTE PTR [rbx],al
   8:	00 01                	add    BYTE PTR [rcx],al
   a:	04 00                	add    al,0x0

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
   0:	4b 00 00             	rex.WXB add BYTE PTR [r8],al
   3:	00 02                	add    BYTE PTR [rdx],al
   5:	00 27                	add    BYTE PTR [rdi],ah
   7:	00 00                	add    BYTE PTR [rax],al
   9:	00 01                	add    BYTE PTR [rcx],al
   b:	01 fb                	add    ebx,edi
              f_c = f_a + f_b
   d:	0e                   	(bad)  
   e:	0d 00 01 01 01       	or     eax,0x1010100
  13:	01 00                	add    DWORD PTR [rax],eax
  15:	00 00                	add    BYTE PTR [rax],al
  17:	01 00                	add    DWORD PTR [rax],eax
  19:	00 01                	add    BYTE PTR [rcx],al
  1b:	00 61 64             	add    BYTE PTR [rcx+0x64],ah
      end function add_function
  1e:	64 5f                	fs pop rdi
  20:	66 75 6e             	data16 jne 91 <main+0x40>
program use_functions
  23:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  27:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  28:	2e 66 30 38          	data16 xor BYTE PTR cs:[rax],bh
      a = 2
  2c:	00 00                	add    BYTE PTR [rax],al
  2e:	00 00                	add    BYTE PTR [rax],al
  30:	00 00                	add    BYTE PTR [rax],al
      b = 3
  32:	09 02                	or     DWORD PTR [rdx],eax
	...
			34: R_X86_64_64	.text
      c = add_function(a, b)
  3c:	18 bd 08 14 5c 89    	sbb    BYTE PTR [rbp-0x76a3ebf8],bh
  42:	76 76                	jbe    ba <main+0x69>
  44:	08 5a 03             	or     BYTE PTR [rdx+0x3],bl
  47:	75 3c                	jne    85 <main+0x34>
  49:	e4 02                	in     al,0x2
  4b:	2e 00 01             	add    BYTE PTR cs:[rcx],al
end program use_functions
  4e:	01                   	.byte 0x1

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
      function add_function(f_a, f_b) result (f_c)
   0:	69 6e 74 65 67 65 72 	imul   ebp,DWORD PTR [rsi+0x74],0x72656765
   7:	28 6b 69             	sub    BYTE PTR [rbx+0x69],ch
   a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
   b:	64 3d 34 29 00 63    	fs cmp eax,0x63002934
              f_c = f_a + f_b
  11:	68 61 72 61 63       	push   0x63617261
  16:	74 65                	je     7d <.debug_str+0x7d>
  18:	72 28                	jb     42 <.debug_str+0x42>
  1a:	6b 69 6e 64          	imul   ebp,DWORD PTR [rcx+0x6e],0x64
      end function add_function
  1e:	3d 31 29 00 61       	cmp    eax,0x61002931
program use_functions
  23:	64 64 5f             	fs fs pop rdi
  26:	66 75 6e             	data16 jne 97 <.debug_str+0x97>
  29:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
      a = 2
  2d:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  2e:	2e 66 30 38          	data16 xor BYTE PTR cs:[rax],bh
      b = 3
  32:	00 66 75             	add    BYTE PTR [rsi+0x75],ah
  35:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  36:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
      c = add_function(a, b)
  3a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  3b:	5f                   	pop    rdi
  3c:	6d                   	ins    DWORD PTR es:[rdi],dx
  3d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  3e:	64 75 6c             	fs jne ad <.debug_str+0xad>
  41:	65 00 2f             	add    BYTE PTR gs:[rdi],ch
  44:	68 6f 6d 65 2f       	push   0x2f656d6f
  49:	75 62                	jne    ad <.debug_str+0xad>
  4b:	75 6e                	jne    bb <.debug_str+0xbb>
  4d:	74 75                	je     c4 <.debug_str+0xc4>
end program use_functions
  4f:	2f                   	(bad)  
  50:	45 6e                	rex.RB outs dx,BYTE PTR ds:[rsi]
      use function_module
  52:	67 69 6e 65 65 72 69 	imul   ebp,DWORD PTR [esi+0x65],0x6e697265
  59:	6e 
  5a:	67 2f                	addr32 (bad) 
  5c:	50                   	push   rax
  5d:	72 6f                	jb     ce <.debug_str+0xce>
  5f:	67 72 61             	addr32 jb c3 <.debug_str+0xc3>
  62:	6d                   	ins    DWORD PTR es:[rdi],dx
  63:	6d                   	ins    DWORD PTR es:[rdi],dx
  64:	69 6e 67 2f 44 69 73 	imul   ebp,DWORD PTR [rsi+0x67],0x7369442f
  6b:	61                   	(bad)  
  6c:	73 73                	jae    e1 <.debug_str+0xe1>
  6e:	65 6d                	gs ins DWORD PTR es:[rdi],dx
  70:	62                   	(bad)  
  71:	6c                   	ins    BYTE PTR es:[rdi],dx
  72:	69 6e 67 2d 42 69 6e 	imul   ebp,DWORD PTR [rsi+0x67],0x6e69422d
  79:	61                   	(bad)  
  7a:	72 69                	jb     e5 <.debug_str+0xe5>
  7c:	65 73 2f             	gs jae ae <.debug_str+0xae>
  7f:	46 6f                	rex.RX outs dx,DWORD PTR ds:[rsi]
  81:	72 74                	jb     f7 <.debug_str+0xf7>
  83:	72 61                	jb     e6 <.debug_str+0xe6>
  85:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  86:	2f                   	(bad)  
  87:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  89:	74 65                	je     f0 <.debug_str+0xf0>
  8b:	6c                   	ins    BYTE PTR es:[rdi],dx
  8c:	5f                   	pop    rdi
  8d:	61                   	(bad)  
  8e:	72 63                	jb     f3 <.debug_str+0xf3>
  90:	68 69 74 65 63       	push   0x63657469
  95:	74 75                	je     10c <.debug_str+0x10c>
  97:	72 65                	jb     fe <.debug_str+0xfe>
  99:	2f                   	(bad)  
  9a:	41                   	rex.B
  9b:	4d                   	rex.WRB
  9c:	44                   	rex.R
  9d:	36 34 2f             	ss xor al,0x2f
  a0:	46 75 6e             	rex.RX jne 111 <.debug_str+0x111>
  a3:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  a7:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  a8:	73 2f                	jae    d9 <.debug_str+0xd9>
  aa:	41                   	rex.B
  ab:	64 64 5f             	fs fs pop rdi
  ae:	46 75 6e             	rex.RX jne 11f <.debug_str+0x11f>
  b1:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  b5:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  b6:	73 5f                	jae    117 <.debug_str+0x117>
  b8:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  ba:	74 2f                	je     eb <.debug_str+0xeb>
  bc:	57                   	push   rdi
  bd:	69 74 68 5f 44 65 62 	imul   esi,DWORD PTR [rax+rbp*2+0x5f],0x75626544
  c4:	75 
  c5:	67 5f                	addr32 pop rdi
  c7:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  c9:	66 6f                	outs   dx,WORD PTR ds:[rsi]
  cb:	2f                   	(bad)  
  cc:	57                   	push   rdi
  cd:	69 74 68 5f 44 65 62 	imul   esi,DWORD PTR [rax+rbp*2+0x5f],0x75626544
  d4:	75 
  d5:	67 5f                	addr32 pop rdi
  d7:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  d9:	66 6f                	outs   dx,WORD PTR ds:[rsi]
  db:	00 61 72             	add    BYTE PTR [rcx+0x72],ah
  de:	67 63 00             	movsxd eax,DWORD PTR [eax]
  e1:	75 73                	jne    156 <.debug_str+0x156>
  e3:	65 5f                	gs pop rdi
  e5:	66 75 6e             	data16 jne 156 <.debug_str+0x156>
  e8:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  ec:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  ed:	73 00                	jae    ef <.debug_str+0xef>
  ef:	47                   	rex.RXB
  f0:	4e 55                	rex.WRX push rbp
  f2:	20 46 6f             	and    BYTE PTR [rsi+0x6f],al
  f5:	72 74                	jb     16b <.debug_str+0x16b>
  f7:	72 61                	jb     15a <.debug_str+0x15a>
  f9:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  fa:	32 30                	xor    dh,BYTE PTR [rax]
  fc:	30 38                	xor    BYTE PTR [rax],bh
  fe:	20 37                	and    BYTE PTR [rdi],dh
 100:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
 103:	30 20                	xor    BYTE PTR [rax],ah
 105:	2d 6d 74 75 6e       	sub    eax,0x6e75746d
 10a:	65 3d 67 65 6e 65    	gs cmp eax,0x656e6567
 110:	72 69                	jb     17b <.debug_str+0x17b>
 112:	63 20                	movsxd esp,DWORD PTR [rax]
 114:	2d 6d 61 72 63       	sub    eax,0x6372616d
 119:	68 3d 78 38 36       	push   0x3638783d
 11e:	2d 36 34 20 2d       	sub    eax,0x2d203436
 123:	67 67 64 62 33       	addr32 addr32 fs (bad) 
 128:	20 2d 66 69 6e 74    	and    BYTE PTR [rip+0x746e6966],ch        # 746e6a94 <main+0x746e6a43>
 12e:	72 69                	jb     199 <.debug_str+0x199>
 130:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 131:	73 69                	jae    19c <.debug_str+0x19c>
 133:	63 2d 6d 6f 64 75    	movsxd ebp,DWORD PTR [rip+0x75646f6d]        # 756470a6 <main+0x75647055>
 139:	6c                   	ins    BYTE PTR es:[rdi],dx
 13a:	65 73 2d             	gs jae 16a <.debug_str+0x16a>
 13d:	70 61                	jo     1a0 <.debug_str+0x1a0>
 13f:	74 68                	je     1a9 <main+0x158>
 141:	20 2f                	and    BYTE PTR [rdi],ch
 143:	75 73                	jne    1b8 <main+0x167>
 145:	72 2f                	jb     176 <.debug_str+0x176>
 147:	6c                   	ins    BYTE PTR es:[rdi],dx
 148:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [rdx+0x2f],0x2f636367
 14f:	78 38                	js     189 <.debug_str+0x189>
 151:	36 5f                	ss pop rdi
 153:	36 34 2d             	ss xor al,0x2d
 156:	6c                   	ins    BYTE PTR es:[rdi],dx
 157:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [rsi+0x75],0x6e672d78
 15e:	75 2f                	jne    18f <.debug_str+0x18f>
 160:	37                   	(bad)  
 161:	2f                   	(bad)  
 162:	66 69 6e 63 6c 75    	imul   bp,WORD PTR [rsi+0x63],0x756c
 168:	64 65 00 6d 61       	fs add BYTE PTR gs:[rbp+0x61],ch
 16d:	69 6e 00 5f 5f 66 75 	imul   ebp,DWORD PTR [rsi+0x0],0x75665f5f
 174:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 175:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 179:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 17a:	5f                   	pop    rdi
 17b:	6d                   	ins    DWORD PTR es:[rdi],dx
 17c:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 17d:	64 75 6c             	fs jne 1ec <main+0x19b>
 180:	65 5f                	gs pop rdi
 182:	4d                   	rex.WRB
 183:	4f                   	rex.WRXB
 184:	44 5f                	rex.R pop rdi
 186:	61                   	(bad)  
 187:	64 64 5f             	fs fs pop rdi
 18a:	66 75 6e             	data16 jne 1fb <main+0x1aa>
 18d:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 191:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 192:	00 61 64             	add    BYTE PTR [rcx+0x64],ah
 195:	64 5f                	fs pop rdi
 197:	66 75 6e             	data16 jne 208 <main+0x1b7>
 19a:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 19e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 19f:	00 61 72             	add    BYTE PTR [rcx+0x72],ah
 1a2:	67 76 00             	addr32 jbe 1a5 <main+0x154>

Disassembly of section .comment:

0000000000000000 <.comment>:
      function add_function(f_a, f_b) result (f_c)
   0:	00 47 43             	add    BYTE PTR [rdi+0x43],al
   3:	43 3a 20             	rex.XB cmp spl,BYTE PTR [r8]
   6:	28 55 62             	sub    BYTE PTR [rbp+0x62],dl
   9:	75 6e                	jne    79 <main+0x28>
   b:	74 75                	je     82 <main+0x31>
              f_c = f_a + f_b
   d:	20 37                	and    BYTE PTR [rdi],dh
   f:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  12:	30 2d 32 37 75 62    	xor    BYTE PTR [rip+0x62753732],ch        # 6275374a <main+0x627536f9>
  18:	75 6e                	jne    88 <main+0x37>
  1a:	74 75                	je     91 <main+0x40>
  1c:	31 7e 31             	xor    DWORD PTR [rsi+0x31],edi
      end function add_function
  1f:	38 2e                	cmp    BYTE PTR [rsi],ch
  21:	30 34 29             	xor    BYTE PTR [rcx+rbp*1],dh
program use_functions
  24:	20 37                	and    BYTE PTR [rdi],dh
  26:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  29:	30 00                	xor    BYTE PTR [rax],al

Disassembly of section .eh_frame:

0000000000000000 <.eh_frame>:
   0:	14 00                	adc    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   4:	00 00                	add    BYTE PTR [rax],al
   6:	00 00                	add    BYTE PTR [rax],al
   8:	01 7a 52             	add    DWORD PTR [rdx+0x52],edi
   b:	00 01                	add    BYTE PTR [rcx],al
   d:	78 10                	js     1f <.eh_frame+0x1f>
   f:	01 1b                	add    DWORD PTR [rbx],ebx
  11:	0c 07                	or     al,0x7
  13:	08 90 01 00 00 1c    	or     BYTE PTR [rax+0x1c000001],dl
  19:	00 00                	add    BYTE PTR [rax],al
  1b:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  1e:	00 00                	add    BYTE PTR [rax],al
  20:	00 00                	add    BYTE PTR [rax],al
			20: R_X86_64_PC32	.text
  22:	00 00                	add    BYTE PTR [rax],al
  24:	22 00                	and    al,BYTE PTR [rax]
  26:	00 00                	add    BYTE PTR [rax],al
  28:	00 41 0e             	add    BYTE PTR [rcx+0xe],al
  2b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  31:	5d                   	pop    rbp
  32:	0c 07                	or     al,0x7
  34:	08 00                	or     BYTE PTR [rax],al
  36:	00 00                	add    BYTE PTR [rax],al
  38:	1c 00                	sbb    al,0x0
  3a:	00 00                	add    BYTE PTR [rax],al
  3c:	3c 00                	cmp    al,0x0
  3e:	00 00                	add    BYTE PTR [rax],al
  40:	00 00                	add    BYTE PTR [rax],al
			40: R_X86_64_PC32	.text+0x22
  42:	00 00                	add    BYTE PTR [rax],al
  44:	2f                   	(bad)  
  45:	00 00                	add    BYTE PTR [rax],al
  47:	00 00                	add    BYTE PTR [rax],al
  49:	41 0e                	rex.B (bad) 
  4b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  51:	6a 0c                	push   0xc
  53:	07                   	(bad)  
  54:	08 00                	or     BYTE PTR [rax],al
  56:	00 00                	add    BYTE PTR [rax],al
  58:	1c 00                	sbb    al,0x0
  5a:	00 00                	add    BYTE PTR [rax],al
  5c:	5c                   	pop    rsp
  5d:	00 00                	add    BYTE PTR [rax],al
  5f:	00 00                	add    BYTE PTR [rax],al
			60: R_X86_64_PC32	.text+0x51
  61:	00 00                	add    BYTE PTR [rax],al
  63:	00 3d 00 00 00 00    	add    BYTE PTR [rip+0x0],bh        # 69 <.eh_frame+0x69>
  69:	41 0e                	rex.B (bad) 
  6b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  71:	78 0c                	js     7f <main+0x2e>
  73:	07                   	(bad)  
  74:	08 00                	or     BYTE PTR [rax],al
	...
Contents of the .debug_info section:

  Compilation Unit @ offset 0x0:
   Length:        0x12b (32-bit)
   Version:       4
   Abbrev Offset: 0x0
   Pointer Size:  8
 <0><b>: Abbrev Number: 1 (DW_TAG_compile_unit)
    <c>   DW_AT_producer    : (indirect string, offset: 0xef): GNU Fortran2008 7.3.0 -mtune=generic -march=x86-64 -ggdb3 -fintrinsic-modules-path /usr/lib/gcc/x86_64-linux-gnu/7/finclude
    <10>   DW_AT_language    : 14	(Fortran 95)
    <11>   DW_AT_identifier_case: 2	(down_case)
    <12>   DW_AT_name        : (indirect string, offset: 0x22): add_function.f08
    <16>   DW_AT_comp_dir    : (indirect string, offset: 0x43): /home/ubuntu/Engineering/Programming/Disassembling-Binaries/Fortran/Intel_architecture/AMD64/Functions/Add_Functions_Int/With_Debug_Info/With_Debug_Info
    <1a>   DW_AT_low_pc      : 0x0
    <22>   DW_AT_high_pc     : 0x8e
    <2a>   DW_AT_stmt_list   : 0x0
    <2e>   DW_AT_GNU_macros  : 0x0
 <1><32>: Abbrev Number: 2 (DW_TAG_subprogram)
    <33>   DW_AT_name        : (indirect string, offset: 0xe1): use_functions
    <37>   DW_AT_decl_file   : 1
    <38>   DW_AT_decl_line   : 16
    <39>   DW_AT_main_subprogram: 1
    <39>   DW_AT_calling_convention: 2	(program)
    <3a>   DW_AT_low_pc      : 0x22
    <42>   DW_AT_high_pc     : 0x2f
    <4a>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <4c>   DW_AT_GNU_all_tail_call_sites: 1
    <4c>   DW_AT_sibling     : <0x7c>
 <2><50>: Abbrev Number: 3 (DW_TAG_imported_module)
    <51>   DW_AT_decl_file   : 1
    <52>   DW_AT_decl_line   : 18
    <53>   DW_AT_import      : <0x7c>	[Abbrev Number: 5 (DW_TAG_module)]
 <2><57>: Abbrev Number: 4 (DW_TAG_variable)
    <58>   DW_AT_name        : a
    <5a>   DW_AT_decl_file   : 1
    <5b>   DW_AT_decl_line   : 21
    <5c>   DW_AT_type        : <0x115>
    <60>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><63>: Abbrev Number: 4 (DW_TAG_variable)
    <64>   DW_AT_name        : b
    <66>   DW_AT_decl_file   : 1
    <67>   DW_AT_decl_line   : 21
    <68>   DW_AT_type        : <0x115>
    <6c>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><6f>: Abbrev Number: 4 (DW_TAG_variable)
    <70>   DW_AT_name        : c
    <72>   DW_AT_decl_file   : 1
    <73>   DW_AT_decl_line   : 21
    <74>   DW_AT_type        : <0x115>
    <78>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><7b>: Abbrev Number: 0
 <1><7c>: Abbrev Number: 5 (DW_TAG_module)
    <7d>   DW_AT_name        : (indirect string, offset: 0x33): function_module
    <81>   DW_AT_decl_file   : 1
    <82>   DW_AT_decl_line   : 1
    <83>   DW_AT_sibling     : <0xd6>
 <2><87>: Abbrev Number: 6 (DW_TAG_subprogram)
    <88>   DW_AT_external    : 1
    <88>   DW_AT_name        : (indirect string, offset: 0x193): add_function
    <8c>   DW_AT_decl_file   : 1
    <8d>   DW_AT_decl_line   : 7
    <8e>   DW_AT_linkage_name: (indirect string, offset: 0x170): __function_module_MOD_add_function
    <92>   DW_AT_type        : <0x115>
    <96>   DW_AT_low_pc      : 0x0
    <9e>   DW_AT_high_pc     : 0x22
    <a6>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <a8>   DW_AT_GNU_all_call_sites: 1
 <3><a8>: Abbrev Number: 7 (DW_TAG_formal_parameter)
    <a9>   DW_AT_name        : f_a
    <ad>   DW_AT_decl_file   : 1
    <ae>   DW_AT_decl_line   : 7
    <af>   DW_AT_type        : <0x115>
    <b3>   DW_AT_location    : 3 byte block: 91 58 6 	(DW_OP_fbreg: -40; DW_OP_deref)
 <3><b7>: Abbrev Number: 7 (DW_TAG_formal_parameter)
    <b8>   DW_AT_name        : f_b
    <bc>   DW_AT_decl_file   : 1
    <bd>   DW_AT_decl_line   : 7
    <be>   DW_AT_type        : <0x115>
    <c2>   DW_AT_location    : 3 byte block: 91 50 6 	(DW_OP_fbreg: -48; DW_OP_deref)
 <3><c6>: Abbrev Number: 4 (DW_TAG_variable)
    <c7>   DW_AT_name        : f_c
    <cb>   DW_AT_decl_file   : 1
    <cc>   DW_AT_decl_line   : 7
    <cd>   DW_AT_type        : <0x115>
    <d1>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <3><d4>: Abbrev Number: 0
 <2><d5>: Abbrev Number: 0
 <1><d6>: Abbrev Number: 8 (DW_TAG_subprogram)
    <d7>   DW_AT_external    : 1
    <d7>   DW_AT_name        : (indirect string, offset: 0x16b): main
    <db>   DW_AT_decl_file   : 1
    <dc>   DW_AT_decl_line   : 18
    <dd>   DW_AT_type        : <0x115>
    <e1>   DW_AT_low_pc      : 0x51
    <e9>   DW_AT_high_pc     : 0x3d
    <f1>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <f3>   DW_AT_GNU_all_tail_call_sites: 1
    <f3>   DW_AT_sibling     : <0x115>
 <2><f7>: Abbrev Number: 9 (DW_TAG_formal_parameter)
    <f8>   DW_AT_name        : (indirect string, offset: 0xdc): argc
    <fc>   DW_AT_decl_file   : 1
    <fd>   DW_AT_decl_line   : 18
    <fe>   DW_AT_type        : <0x11c>
    <102>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><105>: Abbrev Number: 9 (DW_TAG_formal_parameter)
    <106>   DW_AT_name        : (indirect string, offset: 0x1a0): argv
    <10a>   DW_AT_decl_file   : 1
    <10b>   DW_AT_decl_line   : 18
    <10c>   DW_AT_type        : <0x121>
    <110>   DW_AT_location    : 3 byte block: 91 60 6 	(DW_OP_fbreg: -32; DW_OP_deref)
 <2><114>: Abbrev Number: 0
 <1><115>: Abbrev Number: 10 (DW_TAG_base_type)
    <116>   DW_AT_byte_size   : 4
    <117>   DW_AT_encoding    : 5	(signed)
    <118>   DW_AT_name        : (indirect string, offset: 0x0): integer(kind=4)
 <1><11c>: Abbrev Number: 11 (DW_TAG_const_type)
    <11d>   DW_AT_type        : <0x115>
 <1><121>: Abbrev Number: 12 (DW_TAG_pointer_type)
    <122>   DW_AT_byte_size   : 8
    <123>   DW_AT_type        : <0x127>
 <1><127>: Abbrev Number: 10 (DW_TAG_base_type)
    <128>   DW_AT_byte_size   : 1
    <129>   DW_AT_encoding    : 8	(unsigned char)
    <12a>   DW_AT_name        : (indirect string, offset: 0x10): character(kind=1)
 <1><12e>: Abbrev Number: 0

Contents of the .debug_abbrev section:

  Number TAG (0x0)
   1      DW_TAG_compile_unit    [has children]
    DW_AT_producer     DW_FORM_strp
    DW_AT_language     DW_FORM_data1
    DW_AT_identifier_case DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT_comp_dir     DW_FORM_strp
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_stmt_list    DW_FORM_sec_offset
    DW_AT_GNU_macros   DW_FORM_sec_offset
    DW_AT value: 0     DW_FORM value: 0
   2      DW_TAG_subprogram    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_main_subprogram DW_FORM_flag_present
    DW_AT_calling_convention DW_FORM_data1
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   3      DW_TAG_imported_module    [no children]
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_import       DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   4      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   5      DW_TAG_module    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   6      DW_TAG_subprogram    [has children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_linkage_name DW_FORM_strp
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_call_sites DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   7      DW_TAG_formal_parameter    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   8      DW_TAG_subprogram    [has children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   9      DW_TAG_formal_parameter    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   10      DW_TAG_base_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_encoding     DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT value: 0     DW_FORM value: 0
   11      DW_TAG_const_type    [no children]
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   12      DW_TAG_pointer_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0

Contents of the .debug_aranges section:

  Length:                   44
  Version:                  2
  Offset into .debug_info:  0x0
  Pointer Size:             8
  Segment Size:             0

    Address            Length
    0000000000000000 000000000000008e 
    0000000000000000 0000000000000000 

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4
  Offset into .debug_line:     0x0

 DW_MACRO_start_file - lineno: 0 filenum: 1 filename: add_function.f08
 DW_MACRO_end_file

Raw dump of debug contents of section .debug_line:

  Offset:                      0x0
  Length:                      75
  DWARF Version:               2
  Prologue Length:             39
  Minimum Instruction Length:  1
  Initial value of 'is_stmt':  1
  Line Base:                   -5
  Line Range:                  14
  Opcode Base:                 13

 Opcodes:
  Opcode 1 has 0 args
  Opcode 2 has 1 arg
  Opcode 3 has 1 arg
  Opcode 4 has 1 arg
  Opcode 5 has 1 arg
  Opcode 6 has 0 args
  Opcode 7 has 0 args
  Opcode 8 has 0 args
  Opcode 9 has 1 arg
  Opcode 10 has 0 args
  Opcode 11 has 0 args
  Opcode 12 has 1 arg

 The Directory Table is empty.

 The File Name Table (offset 0x1c):
  Entry	Dir	Time	Size	Name
  1	0	0	0	add_function.f08

 Line Number Statements:
  [0x00000031]  Extended opcode 2: set Address to 0x0
  [0x0000003c]  Special opcode 11: advance Address by 0 to 0x0 and Line by 6 to 7
  [0x0000003d]  Special opcode 176: advance Address by 12 to 0xc and Line by 3 to 10
  [0x0000003e]  Advance PC by constant 17 to 0x1d
  [0x0000003f]  Special opcode 7: advance Address by 0 to 0x1d and Line by 2 to 12
  [0x00000040]  Special opcode 79: advance Address by 5 to 0x22 and Line by 4 to 16
  [0x00000041]  Special opcode 124: advance Address by 8 to 0x2a and Line by 7 to 23
  [0x00000042]  Special opcode 105: advance Address by 7 to 0x31 and Line by 2 to 25
  [0x00000043]  Special opcode 105: advance Address by 7 to 0x38 and Line by 2 to 27
  [0x00000044]  Advance PC by constant 17 to 0x49
  [0x00000045]  Special opcode 77: advance Address by 5 to 0x4e and Line by 2 to 29
  [0x00000046]  Advance Line by -11 to 18
  [0x00000048]  Special opcode 47: advance Address by 3 to 0x51 and Line by 0 to 18
  [0x00000049]  Special opcode 215: advance Address by 15 to 0x60 and Line by 0 to 18
  [0x0000004a]  Advance PC by 46 to 0x8e
  [0x0000004c]  Extended opcode 1: End of Sequence


Contents of the .debug_str section:

  0x00000000 696e7465 67657228 6b696e64 3d342900 integer(kind=4).
  0x00000010 63686172 61637465 72286b69 6e643d31 character(kind=1
  0x00000020 29006164 645f6675 6e637469 6f6e2e66 ).add_function.f
  0x00000030 30380066 756e6374 696f6e5f 6d6f6475 08.function_modu
  0x00000040 6c65002f 686f6d65 2f756275 6e74752f le./home/ubuntu/
  0x00000050 456e6769 6e656572 696e672f 50726f67 Engineering/Prog
  0x00000060 72616d6d 696e672f 44697361 7373656d ramming/Disassem
  0x00000070 626c696e 672d4269 6e617269 65732f46 bling-Binaries/F
  0x00000080 6f727472 616e2f49 6e74656c 5f617263 ortran/Intel_arc
  0x00000090 68697465 63747572 652f414d 4436342f hitecture/AMD64/
  0x000000a0 46756e63 74696f6e 732f4164 645f4675 Functions/Add_Fu
  0x000000b0 6e637469 6f6e735f 496e742f 57697468 nctions_Int/With
  0x000000c0 5f446562 75675f49 6e666f2f 57697468 _Debug_Info/With
  0x000000d0 5f446562 75675f49 6e666f00 61726763 _Debug_Info.argc
  0x000000e0 00757365 5f66756e 6374696f 6e730047 .use_functions.G
  0x000000f0 4e552046 6f727472 616e3230 30382037 NU Fortran2008 7
  0x00000100 2e332e30 202d6d74 756e653d 67656e65 .3.0 -mtune=gene
  0x00000110 72696320 2d6d6172 63683d78 38362d36 ric -march=x86-6
  0x00000120 34202d67 67646233 202d6669 6e747269 4 -ggdb3 -fintri
  0x00000130 6e736963 2d6d6f64 756c6573 2d706174 nsic-modules-pat
  0x00000140 68202f75 73722f6c 69622f67 63632f78 h /usr/lib/gcc/x
  0x00000150 38365f36 342d6c69 6e75782d 676e752f 86_64-linux-gnu/
  0x00000160 372f6669 6e636c75 6465006d 61696e00 7/finclude.main.
  0x00000170 5f5f6675 6e637469 6f6e5f6d 6f64756c __function_modul
  0x00000180 655f4d4f 445f6164 645f6675 6e637469 e_MOD_add_functi
  0x00000190 6f6e0061 64645f66 756e6374 696f6e00 on.add_function.
  0x000001a0 61726776 00                         argv.

Contents of the .eh_frame section:


00000000 0000000000000014 00000000 CIE
  Version:               1
  Augmentation:          "zR"
  Code alignment factor: 1
  Data alignment factor: -8
  Return address column: 16
  Augmentation data:     1b
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_offset: r16 (rip) at cfa-8
  DW_CFA_nop
  DW_CFA_nop

00000018 000000000000001c 0000001c FDE cie=00000000 pc=0000000000000000..0000000000000022
  DW_CFA_advance_loc: 1 to 0000000000000001
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000004
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 29 to 0000000000000021
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000038 000000000000001c 0000003c FDE cie=00000000 pc=0000000000000022..0000000000000051
  DW_CFA_advance_loc: 1 to 0000000000000023
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000026
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 42 to 0000000000000050
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000058 000000000000001c 0000005c FDE cie=00000000 pc=0000000000000051..000000000000008e
  DW_CFA_advance_loc: 1 to 0000000000000052
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000055
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 56 to 000000000000008d
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

