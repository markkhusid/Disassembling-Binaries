
add_function_Fortran_AMD64_ggdb3:     file format elf64-x86-64
add_function_Fortran_AMD64_ggdb3
architecture: i386:x86-64, flags 0x00000150:
HAS_SYMS, DYNAMIC, D_PAGED
start address 0x00000000000005e0

Program Header:
    PHDR off    0x0000000000000040 vaddr 0x0000000000000040 paddr 0x0000000000000040 align 2**3
         filesz 0x00000000000001f8 memsz 0x00000000000001f8 flags r--
  INTERP off    0x0000000000000238 vaddr 0x0000000000000238 paddr 0x0000000000000238 align 2**0
         filesz 0x000000000000001c memsz 0x000000000000001c flags r--
    LOAD off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**21
         filesz 0x00000000000009c0 memsz 0x00000000000009c0 flags r-x
    LOAD off    0x0000000000000da0 vaddr 0x0000000000200da0 paddr 0x0000000000200da0 align 2**21
         filesz 0x0000000000000270 memsz 0x0000000000000278 flags rw-
 DYNAMIC off    0x0000000000000db0 vaddr 0x0000000000200db0 paddr 0x0000000000200db0 align 2**3
         filesz 0x0000000000000200 memsz 0x0000000000000200 flags rw-
    NOTE off    0x0000000000000254 vaddr 0x0000000000000254 paddr 0x0000000000000254 align 2**2
         filesz 0x0000000000000044 memsz 0x0000000000000044 flags r--
EH_FRAME off    0x000000000000082c vaddr 0x000000000000082c paddr 0x000000000000082c align 2**2
         filesz 0x000000000000004c memsz 0x000000000000004c flags r--
   STACK off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**4
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-
   RELRO off    0x0000000000000da0 vaddr 0x0000000000200da0 paddr 0x0000000000200da0 align 2**0
         filesz 0x0000000000000260 memsz 0x0000000000000260 flags r--

Dynamic Section:
  NEEDED               libgfortran.so.4
  NEEDED               libc.so.6
  INIT                 0x0000000000000580
  FINI                 0x00000000000007f4
  INIT_ARRAY           0x0000000000200da0
  INIT_ARRAYSZ         0x0000000000000008
  FINI_ARRAY           0x0000000000200da8
  FINI_ARRAYSZ         0x0000000000000008
  GNU_HASH             0x0000000000000298
  STRTAB               0x0000000000000378
  SYMTAB               0x00000000000002b8
  STRSZ                0x00000000000000c2
  SYMENT               0x0000000000000018
  DEBUG                0x0000000000000000
  PLTGOT               0x0000000000200fb0
  PLTRELSZ             0x0000000000000030
  PLTREL               0x0000000000000007
  JMPREL               0x0000000000000550
  RELA                 0x0000000000000490
  RELASZ               0x00000000000000c0
  RELAENT              0x0000000000000018
  FLAGS                0x0000000000000008
  FLAGS_1              0x0000000008000001
  VERNEED              0x0000000000000450
  VERNEEDNUM           0x0000000000000002
  VERSYM               0x000000000000043a
  RELACOUNT            0x0000000000000003

Version References:
  required from libc.so.6:
    0x09691a75 0x00 03 GLIBC_2.2.5
  required from libgfortran.so.4:
    0x0792f967 0x00 02 GFORTRAN_7

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000000238  0000000000000238  00000238  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.ABI-tag 00000020  0000000000000254  0000000000000254  00000254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000000274  0000000000000274  00000274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .gnu.hash     0000001c  0000000000000298  0000000000000298  00000298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dynsym       000000c0  00000000000002b8  00000000000002b8  000002b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynstr       000000c2  0000000000000378  0000000000000378  00000378  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .gnu.version  00000010  000000000000043a  000000000000043a  0000043a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version_r 00000040  0000000000000450  0000000000000450  00000450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rela.dyn     000000c0  0000000000000490  0000000000000490  00000490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.plt     00000030  0000000000000550  0000000000000550  00000550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .init         00000017  0000000000000580  0000000000000580  00000580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .plt          00000030  00000000000005a0  00000000000005a0  000005a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt.got      00000008  00000000000005d0  00000000000005d0  000005d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text         00000212  00000000000005e0  00000000000005e0  000005e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .fini         00000009  00000000000007f4  00000000000007f4  000007f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       0000002c  0000000000000800  0000000000000800  00000800  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame_hdr 0000004c  000000000000082c  000000000000082c  0000082c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .eh_frame     00000148  0000000000000878  0000000000000878  00000878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .init_array   00000008  0000000000200da0  0000000000200da0  00000da0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 19 .fini_array   00000008  0000000000200da8  0000000000200da8  00000da8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 20 .dynamic      00000200  0000000000200db0  0000000000200db0  00000db0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 21 .got          00000050  0000000000200fb0  0000000000200fb0  00000fb0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 22 .data         00000010  0000000000201000  0000000000201000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .bss          00000008  0000000000201010  0000000000201010  00001010  2**0
                  ALLOC
 24 .comment      0000002a  0000000000000000  0000000000000000  00001010  2**0
                  CONTENTS, READONLY
 25 .debug_aranges 00000030  0000000000000000  0000000000000000  0000103a  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_info   0000012f  0000000000000000  0000000000000000  0000106a  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_abbrev 000000c7  0000000000000000  0000000000000000  00001199  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_line   0000004f  0000000000000000  0000000000000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_str    00000198  0000000000000000  0000000000000000  000012af  2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .debug_macro  0000000c  0000000000000000  0000000000000000  00001447  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000000000000238 l    d  .interp	0000000000000000              .interp
0000000000000254 l    d  .note.ABI-tag	0000000000000000              .note.ABI-tag
0000000000000274 l    d  .note.gnu.build-id	0000000000000000              .note.gnu.build-id
0000000000000298 l    d  .gnu.hash	0000000000000000              .gnu.hash
00000000000002b8 l    d  .dynsym	0000000000000000              .dynsym
0000000000000378 l    d  .dynstr	0000000000000000              .dynstr
000000000000043a l    d  .gnu.version	0000000000000000              .gnu.version
0000000000000450 l    d  .gnu.version_r	0000000000000000              .gnu.version_r
0000000000000490 l    d  .rela.dyn	0000000000000000              .rela.dyn
0000000000000550 l    d  .rela.plt	0000000000000000              .rela.plt
0000000000000580 l    d  .init	0000000000000000              .init
00000000000005a0 l    d  .plt	0000000000000000              .plt
00000000000005d0 l    d  .plt.got	0000000000000000              .plt.got
00000000000005e0 l    d  .text	0000000000000000              .text
00000000000007f4 l    d  .fini	0000000000000000              .fini
0000000000000800 l    d  .rodata	0000000000000000              .rodata
000000000000082c l    d  .eh_frame_hdr	0000000000000000              .eh_frame_hdr
0000000000000878 l    d  .eh_frame	0000000000000000              .eh_frame
0000000000200da0 l    d  .init_array	0000000000000000              .init_array
0000000000200da8 l    d  .fini_array	0000000000000000              .fini_array
0000000000200db0 l    d  .dynamic	0000000000000000              .dynamic
0000000000200fb0 l    d  .got	0000000000000000              .got
0000000000201000 l    d  .data	0000000000000000              .data
0000000000201010 l    d  .bss	0000000000000000              .bss
0000000000000000 l    d  .comment	0000000000000000              .comment
0000000000000000 l    d  .debug_aranges	0000000000000000              .debug_aranges
0000000000000000 l    d  .debug_info	0000000000000000              .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000              .debug_abbrev
0000000000000000 l    d  .debug_line	0000000000000000              .debug_line
0000000000000000 l    d  .debug_str	0000000000000000              .debug_str
0000000000000000 l    d  .debug_macro	0000000000000000              .debug_macro
0000000000000000 l    df *ABS*	0000000000000000              crtstuff.c
0000000000000610 l     F .text	0000000000000000              deregister_tm_clones
0000000000000650 l     F .text	0000000000000000              register_tm_clones
00000000000006a0 l     F .text	0000000000000000              __do_global_dtors_aux
0000000000201010 l     O .bss	0000000000000001              completed.7696
0000000000200da8 l     O .fini_array	0000000000000000              __do_global_dtors_aux_fini_array_entry
00000000000006e0 l     F .text	0000000000000000              frame_dummy
0000000000200da0 l     O .init_array	0000000000000000              __frame_dummy_init_array_entry
0000000000000000 l    df *ABS*	0000000000000000              add_function.f08
000000000000070c l     F .text	000000000000002f              MAIN__
0000000000000810 l     O .rodata	000000000000001c              options.0.3510
0000000000000000 l    df *ABS*	0000000000000000              crtstuff.c
00000000000009bc l     O .eh_frame	0000000000000000              __FRAME_END__
0000000000000000 l    df *ABS*	0000000000000000              
000000000000082c l       .eh_frame_hdr	0000000000000000              __GNU_EH_FRAME_HDR
0000000000200fb0 l     O .got	0000000000000000              _GLOBAL_OFFSET_TABLE_
0000000000200da8 l       .init_array	0000000000000000              __init_array_end
0000000000200da0 l       .init_array	0000000000000000              __init_array_start
0000000000200db0 l     O .dynamic	0000000000000000              _DYNAMIC
0000000000201000  w      .data	0000000000000000              data_start
00000000000007f0 g     F .text	0000000000000002              __libc_csu_fini
0000000000000000       F *UND*	0000000000000000              _gfortran_set_args@@GFORTRAN_7
00000000000005e0 g     F .text	000000000000002b              _start
0000000000000000  w      *UND*	0000000000000000              __gmon_start__
00000000000007f4 g     F .fini	0000000000000000              _fini
0000000000000000       F *UND*	0000000000000000              __libc_start_main@@GLIBC_2.2.5
0000000000000000  w      *UND*	0000000000000000              _ITM_deregisterTMCloneTable
0000000000000800 g     O .rodata	0000000000000004              _IO_stdin_used
0000000000000000  w      *UND*	0000000000000000              _ITM_registerTMCloneTable
0000000000201000 g       .data	0000000000000000              __data_start
0000000000000000  w    F *UND*	0000000000000000              __cxa_finalize@@GLIBC_2.2.5
0000000000201010 g     O .data	0000000000000000              .hidden __TMC_END__
00000000000006ea g     F .text	0000000000000022              __function_module_MOD_add_function
0000000000201008 g     O .data	0000000000000000              .hidden __dso_handle
0000000000000000       F *UND*	0000000000000000              _gfortran_set_options@@GFORTRAN_7
0000000000000780 g     F .text	0000000000000065              __libc_csu_init
0000000000201010 g       .bss	0000000000000000              __bss_start
0000000000201018 g       .bss	0000000000000000              _end
0000000000201010 g       .data	0000000000000000              _edata
000000000000073b g     F .text	000000000000003d              main
0000000000000580 g     F .init	0000000000000000              _init



Disassembly of section .interp:

0000000000000238 <.interp>:
 238:	2f                   	(bad)  
 239:	6c                   	ins    BYTE PTR es:[rdi],dx
 23a:	69 62 36 34 2f 6c 64 	imul   esp,DWORD PTR [rdx+0x36],0x646c2f34
 241:	2d 6c 69 6e 75       	sub    eax,0x756e696c
 246:	78 2d                	js     275 <_init-0x30b>
 248:	78 38                	js     282 <_init-0x2fe>
 24a:	36 2d 36 34 2e 73    	ss sub eax,0x732e3436
 250:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 251:	2e 32 00             	xor    al,BYTE PTR cs:[rax]

Disassembly of section .note.ABI-tag:

0000000000000254 <.note.ABI-tag>:
 254:	04 00                	add    al,0x0
 256:	00 00                	add    BYTE PTR [rax],al
 258:	10 00                	adc    BYTE PTR [rax],al
 25a:	00 00                	add    BYTE PTR [rax],al
 25c:	01 00                	add    DWORD PTR [rax],eax
 25e:	00 00                	add    BYTE PTR [rax],al
 260:	47                   	rex.RXB
 261:	4e 55                	rex.WRX push rbp
 263:	00 00                	add    BYTE PTR [rax],al
 265:	00 00                	add    BYTE PTR [rax],al
 267:	00 03                	add    BYTE PTR [rbx],al
 269:	00 00                	add    BYTE PTR [rax],al
 26b:	00 02                	add    BYTE PTR [rdx],al
 26d:	00 00                	add    BYTE PTR [rax],al
 26f:	00 00                	add    BYTE PTR [rax],al
 271:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .note.gnu.build-id:

0000000000000274 <.note.gnu.build-id>:
 274:	04 00                	add    al,0x0
 276:	00 00                	add    BYTE PTR [rax],al
 278:	14 00                	adc    al,0x0
 27a:	00 00                	add    BYTE PTR [rax],al
 27c:	03 00                	add    eax,DWORD PTR [rax]
 27e:	00 00                	add    BYTE PTR [rax],al
 280:	47                   	rex.RXB
 281:	4e 55                	rex.WRX push rbp
 283:	00 47 34             	add    BYTE PTR [rdi+0x34],al
 286:	88 9b 6e 0e 11 2b    	mov    BYTE PTR [rbx+0x2b110e6e],bl
 28c:	ea                   	(bad)  
 28d:	94                   	xchg   esp,eax
 28e:	3e 2c ac             	ds sub al,0xac
 291:	d9 57 cd             	fst    DWORD PTR [rdi-0x33]
 294:	53                   	push   rbx
 295:	8f                   	(bad)  
 296:	fc                   	cld    
 297:	8a                   	.byte 0x8a

Disassembly of section .gnu.hash:

0000000000000298 <.gnu.hash>:
 298:	01 00                	add    DWORD PTR [rax],eax
 29a:	00 00                	add    BYTE PTR [rax],al
 29c:	01 00                	add    DWORD PTR [rax],eax
 29e:	00 00                	add    BYTE PTR [rax],al
 2a0:	01 00                	add    DWORD PTR [rax],eax
	...

Disassembly of section .dynsym:

00000000000002b8 <.dynsym>:
	...
 2d0:	6d                   	ins    DWORD PTR es:[rdi],dx
 2d1:	00 00                	add    BYTE PTR [rax],al
 2d3:	00 12                	add    BYTE PTR [rdx],dl
	...
 2e5:	00 00                	add    BYTE PTR [rax],al
 2e7:	00 2e                	add    BYTE PTR [rsi],ch
 2e9:	00 00                	add    BYTE PTR [rax],al
 2eb:	00 20                	add    BYTE PTR [rax],ah
	...
 2fd:	00 00                	add    BYTE PTR [rax],al
 2ff:	00 99 00 00 00 12    	add    BYTE PTR [rcx+0x12000000],bl
	...
 315:	00 00                	add    BYTE PTR [rax],al
 317:	00 12                	add    BYTE PTR [rdx],dl
 319:	00 00                	add    BYTE PTR [rax],al
 31b:	00 20                	add    BYTE PTR [rax],ah
	...
 32d:	00 00                	add    BYTE PTR [rax],al
 32f:	00 3d 00 00 00 20    	add    BYTE PTR [rip+0x20000000],bh        # 20000335 <_end+0x1fdff31d>
	...
 345:	00 00                	add    BYTE PTR [rax],al
 347:	00 8a 00 00 00 22    	add    BYTE PTR [rdx+0x22000000],cl
	...
 35d:	00 00                	add    BYTE PTR [rax],al
 35f:	00 57 00             	add    BYTE PTR [rdi+0x0],dl
 362:	00 00                	add    BYTE PTR [rax],al
 364:	12 00                	adc    al,BYTE PTR [rax]
	...

Disassembly of section .dynstr:

0000000000000378 <.dynstr>:
 378:	00 6c 69 62          	add    BYTE PTR [rcx+rbp*2+0x62],ch
 37c:	67 66 6f             	outs   dx,WORD PTR ds:[esi]
 37f:	72 74                	jb     3f5 <_init-0x18b>
 381:	72 61                	jb     3e4 <_init-0x19c>
 383:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 384:	2e 73 6f             	cs jae 3f6 <_init-0x18a>
 387:	2e 34 00             	cs xor al,0x0
 38a:	5f                   	pop    rdi
 38b:	49 54                	rex.WB push r12
 38d:	4d 5f                	rex.WRB pop r15
 38f:	64 65 72 65          	fs gs jb 3f8 <_init-0x188>
 393:	67 69 73 74 65 72 54 	imul   esi,DWORD PTR [ebx+0x74],0x4d547265
 39a:	4d 
 39b:	43 6c                	rex.XB ins BYTE PTR es:[rdi],dx
 39d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 39e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 39f:	65 54                	gs push rsp
 3a1:	61                   	(bad)  
 3a2:	62                   	(bad)  
 3a3:	6c                   	ins    BYTE PTR es:[rdi],dx
 3a4:	65 00 5f 5f          	add    BYTE PTR gs:[rdi+0x5f],bl
 3a8:	67 6d                	ins    DWORD PTR es:[edi],dx
 3aa:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 3ab:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 3ac:	5f                   	pop    rdi
 3ad:	73 74                	jae    423 <_init-0x15d>
 3af:	61                   	(bad)  
 3b0:	72 74                	jb     426 <_init-0x15a>
 3b2:	5f                   	pop    rdi
 3b3:	5f                   	pop    rdi
 3b4:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
 3b7:	54                   	push   rsp
 3b8:	4d 5f                	rex.WRB pop r15
 3ba:	72 65                	jb     421 <_init-0x15f>
 3bc:	67 69 73 74 65 72 54 	imul   esi,DWORD PTR [ebx+0x74],0x4d547265
 3c3:	4d 
 3c4:	43 6c                	rex.XB ins BYTE PTR es:[rdi],dx
 3c6:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 3c7:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 3c8:	65 54                	gs push rsp
 3ca:	61                   	(bad)  
 3cb:	62                   	(bad)  
 3cc:	6c                   	ins    BYTE PTR es:[rdi],dx
 3cd:	65 00 5f 67          	add    BYTE PTR gs:[rdi+0x67],bl
 3d1:	66 6f                	outs   dx,WORD PTR ds:[rsi]
 3d3:	72 74                	jb     449 <_init-0x137>
 3d5:	72 61                	jb     438 <_init-0x148>
 3d7:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 3d8:	5f                   	pop    rdi
 3d9:	73 65                	jae    440 <_init-0x140>
 3db:	74 5f                	je     43c <_init-0x144>
 3dd:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 3de:	70 74                	jo     454 <_init-0x12c>
 3e0:	69 6f 6e 73 00 5f 67 	imul   ebp,DWORD PTR [rdi+0x6e],0x675f0073
 3e7:	66 6f                	outs   dx,WORD PTR ds:[rsi]
 3e9:	72 74                	jb     45f <_init-0x121>
 3eb:	72 61                	jb     44e <_init-0x132>
 3ed:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 3ee:	5f                   	pop    rdi
 3ef:	73 65                	jae    456 <_init-0x12a>
 3f1:	74 5f                	je     452 <_init-0x12e>
 3f3:	61                   	(bad)  
 3f4:	72 67                	jb     45d <_init-0x123>
 3f6:	73 00                	jae    3f8 <_init-0x188>
 3f8:	6c                   	ins    BYTE PTR es:[rdi],dx
 3f9:	69 62 63 2e 73 6f 2e 	imul   esp,DWORD PTR [rdx+0x63],0x2e6f732e
 400:	36 00 5f 5f          	add    BYTE PTR ss:[rdi+0x5f],bl
 404:	63 78 61             	movsxd edi,DWORD PTR [rax+0x61]
 407:	5f                   	pop    rdi
 408:	66 69 6e 61 6c 69    	imul   bp,WORD PTR [rsi+0x61],0x696c
 40e:	7a 65                	jp     475 <_init-0x10b>
 410:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
 413:	6c                   	ins    BYTE PTR es:[rdi],dx
 414:	69 62 63 5f 73 74 61 	imul   esp,DWORD PTR [rdx+0x63],0x6174735f
 41b:	72 74                	jb     491 <_init-0xef>
 41d:	5f                   	pop    rdi
 41e:	6d                   	ins    DWORD PTR es:[rdi],dx
 41f:	61                   	(bad)  
 420:	69 6e 00 47 4c 49 42 	imul   ebp,DWORD PTR [rsi+0x0],0x42494c47
 427:	43 5f                	rex.XB pop r15
 429:	32 2e                	xor    ch,BYTE PTR [rsi]
 42b:	32 2e                	xor    ch,BYTE PTR [rsi]
 42d:	35 00 47 46 4f       	xor    eax,0x4f464700
 432:	52                   	push   rdx
 433:	54                   	push   rsp
 434:	52                   	push   rdx
 435:	41                   	rex.B
 436:	4e 5f                	rex.WRX pop rdi
 438:	37                   	(bad)  
	...

Disassembly of section .gnu.version:

000000000000043a <.gnu.version>:
 43a:	00 00                	add    BYTE PTR [rax],al
 43c:	02 00                	add    al,BYTE PTR [rax]
 43e:	00 00                	add    BYTE PTR [rax],al
 440:	03 00                	add    eax,DWORD PTR [rax]
 442:	00 00                	add    BYTE PTR [rax],al
 444:	00 00                	add    BYTE PTR [rax],al
 446:	03 00                	add    eax,DWORD PTR [rax]
 448:	02 00                	add    al,BYTE PTR [rax]

Disassembly of section .gnu.version_r:

0000000000000450 <.gnu.version_r>:
 450:	01 00                	add    DWORD PTR [rax],eax
 452:	01 00                	add    DWORD PTR [rax],eax
 454:	80 00 00             	add    BYTE PTR [rax],0x0
 457:	00 10                	add    BYTE PTR [rax],dl
 459:	00 00                	add    BYTE PTR [rax],al
 45b:	00 20                	add    BYTE PTR [rax],ah
 45d:	00 00                	add    BYTE PTR [rax],al
 45f:	00 75 1a             	add    BYTE PTR [rbp+0x1a],dh
 462:	69 09 00 00 03 00    	imul   ecx,DWORD PTR [rcx],0x30000
 468:	ab                   	stos   DWORD PTR es:[rdi],eax
 469:	00 00                	add    BYTE PTR [rax],al
 46b:	00 00                	add    BYTE PTR [rax],al
 46d:	00 00                	add    BYTE PTR [rax],al
 46f:	00 01                	add    BYTE PTR [rcx],al
 471:	00 01                	add    BYTE PTR [rcx],al
 473:	00 01                	add    BYTE PTR [rcx],al
 475:	00 00                	add    BYTE PTR [rax],al
 477:	00 10                	add    BYTE PTR [rax],dl
 479:	00 00                	add    BYTE PTR [rax],al
 47b:	00 00                	add    BYTE PTR [rax],al
 47d:	00 00                	add    BYTE PTR [rax],al
 47f:	00 67 f9             	add    BYTE PTR [rdi-0x7],ah
 482:	92                   	xchg   edx,eax
 483:	07                   	(bad)  
 484:	00 00                	add    BYTE PTR [rax],al
 486:	02 00                	add    al,BYTE PTR [rax]
 488:	b7 00                	mov    bh,0x0
 48a:	00 00                	add    BYTE PTR [rax],al
 48c:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .rela.dyn:

0000000000000490 <.rela.dyn>:
 490:	a0 0d 20 00 00 00 00 	movabs al,ds:0x80000000000200d
 497:	00 08 
 499:	00 00                	add    BYTE PTR [rax],al
 49b:	00 00                	add    BYTE PTR [rax],al
 49d:	00 00                	add    BYTE PTR [rax],al
 49f:	00 e0                	add    al,ah
 4a1:	06                   	(bad)  
 4a2:	00 00                	add    BYTE PTR [rax],al
 4a4:	00 00                	add    BYTE PTR [rax],al
 4a6:	00 00                	add    BYTE PTR [rax],al
 4a8:	a8 0d                	test   al,0xd
 4aa:	20 00                	and    BYTE PTR [rax],al
 4ac:	00 00                	add    BYTE PTR [rax],al
 4ae:	00 00                	add    BYTE PTR [rax],al
 4b0:	08 00                	or     BYTE PTR [rax],al
 4b2:	00 00                	add    BYTE PTR [rax],al
 4b4:	00 00                	add    BYTE PTR [rax],al
 4b6:	00 00                	add    BYTE PTR [rax],al
 4b8:	a0 06 00 00 00 00 00 	movabs al,ds:0x800000000000006
 4bf:	00 08 
 4c1:	10 20                	adc    BYTE PTR [rax],ah
 4c3:	00 00                	add    BYTE PTR [rax],al
 4c5:	00 00                	add    BYTE PTR [rax],al
 4c7:	00 08                	add    BYTE PTR [rax],cl
 4c9:	00 00                	add    BYTE PTR [rax],al
 4cb:	00 00                	add    BYTE PTR [rax],al
 4cd:	00 00                	add    BYTE PTR [rax],al
 4cf:	00 08                	add    BYTE PTR [rax],cl
 4d1:	10 20                	adc    BYTE PTR [rax],ah
 4d3:	00 00                	add    BYTE PTR [rax],al
 4d5:	00 00                	add    BYTE PTR [rax],al
 4d7:	00 d8                	add    al,bl
 4d9:	0f 20 00             	mov    rax,cr0
 4dc:	00 00                	add    BYTE PTR [rax],al
 4de:	00 00                	add    BYTE PTR [rax],al
 4e0:	06                   	(bad)  
 4e1:	00 00                	add    BYTE PTR [rax],al
 4e3:	00 02                	add    BYTE PTR [rdx],al
	...
 4ed:	00 00                	add    BYTE PTR [rax],al
 4ef:	00 e0                	add    al,ah
 4f1:	0f 20 00             	mov    rax,cr0
 4f4:	00 00                	add    BYTE PTR [rax],al
 4f6:	00 00                	add    BYTE PTR [rax],al
 4f8:	06                   	(bad)  
 4f9:	00 00                	add    BYTE PTR [rax],al
 4fb:	00 03                	add    BYTE PTR [rbx],al
	...
 505:	00 00                	add    BYTE PTR [rax],al
 507:	00 e8                	add    al,ch
 509:	0f 20 00             	mov    rax,cr0
 50c:	00 00                	add    BYTE PTR [rax],al
 50e:	00 00                	add    BYTE PTR [rax],al
 510:	06                   	(bad)  
 511:	00 00                	add    BYTE PTR [rax],al
 513:	00 04 00             	add    BYTE PTR [rax+rax*1],al
	...
 51e:	00 00                	add    BYTE PTR [rax],al
 520:	f0 0f 20 00          	lock mov rax,cr0
 524:	00 00                	add    BYTE PTR [rax],al
 526:	00 00                	add    BYTE PTR [rax],al
 528:	06                   	(bad)  
 529:	00 00                	add    BYTE PTR [rax],al
 52b:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 531 <_init-0x4f>
 531:	00 00                	add    BYTE PTR [rax],al
 533:	00 00                	add    BYTE PTR [rax],al
 535:	00 00                	add    BYTE PTR [rax],al
 537:	00 f8                	add    al,bh
 539:	0f 20 00             	mov    rax,cr0
 53c:	00 00                	add    BYTE PTR [rax],al
 53e:	00 00                	add    BYTE PTR [rax],al
 540:	06                   	(bad)  
 541:	00 00                	add    BYTE PTR [rax],al
 543:	00 06                	add    BYTE PTR [rsi],al
	...

Disassembly of section .rela.plt:

0000000000000550 <.rela.plt>:
 550:	c8 0f 20 00          	enter  0x200f,0x0
 554:	00 00                	add    BYTE PTR [rax],al
 556:	00 00                	add    BYTE PTR [rax],al
 558:	07                   	(bad)  
 559:	00 00                	add    BYTE PTR [rax],al
 55b:	00 01                	add    BYTE PTR [rcx],al
	...
 565:	00 00                	add    BYTE PTR [rax],al
 567:	00 d0                	add    al,dl
 569:	0f 20 00             	mov    rax,cr0
 56c:	00 00                	add    BYTE PTR [rax],al
 56e:	00 00                	add    BYTE PTR [rax],al
 570:	07                   	(bad)  
 571:	00 00                	add    BYTE PTR [rax],al
 573:	00 07                	add    BYTE PTR [rdi],al
	...

Disassembly of section .init:

0000000000000580 <_init>:
 580:	48 83 ec 08          	sub    rsp,0x8
 584:	48 8b 05 4d 0a 20 00 	mov    rax,QWORD PTR [rip+0x200a4d]        # 200fd8 <__gmon_start__>
 58b:	48 85 c0             	test   rax,rax
 58e:	74 02                	je     592 <_init+0x12>
 590:	ff d0                	call   rax
 592:	48 83 c4 08          	add    rsp,0x8
 596:	c3                   	ret    

Disassembly of section .plt:

00000000000005a0 <.plt>:
 5a0:	ff 35 12 0a 20 00    	push   QWORD PTR [rip+0x200a12]        # 200fb8 <_GLOBAL_OFFSET_TABLE_+0x8>
 5a6:	ff 25 14 0a 20 00    	jmp    QWORD PTR [rip+0x200a14]        # 200fc0 <_GLOBAL_OFFSET_TABLE_+0x10>
 5ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000000005b0 <_gfortran_set_args@plt>:
 5b0:	ff 25 12 0a 20 00    	jmp    QWORD PTR [rip+0x200a12]        # 200fc8 <_gfortran_set_args@GFORTRAN_7>
 5b6:	68 00 00 00 00       	push   0x0
 5bb:	e9 e0 ff ff ff       	jmp    5a0 <.plt>

00000000000005c0 <_gfortran_set_options@plt>:
 5c0:	ff 25 0a 0a 20 00    	jmp    QWORD PTR [rip+0x200a0a]        # 200fd0 <_gfortran_set_options@GFORTRAN_7>
 5c6:	68 01 00 00 00       	push   0x1
 5cb:	e9 d0 ff ff ff       	jmp    5a0 <.plt>

Disassembly of section .plt.got:

00000000000005d0 <__cxa_finalize@plt>:
 5d0:	ff 25 22 0a 20 00    	jmp    QWORD PTR [rip+0x200a22]        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 5d6:	66 90                	xchg   ax,ax

Disassembly of section .text:

00000000000005e0 <_start>:
 5e0:	31 ed                	xor    ebp,ebp
 5e2:	49 89 d1             	mov    r9,rdx
 5e5:	5e                   	pop    rsi
 5e6:	48 89 e2             	mov    rdx,rsp
 5e9:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
 5ed:	50                   	push   rax
 5ee:	54                   	push   rsp
 5ef:	4c 8d 05 fa 01 00 00 	lea    r8,[rip+0x1fa]        # 7f0 <__libc_csu_fini>
 5f6:	48 8d 0d 83 01 00 00 	lea    rcx,[rip+0x183]        # 780 <__libc_csu_init>
 5fd:	48 8d 3d 37 01 00 00 	lea    rdi,[rip+0x137]        # 73b <main>
 604:	ff 15 d6 09 20 00    	call   QWORD PTR [rip+0x2009d6]        # 200fe0 <__libc_start_main@GLIBC_2.2.5>
 60a:	f4                   	hlt    
 60b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000000610 <deregister_tm_clones>:
 610:	48 8d 3d f9 09 20 00 	lea    rdi,[rip+0x2009f9]        # 201010 <__TMC_END__>
 617:	55                   	push   rbp
 618:	48 8d 05 f1 09 20 00 	lea    rax,[rip+0x2009f1]        # 201010 <__TMC_END__>
 61f:	48 39 f8             	cmp    rax,rdi
 622:	48 89 e5             	mov    rbp,rsp
 625:	74 19                	je     640 <deregister_tm_clones+0x30>
 627:	48 8b 05 ba 09 20 00 	mov    rax,QWORD PTR [rip+0x2009ba]        # 200fe8 <_ITM_deregisterTMCloneTable>
 62e:	48 85 c0             	test   rax,rax
 631:	74 0d                	je     640 <deregister_tm_clones+0x30>
 633:	5d                   	pop    rbp
 634:	ff e0                	jmp    rax
 636:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 63d:	00 00 00 
 640:	5d                   	pop    rbp
 641:	c3                   	ret    
 642:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
 646:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 64d:	00 00 00 

0000000000000650 <register_tm_clones>:
 650:	48 8d 3d b9 09 20 00 	lea    rdi,[rip+0x2009b9]        # 201010 <__TMC_END__>
 657:	48 8d 35 b2 09 20 00 	lea    rsi,[rip+0x2009b2]        # 201010 <__TMC_END__>
 65e:	55                   	push   rbp
 65f:	48 29 fe             	sub    rsi,rdi
 662:	48 89 e5             	mov    rbp,rsp
 665:	48 c1 fe 03          	sar    rsi,0x3
 669:	48 89 f0             	mov    rax,rsi
 66c:	48 c1 e8 3f          	shr    rax,0x3f
 670:	48 01 c6             	add    rsi,rax
 673:	48 d1 fe             	sar    rsi,1
 676:	74 18                	je     690 <register_tm_clones+0x40>
 678:	48 8b 05 71 09 20 00 	mov    rax,QWORD PTR [rip+0x200971]        # 200ff0 <_ITM_registerTMCloneTable>
 67f:	48 85 c0             	test   rax,rax
 682:	74 0c                	je     690 <register_tm_clones+0x40>
 684:	5d                   	pop    rbp
 685:	ff e0                	jmp    rax
 687:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
 68e:	00 00 
 690:	5d                   	pop    rbp
 691:	c3                   	ret    
 692:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
 696:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 69d:	00 00 00 

00000000000006a0 <__do_global_dtors_aux>:
 6a0:	80 3d 69 09 20 00 00 	cmp    BYTE PTR [rip+0x200969],0x0        # 201010 <__TMC_END__>
 6a7:	75 2f                	jne    6d8 <__do_global_dtors_aux+0x38>
 6a9:	48 83 3d 47 09 20 00 	cmp    QWORD PTR [rip+0x200947],0x0        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 6b0:	00 
 6b1:	55                   	push   rbp
 6b2:	48 89 e5             	mov    rbp,rsp
 6b5:	74 0c                	je     6c3 <__do_global_dtors_aux+0x23>
 6b7:	48 8b 3d 4a 09 20 00 	mov    rdi,QWORD PTR [rip+0x20094a]        # 201008 <__dso_handle>
 6be:	e8 0d ff ff ff       	call   5d0 <__cxa_finalize@plt>
 6c3:	e8 48 ff ff ff       	call   610 <deregister_tm_clones>
 6c8:	c6 05 41 09 20 00 01 	mov    BYTE PTR [rip+0x200941],0x1        # 201010 <__TMC_END__>
 6cf:	5d                   	pop    rbp
 6d0:	c3                   	ret    
 6d1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
 6d8:	f3 c3                	repz ret 
 6da:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000000006e0 <frame_dummy>:
 6e0:	55                   	push   rbp
 6e1:	48 89 e5             	mov    rbp,rsp
 6e4:	5d                   	pop    rbp
 6e5:	e9 66 ff ff ff       	jmp    650 <register_tm_clones>

00000000000006ea <__function_module_MOD_add_function>:

      implicit none

contains

      function add_function(f_a, f_b) result (f_c)
 6ea:	55                   	push   rbp
 6eb:	48 89 e5             	mov    rbp,rsp
 6ee:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
 6f2:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
              integer   :: f_a, f_b, f_c

              f_c = f_a + f_b
 6f6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
 6fa:	8b 10                	mov    edx,DWORD PTR [rax]
 6fc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
 700:	8b 00                	mov    eax,DWORD PTR [rax]
 702:	01 d0                	add    eax,edx
 704:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax

      end function add_function
 707:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
 70a:	5d                   	pop    rbp
 70b:	c3                   	ret    

000000000000070c <MAIN__>:

end module function_module

program use_functions
 70c:	55                   	push   rbp
 70d:	48 89 e5             	mov    rbp,rsp
 710:	48 83 ec 10          	sub    rsp,0x10
      use function_module
      implicit none

      integer           :: a, b, c

      a = 2
 714:	c7 45 f8 02 00 00 00 	mov    DWORD PTR [rbp-0x8],0x2

      b = 3
 71b:	c7 45 f4 03 00 00 00 	mov    DWORD PTR [rbp-0xc],0x3

      c = add_function(a, b)
 722:	48 8d 55 f4          	lea    rdx,[rbp-0xc]
 726:	48 8d 45 f8          	lea    rax,[rbp-0x8]
 72a:	48 89 d6             	mov    rsi,rdx
 72d:	48 89 c7             	mov    rdi,rax
 730:	e8 b5 ff ff ff       	call   6ea <__function_module_MOD_add_function>
 735:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax

end program use_functions
 738:	90                   	nop
 739:	c9                   	leave  
 73a:	c3                   	ret    

000000000000073b <main>:
      use function_module
 73b:	55                   	push   rbp
 73c:	48 89 e5             	mov    rbp,rsp
 73f:	48 83 ec 10          	sub    rsp,0x10
 743:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
 746:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
 74a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
 74e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
 751:	48 89 d6             	mov    rsi,rdx
 754:	89 c7                	mov    edi,eax
 756:	e8 55 fe ff ff       	call   5b0 <_gfortran_set_args@plt>
 75b:	48 8d 35 ae 00 00 00 	lea    rsi,[rip+0xae]        # 810 <options.0.3510>
 762:	bf 07 00 00 00       	mov    edi,0x7
 767:	e8 54 fe ff ff       	call   5c0 <_gfortran_set_options@plt>
 76c:	e8 9b ff ff ff       	call   70c <MAIN__>
 771:	b8 00 00 00 00       	mov    eax,0x0
 776:	c9                   	leave  
 777:	c3                   	ret    
 778:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
 77f:	00 

0000000000000780 <__libc_csu_init>:
 780:	41 57                	push   r15
 782:	41 56                	push   r14
 784:	49 89 d7             	mov    r15,rdx
 787:	41 55                	push   r13
 789:	41 54                	push   r12
 78b:	4c 8d 25 0e 06 20 00 	lea    r12,[rip+0x20060e]        # 200da0 <__frame_dummy_init_array_entry>
 792:	55                   	push   rbp
 793:	48 8d 2d 0e 06 20 00 	lea    rbp,[rip+0x20060e]        # 200da8 <__init_array_end>
 79a:	53                   	push   rbx
 79b:	41 89 fd             	mov    r13d,edi
 79e:	49 89 f6             	mov    r14,rsi
 7a1:	4c 29 e5             	sub    rbp,r12
 7a4:	48 83 ec 08          	sub    rsp,0x8
 7a8:	48 c1 fd 03          	sar    rbp,0x3
 7ac:	e8 cf fd ff ff       	call   580 <_init>
 7b1:	48 85 ed             	test   rbp,rbp
 7b4:	74 20                	je     7d6 <__libc_csu_init+0x56>
 7b6:	31 db                	xor    ebx,ebx
 7b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
 7bf:	00 
 7c0:	4c 89 fa             	mov    rdx,r15
 7c3:	4c 89 f6             	mov    rsi,r14
 7c6:	44 89 ef             	mov    edi,r13d
 7c9:	41 ff 14 dc          	call   QWORD PTR [r12+rbx*8]
 7cd:	48 83 c3 01          	add    rbx,0x1
 7d1:	48 39 dd             	cmp    rbp,rbx
 7d4:	75 ea                	jne    7c0 <__libc_csu_init+0x40>
 7d6:	48 83 c4 08          	add    rsp,0x8
 7da:	5b                   	pop    rbx
 7db:	5d                   	pop    rbp
 7dc:	41 5c                	pop    r12
 7de:	41 5d                	pop    r13
 7e0:	41 5e                	pop    r14
 7e2:	41 5f                	pop    r15
 7e4:	c3                   	ret    
 7e5:	90                   	nop
 7e6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 7ed:	00 00 00 

00000000000007f0 <__libc_csu_fini>:
 7f0:	f3 c3                	repz ret 

Disassembly of section .fini:

00000000000007f4 <_fini>:
 7f4:	48 83 ec 08          	sub    rsp,0x8
 7f8:	48 83 c4 08          	add    rsp,0x8
 7fc:	c3                   	ret    

Disassembly of section .rodata:

0000000000000800 <_IO_stdin_used>:
 800:	01 00                	add    DWORD PTR [rax],eax
 802:	02 00                	add    al,BYTE PTR [rax]
	...

0000000000000810 <options.0.3510>:
 810:	44 00 00             	add    BYTE PTR [rax],r8b
 813:	00 ff                	add    bh,bh
 815:	03 00                	add    eax,DWORD PTR [rax]
 817:	00 00                	add    BYTE PTR [rax],al
 819:	00 00                	add    BYTE PTR [rax],al
 81b:	00 01                	add    BYTE PTR [rcx],al
 81d:	00 00                	add    BYTE PTR [rax],al
 81f:	00 01                	add    BYTE PTR [rcx],al
 821:	00 00                	add    BYTE PTR [rax],al
 823:	00 00                	add    BYTE PTR [rax],al
 825:	00 00                	add    BYTE PTR [rax],al
 827:	00 1f                	add    BYTE PTR [rdi],bl
 829:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .eh_frame_hdr:

000000000000082c <__GNU_EH_FRAME_HDR>:
 82c:	01 1b                	add    DWORD PTR [rbx],ebx
 82e:	03 3b                	add    edi,DWORD PTR [rbx]
 830:	48 00 00             	rex.W add BYTE PTR [rax],al
 833:	00 08                	add    BYTE PTR [rax],cl
 835:	00 00                	add    BYTE PTR [rax],al
 837:	00 74 fd ff          	add    BYTE PTR [rbp+rdi*8-0x1],dh
 83b:	ff 94 00 00 00 a4 fd 	call   QWORD PTR [rax+rax*1-0x25c0000]
 842:	ff                   	(bad)  
 843:	ff                   	(bad)  
 844:	bc 00 00 00 b4       	mov    esp,0xb4000000
 849:	fd                   	std    
 84a:	ff                   	(bad)  
 84b:	ff 64 00 00          	jmp    QWORD PTR [rax+rax*1+0x0]
 84f:	00 be fe ff ff d4    	add    BYTE PTR [rsi-0x2b000002],bh
 855:	00 00                	add    BYTE PTR [rax],al
 857:	00 e0                	add    al,ah
 859:	fe                   	(bad)  
 85a:	ff                   	(bad)  
 85b:	ff f4                	push   rsp
 85d:	00 00                	add    BYTE PTR [rax],al
 85f:	00 0f                	add    BYTE PTR [rdi],cl
 861:	ff                   	(bad)  
 862:	ff                   	(bad)  
 863:	ff 14 01             	call   QWORD PTR [rcx+rax*1]
 866:	00 00                	add    BYTE PTR [rax],al
 868:	54                   	push   rsp
 869:	ff                   	(bad)  
 86a:	ff                   	(bad)  
 86b:	ff 34 01             	push   QWORD PTR [rcx+rax*1]
 86e:	00 00                	add    BYTE PTR [rax],al
 870:	c4                   	(bad)  
 871:	ff                   	(bad)  
 872:	ff                   	(bad)  
 873:	ff                   	(bad)  
 874:	7c 01                	jl     877 <__GNU_EH_FRAME_HDR+0x4b>
	...

Disassembly of section .eh_frame:

0000000000000878 <__FRAME_END__-0x144>:
 878:	14 00                	adc    al,0x0
 87a:	00 00                	add    BYTE PTR [rax],al
 87c:	00 00                	add    BYTE PTR [rax],al
 87e:	00 00                	add    BYTE PTR [rax],al
 880:	01 7a 52             	add    DWORD PTR [rdx+0x52],edi
 883:	00 01                	add    BYTE PTR [rcx],al
 885:	78 10                	js     897 <__GNU_EH_FRAME_HDR+0x6b>
 887:	01 1b                	add    DWORD PTR [rbx],ebx
 889:	0c 07                	or     al,0x7
 88b:	08 90 01 07 10 14    	or     BYTE PTR [rax+0x14100701],dl
 891:	00 00                	add    BYTE PTR [rax],al
 893:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
 896:	00 00                	add    BYTE PTR [rax],al
 898:	48 fd                	rex.W std 
 89a:	ff                   	(bad)  
 89b:	ff 2b                	jmp    FWORD PTR [rbx]
	...
 8a5:	00 00                	add    BYTE PTR [rax],al
 8a7:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
 8aa:	00 00                	add    BYTE PTR [rax],al
 8ac:	00 00                	add    BYTE PTR [rax],al
 8ae:	00 00                	add    BYTE PTR [rax],al
 8b0:	01 7a 52             	add    DWORD PTR [rdx+0x52],edi
 8b3:	00 01                	add    BYTE PTR [rcx],al
 8b5:	78 10                	js     8c7 <__GNU_EH_FRAME_HDR+0x9b>
 8b7:	01 1b                	add    DWORD PTR [rbx],ebx
 8b9:	0c 07                	or     al,0x7
 8bb:	08 90 01 00 00 24    	or     BYTE PTR [rax+0x24000001],dl
 8c1:	00 00                	add    BYTE PTR [rax],al
 8c3:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
 8c6:	00 00                	add    BYTE PTR [rax],al
 8c8:	d8 fc                	fdivr  st,st(4)
 8ca:	ff                   	(bad)  
 8cb:	ff 30                	push   QWORD PTR [rax]
 8cd:	00 00                	add    BYTE PTR [rax],al
 8cf:	00 00                	add    BYTE PTR [rax],al
 8d1:	0e                   	(bad)  
 8d2:	10 46 0e             	adc    BYTE PTR [rsi+0xe],al
 8d5:	18 4a 0f             	sbb    BYTE PTR [rdx+0xf],cl
 8d8:	0b 77 08             	or     esi,DWORD PTR [rdi+0x8]
 8db:	80 00 3f             	add    BYTE PTR [rax],0x3f
 8de:	1a 3b                	sbb    bh,BYTE PTR [rbx]
 8e0:	2a 33                	sub    dh,BYTE PTR [rbx]
 8e2:	24 22                	and    al,0x22
 8e4:	00 00                	add    BYTE PTR [rax],al
 8e6:	00 00                	add    BYTE PTR [rax],al
 8e8:	14 00                	adc    al,0x0
 8ea:	00 00                	add    BYTE PTR [rax],al
 8ec:	44 00 00             	add    BYTE PTR [rax],r8b
 8ef:	00 e0                	add    al,ah
 8f1:	fc                   	cld    
 8f2:	ff                   	(bad)  
 8f3:	ff 08                	dec    DWORD PTR [rax]
	...
 8fd:	00 00                	add    BYTE PTR [rax],al
 8ff:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
 902:	00 00                	add    BYTE PTR [rax],al
 904:	5c                   	pop    rsp
 905:	00 00                	add    BYTE PTR [rax],al
 907:	00 e2                	add    dl,ah
 909:	fd                   	std    
 90a:	ff                   	(bad)  
 90b:	ff 22                	jmp    QWORD PTR [rdx]
 90d:	00 00                	add    BYTE PTR [rax],al
 90f:	00 00                	add    BYTE PTR [rax],al
 911:	41 0e                	rex.B (bad) 
 913:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 919:	5d                   	pop    rbp
 91a:	0c 07                	or     al,0x7
 91c:	08 00                	or     BYTE PTR [rax],al
 91e:	00 00                	add    BYTE PTR [rax],al
 920:	1c 00                	sbb    al,0x0
 922:	00 00                	add    BYTE PTR [rax],al
 924:	7c 00                	jl     926 <__GNU_EH_FRAME_HDR+0xfa>
 926:	00 00                	add    BYTE PTR [rax],al
 928:	e4 fd                	in     al,0xfd
 92a:	ff                   	(bad)  
 92b:	ff 2f                	jmp    FWORD PTR [rdi]
 92d:	00 00                	add    BYTE PTR [rax],al
 92f:	00 00                	add    BYTE PTR [rax],al
 931:	41 0e                	rex.B (bad) 
 933:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 939:	6a 0c                	push   0xc
 93b:	07                   	(bad)  
 93c:	08 00                	or     BYTE PTR [rax],al
 93e:	00 00                	add    BYTE PTR [rax],al
 940:	1c 00                	sbb    al,0x0
 942:	00 00                	add    BYTE PTR [rax],al
 944:	9c                   	pushf  
 945:	00 00                	add    BYTE PTR [rax],al
 947:	00 f3                	add    bl,dh
 949:	fd                   	std    
 94a:	ff                   	(bad)  
 94b:	ff                   	(bad)  
 94c:	3d 00 00 00 00       	cmp    eax,0x0
 951:	41 0e                	rex.B (bad) 
 953:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 959:	78 0c                	js     967 <__GNU_EH_FRAME_HDR+0x13b>
 95b:	07                   	(bad)  
 95c:	08 00                	or     BYTE PTR [rax],al
 95e:	00 00                	add    BYTE PTR [rax],al
 960:	44 00 00             	add    BYTE PTR [rax],r8b
 963:	00 bc 00 00 00 18 fe 	add    BYTE PTR [rax+rax*1-0x1e80000],bh
 96a:	ff                   	(bad)  
 96b:	ff 65 00             	jmp    QWORD PTR [rbp+0x0]
 96e:	00 00                	add    BYTE PTR [rax],al
 970:	00 42 0e             	add    BYTE PTR [rdx+0xe],al
 973:	10 8f 02 42 0e 18    	adc    BYTE PTR [rdi+0x180e4202],cl
 979:	8e 03                	mov    es,WORD PTR [rbx]
 97b:	45 0e                	rex.RB (bad) 
 97d:	20 8d 04 42 0e 28    	and    BYTE PTR [rbp+0x280e4204],cl
 983:	8c 05 48 0e 30 86    	mov    WORD PTR [rip+0xffffffff86300e48],es        # ffffffff863017d1 <_end+0xffffffff861007b9>
 989:	06                   	(bad)  
 98a:	48 0e                	rex.W (bad) 
 98c:	38 83 07 4d 0e 40    	cmp    BYTE PTR [rbx+0x400e4d07],al
 992:	72 0e                	jb     9a2 <__GNU_EH_FRAME_HDR+0x176>
 994:	38 41 0e             	cmp    BYTE PTR [rcx+0xe],al
 997:	30 41 0e             	xor    BYTE PTR [rcx+0xe],al
 99a:	28 42 0e             	sub    BYTE PTR [rdx+0xe],al
 99d:	20 42 0e             	and    BYTE PTR [rdx+0xe],al
 9a0:	18 42 0e             	sbb    BYTE PTR [rdx+0xe],al
 9a3:	10 42 0e             	adc    BYTE PTR [rdx+0xe],al
 9a6:	08 00                	or     BYTE PTR [rax],al
 9a8:	10 00                	adc    BYTE PTR [rax],al
 9aa:	00 00                	add    BYTE PTR [rax],al
 9ac:	04 01                	add    al,0x1
 9ae:	00 00                	add    BYTE PTR [rax],al
 9b0:	40 fe                	rex (bad) 
 9b2:	ff                   	(bad)  
 9b3:	ff 02                	inc    DWORD PTR [rdx]
 9b5:	00 00                	add    BYTE PTR [rax],al
 9b7:	00 00                	add    BYTE PTR [rax],al
 9b9:	00 00                	add    BYTE PTR [rax],al
	...

00000000000009bc <__FRAME_END__>:
 9bc:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .init_array:

0000000000200da0 <__frame_dummy_init_array_entry>:
  200da0:	e0 06                	loopne 200da8 <__init_array_end>
  200da2:	00 00                	add    BYTE PTR [rax],al
  200da4:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .fini_array:

0000000000200da8 <__do_global_dtors_aux_fini_array_entry>:
  200da8:	a0                   	.byte 0xa0
  200da9:	06                   	(bad)  
  200daa:	00 00                	add    BYTE PTR [rax],al
  200dac:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .dynamic:

0000000000200db0 <_DYNAMIC>:
  200db0:	01 00                	add    DWORD PTR [rax],eax
  200db2:	00 00                	add    BYTE PTR [rax],al
  200db4:	00 00                	add    BYTE PTR [rax],al
  200db6:	00 00                	add    BYTE PTR [rax],al
  200db8:	01 00                	add    DWORD PTR [rax],eax
  200dba:	00 00                	add    BYTE PTR [rax],al
  200dbc:	00 00                	add    BYTE PTR [rax],al
  200dbe:	00 00                	add    BYTE PTR [rax],al
  200dc0:	01 00                	add    DWORD PTR [rax],eax
  200dc2:	00 00                	add    BYTE PTR [rax],al
  200dc4:	00 00                	add    BYTE PTR [rax],al
  200dc6:	00 00                	add    BYTE PTR [rax],al
  200dc8:	80 00 00             	add    BYTE PTR [rax],0x0
  200dcb:	00 00                	add    BYTE PTR [rax],al
  200dcd:	00 00                	add    BYTE PTR [rax],al
  200dcf:	00 0c 00             	add    BYTE PTR [rax+rax*1],cl
  200dd2:	00 00                	add    BYTE PTR [rax],al
  200dd4:	00 00                	add    BYTE PTR [rax],al
  200dd6:	00 00                	add    BYTE PTR [rax],al
  200dd8:	80 05 00 00 00 00 00 	add    BYTE PTR [rip+0x0],0x0        # 200ddf <_DYNAMIC+0x2f>
  200ddf:	00 0d 00 00 00 00    	add    BYTE PTR [rip+0x0],cl        # 200de5 <_DYNAMIC+0x35>
  200de5:	00 00                	add    BYTE PTR [rax],al
  200de7:	00 f4                	add    ah,dh
  200de9:	07                   	(bad)  
  200dea:	00 00                	add    BYTE PTR [rax],al
  200dec:	00 00                	add    BYTE PTR [rax],al
  200dee:	00 00                	add    BYTE PTR [rax],al
  200df0:	19 00                	sbb    DWORD PTR [rax],eax
  200df2:	00 00                	add    BYTE PTR [rax],al
  200df4:	00 00                	add    BYTE PTR [rax],al
  200df6:	00 00                	add    BYTE PTR [rax],al
  200df8:	a0 0d 20 00 00 00 00 	movabs al,ds:0x1b0000000000200d
  200dff:	00 1b 
  200e01:	00 00                	add    BYTE PTR [rax],al
  200e03:	00 00                	add    BYTE PTR [rax],al
  200e05:	00 00                	add    BYTE PTR [rax],al
  200e07:	00 08                	add    BYTE PTR [rax],cl
  200e09:	00 00                	add    BYTE PTR [rax],al
  200e0b:	00 00                	add    BYTE PTR [rax],al
  200e0d:	00 00                	add    BYTE PTR [rax],al
  200e0f:	00 1a                	add    BYTE PTR [rdx],bl
  200e11:	00 00                	add    BYTE PTR [rax],al
  200e13:	00 00                	add    BYTE PTR [rax],al
  200e15:	00 00                	add    BYTE PTR [rax],al
  200e17:	00 a8 0d 20 00 00    	add    BYTE PTR [rax+0x200d],ch
  200e1d:	00 00                	add    BYTE PTR [rax],al
  200e1f:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  200e22:	00 00                	add    BYTE PTR [rax],al
  200e24:	00 00                	add    BYTE PTR [rax],al
  200e26:	00 00                	add    BYTE PTR [rax],al
  200e28:	08 00                	or     BYTE PTR [rax],al
  200e2a:	00 00                	add    BYTE PTR [rax],al
  200e2c:	00 00                	add    BYTE PTR [rax],al
  200e2e:	00 00                	add    BYTE PTR [rax],al
  200e30:	f5                   	cmc    
  200e31:	fe                   	(bad)  
  200e32:	ff 6f 00             	jmp    FWORD PTR [rdi+0x0]
  200e35:	00 00                	add    BYTE PTR [rax],al
  200e37:	00 98 02 00 00 00    	add    BYTE PTR [rax+0x2],bl
  200e3d:	00 00                	add    BYTE PTR [rax],al
  200e3f:	00 05 00 00 00 00    	add    BYTE PTR [rip+0x0],al        # 200e45 <_DYNAMIC+0x95>
  200e45:	00 00                	add    BYTE PTR [rax],al
  200e47:	00 78 03             	add    BYTE PTR [rax+0x3],bh
  200e4a:	00 00                	add    BYTE PTR [rax],al
  200e4c:	00 00                	add    BYTE PTR [rax],al
  200e4e:	00 00                	add    BYTE PTR [rax],al
  200e50:	06                   	(bad)  
  200e51:	00 00                	add    BYTE PTR [rax],al
  200e53:	00 00                	add    BYTE PTR [rax],al
  200e55:	00 00                	add    BYTE PTR [rax],al
  200e57:	00 b8 02 00 00 00    	add    BYTE PTR [rax+0x2],bh
  200e5d:	00 00                	add    BYTE PTR [rax],al
  200e5f:	00 0a                	add    BYTE PTR [rdx],cl
  200e61:	00 00                	add    BYTE PTR [rax],al
  200e63:	00 00                	add    BYTE PTR [rax],al
  200e65:	00 00                	add    BYTE PTR [rax],al
  200e67:	00 c2                	add    dl,al
  200e69:	00 00                	add    BYTE PTR [rax],al
  200e6b:	00 00                	add    BYTE PTR [rax],al
  200e6d:	00 00                	add    BYTE PTR [rax],al
  200e6f:	00 0b                	add    BYTE PTR [rbx],cl
  200e71:	00 00                	add    BYTE PTR [rax],al
  200e73:	00 00                	add    BYTE PTR [rax],al
  200e75:	00 00                	add    BYTE PTR [rax],al
  200e77:	00 18                	add    BYTE PTR [rax],bl
  200e79:	00 00                	add    BYTE PTR [rax],al
  200e7b:	00 00                	add    BYTE PTR [rax],al
  200e7d:	00 00                	add    BYTE PTR [rax],al
  200e7f:	00 15 00 00 00 00    	add    BYTE PTR [rip+0x0],dl        # 200e85 <_DYNAMIC+0xd5>
	...
  200e8d:	00 00                	add    BYTE PTR [rax],al
  200e8f:	00 03                	add    BYTE PTR [rbx],al
  200e91:	00 00                	add    BYTE PTR [rax],al
  200e93:	00 00                	add    BYTE PTR [rax],al
  200e95:	00 00                	add    BYTE PTR [rax],al
  200e97:	00 b0 0f 20 00 00    	add    BYTE PTR [rax+0x200f],dh
  200e9d:	00 00                	add    BYTE PTR [rax],al
  200e9f:	00 02                	add    BYTE PTR [rdx],al
  200ea1:	00 00                	add    BYTE PTR [rax],al
  200ea3:	00 00                	add    BYTE PTR [rax],al
  200ea5:	00 00                	add    BYTE PTR [rax],al
  200ea7:	00 30                	add    BYTE PTR [rax],dh
  200ea9:	00 00                	add    BYTE PTR [rax],al
  200eab:	00 00                	add    BYTE PTR [rax],al
  200ead:	00 00                	add    BYTE PTR [rax],al
  200eaf:	00 14 00             	add    BYTE PTR [rax+rax*1],dl
  200eb2:	00 00                	add    BYTE PTR [rax],al
  200eb4:	00 00                	add    BYTE PTR [rax],al
  200eb6:	00 00                	add    BYTE PTR [rax],al
  200eb8:	07                   	(bad)  
  200eb9:	00 00                	add    BYTE PTR [rax],al
  200ebb:	00 00                	add    BYTE PTR [rax],al
  200ebd:	00 00                	add    BYTE PTR [rax],al
  200ebf:	00 17                	add    BYTE PTR [rdi],dl
  200ec1:	00 00                	add    BYTE PTR [rax],al
  200ec3:	00 00                	add    BYTE PTR [rax],al
  200ec5:	00 00                	add    BYTE PTR [rax],al
  200ec7:	00 50 05             	add    BYTE PTR [rax+0x5],dl
  200eca:	00 00                	add    BYTE PTR [rax],al
  200ecc:	00 00                	add    BYTE PTR [rax],al
  200ece:	00 00                	add    BYTE PTR [rax],al
  200ed0:	07                   	(bad)  
  200ed1:	00 00                	add    BYTE PTR [rax],al
  200ed3:	00 00                	add    BYTE PTR [rax],al
  200ed5:	00 00                	add    BYTE PTR [rax],al
  200ed7:	00 90 04 00 00 00    	add    BYTE PTR [rax+0x4],dl
  200edd:	00 00                	add    BYTE PTR [rax],al
  200edf:	00 08                	add    BYTE PTR [rax],cl
  200ee1:	00 00                	add    BYTE PTR [rax],al
  200ee3:	00 00                	add    BYTE PTR [rax],al
  200ee5:	00 00                	add    BYTE PTR [rax],al
  200ee7:	00 c0                	add    al,al
  200ee9:	00 00                	add    BYTE PTR [rax],al
  200eeb:	00 00                	add    BYTE PTR [rax],al
  200eed:	00 00                	add    BYTE PTR [rax],al
  200eef:	00 09                	add    BYTE PTR [rcx],cl
  200ef1:	00 00                	add    BYTE PTR [rax],al
  200ef3:	00 00                	add    BYTE PTR [rax],al
  200ef5:	00 00                	add    BYTE PTR [rax],al
  200ef7:	00 18                	add    BYTE PTR [rax],bl
  200ef9:	00 00                	add    BYTE PTR [rax],al
  200efb:	00 00                	add    BYTE PTR [rax],al
  200efd:	00 00                	add    BYTE PTR [rax],al
  200eff:	00 1e                	add    BYTE PTR [rsi],bl
  200f01:	00 00                	add    BYTE PTR [rax],al
  200f03:	00 00                	add    BYTE PTR [rax],al
  200f05:	00 00                	add    BYTE PTR [rax],al
  200f07:	00 08                	add    BYTE PTR [rax],cl
  200f09:	00 00                	add    BYTE PTR [rax],al
  200f0b:	00 00                	add    BYTE PTR [rax],al
  200f0d:	00 00                	add    BYTE PTR [rax],al
  200f0f:	00 fb                	add    bl,bh
  200f11:	ff                   	(bad)  
  200f12:	ff 6f 00             	jmp    FWORD PTR [rdi+0x0]
  200f15:	00 00                	add    BYTE PTR [rax],al
  200f17:	00 01                	add    BYTE PTR [rcx],al
  200f19:	00 00                	add    BYTE PTR [rax],al
  200f1b:	08 00                	or     BYTE PTR [rax],al
  200f1d:	00 00                	add    BYTE PTR [rax],al
  200f1f:	00 fe                	add    dh,bh
  200f21:	ff                   	(bad)  
  200f22:	ff 6f 00             	jmp    FWORD PTR [rdi+0x0]
  200f25:	00 00                	add    BYTE PTR [rax],al
  200f27:	00 50 04             	add    BYTE PTR [rax+0x4],dl
  200f2a:	00 00                	add    BYTE PTR [rax],al
  200f2c:	00 00                	add    BYTE PTR [rax],al
  200f2e:	00 00                	add    BYTE PTR [rax],al
  200f30:	ff                   	(bad)  
  200f31:	ff                   	(bad)  
  200f32:	ff 6f 00             	jmp    FWORD PTR [rdi+0x0]
  200f35:	00 00                	add    BYTE PTR [rax],al
  200f37:	00 02                	add    BYTE PTR [rdx],al
  200f39:	00 00                	add    BYTE PTR [rax],al
  200f3b:	00 00                	add    BYTE PTR [rax],al
  200f3d:	00 00                	add    BYTE PTR [rax],al
  200f3f:	00 f0                	add    al,dh
  200f41:	ff                   	(bad)  
  200f42:	ff 6f 00             	jmp    FWORD PTR [rdi+0x0]
  200f45:	00 00                	add    BYTE PTR [rax],al
  200f47:	00 3a                	add    BYTE PTR [rdx],bh
  200f49:	04 00                	add    al,0x0
  200f4b:	00 00                	add    BYTE PTR [rax],al
  200f4d:	00 00                	add    BYTE PTR [rax],al
  200f4f:	00 f9                	add    cl,bh
  200f51:	ff                   	(bad)  
  200f52:	ff 6f 00             	jmp    FWORD PTR [rdi+0x0]
  200f55:	00 00                	add    BYTE PTR [rax],al
  200f57:	00 03                	add    BYTE PTR [rbx],al
	...

Disassembly of section .got:

0000000000200fb0 <_GLOBAL_OFFSET_TABLE_>:
  200fb0:	b0 0d                	mov    al,0xd
  200fb2:	20 00                	and    BYTE PTR [rax],al
	...
  200fc8:	b6 05                	mov    dh,0x5
  200fca:	00 00                	add    BYTE PTR [rax],al
  200fcc:	00 00                	add    BYTE PTR [rax],al
  200fce:	00 00                	add    BYTE PTR [rax],al
  200fd0:	c6 05 00 00 00 00 00 	mov    BYTE PTR [rip+0x0],0x0        # 200fd7 <_GLOBAL_OFFSET_TABLE_+0x27>
	...

Disassembly of section .data:

0000000000201000 <__data_start>:
	...

0000000000201008 <__dso_handle>:
  201008:	08 10                	or     BYTE PTR [rax],dl
  20100a:	20 00                	and    BYTE PTR [rax],al
  20100c:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .bss:

0000000000201010 <__bss_start>:
	...

Disassembly of section .comment:

0000000000000000 <.comment>:
   0:	47                   	rex.RXB
   1:	43                   	rex.XB
   2:	43 3a 20             	rex.XB cmp spl,BYTE PTR [r8]
   5:	28 55 62             	sub    BYTE PTR [rbp+0x62],dl
   8:	75 6e                	jne    78 <_init-0x508>
   a:	74 75                	je     81 <_init-0x4ff>
   c:	20 37                	and    BYTE PTR [rdi],dh
   e:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  11:	30 2d 32 37 75 62    	xor    BYTE PTR [rip+0x62753732],ch        # 62753749 <_end+0x62552731>
  17:	75 6e                	jne    87 <_init-0x4f9>
  19:	74 75                	je     90 <_init-0x4f0>
  1b:	31 7e 31             	xor    DWORD PTR [rsi+0x31],edi
  1e:	38 2e                	cmp    BYTE PTR [rsi],ch
  20:	30 34 29             	xor    BYTE PTR [rcx+rbp*1],dh
  23:	20 37                	and    BYTE PTR [rdi],dh
  25:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  28:	30 00                	xor    BYTE PTR [rax],al

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
   0:	2c 00                	sub    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   4:	02 00                	add    al,BYTE PTR [rax]
   6:	00 00                	add    BYTE PTR [rax],al
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 00                	or     BYTE PTR [rax],al
   c:	00 00                	add    BYTE PTR [rax],al
   e:	00 00                	add    BYTE PTR [rax],al
  10:	ea                   	(bad)  
  11:	06                   	(bad)  
  12:	00 00                	add    BYTE PTR [rax],al
  14:	00 00                	add    BYTE PTR [rax],al
  16:	00 00                	add    BYTE PTR [rax],al
  18:	8e 00                	mov    es,WORD PTR [rax]
	...

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
   0:	2b 01                	sub    eax,DWORD PTR [rcx]
   2:	00 00                	add    BYTE PTR [rax],al
   4:	04 00                	add    al,0x0
   6:	00 00                	add    BYTE PTR [rax],al
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 01                	or     BYTE PTR [rcx],al
   c:	ef                   	out    dx,eax
   d:	00 00                	add    BYTE PTR [rax],al
   f:	00 0e                	add    BYTE PTR [rsi],cl
  11:	02 22                	add    ah,BYTE PTR [rdx]
  13:	00 00                	add    BYTE PTR [rax],al
  15:	00 43 00             	add    BYTE PTR [rbx+0x0],al
  18:	00 00                	add    BYTE PTR [rax],al
  1a:	ea                   	(bad)  
  1b:	06                   	(bad)  
  1c:	00 00                	add    BYTE PTR [rax],al
  1e:	00 00                	add    BYTE PTR [rax],al
  20:	00 00                	add    BYTE PTR [rax],al
  22:	8e 00                	mov    es,WORD PTR [rax]
	...
  30:	00 00                	add    BYTE PTR [rax],al
  32:	02 e1                	add    ah,cl
  34:	00 00                	add    BYTE PTR [rax],al
  36:	00 01                	add    BYTE PTR [rcx],al
  38:	10 02                	adc    BYTE PTR [rdx],al
  3a:	0c 07                	or     al,0x7
  3c:	00 00                	add    BYTE PTR [rax],al
  3e:	00 00                	add    BYTE PTR [rax],al
  40:	00 00                	add    BYTE PTR [rax],al
  42:	2f                   	(bad)  
  43:	00 00                	add    BYTE PTR [rax],al
  45:	00 00                	add    BYTE PTR [rax],al
  47:	00 00                	add    BYTE PTR [rax],al
  49:	00 01                	add    BYTE PTR [rcx],al
  4b:	9c                   	pushf  
  4c:	7c 00                	jl     4e <_init-0x532>
  4e:	00 00                	add    BYTE PTR [rax],al
  50:	03 01                	add    eax,DWORD PTR [rcx]
  52:	12 7c 00 00          	adc    bh,BYTE PTR [rax+rax*1+0x0]
  56:	00 04 61             	add    BYTE PTR [rcx+riz*2],al
  59:	00 01                	add    BYTE PTR [rcx],al
  5b:	15 15 01 00 00       	adc    eax,0x115
  60:	02 91 68 04 62 00    	add    dl,BYTE PTR [rcx+0x620468]
  66:	01 15 15 01 00 00    	add    DWORD PTR [rip+0x115],edx        # 181 <_init-0x3ff>
  6c:	02 91 64 04 63 00    	add    dl,BYTE PTR [rcx+0x630464]
  72:	01 15 15 01 00 00    	add    DWORD PTR [rip+0x115],edx        # 18d <_init-0x3f3>
  78:	02 91 6c 00 05 33    	add    dl,BYTE PTR [rcx+0x3305006c]
  7e:	00 00                	add    BYTE PTR [rax],al
  80:	00 01                	add    BYTE PTR [rcx],al
  82:	01 d6                	add    esi,edx
  84:	00 00                	add    BYTE PTR [rax],al
  86:	00 06                	add    BYTE PTR [rsi],al
  88:	86 01                	xchg   BYTE PTR [rcx],al
  8a:	00 00                	add    BYTE PTR [rax],al
  8c:	01 07                	add    DWORD PTR [rdi],eax
  8e:	70 01                	jo     91 <_init-0x4ef>
  90:	00 00                	add    BYTE PTR [rax],al
  92:	15 01 00 00 ea       	adc    eax,0xea000001
  97:	06                   	(bad)  
  98:	00 00                	add    BYTE PTR [rax],al
  9a:	00 00                	add    BYTE PTR [rax],al
  9c:	00 00                	add    BYTE PTR [rax],al
  9e:	22 00                	and    al,BYTE PTR [rax]
  a0:	00 00                	add    BYTE PTR [rax],al
  a2:	00 00                	add    BYTE PTR [rax],al
  a4:	00 00                	add    BYTE PTR [rax],al
  a6:	01 9c 07 66 5f 61 00 	add    DWORD PTR [rdi+rax*1+0x615f66],ebx
  ad:	01 07                	add    DWORD PTR [rdi],eax
  af:	15 01 00 00 03       	adc    eax,0x3000001
  b4:	91                   	xchg   ecx,eax
  b5:	58                   	pop    rax
  b6:	06                   	(bad)  
  b7:	07                   	(bad)  
  b8:	66 5f                	pop    di
  ba:	62                   	(bad)  
  bb:	00 01                	add    BYTE PTR [rcx],al
  bd:	07                   	(bad)  
  be:	15 01 00 00 03       	adc    eax,0x3000001
  c3:	91                   	xchg   ecx,eax
  c4:	50                   	push   rax
  c5:	06                   	(bad)  
  c6:	04 66                	add    al,0x66
  c8:	5f                   	pop    rdi
  c9:	63 00                	movsxd eax,DWORD PTR [rax]
  cb:	01 07                	add    DWORD PTR [rdi],eax
  cd:	15 01 00 00 02       	adc    eax,0x2000001
  d2:	91                   	xchg   ecx,eax
  d3:	6c                   	ins    BYTE PTR es:[rdi],dx
  d4:	00 00                	add    BYTE PTR [rax],al
  d6:	08 6b 01             	or     BYTE PTR [rbx+0x1],ch
  d9:	00 00                	add    BYTE PTR [rax],al
  db:	01 12                	add    DWORD PTR [rdx],edx
  dd:	15 01 00 00 3b       	adc    eax,0x3b000001
  e2:	07                   	(bad)  
  e3:	00 00                	add    BYTE PTR [rax],al
  e5:	00 00                	add    BYTE PTR [rax],al
  e7:	00 00                	add    BYTE PTR [rax],al
  e9:	3d 00 00 00 00       	cmp    eax,0x0
  ee:	00 00                	add    BYTE PTR [rax],al
  f0:	00 01                	add    BYTE PTR [rcx],al
  f2:	9c                   	pushf  
  f3:	15 01 00 00 09       	adc    eax,0x9000001
  f8:	dc 00                	fadd   QWORD PTR [rax]
  fa:	00 00                	add    BYTE PTR [rax],al
  fc:	01 12                	add    DWORD PTR [rdx],edx
  fe:	1c 01                	sbb    al,0x1
 100:	00 00                	add    BYTE PTR [rax],al
 102:	02 91 6c 09 93 01    	add    dl,BYTE PTR [rcx+0x193096c]
 108:	00 00                	add    BYTE PTR [rax],al
 10a:	01 12                	add    DWORD PTR [rdx],edx
 10c:	21 01                	and    DWORD PTR [rcx],eax
 10e:	00 00                	add    BYTE PTR [rax],al
 110:	03 91 60 06 00 0a    	add    edx,DWORD PTR [rcx+0xa000660]
 116:	04 05                	add    al,0x5
 118:	00 00                	add    BYTE PTR [rax],al
 11a:	00 00                	add    BYTE PTR [rax],al
 11c:	0b 15 01 00 00 0c    	or     edx,DWORD PTR [rip+0xc000001]        # c000123 <_end+0xbdff10b>
 122:	08 27                	or     BYTE PTR [rdi],ah
 124:	01 00                	add    DWORD PTR [rax],eax
 126:	00 0a                	add    BYTE PTR [rdx],cl
 128:	01 08                	add    DWORD PTR [rax],ecx
 12a:	10 00                	adc    BYTE PTR [rax],al
 12c:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
   0:	01 11                	add    DWORD PTR [rcx],edx
   2:	01 25 0e 13 0b 42    	add    DWORD PTR [rip+0x420b130e],esp        # 420b1316 <_end+0x41eb02fe>
   8:	0b 03                	or     eax,DWORD PTR [rbx]
   a:	0e                   	(bad)  
   b:	1b 0e                	sbb    ecx,DWORD PTR [rsi]
   d:	11 01                	adc    DWORD PTR [rcx],eax
   f:	12 07                	adc    al,BYTE PTR [rdi]
  11:	10 17                	adc    BYTE PTR [rdi],dl
  13:	99                   	cdq    
  14:	42 17                	rex.X (bad) 
  16:	00 00                	add    BYTE PTR [rax],al
  18:	02 2e                	add    ch,BYTE PTR [rsi]
  1a:	01 03                	add    DWORD PTR [rbx],eax
  1c:	0e                   	(bad)  
  1d:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  1f:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  21:	6a 19                	push   0x19
  23:	36 0b 11             	or     edx,DWORD PTR ss:[rcx]
  26:	01 12                	add    DWORD PTR [rdx],edx
  28:	07                   	(bad)  
  29:	40 18 96 42 19 01 13 	sbb    BYTE PTR [rsi+0x13011942],dl
  30:	00 00                	add    BYTE PTR [rax],al
  32:	03 3a                	add    edi,DWORD PTR [rdx]
  34:	00 3a                	add    BYTE PTR [rdx],bh
  36:	0b 3b                	or     edi,DWORD PTR [rbx]
  38:	0b 18                	or     ebx,DWORD PTR [rax]
  3a:	13 00                	adc    eax,DWORD PTR [rax]
  3c:	00 04 34             	add    BYTE PTR [rsp+rsi*1],al
  3f:	00 03                	add    BYTE PTR [rbx],al
  41:	08 3a                	or     BYTE PTR [rdx],bh
  43:	0b 3b                	or     edi,DWORD PTR [rbx]
  45:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  48:	02 18                	add    bl,BYTE PTR [rax]
  4a:	00 00                	add    BYTE PTR [rax],al
  4c:	05 1e 01 03 0e       	add    eax,0xe03011e
  51:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  53:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  55:	01 13                	add    DWORD PTR [rbx],edx
  57:	00 00                	add    BYTE PTR [rax],al
  59:	06                   	(bad)  
  5a:	2e 01 3f             	add    DWORD PTR cs:[rdi],edi
  5d:	19 03                	sbb    DWORD PTR [rbx],eax
  5f:	0e                   	(bad)  
  60:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  62:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  64:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  65:	0e                   	(bad)  
  66:	49 13 11             	adc    rdx,QWORD PTR [r9]
  69:	01 12                	add    DWORD PTR [rdx],edx
  6b:	07                   	(bad)  
  6c:	40 18 97 42 19 00 00 	sbb    BYTE PTR [rdi+0x1942],dl
  73:	07                   	(bad)  
  74:	05 00 03 08 3a       	add    eax,0x3a080300
  79:	0b 3b                	or     edi,DWORD PTR [rbx]
  7b:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  7e:	02 18                	add    bl,BYTE PTR [rax]
  80:	00 00                	add    BYTE PTR [rax],al
  82:	08 2e                	or     BYTE PTR [rsi],ch
  84:	01 3f                	add    DWORD PTR [rdi],edi
  86:	19 03                	sbb    DWORD PTR [rbx],eax
  88:	0e                   	(bad)  
  89:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  8b:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  8d:	49 13 11             	adc    rdx,QWORD PTR [r9]
  90:	01 12                	add    DWORD PTR [rdx],edx
  92:	07                   	(bad)  
  93:	40 18 96 42 19 01 13 	sbb    BYTE PTR [rsi+0x13011942],dl
  9a:	00 00                	add    BYTE PTR [rax],al
  9c:	09 05 00 03 0e 3a    	or     DWORD PTR [rip+0x3a0e0300],eax        # 3a0e03a2 <_end+0x39edf38a>
  a2:	0b 3b                	or     edi,DWORD PTR [rbx]
  a4:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  a7:	02 18                	add    bl,BYTE PTR [rax]
  a9:	00 00                	add    BYTE PTR [rax],al
  ab:	0a 24 00             	or     ah,BYTE PTR [rax+rax*1]
  ae:	0b 0b                	or     ecx,DWORD PTR [rbx]
  b0:	3e 0b 03             	or     eax,DWORD PTR ds:[rbx]
  b3:	0e                   	(bad)  
  b4:	00 00                	add    BYTE PTR [rax],al
  b6:	0b 26                	or     esp,DWORD PTR [rsi]
  b8:	00 49 13             	add    BYTE PTR [rcx+0x13],cl
  bb:	00 00                	add    BYTE PTR [rax],al
  bd:	0c 0f                	or     al,0xf
  bf:	00 0b                	add    BYTE PTR [rbx],cl
  c1:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  c4:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
   0:	4b 00 00             	rex.WXB add BYTE PTR [r8],al
   3:	00 02                	add    BYTE PTR [rdx],al
   5:	00 27                	add    BYTE PTR [rdi],ah
   7:	00 00                	add    BYTE PTR [rax],al
   9:	00 01                	add    BYTE PTR [rcx],al
   b:	01 fb                	add    ebx,edi
   d:	0e                   	(bad)  
   e:	0d 00 01 01 01       	or     eax,0x1010100
  13:	01 00                	add    DWORD PTR [rax],eax
  15:	00 00                	add    BYTE PTR [rax],al
  17:	01 00                	add    DWORD PTR [rax],eax
  19:	00 01                	add    BYTE PTR [rcx],al
  1b:	00 61 64             	add    BYTE PTR [rcx+0x64],ah
  1e:	64 5f                	fs pop rdi
  20:	66 75 6e             	data16 jne 91 <_init-0x4ef>
  23:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  27:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  28:	2e 66 30 38          	data16 xor BYTE PTR cs:[rax],bh
  2c:	00 00                	add    BYTE PTR [rax],al
  2e:	00 00                	add    BYTE PTR [rax],al
  30:	00 00                	add    BYTE PTR [rax],al
  32:	09 02                	or     DWORD PTR [rdx],eax
  34:	ea                   	(bad)  
  35:	06                   	(bad)  
  36:	00 00                	add    BYTE PTR [rax],al
  38:	00 00                	add    BYTE PTR [rax],al
  3a:	00 00                	add    BYTE PTR [rax],al
  3c:	18 bd 08 14 5c 89    	sbb    BYTE PTR [rbp-0x76a3ebf8],bh
  42:	76 76                	jbe    ba <_init-0x4c6>
  44:	08 5a 03             	or     BYTE PTR [rdx+0x3],bl
  47:	75 3c                	jne    85 <_init-0x4fb>
  49:	e4 02                	in     al,0x2
  4b:	2e 00 01             	add    BYTE PTR cs:[rcx],al
  4e:	01                   	.byte 0x1

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
   0:	69 6e 74 65 67 65 72 	imul   ebp,DWORD PTR [rsi+0x74],0x72656765
   7:	28 6b 69             	sub    BYTE PTR [rbx+0x69],ch
   a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
   b:	64 3d 34 29 00 63    	fs cmp eax,0x63002934
  11:	68 61 72 61 63       	push   0x63617261
  16:	74 65                	je     7d <_init-0x503>
  18:	72 28                	jb     42 <_init-0x53e>
  1a:	6b 69 6e 64          	imul   ebp,DWORD PTR [rcx+0x6e],0x64
  1e:	3d 31 29 00 61       	cmp    eax,0x61002931
  23:	64 64 5f             	fs fs pop rdi
  26:	66 75 6e             	data16 jne 97 <_init-0x4e9>
  29:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  2d:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  2e:	2e 66 30 38          	data16 xor BYTE PTR cs:[rax],bh
  32:	00 66 75             	add    BYTE PTR [rsi+0x75],ah
  35:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  36:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  3a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  3b:	5f                   	pop    rdi
  3c:	6d                   	ins    DWORD PTR es:[rdi],dx
  3d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  3e:	64 75 6c             	fs jne ad <_init-0x4d3>
  41:	65 00 2f             	add    BYTE PTR gs:[rdi],ch
  44:	68 6f 6d 65 2f       	push   0x2f656d6f
  49:	75 62                	jne    ad <_init-0x4d3>
  4b:	75 6e                	jne    bb <_init-0x4c5>
  4d:	74 75                	je     c4 <_init-0x4bc>
  4f:	2f                   	(bad)  
  50:	45 6e                	rex.RB outs dx,BYTE PTR ds:[rsi]
  52:	67 69 6e 65 65 72 69 	imul   ebp,DWORD PTR [esi+0x65],0x6e697265
  59:	6e 
  5a:	67 2f                	addr32 (bad) 
  5c:	50                   	push   rax
  5d:	72 6f                	jb     ce <_init-0x4b2>
  5f:	67 72 61             	addr32 jb c3 <_init-0x4bd>
  62:	6d                   	ins    DWORD PTR es:[rdi],dx
  63:	6d                   	ins    DWORD PTR es:[rdi],dx
  64:	69 6e 67 2f 44 69 73 	imul   ebp,DWORD PTR [rsi+0x67],0x7369442f
  6b:	61                   	(bad)  
  6c:	73 73                	jae    e1 <_init-0x49f>
  6e:	65 6d                	gs ins DWORD PTR es:[rdi],dx
  70:	62                   	(bad)  
  71:	6c                   	ins    BYTE PTR es:[rdi],dx
  72:	69 6e 67 2d 42 69 6e 	imul   ebp,DWORD PTR [rsi+0x67],0x6e69422d
  79:	61                   	(bad)  
  7a:	72 69                	jb     e5 <_init-0x49b>
  7c:	65 73 2f             	gs jae ae <_init-0x4d2>
  7f:	46 6f                	rex.RX outs dx,DWORD PTR ds:[rsi]
  81:	72 74                	jb     f7 <_init-0x489>
  83:	72 61                	jb     e6 <_init-0x49a>
  85:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  86:	2f                   	(bad)  
  87:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  89:	74 65                	je     f0 <_init-0x490>
  8b:	6c                   	ins    BYTE PTR es:[rdi],dx
  8c:	5f                   	pop    rdi
  8d:	61                   	(bad)  
  8e:	72 63                	jb     f3 <_init-0x48d>
  90:	68 69 74 65 63       	push   0x63657469
  95:	74 75                	je     10c <_init-0x474>
  97:	72 65                	jb     fe <_init-0x482>
  99:	2f                   	(bad)  
  9a:	41                   	rex.B
  9b:	4d                   	rex.WRB
  9c:	44                   	rex.R
  9d:	36 34 2f             	ss xor al,0x2f
  a0:	46 75 6e             	rex.RX jne 111 <_init-0x46f>
  a3:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  a7:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  a8:	73 2f                	jae    d9 <_init-0x4a7>
  aa:	41                   	rex.B
  ab:	64 64 5f             	fs fs pop rdi
  ae:	46 75 6e             	rex.RX jne 11f <_init-0x461>
  b1:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  b5:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  b6:	73 5f                	jae    117 <_init-0x469>
  b8:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  ba:	74 2f                	je     eb <_init-0x495>
  bc:	57                   	push   rdi
  bd:	69 74 68 5f 44 65 62 	imul   esi,DWORD PTR [rax+rbp*2+0x5f],0x75626544
  c4:	75 
  c5:	67 5f                	addr32 pop rdi
  c7:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  c9:	66 6f                	outs   dx,WORD PTR ds:[rsi]
  cb:	2f                   	(bad)  
  cc:	57                   	push   rdi
  cd:	69 74 68 5f 44 65 62 	imul   esi,DWORD PTR [rax+rbp*2+0x5f],0x75626544
  d4:	75 
  d5:	67 5f                	addr32 pop rdi
  d7:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
  d9:	66 6f                	outs   dx,WORD PTR ds:[rsi]
  db:	00 61 72             	add    BYTE PTR [rcx+0x72],ah
  de:	67 63 00             	movsxd eax,DWORD PTR [eax]
  e1:	75 73                	jne    156 <_init-0x42a>
  e3:	65 5f                	gs pop rdi
  e5:	66 75 6e             	data16 jne 156 <_init-0x42a>
  e8:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  ec:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  ed:	73 00                	jae    ef <_init-0x491>
  ef:	47                   	rex.RXB
  f0:	4e 55                	rex.WRX push rbp
  f2:	20 46 6f             	and    BYTE PTR [rsi+0x6f],al
  f5:	72 74                	jb     16b <_init-0x415>
  f7:	72 61                	jb     15a <_init-0x426>
  f9:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  fa:	32 30                	xor    dh,BYTE PTR [rax]
  fc:	30 38                	xor    BYTE PTR [rax],bh
  fe:	20 37                	and    BYTE PTR [rdi],dh
 100:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
 103:	30 20                	xor    BYTE PTR [rax],ah
 105:	2d 6d 74 75 6e       	sub    eax,0x6e75746d
 10a:	65 3d 67 65 6e 65    	gs cmp eax,0x656e6567
 110:	72 69                	jb     17b <_init-0x405>
 112:	63 20                	movsxd esp,DWORD PTR [rax]
 114:	2d 6d 61 72 63       	sub    eax,0x6372616d
 119:	68 3d 78 38 36       	push   0x3638783d
 11e:	2d 36 34 20 2d       	sub    eax,0x2d203436
 123:	67 67 64 62 33       	addr32 addr32 fs (bad) 
 128:	20 2d 66 69 6e 74    	and    BYTE PTR [rip+0x746e6966],ch        # 746e6a94 <_end+0x744e5a7c>
 12e:	72 69                	jb     199 <_init-0x3e7>
 130:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 131:	73 69                	jae    19c <_init-0x3e4>
 133:	63 2d 6d 6f 64 75    	movsxd ebp,DWORD PTR [rip+0x75646f6d]        # 756470a6 <_end+0x7544608e>
 139:	6c                   	ins    BYTE PTR es:[rdi],dx
 13a:	65 73 2d             	gs jae 16a <_init-0x416>
 13d:	70 61                	jo     1a0 <_init-0x3e0>
 13f:	74 68                	je     1a9 <_init-0x3d7>
 141:	20 2f                	and    BYTE PTR [rdi],ch
 143:	75 73                	jne    1b8 <_init-0x3c8>
 145:	72 2f                	jb     176 <_init-0x40a>
 147:	6c                   	ins    BYTE PTR es:[rdi],dx
 148:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [rdx+0x2f],0x2f636367
 14f:	78 38                	js     189 <_init-0x3f7>
 151:	36 5f                	ss pop rdi
 153:	36 34 2d             	ss xor al,0x2d
 156:	6c                   	ins    BYTE PTR es:[rdi],dx
 157:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [rsi+0x75],0x6e672d78
 15e:	75 2f                	jne    18f <_init-0x3f1>
 160:	37                   	(bad)  
 161:	2f                   	(bad)  
 162:	66 69 6e 63 6c 75    	imul   bp,WORD PTR [rsi+0x63],0x756c
 168:	64 65 00 6d 61       	fs add BYTE PTR gs:[rbp+0x61],ch
 16d:	69 6e 00 5f 5f 66 75 	imul   ebp,DWORD PTR [rsi+0x0],0x75665f5f
 174:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 175:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 179:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 17a:	5f                   	pop    rdi
 17b:	6d                   	ins    DWORD PTR es:[rdi],dx
 17c:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 17d:	64 75 6c             	fs jne 1ec <_init-0x394>
 180:	65 5f                	gs pop rdi
 182:	4d                   	rex.WRB
 183:	4f                   	rex.WRXB
 184:	44 5f                	rex.R pop rdi
 186:	61                   	(bad)  
 187:	64 64 5f             	fs fs pop rdi
 18a:	66 75 6e             	data16 jne 1fb <_init-0x385>
 18d:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 191:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 192:	00 61 72             	add    BYTE PTR [rcx+0x72],ah
 195:	67 76 00             	addr32 jbe 198 <_init-0x3e8>

Disassembly of section .debug_macro:

0000000000000000 <.debug_macro>:
   0:	04 00                	add    al,0x0
   2:	02 00                	add    al,BYTE PTR [rax]
   4:	00 00                	add    BYTE PTR [rax],al
   6:	00 03                	add    BYTE PTR [rbx],al
   8:	00 01                	add    BYTE PTR [rcx],al
   a:	04 00                	add    al,0x0
Contents of the .eh_frame section:


00000000 0000000000000014 00000000 CIE
  Version:               1
  Augmentation:          "zR"
  Code alignment factor: 1
  Data alignment factor: -8
  Return address column: 16
  Augmentation data:     1b
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_offset: r16 (rip) at cfa-8
  DW_CFA_undefined: r16 (rip)

00000018 0000000000000014 0000001c FDE cie=00000000 pc=00000000000005e0..000000000000060b
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000030 0000000000000014 00000000 CIE
  Version:               1
  Augmentation:          "zR"
  Code alignment factor: 1
  Data alignment factor: -8
  Return address column: 16
  Augmentation data:     1b
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_offset: r16 (rip) at cfa-8
  DW_CFA_nop
  DW_CFA_nop

00000048 0000000000000024 0000001c FDE cie=00000030 pc=00000000000005a0..00000000000005d0
  DW_CFA_def_cfa_offset: 16
  DW_CFA_advance_loc: 6 to 00000000000005a6
  DW_CFA_def_cfa_offset: 24
  DW_CFA_advance_loc: 10 to 00000000000005b0
  DW_CFA_def_cfa_expression (DW_OP_breg7 (rsp): 8; DW_OP_breg16 (rip): 0; DW_OP_lit15; DW_OP_and; DW_OP_lit11; DW_OP_ge; DW_OP_lit3; DW_OP_shl; DW_OP_plus)
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000070 0000000000000014 00000044 FDE cie=00000030 pc=00000000000005d0..00000000000005d8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000088 000000000000001c 0000005c FDE cie=00000030 pc=00000000000006ea..000000000000070c
  DW_CFA_advance_loc: 1 to 00000000000006eb
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 00000000000006ee
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 29 to 000000000000070b
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

000000a8 000000000000001c 0000007c FDE cie=00000030 pc=000000000000070c..000000000000073b
  DW_CFA_advance_loc: 1 to 000000000000070d
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000710
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 42 to 000000000000073a
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

000000c8 000000000000001c 0000009c FDE cie=00000030 pc=000000000000073b..0000000000000778
  DW_CFA_advance_loc: 1 to 000000000000073c
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 000000000000073f
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 56 to 0000000000000777
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

000000e8 0000000000000044 000000bc FDE cie=00000030 pc=0000000000000780..00000000000007e5
  DW_CFA_advance_loc: 2 to 0000000000000782
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r15 (r15) at cfa-16
  DW_CFA_advance_loc: 2 to 0000000000000784
  DW_CFA_def_cfa_offset: 24
  DW_CFA_offset: r14 (r14) at cfa-24
  DW_CFA_advance_loc: 5 to 0000000000000789
  DW_CFA_def_cfa_offset: 32
  DW_CFA_offset: r13 (r13) at cfa-32
  DW_CFA_advance_loc: 2 to 000000000000078b
  DW_CFA_def_cfa_offset: 40
  DW_CFA_offset: r12 (r12) at cfa-40
  DW_CFA_advance_loc: 8 to 0000000000000793
  DW_CFA_def_cfa_offset: 48
  DW_CFA_offset: r6 (rbp) at cfa-48
  DW_CFA_advance_loc: 8 to 000000000000079b
  DW_CFA_def_cfa_offset: 56
  DW_CFA_offset: r3 (rbx) at cfa-56
  DW_CFA_advance_loc: 13 to 00000000000007a8
  DW_CFA_def_cfa_offset: 64
  DW_CFA_advance_loc: 50 to 00000000000007da
  DW_CFA_def_cfa_offset: 56
  DW_CFA_advance_loc: 1 to 00000000000007db
  DW_CFA_def_cfa_offset: 48
  DW_CFA_advance_loc: 1 to 00000000000007dc
  DW_CFA_def_cfa_offset: 40
  DW_CFA_advance_loc: 2 to 00000000000007de
  DW_CFA_def_cfa_offset: 32
  DW_CFA_advance_loc: 2 to 00000000000007e0
  DW_CFA_def_cfa_offset: 24
  DW_CFA_advance_loc: 2 to 00000000000007e2
  DW_CFA_def_cfa_offset: 16
  DW_CFA_advance_loc: 2 to 00000000000007e4
  DW_CFA_def_cfa_offset: 8
  DW_CFA_nop

00000130 0000000000000010 00000104 FDE cie=00000030 pc=00000000000007f0..00000000000007f2
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000144 ZERO terminator


Contents of the .debug_aranges section:

  Length:                   44
  Version:                  2
  Offset into .debug_info:  0x0
  Pointer Size:             8
  Segment Size:             0

    Address            Length
    00000000000006ea 000000000000008e 
    0000000000000000 0000000000000000 

Contents of the .debug_info section:

  Compilation Unit @ offset 0x0:
   Length:        0x12b (32-bit)
   Version:       4
   Abbrev Offset: 0x0
   Pointer Size:  8
 <0><b>: Abbrev Number: 1 (DW_TAG_compile_unit)
    <c>   DW_AT_producer    : (indirect string, offset: 0xef): GNU Fortran2008 7.3.0 -mtune=generic -march=x86-64 -ggdb3 -fintrinsic-modules-path /usr/lib/gcc/x86_64-linux-gnu/7/finclude
    <10>   DW_AT_language    : 14	(Fortran 95)
    <11>   DW_AT_identifier_case: 2	(down_case)
    <12>   DW_AT_name        : (indirect string, offset: 0x22): add_function.f08
    <16>   DW_AT_comp_dir    : (indirect string, offset: 0x43): /home/ubuntu/Engineering/Programming/Disassembling-Binaries/Fortran/Intel_architecture/AMD64/Functions/Add_Functions_Int/With_Debug_Info/With_Debug_Info
    <1a>   DW_AT_low_pc      : 0x6ea
    <22>   DW_AT_high_pc     : 0x8e
    <2a>   DW_AT_stmt_list   : 0x0
    <2e>   DW_AT_GNU_macros  : 0x0
 <1><32>: Abbrev Number: 2 (DW_TAG_subprogram)
    <33>   DW_AT_name        : (indirect string, offset: 0xe1): use_functions
    <37>   DW_AT_decl_file   : 1
    <38>   DW_AT_decl_line   : 16
    <39>   DW_AT_main_subprogram: 1
    <39>   DW_AT_calling_convention: 2	(program)
    <3a>   DW_AT_low_pc      : 0x70c
    <42>   DW_AT_high_pc     : 0x2f
    <4a>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <4c>   DW_AT_GNU_all_tail_call_sites: 1
    <4c>   DW_AT_sibling     : <0x7c>
 <2><50>: Abbrev Number: 3 (DW_TAG_imported_module)
    <51>   DW_AT_decl_file   : 1
    <52>   DW_AT_decl_line   : 18
    <53>   DW_AT_import      : <0x7c>	[Abbrev Number: 5 (DW_TAG_module)]
 <2><57>: Abbrev Number: 4 (DW_TAG_variable)
    <58>   DW_AT_name        : a
    <5a>   DW_AT_decl_file   : 1
    <5b>   DW_AT_decl_line   : 21
    <5c>   DW_AT_type        : <0x115>
    <60>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><63>: Abbrev Number: 4 (DW_TAG_variable)
    <64>   DW_AT_name        : b
    <66>   DW_AT_decl_file   : 1
    <67>   DW_AT_decl_line   : 21
    <68>   DW_AT_type        : <0x115>
    <6c>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><6f>: Abbrev Number: 4 (DW_TAG_variable)
    <70>   DW_AT_name        : c
    <72>   DW_AT_decl_file   : 1
    <73>   DW_AT_decl_line   : 21
    <74>   DW_AT_type        : <0x115>
    <78>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><7b>: Abbrev Number: 0
 <1><7c>: Abbrev Number: 5 (DW_TAG_module)
    <7d>   DW_AT_name        : (indirect string, offset: 0x33): function_module
    <81>   DW_AT_decl_file   : 1
    <82>   DW_AT_decl_line   : 1
    <83>   DW_AT_sibling     : <0xd6>
 <2><87>: Abbrev Number: 6 (DW_TAG_subprogram)
    <88>   DW_AT_external    : 1
    <88>   DW_AT_name        : (indirect string, offset: 0x186): add_function
    <8c>   DW_AT_decl_file   : 1
    <8d>   DW_AT_decl_line   : 7
    <8e>   DW_AT_linkage_name: (indirect string, offset: 0x170): __function_module_MOD_add_function
    <92>   DW_AT_type        : <0x115>
    <96>   DW_AT_low_pc      : 0x6ea
    <9e>   DW_AT_high_pc     : 0x22
    <a6>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <a8>   DW_AT_GNU_all_call_sites: 1
 <3><a8>: Abbrev Number: 7 (DW_TAG_formal_parameter)
    <a9>   DW_AT_name        : f_a
    <ad>   DW_AT_decl_file   : 1
    <ae>   DW_AT_decl_line   : 7
    <af>   DW_AT_type        : <0x115>
    <b3>   DW_AT_location    : 3 byte block: 91 58 6 	(DW_OP_fbreg: -40; DW_OP_deref)
 <3><b7>: Abbrev Number: 7 (DW_TAG_formal_parameter)
    <b8>   DW_AT_name        : f_b
    <bc>   DW_AT_decl_file   : 1
    <bd>   DW_AT_decl_line   : 7
    <be>   DW_AT_type        : <0x115>
    <c2>   DW_AT_location    : 3 byte block: 91 50 6 	(DW_OP_fbreg: -48; DW_OP_deref)
 <3><c6>: Abbrev Number: 4 (DW_TAG_variable)
    <c7>   DW_AT_name        : f_c
    <cb>   DW_AT_decl_file   : 1
    <cc>   DW_AT_decl_line   : 7
    <cd>   DW_AT_type        : <0x115>
    <d1>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <3><d4>: Abbrev Number: 0
 <2><d5>: Abbrev Number: 0
 <1><d6>: Abbrev Number: 8 (DW_TAG_subprogram)
    <d7>   DW_AT_external    : 1
    <d7>   DW_AT_name        : (indirect string, offset: 0x16b): main
    <db>   DW_AT_decl_file   : 1
    <dc>   DW_AT_decl_line   : 18
    <dd>   DW_AT_type        : <0x115>
    <e1>   DW_AT_low_pc      : 0x73b
    <e9>   DW_AT_high_pc     : 0x3d
    <f1>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <f3>   DW_AT_GNU_all_tail_call_sites: 1
    <f3>   DW_AT_sibling     : <0x115>
 <2><f7>: Abbrev Number: 9 (DW_TAG_formal_parameter)
    <f8>   DW_AT_name        : (indirect string, offset: 0xdc): argc
    <fc>   DW_AT_decl_file   : 1
    <fd>   DW_AT_decl_line   : 18
    <fe>   DW_AT_type        : <0x11c>
    <102>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><105>: Abbrev Number: 9 (DW_TAG_formal_parameter)
    <106>   DW_AT_name        : (indirect string, offset: 0x193): argv
    <10a>   DW_AT_decl_file   : 1
    <10b>   DW_AT_decl_line   : 18
    <10c>   DW_AT_type        : <0x121>
    <110>   DW_AT_location    : 3 byte block: 91 60 6 	(DW_OP_fbreg: -32; DW_OP_deref)
 <2><114>: Abbrev Number: 0
 <1><115>: Abbrev Number: 10 (DW_TAG_base_type)
    <116>   DW_AT_byte_size   : 4
    <117>   DW_AT_encoding    : 5	(signed)
    <118>   DW_AT_name        : (indirect string, offset: 0x0): integer(kind=4)
 <1><11c>: Abbrev Number: 11 (DW_TAG_const_type)
    <11d>   DW_AT_type        : <0x115>
 <1><121>: Abbrev Number: 12 (DW_TAG_pointer_type)
    <122>   DW_AT_byte_size   : 8
    <123>   DW_AT_type        : <0x127>
 <1><127>: Abbrev Number: 10 (DW_TAG_base_type)
    <128>   DW_AT_byte_size   : 1
    <129>   DW_AT_encoding    : 8	(unsigned char)
    <12a>   DW_AT_name        : (indirect string, offset: 0x10): character(kind=1)
 <1><12e>: Abbrev Number: 0

Contents of the .debug_abbrev section:

  Number TAG (0x0)
   1      DW_TAG_compile_unit    [has children]
    DW_AT_producer     DW_FORM_strp
    DW_AT_language     DW_FORM_data1
    DW_AT_identifier_case DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT_comp_dir     DW_FORM_strp
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_stmt_list    DW_FORM_sec_offset
    DW_AT_GNU_macros   DW_FORM_sec_offset
    DW_AT value: 0     DW_FORM value: 0
   2      DW_TAG_subprogram    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_main_subprogram DW_FORM_flag_present
    DW_AT_calling_convention DW_FORM_data1
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   3      DW_TAG_imported_module    [no children]
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_import       DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   4      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   5      DW_TAG_module    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   6      DW_TAG_subprogram    [has children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_linkage_name DW_FORM_strp
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_call_sites DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   7      DW_TAG_formal_parameter    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   8      DW_TAG_subprogram    [has children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   9      DW_TAG_formal_parameter    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   10      DW_TAG_base_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_encoding     DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT value: 0     DW_FORM value: 0
   11      DW_TAG_const_type    [no children]
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   12      DW_TAG_pointer_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0

Raw dump of debug contents of section .debug_line:

  Offset:                      0x0
  Length:                      75
  DWARF Version:               2
  Prologue Length:             39
  Minimum Instruction Length:  1
  Initial value of 'is_stmt':  1
  Line Base:                   -5
  Line Range:                  14
  Opcode Base:                 13

 Opcodes:
  Opcode 1 has 0 args
  Opcode 2 has 1 arg
  Opcode 3 has 1 arg
  Opcode 4 has 1 arg
  Opcode 5 has 1 arg
  Opcode 6 has 0 args
  Opcode 7 has 0 args
  Opcode 8 has 0 args
  Opcode 9 has 1 arg
  Opcode 10 has 0 args
  Opcode 11 has 0 args
  Opcode 12 has 1 arg

 The Directory Table is empty.

 The File Name Table (offset 0x1c):
  Entry	Dir	Time	Size	Name
  1	0	0	0	add_function.f08

 Line Number Statements:
  [0x00000031]  Extended opcode 2: set Address to 0x6ea
  [0x0000003c]  Special opcode 11: advance Address by 0 to 0x6ea and Line by 6 to 7
  [0x0000003d]  Special opcode 176: advance Address by 12 to 0x6f6 and Line by 3 to 10
  [0x0000003e]  Advance PC by constant 17 to 0x707
  [0x0000003f]  Special opcode 7: advance Address by 0 to 0x707 and Line by 2 to 12
  [0x00000040]  Special opcode 79: advance Address by 5 to 0x70c and Line by 4 to 16
  [0x00000041]  Special opcode 124: advance Address by 8 to 0x714 and Line by 7 to 23
  [0x00000042]  Special opcode 105: advance Address by 7 to 0x71b and Line by 2 to 25
  [0x00000043]  Special opcode 105: advance Address by 7 to 0x722 and Line by 2 to 27
  [0x00000044]  Advance PC by constant 17 to 0x733
  [0x00000045]  Special opcode 77: advance Address by 5 to 0x738 and Line by 2 to 29
  [0x00000046]  Advance Line by -11 to 18
  [0x00000048]  Special opcode 47: advance Address by 3 to 0x73b and Line by 0 to 18
  [0x00000049]  Special opcode 215: advance Address by 15 to 0x74a and Line by 0 to 18
  [0x0000004a]  Advance PC by 46 to 0x778
  [0x0000004c]  Extended opcode 1: End of Sequence


Contents of the .debug_str section:

  0x00000000 696e7465 67657228 6b696e64 3d342900 integer(kind=4).
  0x00000010 63686172 61637465 72286b69 6e643d31 character(kind=1
  0x00000020 29006164 645f6675 6e637469 6f6e2e66 ).add_function.f
  0x00000030 30380066 756e6374 696f6e5f 6d6f6475 08.function_modu
  0x00000040 6c65002f 686f6d65 2f756275 6e74752f le./home/ubuntu/
  0x00000050 456e6769 6e656572 696e672f 50726f67 Engineering/Prog
  0x00000060 72616d6d 696e672f 44697361 7373656d ramming/Disassem
  0x00000070 626c696e 672d4269 6e617269 65732f46 bling-Binaries/F
  0x00000080 6f727472 616e2f49 6e74656c 5f617263 ortran/Intel_arc
  0x00000090 68697465 63747572 652f414d 4436342f hitecture/AMD64/
  0x000000a0 46756e63 74696f6e 732f4164 645f4675 Functions/Add_Fu
  0x000000b0 6e637469 6f6e735f 496e742f 57697468 nctions_Int/With
  0x000000c0 5f446562 75675f49 6e666f2f 57697468 _Debug_Info/With
  0x000000d0 5f446562 75675f49 6e666f00 61726763 _Debug_Info.argc
  0x000000e0 00757365 5f66756e 6374696f 6e730047 .use_functions.G
  0x000000f0 4e552046 6f727472 616e3230 30382037 NU Fortran2008 7
  0x00000100 2e332e30 202d6d74 756e653d 67656e65 .3.0 -mtune=gene
  0x00000110 72696320 2d6d6172 63683d78 38362d36 ric -march=x86-6
  0x00000120 34202d67 67646233 202d6669 6e747269 4 -ggdb3 -fintri
  0x00000130 6e736963 2d6d6f64 756c6573 2d706174 nsic-modules-pat
  0x00000140 68202f75 73722f6c 69622f67 63632f78 h /usr/lib/gcc/x
  0x00000150 38365f36 342d6c69 6e75782d 676e752f 86_64-linux-gnu/
  0x00000160 372f6669 6e636c75 6465006d 61696e00 7/finclude.main.
  0x00000170 5f5f6675 6e637469 6f6e5f6d 6f64756c __function_modul
  0x00000180 655f4d4f 445f6164 645f6675 6e637469 e_MOD_add_functi
  0x00000190 6f6e0061 72677600                   on.argv.

Contents of the .debug_macro section:

  Offset:                      0x0
  Version:                     4
  Offset size:                 4
  Offset into .debug_line:     0x0

 DW_MACRO_start_file - lineno: 0 filenum: 1 filename: add_function.f08
 DW_MACRO_end_file

