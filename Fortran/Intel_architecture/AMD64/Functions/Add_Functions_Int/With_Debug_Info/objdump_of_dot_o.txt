
add_function.o:     file format elf64-x86-64
add_function.o
architecture: i386:x86-64, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x0000000000000000

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         0000008e  0000000000000000  0000000000000000  00000040  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  0000000000000000  0000000000000000  000000ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  0000000000000000  0000000000000000  000000ce  2**0
                  ALLOC
  3 .rodata       0000001c  0000000000000000  0000000000000000  000000d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000002b  0000000000000000  0000000000000000  000000ec  2**0
                  CONTENTS, READONLY
  5 .note.GNU-stack 00000000  0000000000000000  0000000000000000  00000117  2**0
                  CONTENTS, READONLY
  6 .eh_frame     00000078  0000000000000000  0000000000000000  00000118  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 add_function.f08
0000000000000000 l    d  .text	0000000000000000 .text
0000000000000000 l    d  .data	0000000000000000 .data
0000000000000000 l    d  .bss	0000000000000000 .bss
0000000000000022 l     F .text	000000000000002f MAIN__
0000000000000000 l     O .rodata	000000000000001c options.0.3510
0000000000000000 l    d  .rodata	0000000000000000 .rodata
0000000000000000 l    d  .note.GNU-stack	0000000000000000 .note.GNU-stack
0000000000000000 l    d  .eh_frame	0000000000000000 .eh_frame
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 g     F .text	0000000000000022 __function_module_MOD_add_function
0000000000000051 g     F .text	000000000000003d main
0000000000000000         *UND*	0000000000000000 _GLOBAL_OFFSET_TABLE_
0000000000000000         *UND*	0000000000000000 _gfortran_set_args
0000000000000000         *UND*	0000000000000000 _gfortran_set_options



Disassembly of section .text:

0000000000000000 <__function_module_MOD_add_function>:
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp
   4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   8:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  10:	8b 10                	mov    edx,DWORD PTR [rax]
  12:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  16:	8b 00                	mov    eax,DWORD PTR [rax]
  18:	01 d0                	add    eax,edx
  1a:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
  1d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  20:	5d                   	pop    rbp
  21:	c3                   	ret    

0000000000000022 <MAIN__>:
  22:	55                   	push   rbp
  23:	48 89 e5             	mov    rbp,rsp
  26:	48 83 ec 10          	sub    rsp,0x10
  2a:	c7 45 f8 02 00 00 00 	mov    DWORD PTR [rbp-0x8],0x2
  31:	c7 45 f4 03 00 00 00 	mov    DWORD PTR [rbp-0xc],0x3
  38:	48 8d 55 f4          	lea    rdx,[rbp-0xc]
  3c:	48 8d 45 f8          	lea    rax,[rbp-0x8]
  40:	48 89 d6             	mov    rsi,rdx
  43:	48 89 c7             	mov    rdi,rax
  46:	e8 00 00 00 00       	call   4b <MAIN__+0x29>
			47: R_X86_64_PC32	__function_module_MOD_add_function-0x4
  4b:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
  4e:	90                   	nop
  4f:	c9                   	leave  
  50:	c3                   	ret    

0000000000000051 <main>:
  51:	55                   	push   rbp
  52:	48 89 e5             	mov    rbp,rsp
  55:	48 83 ec 10          	sub    rsp,0x10
  59:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  5c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  60:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  64:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  67:	48 89 d6             	mov    rsi,rdx
  6a:	89 c7                	mov    edi,eax
  6c:	e8 00 00 00 00       	call   71 <main+0x20>
			6d: R_X86_64_PLT32	_gfortran_set_args-0x4
  71:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 78 <main+0x27>
			74: R_X86_64_PC32	.rodata-0x4
  78:	bf 07 00 00 00       	mov    edi,0x7
  7d:	e8 00 00 00 00       	call   82 <main+0x31>
			7e: R_X86_64_PLT32	_gfortran_set_options-0x4
  82:	e8 9b ff ff ff       	call   22 <MAIN__>
  87:	b8 00 00 00 00       	mov    eax,0x0
  8c:	c9                   	leave  
  8d:	c3                   	ret    

Disassembly of section .rodata:

0000000000000000 <options.0.3510>:
   0:	44 00 00             	add    BYTE PTR [rax],r8b
   3:	00 ff                	add    bh,bh
   5:	03 00                	add    eax,DWORD PTR [rax]
   7:	00 00                	add    BYTE PTR [rax],al
   9:	00 00                	add    BYTE PTR [rax],al
   b:	00 01                	add    BYTE PTR [rcx],al
   d:	00 00                	add    BYTE PTR [rax],al
   f:	00 01                	add    BYTE PTR [rcx],al
  11:	00 00                	add    BYTE PTR [rax],al
  13:	00 00                	add    BYTE PTR [rax],al
  15:	00 00                	add    BYTE PTR [rax],al
  17:	00 1f                	add    BYTE PTR [rdi],bl
  19:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .comment:

0000000000000000 <.comment>:
   0:	00 47 43             	add    BYTE PTR [rdi+0x43],al
   3:	43 3a 20             	rex.XB cmp spl,BYTE PTR [r8]
   6:	28 55 62             	sub    BYTE PTR [rbp+0x62],dl
   9:	75 6e                	jne    79 <main+0x28>
   b:	74 75                	je     82 <main+0x31>
   d:	20 37                	and    BYTE PTR [rdi],dh
   f:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  12:	30 2d 32 37 75 62    	xor    BYTE PTR [rip+0x62753732],ch        # 6275374a <main+0x627536f9>
  18:	75 6e                	jne    88 <main+0x37>
  1a:	74 75                	je     91 <main+0x40>
  1c:	31 7e 31             	xor    DWORD PTR [rsi+0x31],edi
  1f:	38 2e                	cmp    BYTE PTR [rsi],ch
  21:	30 34 29             	xor    BYTE PTR [rcx+rbp*1],dh
  24:	20 37                	and    BYTE PTR [rdi],dh
  26:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  29:	30 00                	xor    BYTE PTR [rax],al

Disassembly of section .eh_frame:

0000000000000000 <.eh_frame>:
   0:	14 00                	adc    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   4:	00 00                	add    BYTE PTR [rax],al
   6:	00 00                	add    BYTE PTR [rax],al
   8:	01 7a 52             	add    DWORD PTR [rdx+0x52],edi
   b:	00 01                	add    BYTE PTR [rcx],al
   d:	78 10                	js     1f <.eh_frame+0x1f>
   f:	01 1b                	add    DWORD PTR [rbx],ebx
  11:	0c 07                	or     al,0x7
  13:	08 90 01 00 00 1c    	or     BYTE PTR [rax+0x1c000001],dl
  19:	00 00                	add    BYTE PTR [rax],al
  1b:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  1e:	00 00                	add    BYTE PTR [rax],al
  20:	00 00                	add    BYTE PTR [rax],al
			20: R_X86_64_PC32	.text
  22:	00 00                	add    BYTE PTR [rax],al
  24:	22 00                	and    al,BYTE PTR [rax]
  26:	00 00                	add    BYTE PTR [rax],al
  28:	00 41 0e             	add    BYTE PTR [rcx+0xe],al
  2b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  31:	5d                   	pop    rbp
  32:	0c 07                	or     al,0x7
  34:	08 00                	or     BYTE PTR [rax],al
  36:	00 00                	add    BYTE PTR [rax],al
  38:	1c 00                	sbb    al,0x0
  3a:	00 00                	add    BYTE PTR [rax],al
  3c:	3c 00                	cmp    al,0x0
  3e:	00 00                	add    BYTE PTR [rax],al
  40:	00 00                	add    BYTE PTR [rax],al
			40: R_X86_64_PC32	.text+0x22
  42:	00 00                	add    BYTE PTR [rax],al
  44:	2f                   	(bad)  
  45:	00 00                	add    BYTE PTR [rax],al
  47:	00 00                	add    BYTE PTR [rax],al
  49:	41 0e                	rex.B (bad) 
  4b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  51:	6a 0c                	push   0xc
  53:	07                   	(bad)  
  54:	08 00                	or     BYTE PTR [rax],al
  56:	00 00                	add    BYTE PTR [rax],al
  58:	1c 00                	sbb    al,0x0
  5a:	00 00                	add    BYTE PTR [rax],al
  5c:	5c                   	pop    rsp
  5d:	00 00                	add    BYTE PTR [rax],al
  5f:	00 00                	add    BYTE PTR [rax],al
			60: R_X86_64_PC32	.text+0x51
  61:	00 00                	add    BYTE PTR [rax],al
  63:	00 3d 00 00 00 00    	add    BYTE PTR [rip+0x0],bh        # 69 <.eh_frame+0x69>
  69:	41 0e                	rex.B (bad) 
  6b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  71:	78 0c                	js     7f <main+0x2e>
  73:	07                   	(bad)  
  74:	08 00                	or     BYTE PTR [rax],al
	...
